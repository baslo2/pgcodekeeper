SELECT 0.5 IN ( SELECT singleValueOrNull(*) FROM ( SELECT 1048577 FROM numbers(0) ) WITH TOTALS ), NULL, NULL NOT IN ( SELECT 2147483647, 1024 IN ( SELECT [NULL, 2147483648, NULL, NULL], number FROM numbers(7, 100) ), [NULL, NULL, NULL, NULL, NULL], number FROM numbers(1048576) WHERE NULL ), NULL NOT IN ( SELECT number FROM numbers(0) ) GROUP BY NULL WITH CUBE;
select c_7_c4585_14 as c_4_c4593_5 from (select avg(0) as c_7_c4572_1, max(-0) as c_7_c4585_14 from t7 as ref_0 group by ref_0.c_2_c46_1) as subq_0 where c_4_c4593_5 <= multiIf(true, 1, exp10(c_4_c4593_5) <= 1, 1, 1);
SELECT ifNotFinite(quantilesTimingMerge(0.95)(q)[1],0) as d1, ifNotFinite(quantilesTimingMerge(0.99)(q)[1],0) as d2, ifNotFinite(quantilesTimingMerge(0.50)(q)[1],0) as d3, sum(s) FROM cluster('test_cluster_two_shards', currentDatabase(), r) WHERE a = 'x' settings prefer_localhost_replica=0;
select r from (select [('y',0),('n',1)] as cg, if( arrayMap( x -> x.1, cg ) != ['y', 'n'], 'y', 'n') as so, arrayFilter( x -> x.1 = so , cg) as r );
select case 1 when 1 then 'a' else 'b' end value;
select case 1 when 1 then 'a' end value;
SELECT id, maxMerge(latest_login_time) as current_latest_login_time, maxMerge(latest_checkout_time) as current_latest_checkout_time, minMerge(fastest_session) as current_fastest_session, maxMerge(biggest_inactivity_period) as current_biggest_inactivity_period FROM target_table where id in (1,2) GROUP BY id ORDER BY id;
SELECT sum(a)*100/sum(sum(a)) OVER (PARTITION BY b) AS r FROM ( SELECT 1 AS a, 2 AS b UNION ALL SELECT 3 AS a, 4 AS b UNION ALL SELECT 5 AS a, 2 AS b ) AS t GROUP BY b;
select sum(cnt) > 0 as total, k[1], k[2] from ( select arrayMap( x -> x % 3 ? toNullable(number%5 + x) : null, range(3)) as k, number % 4 ? toNullable( rand() ) : Null as cnt from system.numbers_mt where number < 1000000 limit 1000000 ) group by k with totals order by k[2] SETTINGS max_threads = 100, max_execution_time = 120 format JSON;
SELECT tupleElement(tuple, 'k1', 0) fine_k1_with_0, tupleElement(tuple, 'k1', NULL) k1_with_null, tupleElement(tuple, 'k2', 0) k2_with_0, tupleElement(tuple, 'k2', NULL) k2_with_null FROM test_tuple_element;
SELECT 'days' AS maximum_unit, arrayJoin([1, 60, 60*60, 60*60*24, 60*60*24*30, 60*60*24*365]) AS elapsed, formatReadableTimeDelta(elapsed*5.5, maximum_unit) AS time_delta;
SELECT 'hours' AS maximum_unit, arrayJoin([1, 60, 60*60, 60*60*24, 60*60*24*30, 60*60*24*365]) AS elapsed, formatReadableTimeDelta(elapsed*5.5, maximum_unit) AS time_delta;
SELECT 'limit w/ GROUP BY', count(), number FROM remote('127.{1,2}', view( SELECT intDiv(number, 2) AS number FROM numbers(10) )) GROUP BY number ORDER BY count() ASC, number DESC SETTINGS limit=2;
SELECT 'limit/offset w/ GROUP BY', count(), number FROM remote('127.{1,2}', view( SELECT intDiv(number, 2) AS number FROM numbers(10) )) GROUP BY number ORDER BY count() ASC, number DESC SETTINGS limit=2, offset=2;
SELECT 'metric' || toString(number) AS name, number AS value, if(number % 2 == 0, 'info ' || toString(number), NULL) AS help, if(number % 3 == 0, 'counter', NULL) AS type, if(number == 2, 1395066363000, NULL) AS timestamp FROM numbers(5) FORMAT Prometheus;
SELECT 'minutes' AS maximum_unit, arrayJoin([1, 60, 60*60, 60*60*24, 60*60*24*30, 60*60*24*365]) AS elapsed, formatReadableTimeDelta(elapsed*5.5, maximum_unit) AS time_delta;
SELECT 'months' AS maximum_unit, arrayJoin([1, 60, 60*60, 60*60*24, 60*60*24*30, 60*60*24*365]) AS elapsed, formatReadableTimeDelta(elapsed*5.5, maximum_unit) AS time_delta;
SELECT 'Nul\0able\0String)Nul\0\0ble(String)Nul\0able(String)Nul\0able(String)', NULL AND 2, '', number, NULL AS k FROM ( SELECT materialize(NULL) OR materialize(-9223372036854775808), number FROM system.numbers LIMIT 1000000 ) ORDER BY k ASC, number ASC, k ASC LIMIT 1023, 1023 SETTINGS max_bytes_before_external_sort = 1000000 FORMAT Null;
SELECT 'processed' AS type, max(number) AS max_date, min(number) AS min_date FROM numbers(100) GROUP BY type;
SELECT 'serialized state is not used', sequenceMatch('(?1)(?2)')(time, number_ = 1, number_ = 0) AS seq FROM ( SELECT number AS time, number % 2 AS number_ FROM numbers_mt(100) );
SELECT '{"a":"1","b":"2","c":"","d":"4"}' AS json, extractAll(json, '"([^"]*)":') AS keys, extractAll(json, ':"([^"]*)"') AS values;
SELECT 'ё' AS norm, 'ё' AS denorm, length(norm), length(denorm), normalizeUTF8NFC(norm) AS norm_nfc, normalizeUTF8NFC(denorm) AS denorm_nfc, length(norm_nfc), length(denorm_nfc);
SELECT (1, 'Hello') = (1, 'Hello'), (1, 'Hello') != (1, 'Hello'), (1, 'Hello') < (1, 'Hello'), (1, 'Hello') > (1, 'Hello'), (1, 'Hello') <= (1, 'Hello'), (1, 'Hello') >= (1, 'Hello');
SELECT (1, 'Hello', 23) = (1, 'Hello', 23), (1, 'Hello', 23) != (1, 'Hello', 23), (1, 'Hello', 23) < (1, 'Hello', 23), (1, 'Hello', 23) > (1, 'Hello', 23), (1, 'Hello', 23) <= (1, 'Hello', 23), (1, 'Hello', 23) >= (1, 'Hello', 23);
SELECT (1, 'World') = (1, 'Hello'), (1, 'World') != (1, 'Hello'), (1, 'World') < (1, 'Hello'), (1, 'World') > (1, 'Hello'), (1, 'World') <= (1, 'Hello'), (1, 'World') >= (1, 'Hello');
SELECT (1, 'World', 23) = (1, 'Hello', 23), (1, 'World', 23) != (1, 'Hello', 23), (1, 'World', 23) < (1, 'Hello', 23), (1, 'World', 23) > (1, 'Hello', 23), (1, 'World', 23) <= (1, 'Hello', 23), (1, 'World', 23) >= (1, 'Hello', 23);
SELECT (number, 'key'), dictHas('complex_key_dictionary', (number, 'key')), dictGetOrNull('complex_key_dictionary', 'value', (number, 'key')), dictGetOrNull('complex_key_dictionary', 'value_nullable', (number, 'key')), dictGetOrNull('complex_key_dictionary', ('value', 'value_nullable'), (number, 'key')) FROM system.numbers LIMIT 5;
SELECT (SELECT hex(argMaxState('', number)) FROM numbers(1)) = state FROM argmaxstate_hex_empty WHERE v = '22.8.5.29';
SELECT (SELECT hex(argMaxState('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', number)) FROM numbers(1)) = state FROM argmaxstate_hex_large WHERE v = '22.8.5.29';
SELECT * FROM ( SELECT column1 FROM table1 GROUP BY column1 ) AS a ANY LEFT JOIN ( SELECT * FROM table2 ) AS b ON (b.column1 = a.column1) AND (b.column2 = a.column2) ANY LEFT JOIN ( SELECT * FROM table3 ) AS c ON c.column3 = b.column3;
SELECT * FROM t1 AS t1 INNER JOIN t2 AS t2 ON t1.a1 = t2.b1 INNER JOIN t3 AS t3 ON t1.a1 = t3.c1;
SELECT *, if((number % 2) = 0, 0.5, 1) AS a, 30 AS b, sum(a * b) OVER (ORDER BY number ASC) AS s FROM numbers(10);
SELECT *, if(number = 1, 1, 0) as a, max(a) OVER (ORDER BY number ASC) AS s FROM numbers(10);
SELECT -1 IN (-1), -1 IN (1, -1, 2), 1.0 IN (1), 1.1 IN (1, -1), 1.0 IN (3, 1., -1), 1 IN (3, 2, 1), toInt16(-1) IN (255), materialize(-1) IN (-1), materialize(-1) IN (1, -1, 2), materialize(1.0) IN (1), materialize(1.1) IN (1, -1), materialize(1.0) IN (3, 1., -1), materialize(1) IN (3, 2, 1), materialize(toInt16(-1)) IN (255);
SELECT 0 AND NULL, 1 AND NULL, toNullable(0) AND NULL, toNullable(1) AND NULL, 0.0 AND NULL, 0.1 AND NULL, NULL AND 1 AND NULL, 0 AND NULL AND 1 AND NULL;
SELECT 0 OR NULL, 1 OR NULL, toNullable(0) OR NULL, toNullable(1) OR NULL, 0.0 OR NULL, 0.1 OR NULL, NULL OR 1 OR NULL, 0 OR NULL OR 1 OR NULL;
SELECT 1 AS max_size, groupArray(max_size)(col) FROM (SELECT col FROM ( SELECT 1 AS col UNION ALL SELECT 2 ) ORDER BY col);
SELECT 1 IN (1, -1, 2.0, 2.5), 1.0 IN (1, -1, 2.0, 2.5), 1 IN (1.0, -1, 2.0, 2.5), 1.0 IN (1.0, -1, 2.0, 2.5), 1 IN (1.1, -1, 2.0, 2.5), -1 IN (1, -1, 2.0, 2.5);
SELECT 1, 'a', [1, 2, 3], (1, 'a'), null, nan FORMAT JSONCompactStrings;
SELECT 1, 'a', [1, 2, 3], (1, 'a'), null, nan FORMAT JSONStrings;
SELECT 1000 AS a, arrayMap(a -> (a + 1), [1, 2, 3]), a + 10 as c;
SELECT 1023 + l, * FROM ( SELECT toLowCardinality(toNullable(number)) AS l FROM system.numbers LIMIT 10 ) AS s1 ANY LEFT JOIN ( SELECT toLowCardinality(toNullable(number)) AS r FROM system.numbers LIMIT 7 ) AS s2 ON (l + 1023) = (r * 3) ORDER BY l, r;
SELECT 2 AS x, arrayJoin([NULL, NULL, NULL]) GROUP BY GROUPING SETS ( (0), ([NULL, NULL, NULL])) ORDER BY x ASC WITH FILL FROM 1 TO 10;
SELECT [1, 2, 3, 1, 3] AS a, indexOf(arrayReverse(arraySlice(a, 1, -1)), 3) AS offset_from_right, arraySlice(a, multiIf(offset_from_right = 0, 1, (length(a) - offset_from_right) + 1));
SELECT [1] < [1000], ['abc'] = [NULL], ['abc'] = [toNullable('abc')], [[]] = [[]], [[], [1]] > [[], []], [[1]] < [[], []], [[], []] > [[]], [([], ([], []))] < [([], ([], ['hello']))] ;
SELECT `1a`, `2b` FROM t1 AS tt1 INNER JOIN ( SELECT `3c` FROM t2 ) AS tt2 ON tt1.`1a` = tt2.`3c` INNER JOIN ( SELECT `6f` FROM t3 ) AS tt3 ON tt1.`2b` = tt3.`6f`;
SELECT `日期`, location.name, store.`状态` FROM sales LEFT JOIN store ON store.id = `店铺` LEFT JOIN location ON location.id = `地址` ORDER BY 1, 2, 3;
SELECT a, b FROM t1 AS tt1 INNER JOIN ( SELECT c FROM t2 ) AS tt2 ON tt1.a = tt2.c INNER JOIN ( SELECT f FROM t3 ) AS tt3 ON tt1.b = tt3.f;
SELECT a, count() FROM remote('127.0.0.{1,2}', currentDatabase(), local_t) GROUP BY a WITH TOTALS HAVING a IN ( SELECT 1 );
SELECT APIKey, ConversionEventValue FROM left_table AS left_table ALL INNER JOIN ( SELECT * FROM ( SELECT APIKey, EventValueForPostback AS ConversionEventValue FROM right_table AS right_table ) ALL INNER JOIN ( SELECT APIKey FROM left_table as left_table GROUP BY APIKey ) USING (APIKey) ) USING (APIKey);
SELECT argMax(col1, timestamp) AS col1, col1 / 10 AS final_col, final_col + 1 AS final_col2 FROM ttttttt GROUP BY col3;
SELECT argMax(id, timestamp), argMaxOrNull(id, timestamp) FROM ( SELECT CAST(NULL, 'Nullable(UInt32)') AS id, 2 AS timestamp UNION ALL SELECT 1 AS id, 1 AS timestamp );
SELECT arrayJoin([1, 60, 60*60, 60*60*24, 60*60*24*30, 60*60*24*365]) AS elapsed, formatReadableTimeDelta(elapsed*5.5) AS time_delta;
SELECT arrayJoin([toUUID('00000000-0000-0000-0000-000000000000'), toUUID('992f6910-42b2-43cd-98bc-c812fbf9b683')]) AS x, empty(x) AS emp;
SELECT arrayJoin([toUUID('992f6910-42b2-43cd-98bc-c812fbf9b683'), toUUID('00000000-0000-0000-0000-000000000000')]) AS x, empty(x) AS emp;
select arrayMap(x, y -> floor((y - x) / x, 3), l, r) diff_percent, test, query from (select [1] l) s1, (select [2] r) s2, (select 'test' test, 'query' query) any_query, (select 1 ) check_single_query;
SELECT arrayMap(y -> round(y, 1), quantilesExactInclusive(0.1, 0.9)(x)) AS q FROM ( SELECT arrayJoin([-2147483648, 1, 2]) AS x );
SELECT arrayReduce('uniq', [1, 2, 1]) AS a, arrayReduce('uniq', [1, 2, 2, 1], ['hello', 'world', '', '']) AS b, arrayReduce('uniqUpTo(5)', [1, 2, 2, 1], materialize(['hello', 'world', '', ''])) AS c, arrayReduce('uniqExactIf', [1, 2, 3, 4], [1, 0, 1, 1]) AS d;
SELECT arrayReduceInRanges( 'groupArray', [(1, 3), (2, 3), (3, 3)], ['a', 'b', 'c', 'd', 'e'] );
SELECT arrayReduceInRanges( 'sum', [ (-6, 0), (-4, 0), (-2, 0), (0, 0), (2, 0), (4, 0), (-6, 1), (-4, 1), (-2, 1), (0, 1), (2, 1), (4, 1), (-6, 2), (-4, 2), (-2, 2), (0, 2), (2, 2), (4, 2), (-6, 3), (-4, 3), (-2, 3), (0, 3), (2, 3), (4, 3) ], [100, 200, 300, 400] );
SELECT arraySum(x -> ((x.1) / ((x.2) * (x.2))), arrayZip(mag, magerr)) / arraySum(x -> (1. / (x * x)), magerr) AS weightedmeanmag, arraySum(x -> ((((x.1) - weightedmeanmag) * ((x.1) - weightedmeanmag)) / ((x.2) * (x.2))), arrayZip(mag, magerr)) AS chi2, [1, 2, 3, 4] AS mag, [0.1, 0.2, 0.1, 0.2] AS magerr;
SELECT base.id AS `base.id`, derived1.value1 AS `derived1.value1` FROM test_01600.base AS base LEFT JOIN test_01600.derived1 AS derived1 ON base.id = derived1.id1;
SELECT bitmapHasAny(bitmapBuild([toUInt8(1)]), ( SELECT groupBitmapState(toUInt8(1)) )) has1, bitmapHasAny(bitmapBuild([toUInt64(1)]), ( SELECT groupBitmapState(toUInt64(2)) )) has2;
select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) as c_count from customer left outer join orders on c_custkey = o_custkey and o_comment not like '%special%requests%' group by c_custkey ) as c_orders group by c_count order by custdist desc, c_count desc;
SELECT CAST(number, 'String') AS v2, caseWithExpression('x', 'y', 0, cond2) AS cond1, toNullable('0' = v2) AS cond2 FROM numbers(2);
SELECT CAST(number, 'String') AS v2, caseWithExpression('x', 'y', 0, cond2) AS cond1, toNullable('1' = v2) AS cond2 FROM numbers(2);
SELECT categoricalInformationValue(x.1, x.2) FROM ( SELECT arrayJoin([(0, 0), (0, 0), (1, 0), (1, 0)]) as x );
SELECT categoricalInformationValue(x.1, x.2) FROM ( SELECT arrayJoin([(1, 0)]) as x );
SELECT column, subcolumns.names AS sname, subcolumns.types AS stype, subcolumns.bytes_on_disk > 0 FROM system.parts_columns ARRAY JOIN subcolumns WHERE database = currentDatabase() AND table = 't_subcolumns_sizes' AND active ORDER BY column, sname, stype;
SELECT count() > 1 AND SUM(ProfileEvents['ZooKeeperTransactions']) >= 4 FROM system.part_log WHERE event_time > now() - INTERVAL 10 MINUTE AND database == currentDatabase() AND table == 'part_log_profile_events_r2' AND event_type == 'DownloadPart' ;
SELECT count() as d, a, b, c FROM test02313 GROUP BY CUBE(a, b, c) ORDER BY d, a, b, c;
SELECT count() as d, a, b, c FROM test02313 GROUP BY GROUPING SETS ( (c), (a, c), (b, c) ) ORDER BY d, a, b, c;
SELECT count(), countOrNull(), sum(x), sumOrNull(x) FROM ( SELECT 1 AS x WHERE 0 );
SELECT count(), countOrNull(), sum(x), sumOrNull(x) FROM ( SELECT number AS x FROM numbers(10) WHERE number > 10 );
SELECT count(), sum(ns) FROM ( SELECT intDiv(number, NULL) AS k FROM system.numbers_mt GROUP BY k ) ARRAY JOIN ns;
select count(*) over (rows between current row and current row), count(*) over (range between current row and current row) from numbers(3);
SELECT CounterID, StartDate, Sign, VisitID, UserID, VisitVersion, BannerID, Load, PuidKeyArr, PuidValArr, arrayEnumerateUniqRanked(PuidKeyArr, PuidValArr) AS uniqTestPuid FROM arr_tests_visits ARRAY JOIN Test.BannerID AS BannerID, Test.Load AS Load, Test.PuidKey AS PuidKeyArr, Test.PuidVal AS PuidValArr;
SELECT d, toInt16OrNull(d), caseWithExpression(d, 'a', 3, toInt16OrZero(d)) AS case_zero, caseWithExpression(d, 'a', 3, toInt16OrNull(d)) AS case_null, if(d = 'a', 3, toInt16OrZero(d)) AS if_zero, if(d = 'a', 3, toInt16OrNull(d)) AS if_null FROM ( SELECT arrayJoin(['', '1', 'a']) AS d ) ORDER BY case_zero ASC, d ASC;
SELECT date_trunc('month', d), SUM(c) FROM t FINAL WHERE f2 = 'x' GROUP BY 1;
SELECT defaultValueOfTypeName('Int64'), defaultValueOfTypeName('String'), defaultValueOfTypeName('UUID'), defaultValueOfTypeName('IPv4'), defaultValueOfTypeName('IPv6'), defaultValueOfTypeName('Decimal128(3)'), defaultValueOfTypeName('Tuple(Date, DateTime(\'UTC\'), Array(Array(String)), Nullable(UInt8))');
SELECT dictGet('null_dict', 'default_val', 1337), dictGetOrNull('null_dict', 'default_val', 1337), dictGetOrDefault('null_dict', 'default_val', 1337, 111), dictGetUInt8('null_dict', 'default_val', 1337), dictGetUInt8OrDefault('null_dict', 'default_val', 1337, 111);
SELECT dictGet('null_dict', 'nullable_val', 1337), dictGetOrNull('null_dict', 'nullable_val', 1337), dictGetOrDefault('null_dict', 'nullable_val', 1337, 111);
SELECT dictGet('null_dict', 'val', 1337), dictGetOrNull('null_dict', 'val', 1337), dictGetOrDefault('null_dict', 'val', 1337, 111), dictGetUInt8('null_dict', 'val', 1337), dictGetUInt8OrDefault('null_dict', 'val', 1337, 111);
SELECT dictGet(concat(currentDatabase(), '.flat_dictionary'), 'value_en', number + 1), dictGet(concat(currentDatabase(), '.flat_dictionary'), 'value_ru', number + 1) FROM numbers(3);
SELECT diff, traf FROM order_by_nulls_first ORDER BY diff ASC NULLS FIRST, traf ASC;
SELECT diff, traf FROM order_by_nulls_first ORDER BY diff DESC NULLS LAST, traf DESC;
SELECT diff, traf FROM order_by_nulls_first order by diff desc NULLS FIRST, traf limit 1, 4;
SELECT domain, arrayUniq(groupArraySample(5, 11111)(DISTINCT subdomain)) AS example_subdomains FROM distinct_two_level GROUP BY domain ORDER BY domain, example_subdomains LIMIT 10;
SELECT DomainID, Domain FROM ( SELECT 1 AS DomainID FROM system.one ) js1 ANY LEFT JOIN ( SELECT 1 AS DomainID, 'abc' AS Domain UNION ALL SELECT 2 AS DomainID, 'def' AS Domain ) js2 USING DomainID;
SELECT dummy, SumDum, ProblemField FROM ( SELECT dummy, sum(dummy) AS SumDum, 1 / SumDum AS ProblemField FROM system.one GROUP BY dummy ORDER BY dummy ASC, SumDum ASC, CAST(ifNull(ProblemField, -inf) AS Float64) ASC );
SELECT emptyArrayToSingle(range(number % 3)), emptyArrayToSingle(arrayMap(x -> toString(x), range(number % 2))), emptyArrayToSingle(arrayMap(x -> toDateTime('2015-01-01 00:00:00', 'UTC') + x, range(number % 5))), emptyArrayToSingle(arrayMap(x -> toDate('2015-01-01') + x, range(number % 4))) FROM system.numbers LIMIT 10;
SELECT eventday, count(*) FROM mytable_local WHERE (toYYYYMM(eventday) = 202007) AND (user_id = 742522) AND (eventday >= '2020-07-03') AND (eventday <= '2020-07-25') GROUP BY eventday ORDER BY eventday;
SELECT extract(query,'/\\*\\s*QUERY_GROUP_ID:(.*?)\\s*\\*/') as QUERY_GROUP_ID, count() FROM system.query_log WHERE current_database = currentDatabase() AND type<>1 and event_date >= yesterday() and QUERY_GROUP_ID<>'' GROUP BY QUERY_GROUP_ID ORDER BY QUERY_GROUP_ID;
SELECT extractAllGroups(NULL, 'worldworldworldwo\0ldworldworldworldwo\0ld'), fact_2_id, fact_3_id, fact_4_id FROM grouping_sets GROUP BY GROUPING SETS ( (sales_value), (fact_1_id, fact_2_id), ('wo\0ldworldwo\0ldworld'), (fact_3_id, fact_4_id)) ORDER BY fact_1_id DESC NULLS LAST, fact_1_id DESC NULLS FIRST, fact_2_id ASC, fact_3_id DESC NULLS FIRST, fact_4_id ASC;
SELECT fact_1_id, fact_3_id, SUM(sales_value) AS sales_value FROM grouping_sets GROUP BY grouping sets (fact_1_id, (fact_1_id, fact_3_id)) WITH TOTALS ORDER BY fact_1_id, fact_3_id;
SELECT fields.name, fields.value FROM ( SELECT fields.name, fields.value FROM LOG_T ) WHERE has(['node'], fields.value[indexOf(fields.name, 'ProcessName')]);
SELECT firstSignificantSubdomain('ftp://www.meta.com.ua/news.html'), firstSignificantSubdomain('https://www.bigmir.net/news.html'), firstSignificantSubdomain('magnet:ukr.abc'), firstSignificantSubdomain('ftp://www.yahoo.co.jp/news.html'), firstSignificantSubdomain('https://api.www3.static.dev.ввв.гугл.ком'), firstSignificantSubdomain('//www.meta.com.ua/news.html');
SELECT firstSignificantSubdomain('http://hello.canada.ca') AS canada, firstSignificantSubdomain('http://hello.congo.com') AS congo, firstSignificantSubdomain('http://pochemu.net-domena.ru') AS why;
SELECT floor(big_size / small_size) as ratio FROM (SELECT 1 AS key, sum(bytes_on_disk) AS small_size FROM system.parts WHERE database = currentDatabase() and table = 'delta_codec_float' and active) INNER JOIN (SELECT 1 AS key, sum(bytes_on_disk) as big_size FROM system.parts WHERE database = currentDatabase() and table = 'default_codec_float' and active) USING(key);
SELECT formatDateTime(toDateTime('2018-01-01 01:00:00', 'UTC'), '%F %T', 'UTC'), formatDateTime(toDateTime('2018-01-01 01:00:00', 'UTC'), '%F %T', 'Asia/Istanbul');
SELECT groupUniqArray(blockSize()), uniqExact(rowNumberInAllBlocks()), min(rowNumberInAllBlocks()), max(rowNumberInAllBlocks()), uniqExact(rowNumberInBlock()), min(rowNumberInBlock()), max(rowNumberInBlock()), uniqExact(blockNumber()) FROM (SELECT * FROM system.numbers_mt LIMIT 100000);
SELECT hex(i) FROM generateRandom('i FixedString(4)', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Array(Nullable(UUID))', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i String', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i UUID', 1, 10, 10) LIMIT 10;
SELECT id, avgWeighted(value1, weight), avgWeighted(value2, weight), avgWeighted(value3, weight), avgWeighted(value1, weight_nullable), avgWeighted(value2, weight_nullable), avgWeighted(value3, weight_nullable) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, avgWeighted(value1, weight), avgWeighted(value2, weight), avgWeighted(value3, weight), avgWeighted(value4, weight) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, avgWeightedIf(value1, weight, predicate_value), avgWeightedIf(value2, weight, predicate_value), avgWeightedIf(value3, weight, predicate_value) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, finalizeAggregation(dec) FROM consumer_02366;
SELECT id, sumIf(value1, predicate_value), sumIf(value2, predicate_value) FROM test_table_float_values GROUP BY id ORDER BY id;
SELECT id, sumIf(value1, predicate_value), sumIf(value2, predicate_value), sumIf(value3, predicate_value), sumIf(value4, predicate_value) FROM test_table_signed_values GROUP BY id ORDER BY id;
SELECT id, sumIf(value1, predicate_value), sumIf(value2, predicate_value), sumIf(value3, predicate_value), sumIf(value4, predicate_value) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, value, length(value), normalizeUTF8NFC(value) AS nfc, length(nfc) AS nfc_len, normalizeUTF8NFD(value) AS nfd, length(nfd) AS nfd_len, normalizeUTF8NFKC(value) AS nfkc, length(nfkc) AS nfkc_len, normalizeUTF8NFKD(value) AS nfkd, length(nfkd) AS nfkd_len FROM normalize_test ORDER BY id;
SELECT if(empty(id), toString(device), id) AS device, multiIf( notEmpty(id),'a', device == '00000000-0000-0000-0000-000000000000', 'b', 'c' ) AS device_id_type, count() FROM table1 GROUP BY device, device_id_type ORDER BY device;
SELECT k, anyLast(s) FROM ( SELECT 123456789 AS k, 'Hello 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890' AS s UNION ALL SELECT 234567890, 'World 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890' ) GROUP BY k WITH TOTALS HAVING length(anyLast(s)) > 0 ORDER BY k;
select k, sum(c), uniqMerge(u), uniqExactMerge(ue) from summing_merge_tree_aggregate_function group by k;
SELECT k1, k2, SUM(number) AS sum_value, count() AS count_value FROM numbers(6) GROUP BY GROUPING SETS ( (number % 2 AS k1), (number % 3 AS k2) ) ORDER BY sum_value ASC, count_value ASC;
SELECT k1, k2, SUM(number) AS sum_value, count() AS count_value FROM remote('127.0.0.{2,3}', numbers(6)) GROUP BY GROUPING SETS ( (number % 2 AS k1), (number % 3 AS k2) ) ORDER BY sum_value ASC, count_value ASC;
SELECT k2, SUM(number) AS sum_value, count() AS count_value FROM remote('127.0.0.{2,3}', numbers(6)) GROUP BY GROUPING SETS ( (number % 3 AS k2) ) ORDER BY sum_value ASC, count_value ASC;
SELECT key, any(toString(n)) FROM ( SELECT arr.key AS key, n FROM x ARRAY JOIN arr ) GROUP BY key ORDER BY key;
SELECT key, ref_valueD, valueD, ref_valueD - valueD as dD FROM codecTest WHERE dD != 0 LIMIT 10;
SELECT key, ref_valueDT, valueDT, ref_valueDT - valueDT as dDT FROM codecTest WHERE dDT != 0 LIMIT 10;
SELECT key, ref_valueI16, valueI16, ref_valueI16 - valueI16 as dI16 FROM codecTest WHERE dI16 != 0 LIMIT 10;
SELECT key, ref_valueU64, valueU64, ref_valueU64 - valueU64 as dU64 FROM codecTest WHERE dU64 != 0 LIMIT 10;
SELECT key, ref_valueU8, valueU8, ref_valueU8 - valueU8 as dU8 FROM codecTest WHERE dU8 != 0 LIMIT 10;
SELECT key, value1, value2, toUInt64(min(time)) AS start_ts FROM join_inner_table PREWHERE (id = '833c9e22-c245-4eb5-8745-117a9a1f26b1') AND (number > toUInt64('1610517366120')) GROUP BY key, value1, value2 ORDER BY key, value1, value2 LIMIT 10;
SELECT key, value1, value2, toUInt64(min(time)) AS start_ts FROM join_inner_table__fuzz_1 PREWHERE (id = '833c9e22-c245-4eb5-8745-117a9a1f26b1') AND (number > toUInt64('1610517366120')) GROUP BY key, value1, value2 WITH ROLLUP ORDER BY key ASC, value1 ASC, value2 ASC NULLS LAST LIMIT 10 FORMAT Null;
SELECT key1, key2, table_1 FROM ( SELECT arrayJoin([1, 2, 3]) AS key1, 0 AS key2, 999 AS table_1 ) js1 ALL INNER JOIN ( SELECT arrayJoin([1, 3, 2]) AS key1, 0 AS key2, 999 AS table_1 ) js2 USING key2, key1 ORDER BY key1;
SELECT label, number FROM ( SELECT 'a' AS label, number FROM ( SELECT number FROM numbers(10) ) UNION ALL SELECT 'b' AS label, number FROM ( SELECT number FROM numbers(10) ) ) WHERE number IN ( SELECT number FROM numbers(5) ) order by label, number;
SELECT length('\x80') FORMAT JSONCompact;
SELECT length(haystack), length(matches), arrayMap((x) -> length(x), matches) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractGroups(haystack, repeat('(\\w)', 100)) AS matches FROM numbers(3) );
SELECT length(haystack), length(matches), arrayReduce('sum', arrayMap((x) -> length(x), matches)) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractGroups(haystack, '(\\w)') AS matches FROM numbers(3) );
SELECT length(haystack), length(matches), length(matches[1]), arrayMap((x) -> length(x), matches[1]) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractAllGroupsHorizontal(haystack, repeat('(\\w)', 100)) AS matches FROM numbers(3) );
SELECT length(haystack), length(matches), length(matches[1]), arrayReduce('sum', arrayMap((x) -> length(x), matches[1])) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractAllGroupsHorizontal(haystack, '(\\w)') AS matches FROM numbers(3) );
SELECT length(haystack), length(matches[1]), length(matches), arrayMap((x) -> length(x), arrayMap(x -> x[1], matches)) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractAllGroupsVertical(haystack, repeat('(\\w)', 100)) AS matches FROM numbers(3) );
SELECT length(haystack), length(matches[1]), length(matches), arrayReduce('sum', arrayMap((x) -> length(x), arrayMap(x -> x[1], matches))) FROM ( SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 10) AS haystack, extractAllGroupsVertical(haystack, '(\\w)') AS matches FROM numbers(3) );
SELECT level, count() AS c FROM ( SELECT user_id, windowFunnel(6048000000000000)(timestamp, eventID = 1004, eventID = 1003, eventID = 1002) AS level FROM trend GROUP BY user_id ) GROUP BY level ORDER BY level ASC;
SELECT line, patterns, arrayFold(acc, pat -> position(line, pat), patterns, 0::UInt64) FROM tab ORDER BY line;
SELECT line, splitByNonAlpha(line), arrayFold( (acc, str) -> position(line, str), splitByNonAlpha(line), 0::UInt64 ) FROM tab;
SELECT m[toUUID('00001192-0000-4000-6000-000000000001')], m[toUUID('00001192-0000-4000-7000-000000000001')], m[toUUID('00001192-0000-4000-8000-000000000001')] FROM table_map_with_key_integer;
SELECT name, comment FROM system.tables WHERE name IN ('t1', 't2', 't3') AND database = currentDatabase() order by name;
SELECT name, table, hash_of_all_files, hash_of_uncompressed_files, uncompressed_hash_of_compressed_files FROM system.parts WHERE table = 'test_00961' and database = currentDatabase();
SELECT neighbor(n, -2) AS int, neighbor(s, -2) AS str, neighbor(lcs, -2) AS lowCstr FROM ( SELECT number % 5 AS n, toString(n) AS s, CAST(s, 'LowCardinality(String)') AS lcs FROM numbers(10) );
SELECT NULL, id, max(id) OVER (Rows BETWEEN 10 PRECEDING AND UNBOUNDED FOLLOWING) AS aid FROM ( SELECT NULL, max(id) OVER (), materialize(toLowCardinality('')) AS id FROM numbers_mt(0, 1) ) FORMAT `Null`;
SELECT NULL, proportionsZTest(257, 1048575, 1048575, 257, -inf, NULL), proportionsZTest(1024, 1025, 2, 2, 'unpooled');
SELECT number / 8 AS width, bar(width, 0, 3, 3) AS b, bar(width - 0.001, 0, 3, 3) AS `b_minus`, hex(b), hex(b_minus) FROM numbers(20);
SELECT number FROM numbers(10) GROUP BY GROUPING SETS ( number, number % 2 ) WITH ROLLUP;
SELECT number FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) HAVING grouping(number, number % 2) = 1 ORDER BY number SETTINGS enable_optimize_predicate_expression = 0, force_grouping_standard_compatibility=0;
SELECT number FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) HAVING grouping(number, number % 2) = 2 ORDER BY number SETTINGS enable_optimize_predicate_expression = 0, force_grouping_standard_compatibility=0;
SELECT number FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY number, grouping(number, number % 2) = 1 SETTINGS force_grouping_standard_compatibility=0;
SELECT number IN (1, 2) AS x, count() FROM numbers(10) GROUP BY x ORDER BY x;
SELECT number, count(), grouping(number, number % 2) AS gr FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number, number % 2), () ) ORDER BY (gr, number) SETTINGS force_grouping_standard_compatibility=0;
SELECT number, dictHas('simple_key_dictionary', number), dictGetOrNull('simple_key_dictionary', 'value', number), dictGetOrNull('simple_key_dictionary', 'value_nullable', number), dictGetOrNull('simple_key_dictionary', ('value', 'value_nullable'), number) FROM system.numbers LIMIT 5;
SELECT number, grouping(number % 2, number) AS gr FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY number, gr SETTINGS force_grouping_standard_compatibility=0;
SELECT number, grouping(number, number % 2) + 3 as gr FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY CUBE(number, number % 2) HAVING grouping(number) != 0 ORDER BY number, gr SETTINGS force_grouping_standard_compatibility=0;
SELECT number, grouping(number, number % 2) = 1 AS gr FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY number, gr SETTINGS force_grouping_standard_compatibility=0;
SELECT number, GROUPING(number, number % 2) = 1 as gr FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY GROUPING SETS ( (number), (number % 2)) ORDER BY number, gr SETTINGS force_grouping_standard_compatibility=0;
SELECT number, grouping(number, number % 2) AS gr FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY ROLLUP(number, number % 2) ORDER BY number, gr SETTINGS force_grouping_standard_compatibility=0;
SELECT number, grouping(number, number % 2) as gr FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY ROLLUP(number, number % 2) WITH TOTALS HAVING grouping(number) != 0 ORDER BY number, gr;
SELECT number, grouping(number, number % 2, number % 3) = 6 FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY number, number % 2 ORDER BY number;
SELECT number, grouping(number, number % 2, number % 3) AS gr FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY number, gr;
SELECT number, leadInFrame(number) OVER w AS W FROM numbers(10) WINDOW w AS (ORDER BY number ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 3;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls = 0;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls = 1;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY 1, tuple(val) SETTINGS group_by_use_nulls = 1, max_bytes_before_external_sort=10;
SELECT number, number % 2, sum(number) AS val FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls = 0;
SELECT number, number % 2, sum(number) AS val FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY GROUPING SETS ( (number), (number % 2) ) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls = 1;
SELECT number, sum(number) FROM numbers(10) WHERE number % 3 = 1 GROUP BY number WITH TOTALS ORDER BY 10, number DESC WITH FILL FROM 15;
SELECT number, sum(number) FROM numbers(10) WHERE number % 3 = 1 GROUP BY number WITH TOTALS ORDER BY number DESC WITH FILL FROM 15;
SELECT number, sum(number) OVER (PARTITION BY number % 10) / count() OVER (PARTITION BY number % 10), avg(number) OVER (PARTITION BY number % 10) FROM numbers(100) ORDER BY number ASC;
SELECT number, toString(number), range(number) AS arr, arrayMap(x -> toString(x), arr) AS arr_s, arrayMap(x -> range(x), arr) AS arr_arr, arrayMap(x -> arrayMap(y -> toString(y), x), arr_arr) AS arr_arr_s, arrayMap(x -> toFixedString(x, 3), arr_s) AS arr_fs FROM system.numbers LIMIT 5, 10;
SELECT nw, sum(WR) AS R, sumIf(WR, uniq_rows = 1) AS UNR FROM ( SELECT uniq(nw) OVER (PARTITION BY ac) AS uniq_rows, AVG(wg) AS WR, ac, nw FROM window_funtion_threading GROUP BY ac, nw ) GROUP BY nw ORDER BY nw ASC, R DESC LIMIT 10 SETTINGS max_threads = 1;
select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where p_partkey = ps_partkey and p_brand <> 'Brand#45' and p_type not like 'MEDIUM POLISHED%' and p_size in (49, 14, 23, 45, 19, 3, 36, 9) and ps_suppkey not in ( select s_suppkey from supplier where s_comment like '%Customer%Complaints%' ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
SELECT part_name, arraySort(groupArrayIf(table, event_type = 'MergeParts')) AS mergers, arraySort(groupArrayIf(table, event_type = 'DownloadPart')) AS fetchers FROM system.part_log WHERE (event_time > (now() - 120)) AND (table LIKE 'execute\\_on\\_single\\_replica\\_r%') AND (part_name NOT LIKE '%\\_0') AND (database = currentDatabase()) GROUP BY part_name ORDER BY part_name FORMAT Vertical;
SELECT pk1, pk2, pk4, pk3, count() as occurences FROM landing GROUP BY pk1, pk2, pk4, pk3 ORDER BY pk1, pk2, pk4, pk3;
SELECT pk1, pk2, pk4, pk3, countMerge(occurences) AS occurences FROM ds GROUP BY pk1, pk2, pk4, pk3 ORDER BY pk1, pk2, pk4, pk3;
SELECT ProfileEvents['S3HeadObject'], ProfileEvents['S3ListObjects'], ProfileEvents['RemoteFSPrefetches'], ProfileEvents['IOBufferAllocBytes'] < 100000 FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND query ILIKE 'SELECT count() FROM s3%test_02496%';
SELECT pt AS pt, exposure_uv AS exposure_uv FROM ( SELECT pt FROM test1 ) AS m0 FULL OUTER JOIN ( SELECT pt, exposure_uv FROM test1 ) AS m1 ON m0.pt = m1.pt;
SELECT q0.dt, q0.cnt, q1.cnt2 FROM ( SELECT toDate(addDays(toDate('2015-12-01'), number)) AS dt, sum(number) AS cnt FROM numbers(2) GROUP BY dt ) AS q0 ALL FULL OUTER JOIN ( SELECT toDate(addDays(toDate('2015-12-01'), number)) AS dt, sum(number) AS cnt2 FROM numbers(5) GROUP BY dt ) AS q1 ON q0.dt = q1.dt ORDER BY q1.cnt2;
SELECT QUERY_GROUP_ID, count() FROM slow_log WHERE current_database = currentDatabase() GROUP BY QUERY_GROUP_ID ORDER BY QUERY_GROUP_ID;
SELECT range(1), arrayMap(x -> arrayMap(x -> 1, range(x)), [1]) SETTINGS allow_experimental_analyzer = 0;
SELECT range(1), arrayMap(x -> arrayMap(y -> 1, range(x)), [1]) SETTINGS allow_experimental_analyzer = 1;
SELECT replaceRegexpOne(command, '(\\d{10})', 'timestamp'), FROM system.mutations WHERE database = currentDatabase() AND table = 't_mutations_nondeterministic' AND is_done ORDER BY command;
SELECT replaceRegexpOne(command, '(\\d{10})', 'timestamp'), FROM system.mutations WHERE database = currentDatabase() AND table = 't_mutations_nondeterministic' AND NOT is_done ORDER BY command;
SELECT round(categoricalInformationValue(x.1, x.2)[1], 6), round((2 / 2 - 2 / 3) * (log(2 / 2) - log(2 / 3)), 6) FROM ( SELECT arrayJoin([(0, 0), (1, 0), (1, 0), (1, 1), (1, 1)]) as x );
SELECT round(categoricalInformationValue(x.1, x.2, x.3)[1], 6), round(categoricalInformationValue(x.1, x.2, x.3)[2], 6), round((2 / 4 - 1 / 3) * (log(2 / 4) - log(1 / 3)), 6), round((2 / 4 - 2 / 3) * (log(2 / 4) - log(2 / 3)), 6) FROM ( SELECT arrayJoin([(1, 0, 0), (1, 0, 0), (1, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 1), (0, 1, 1)]) as x FROM numbers(1000) );
SELECT round(categoricalInformationValue(x.1, x.2, x.3)[1], 6), round(categoricalInformationValue(x.1, x.2, x.3)[2], 6), round((2 / 4 - 1 / 3) * (log(2 / 4) - log(1 / 3)), 6), round((2 / 4 - 2 / 3) * (log(2 / 4) - log(2 / 3)), 6) FROM ( SELECT arrayJoin([(1, 0, 0), (1, 0, 0), (1, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 1), (0, 1, 1)]) as x );
SELECT round(sigmoid(x), 5), round(sigmoid(toFloat32(x)), 5), round(sigmoid(toFloat64(x)), 5), round(tanh(x), 5), round(TANH(toFloat32(x)), 5), round(TANh(toFloat64(x)), 5) FROM (SELECT arrayJoin([-1, 0, 1]) AS x);
SELECT rowNr, val_string, neighbor(val_string, -1) AS str_m1, neighbor(val_string, 1) AS str_p1, val_low, neighbor(val_low, -1) AS low_m1, neighbor(val_low, 1) AS low_p1 FROM ( SELECT * FROM neighbor_test ORDER BY val_string, rowNr ) ORDER BY rowNr, val_string, str_m1, str_p1, val_low, low_m1, low_p1 format PrettyCompact;
SELECT s, parseDateTime64BestEffortUS(s,3,'UTC') AS a FROM ( SELECT arrayJoin([ '01-02-1930 12:00:00', '12.02.1930 12:00:00', '13/02/1930 12:00:00', '02/25/1930 12:00:00' ]) AS s) FORMAT PrettySpaceNoEscapes;
select s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_suppkey = supplier_no and total_revenue = ( select max(total_revenue) from revenue0 ) order by s_suppkey;
SELECT small_hash == big_hash FROM (SELECT 1 AS key, sum(cityHash64(*)) AS small_hash FROM delta_codec_synthetic) INNER JOIN (SELECT 1 AS key, sum(cityHash64(*)) AS big_hash FROM default_codec_synthetic) USING(key);
SELECT status, count() AS all FROM test ARRAY JOIN nested as nestedJoined WHERE (status IN ( SELECT status FROM test ARRAY JOIN nested as nestedJoined GROUP BY status ORDER BY count() DESC LIMIT 10)) AND (id IN ('1', '2')) GROUP BY CUBE(status) LIMIT 100;
SELECT str, replaceAll(str, 'o', '*') AS replaced FROM replaceall ORDER BY str ASC;
SELECT sum(1 + CAST(dummy AS Nullable(UInt8))) AS res1, toTypeName(res1) AS t1, sum(1 + nullIf(dummy, 0)) AS res2, toTypeName(res2) AS t2 FROM remote('127.0.0.{2,3}', system.one);
SELECT sum(a.number) AS total, c.number AS cn, b.number AS bn, grouping(c.number) + grouping(b.number) AS l, rank() OVER (PARTITION BY grouping(c.number) + grouping(b.number), multiIf(grouping(c.number) = 0, b.number, NULL) ORDER BY sum(a.number) DESC) AS r FROM numbers(10) AS a, numbers(10) AS b, numbers(10) AS c GROUP BY cn, bn WITH ROLLUP ORDER BY total ASC, cn ASC, bn ASC, l ASC, r ASC LIMIT 10;
SELECT sum(ASD) AS asd, intDiv(toInt64(asd), abs(toInt64(asd))) AS int_div_with_abs, intDiv(toInt64(asd), toInt64(asd)) AS int_div_without_abs FROM ( SELECT ASD FROM ( SELECT [-1000, -1000] AS asds ) ARRAY JOIN asds AS ASD );
SELECT sum(c), toInt32((h - null::Nullable(DateTime)) / 3600) + 1 AS a FROM ( SELECT count() AS c, h FROM ( SELECT now() AS h ) WHERE toInt32((h - null::Nullable(DateTime)) / 3600) + 1 = 1 GROUP BY h ) GROUP BY a settings min_count_to_compile_expression = 0;
select sum(l_extendedprice * l_discount) as revenue from lineitem where l_shipdate >= date '1994-01-01' and l_shipdate < date '1994-01-01' + interval '1' year and l_discount between toDecimal32(0.06, 2) - toDecimal32(0.01, 2) and toDecimal32(0.06, 2) + toDecimal32(0.01, 2) and l_quantity < 24;
SELECT sum(n), 1 AS x FROM t GROUP BY x;
SELECT sum(total_count) AS total, domain FROM ( SELECT COUNT(*) AS total_count, SUM(if(domain = 'facebook.com', 1, 0)) AS facebookHits, domain FROM clicks GROUP BY domain UNION ALL SELECT COUNT(*) AS total_count, toUInt64(0) AS facebookHits, domain FROM transactions GROUP BY domain ) GROUP BY domain ORDER BY domain LIMIT 10 FORMAT JSONEachRow;
SELECT sum(total_count) AS total, domain FROM ( SELECT COUNT(*) AS total_count, toUInt64(0) AS facebookHits, domain FROM transactions GROUP BY domain UNION ALL SELECT COUNT(*) AS total_count, SUM(if(domain = 'facebook.com', 1, 0)) AS facebookHits, domain FROM clicks GROUP BY domain ) GROUP BY domain ORDER BY domain LIMIT 10 FORMAT JSONEachRow;
SELECT sum(user_id * _sample_factor) FROM sessions SAMPLE 10000000;
SELECT sumMapIf([1], [1], nullIf(number, 3) > 0) AS col1, countIf(1, nullIf(number, 3) > 0) AS col2, sumIf(1, nullIf(number, 3) > 0) AS col3 FROM numbers(1, 5);
SELECT t1.*, t2.*, 'world' AS constant, isConstant('world') FROM ( SELECT arrayJoin([1, 2]) AS k, 'hello' ) AS t1 LEFT JOIN ( SELECT arrayJoin([1, 3]) AS k, 'world' ) AS t2 ON t1.k = t2.k ORDER BY t1.k;
SELECT t1.*, t2.*, 123 AS constant, isConstant('world') FROM ( SELECT arrayJoin([1, 2]) AS k, 321 ) AS t1 LEFT JOIN ( SELECT arrayJoin([1, 3]) AS k, 123 ) AS t2 ON t1.k = t2.k ORDER BY t1.k;
SELECT table, type, new_part_name, num_postponed > 0 AS has_postpones, postpone_reason FROM system.replication_queue WHERE table LIKE 'execute\\_on\\_single\\_replica\\_r%' AND database = currentDatabase() ORDER BY table FORMAT Vertical;
SELECT table, name, type, compression_codec, data_uncompressed_bytes u, data_compressed_bytes c, round(u/c,3) ratio FROM system.columns WHERE table = 'codecTest' AND database = currentDatabase() AND compression_codec != '' AND ratio <= 1 ORDER BY table, name, type;
SELECT table, zookeeper_name, count() FROM system.replicas INNER JOIN system.parts USING (database, table) WHERE database = currentDatabase() GROUP BY table, zookeeper_name ORDER BY table, zookeeper_name FORMAT CSV;
SELECT test_table_join_1.* APPLY toString, test_table_join_2.* APPLY toString, test_table_join_3.* APPLY toString FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 ON t1.id = t2.id INNER JOIN test_table_join_3 AS t3 ON t2.id = t3.id;
SELECT toDate(toDateTime((number * 10) * 86400, 'Asia/Istanbul')) AS d1, toDate(toDateTime(number * 86400, 'Asia/Istanbul')) AS d2, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ORDER BY d1 WITH FILL STEP 5, d2 WITH FILL;
SELECT toDate(toDateTime((number * 10) * 86400, 'Asia/Istanbul')) AS d1, toDate(toDateTime(number * 86400, 'Asia/Istanbul')) AS d2, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ORDER BY d2 WITH FILL, d1 WITH FILL STEP 5;
select toDecimal32(100.00, 2) * sum(case when p_type like 'PROMO%' then l_extendedprice * (1 - l_discount) else 0 end) / (1 + sum(l_extendedprice * (1 - l_discount))) as promo_revenue from lineitem, part where l_partkey = p_partkey and l_shipdate >= date '1995-09-01' and l_shipdate < date '1995-09-01' + interval '1' month;
SELECT toFloat32(number % 10) AS n, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ORDER BY n ASC WITH FILL STEP 1 LIMIT 2 WITH TIES;
SELECT toFloat32(number % 10) AS n, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ORDER BY n ASC WITH FILL STEP 1 LIMIT 2;
SELECT toFloat64('1.7091'), toFloat64('1.5008753E7'), toFloat64('6e-09'), toFloat64('6.000000000000001e-9'), toFloat32('1.7091'), toFloat32('1.5008753E7'), toFloat32('6e-09'), toFloat32('6.000000000000001e-9') SETTINGS precise_float_parsing = 0;
SELECT toFloat64('1.7091'), toFloat64('1.5008753E7'), toFloat64('6e-09'), toFloat64('6.000000000000001e-9'), toFloat32('1.7091'), toFloat32('1.5008753E7'), toFloat32('6e-09'), toFloat32('6.000000000000001e-9') SETTINGS precise_float_parsing = 1;
SELECT toNullable(NULL) AS a, toNullable('Hello') AS b, toNullable(toNullable(1)) AS c, toNullable(materialize(NULL)) AS d, toNullable(materialize('Hello')) AS e, toNullable(toNullable(materialize(1))) AS f, toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d), toTypeName(e), toTypeName(f);
SELECT toTimeZone(timestamp, 'America/Sao_Paulo') AS converted, timestamp AS original FROM test LEFT JOIN (SELECT 2 AS x) AS anything ON x = i WHERE timestamp >= toDateTime('2020-05-13T00:00:00', 'America/Sao_Paulo');
SELECT toTypeName(i) FROM generateRandom('i Array(Nullable(UUID))') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i FixedString(4)') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i String') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i UUID') LIMIT 1;
SELECT toTypeName(t2_value), t2.value AS t2_value FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 USING (id);
SELECT toTypeName(t2_value), t2.value AS t2_value FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 USING (id);
SELECT toTypeName(ui64), toTypeName(i64), toTypeName(ui32), toTypeName(i32), toTypeName(ui16), toTypeName(i16), toTypeName(ui8), toTypeName(i8) FROM generateRandom('ui64 UInt64, i64 Int64, ui32 UInt32, i32 Int32, ui16 UInt16, i16 Int16, ui8 UInt8, i8 Int8') LIMIT 1;
SELECT toUInt8(bitAnd(number, 4)) AS a, toUInt8(bitAnd(number, 2)) AS b, toUInt8(bitAnd(number, 1)) AS c, a AND b AND c AS AND, a OR b OR c AS OR FROM numbers(8) ;
SELECT toUnixTimestamp(timeBerlin), toUnixTimestamp(timeLA) FROM tztest;
SELECT tuple(1) = tuple(1), tuple(1) != tuple(1), tuple(1) < tuple(1), tuple(1) > tuple(1), tuple(1) <= tuple(1), tuple(1) >= tuple(1);
SELECT tuple(1) = tuple(2), tuple(1) != tuple(2), tuple(1) < tuple(2), tuple(1) > tuple(2), tuple(1) <= tuple(2), tuple(1) >= tuple(2);
SELECT tuple(2) = tuple(1), tuple(2) != tuple(1), tuple(2) < tuple(1), tuple(2) > tuple(1), tuple(2) <= tuple(1), tuple(2) >= tuple(1);
SELECT tuple(NULL) < tuple(1), tuple(NULL) = tuple(1), tuple(NULL) <= tuple(1), tuple(1, NULL) = tuple(2, 1), tuple(1, NULL) < tuple(2, 1);
SELECT type, serialization_kind, subcolumns.names, subcolumns.types, subcolumns.serializations FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_mutations_3' AND column = 's' AND active ORDER BY name;
SELECT ui64, i64, ui32, i32, ui16, i16, ui8, i8 FROM generateRandom('ui64 UInt64, i64 Int64, ui32 UInt32, i32 Int32, ui16 UInt16, i16 Int16, ui8 UInt8, i8 Int8', 1, 10, 10) LIMIT 10;
SELECT uniq(user_id) a, min(_sample_factor) x, a*x FROM sessions SAMPLE 10000000;
SELECT uniq(user_id) AS users, uniqIf(order_id, notEmpty(order_id)) AS orders FROM ( SELECT * FROM users ) t1 ALL LEFT JOIN ( SELECT * FROM orders ) t2 USING (user_id);
SELECT uniqExact(x) AS u, uniqExactIf(x, name = 'a') AS ue, uniqExactIf(x, name IN ('a', 'b')) AS ui FROM ( SELECT toNullable('a') AS name, arrayJoin(range(10)) AS x ) WHERE name = 'a';
SELECT uniqTheta(x), uniqTheta((x)), uniqTheta(x, y), uniqTheta((x, y)), uniqTheta(x, y, z), uniqTheta((x, y, z)) FROM ( SELECT number % 10 AS x, intDiv(number, 10) % 10 AS y, toString(intDiv(number, 100) % 10) AS z FROM system.numbers LIMIT 1000 );
SELECT UserID, UserID = 0, if(UserID = 0, 'delete', 'leave') FROM VALUES('UserID Nullable(UInt8)', (2), (0), (NULL));
SELECT v, length(finalizeAggregation(CAST(unhex(state) AS AggregateFunction(argMax, String, UInt64)))) FROM argmaxstate_hex_large;
SELECT v1.id, v2.id, L1Distance(v1.v, v2.v), LinfDistance(v1.v, v2.v), LpDistance(v1.v, v2.v, 3), L2Distance(v1.v, v2.v), L2SquaredDistance(v1.v, v2.v), cosineDistance(v1.v, v2.v) FROM vec2d v1, vec2d v2 WHERE length(v1.v) == length(v2.v);
SELECT val, val + 1 as prev, val + prev as val FROM ( SELECT 1 as val ) ;
SELECT value, time, round(exp_smooth, 3), bar(exp_smooth, 0, 10, 50) AS bar FROM ( SELECT (number = 0) OR (number >= 25) AS value, number AS time, exponentialTimeDecayedSum(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(50) );
SELECT value, time, round(exp_smooth, 3), bar(exp_smooth, 0, 20, 50) AS bar FROM ( SELECT (number % 5) = 0 AS value, number AS time, exponentialTimeDecayedCount(10)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(50) );
SELECT value, time, round(exp_smooth, 3), bar(exp_smooth, 0, 5, 50) AS bar FROM ( SELECT (number = 0) OR (number >= 25) AS value, number AS time, exponentialTimeDecayedAvg(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(50) );
SELECT value1, value2, avg(count) AS avg FROM ( SELECT key, value1, value2, count() AS count FROM join_outer_table INNER JOIN ( SELECT key, value1, value2, toUInt64(min(time)) AS start_ts FROM join_inner_table PREWHERE (id = '833c9e22-c245-4eb5-8745-117a9a1f26b1') AND (number > toUInt64('1610517366120')) GROUP BY key, value1, value2 ) USING (key) GROUP BY key, value1, value2 ) GROUP BY value1, value2 ORDER BY value1, value2;
SELECT visitorId, orderId, groupUniqArray(sessionId) FROM sessions ASOF INNER JOIN orders ON (sessions.visitorId = orders.visitorId) AND (sessions.date <= orders.date) GROUP BY visitorId, orderId ORDER BY visitorId ASC, orderId ASC;
SELECT x, -x, y FROM ( SELECT 5 AS x, 'Hello' AS y ) ORDER BY x ASC WITH FILL FROM 3 TO 7, y ASC, -x ASC WITH FILL FROM -10 TO -1;
SELECT x, 0 AND x, 1 AND x, x AND x, toNullable(0) AND x, toNullable(1) AND x, 0.0 AND x, 0.1 AND x, x AND 1 AND x, 0 AND x AND 1 AND x FROM (SELECT number % 2 ? number % 3 : NULL AS x FROM system.numbers LIMIT 10);
SELECT x, 0 OR x, 1 OR x, x OR x, toNullable(0) OR x, toNullable(1) OR x, 0.0 OR x, 0.1 OR x, x OR 1 OR x, 0 OR x OR 1 OR x FROM (SELECT number % 2 ? number % 3 : NULL AS x FROM system.numbers LIMIT 10);
SELECT x, `1` FROM ( SELECT x, 1 FROM test_00744 ) ALL INNER JOIN ( SELECT count(), 1 FROM test_00744 ) js2 USING (`1`) LIMIT 10;
SELECT x, min(x) AS lower, max(x) + 1 AS upper, upper - lower AS range FROM ( SELECT arrayJoin([1, 2]) AS x ) GROUP BY x WITH ROLLUP;
SELECT x, t, round(max, 12) FROM ( SELECT d[1] AS x, d[2] AS t, exponentialTimeDecayedMax(100)(-x, t) OVER w AS max FROM ( SELECT [[2, 1], [1, 2], [10, 3], [4, 4], [5, 5], [1, 6], [10, 7], [10, 8], [10, 9], [9.81, 10], [9.9, 11]] AS d ) ARRAY JOIN d WINDOW w AS (ORDER BY 1 ASC Rows BETWEEN 2 PRECEDING AND 2 FOLLOWING) );
SELECT x, t, round(sum, 12), round(max, 12), round(count, 12), round(avg, 12) FROM ( SELECT sin(number) AS x, number AS t, exponentialTimeDecayedSum(100)(x, t) OVER w AS sum, exponentialTimeDecayedMax(100)(x, t) OVER w AS max, exponentialTimeDecayedCount(100)(t) OVER w AS count, exponentialTimeDecayedAvg(100)(x, t) OVER w AS avg FROM numbers(1000000) WINDOW w AS (ORDER BY 1 ASC Rows BETWEEN 2 PRECEDING AND 2 FOLLOWING) ) FORMAT `Null`;
SELECT (tuple(log_date) = tuple('2021-01-01'), log_date) FROM test_tuple_filter__fuzz_2 ORDER BY log_date;
SELECT (X.a + 1) AS a, (Y.a + 1) AS Y_a, (Z.a + 1) AS Z_a, (Y.b + 1) AS b, (Z.b + 1) AS Z_b FROM (SELECT 10 a) X CROSS JOIN (SELECT 20 a, 21 as b) Y CROSS JOIN (SELECT 30 a, 31 as b, 32 as c) Z;
SELECT arrayJoin(lttb(1000)(x, y)) AS point, tupleElement(point, 1) AS point_x, point_x - neighbor(point_x, -1) AS point_x_diff_with_previous_row FROM largestTriangleTreeBucketsBucketSizeTest LIMIT 990, 10;
select (select count() from test where test='case4'), (select sum(c) from test_mv_a where test='case4'), (select sum(c) from test_mv_b where test='case4'), (select sum(c) from test_mv_c where test='case4');
SELECT c1, range(0, c1) AS zero_as_start_val, range(1, c1) AS one_as_start_val, range(c1) AS no_start_val, range(c1, c1 * 2) AS val_as_start, range(c1, c1 * c1, c1) AS complex_start_step FROM values(1, 2, 3, 4, 5) FORMAT Vertical;
select count() / (select count() from nums_in_mem_dist where rand() > 0) from system.one;
SELECT d32, d64, d128 FROM generateRandom('d32 Decimal32(4), d64 Decimal64(8), d128 Decimal128(16)', 1, 10, 10) LIMIT 10;
SELECT f32, f64 FROM generateRandom('f32 Float32, f64 Float64', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Array(Int8)', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Array(Nullable(Enum8(\'hello\' = 1, \'world\' = 5)))', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Array(Nullable(Int32))', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Array(String)', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Enum8(\'hello\' = 1, \'world\' = 5)', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Nullable(Enum16(\'h\' = 1, \'w\' = 5 , \'o\' = -200))', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Nullable(String)', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Tuple(Int32, Array(Int64))', 1, 10, 10) LIMIT 10;
SELECT i FROM generateRandom('i Tuple(Int32, Int64)', 1, 10, 10) LIMIT 10;
SELECT text, uniqExactIf(hash, hash IN ( SELECT DISTINCT hash FROM test_table AS t1 )) as counter FROM test_table AS t2 GROUP BY text ORDER BY counter, text;
select toJSONString(c) from ( select cast( (number:: String, null, (number:: String, null)), 'Tuple(a Nullable(String), b Nullable(Int64), c Tuple(x Nullable(String), y Nullable(Float64)))' ) as c from numbers(3) ) settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 0;
select toJSONString(c) from ( select cast( (number:: String, null, (number:: String, null)), 'Tuple(a Nullable(String), b Nullable(Int64), c Tuple(x Nullable(String), y Nullable(Float64)))' ) as c from numbers(3) ) settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 1;
SELECT toStartOfInterval(timestamp, INTERVAL 300 SECOND) AS ts FROM tab WHERE ts > '2022-11-24 11:19:00' GROUP BY ts;
SELECT toTypeName(d32), toTypeName(d64), toTypeName(d64) FROM generateRandom('d32 Decimal32(4), d64 Decimal64(8), d128 Decimal128(16)') LIMIT 1;
SELECT toTypeName(f32), toTypeName(f64) FROM generateRandom('f32 Float32, f64 Float64') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Array(Int8)') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Array(Nullable(Enum8(\'hello\' = 1, \'world\' = 5)))') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Array(Nullable(Int32))') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Array(String)') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Enum8(\'hello\' = 1, \'world\' = 5)') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Nullable(String)', 1) LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Tuple(Int32, Array(Int64))') LIMIT 1;
SELECT toTypeName(i) FROM generateRandom('i Tuple(Int32, Int64)') LIMIT 1;
SELECT toTypeName(i)s FROM generateRandom('i Nullable(Enum16(\'h\' = 1, \'w\' = 5 , \'o\' = -200))') LIMIT 1;
select toYYYYMM(date) as date_, n from (select [toDate('20230815'), toDate('20230816')] as date, [1, 2] as n ) as data array join date, n where date_ >= 202303;
SELECT u.name user_name, 20 AS age_group FROM user_all u LEFT JOIN event e ON u.id = e.user_id WHERE (u.age >= 20 AND u.age < 30) AND e.created_time > '2022-01-01';
SELECT '=';
SELECT * EXCEPT 'bytes', COLUMNS('bytes') APPLY formatReadableSize FROM columns_transformers;
SELECT * FROM ( SELECT m0.pt ,m0.exposure_uv AS exposure_uv ,round(m2.exposure_uv,4) FROM ( SELECT pt ,exposure_uv FROM test1 ) m0 LEFT JOIN ( SELECT pt ,exposure_uv FROM test1 ) m1 ON m0.pt = m1.pt LEFT JOIN ( SELECT pt ,exposure_uv FROM test1 ) m2 ON m0.pt = m2.pt ) c0 ORDER BY exposure_uv settings join_use_nulls = 1;
SELECT * FROM test FORMAT Null;
select a, b || b from (select [number] as a, toString(number) as b from system.numbers limit 2);
SELECT A.a = B.a, A.b = B.b, A.c = B.c, A.d = B.d, A.e = B.e FROM ( SELECT 0 AS a, groupBitmapMerge(bm) AS b , SUM(k) AS c, SUM(value) AS d, SUM(dummy.1) AS e FROM 01504_test) A ANY LEFT JOIN (SELECT 0 AS a, groupBitmapMerge(bm) AS b , SUM(k) AS c, SUM(value) AS d, SUM(dummy.1) AS e FROM 01504_test_memory) B USING a ORDER BY a;
SELECT A.a = B.a, A.b = B.b, A.c = B.c, A.d = B.d, A.e = B.e FROM ( SELECT 0 AS a, groupBitmapMerge(bm) AS b , SUM(k) AS c, SUM(value) AS d, SUM(dummy.1) AS e FROM 02416_test) A ANY LEFT JOIN (SELECT 0 AS a, groupBitmapMerge(bm) AS b , SUM(k) AS c, SUM(value) AS d, SUM(dummy.1) AS e FROM 02416_test_memory) B USING a ORDER BY a;
SELECT a.id, a.obj.* FROM t_json_analyzer FORMAT JSONEachRow;
select base.id as `base.id`, derived2.value2 as `derived2.value2`, derived1.value1 as `derived1.value1` from test_01600.base as base left join test_01600.derived2 as derived2 on base.id2 = derived2.id2 left join test_01600.derived1 as derived1 on base.id = derived1.id1;
select bitTest(0, 0) = 0, bitTest(1, 0) = 1, bitTest(1, 1) = 0, bitTest(0xff, 7) = 1;
SELECT c1.key, c1.name, c1.ref_valueF32, c1.valueF32, c1.ref_valueF32 - c1.valueF32 AS dF32, 'prev:', c2.key, c2.ref_valueF32 FROM codecTest as c1, codecTest as c2 WHERE dF32 != 0 AND c2.key = c1.key - 1 LIMIT 10;
SELECT c1.key, c1.name, c1.ref_valueF64, c1.valueF64, c1.ref_valueF64 - c1.valueF64 AS dF64, 'prev:', c2.key, c2.ref_valueF64 FROM codecTest as c1, codecTest as c2 WHERE dF64 != 0 AND c2.key = c1.key - 1 LIMIT 10;
SELECT cast(toDateTime64('1965-12-12 12:12:12.123', 3, 'UTC') as Decimal64(3));
SELECT cast(toDateTime64('1975-12-12 12:12:12.123', 3, 'UTC') as Decimal64(3));
SELECT color, timestamp FROM order_test1 GROUP BY color, timestamp ORDER BY color ASC, timestamp DESC;
SELECT COUNT() = 0 FROM (SELECT toDate('2019-01-01') AS day, day AS t FROM test_table PREWHERE t = '2020-01-03' WHERE t = '2020-01-03' GROUP BY t );
SELECT COUNT() = 0 FROM (SELECT toDate('2019-01-01') AS day1, day1 AS t FROM test_table PREWHERE t = '2020-01-03' WHERE t = '2020-01-03' GROUP BY t );
select dim , sum(idnum) from test_bm_join right join( select dim, bitmapOrCardinality(ids,ids2) as idnum from ( select dim, groupBitmapState(toUInt64(id)) as ids FROM test_bm where dim >2 group by dim ) A all right join ( select dim, groupBitmapState(toUInt64(id)) as ids2 FROM test_bm where dim < 2 group by dim ) B using(dim) ) C using(dim) group by dim;
select DISTINCT _partition_id from weird_partitions_02245 where d >= '2021-12-31 00:00:00' and d < '2022-01-01 00:00:00' ORDER BY _partition_id;
select DISTINCT _partition_id from weird_partitions_02245 where d >= '2022-01-01 00:00:00' and d1 >= '2021-12-31 00:00:00' and d1 < '2020-01-01 00:00:00' ORDER BY _partition_id;
select DISTINCT _partition_id from weird_partitions_02245 where d >= '2022-01-01 00:00:00' and d1 >= '2021-12-31 00:00:00' and d1 < '2022-01-01 00:00:00' ORDER BY _partition_id;
select DISTINCT _partition_id from weird_partitions_02245 where d1 >= '2021-12-31 00:00:00' and d1 < '2022-01-01 00:00:00' ORDER BY _partition_id;
select if(number > 1, number, null) as value, number as offset, neighbor(value, offset) as neighbor from numbers(3);
SELECT intDivOrZero( CAST(-1000, 'Int64') , CAST(1000, 'Int64') );
SELECT intDivOrZero( CAST(-1000, 'Int64') , CAST(1000, 'UInt64') );
SELECT least(toInt8(127), toInt128(0)) x, least(toInt8(127), toInt128(128)) x2, least(toInt8(-128), toInt128(0)) x3, least(toInt8(-128), toInt128(-129)) x4, greatest(toInt8(127), toInt128(0)) y, greatest(toInt8(127), toInt128(128)) y2, greatest(toInt8(-128), toInt128(0)) y3, greatest(toInt8(-128), toInt128(-129)) y4, toTypeName(x), toTypeName(y);
SELECT least(toInt8(127), toInt256(0)) x, least(toInt8(127), toInt256(128)) x2, least(toInt8(-128), toInt256(0)) x3, least(toInt8(-128), toInt256(-129)) x4, greatest(toInt8(127), toInt256(0)) y, greatest(toInt8(127), toInt256(128)) y2, greatest(toInt8(-128), toInt256(0)) y3, greatest(toInt8(-128), toInt256(-129)) y4, toTypeName(x), toTypeName(y);
SELECT least(toUInt64('18446744073709551615'), toUInt256(0)) x, least(toUInt64('18446744073709551615'), toUInt256('18446744073709551616')) x2, greatest(toUInt64('18446744073709551615'), toUInt256(0)) y, greatest(toUInt64('18446744073709551615'), toUInt256('18446744073709551616')) y2, toTypeName(x), toTypeName(y);
SELECT least(toUInt8(255), toUInt256(0)) x, least(toUInt8(255), toUInt256(256)) x2, greatest(toUInt8(255), toUInt256(0)) y, greatest(toUInt8(255), toUInt256(256)) y2, toTypeName(x), toTypeName(y);
SELECT product_name, group_name, price, FIRST_VALUE (price) OVER (PARTITION BY group_name ORDER BY product_name desc) AS price_per_group_per_alphab FROM products INNER JOIN product_groups USING (group_id) order by group_name, product_name desc;
SELECT product_name, group_name, price, LAST_VALUE (price) OVER (PARTITION BY group_name ORDER BY price RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS highest_price_per_group FROM products INNER JOIN product_groups USING (group_id) order by group_name, product_name;
SELECT product_name, group_name, price, row_number() OVER (PARTITION BY group_name ORDER BY price desc, product_name asc) rn FROM products INNER JOIN product_groups USING (group_id) ORDER BY group_name, rn;
SELECT product_name, group_name, price, rank() OVER (PARTITION BY group_name ORDER BY price) rank FROM products INNER JOIN product_groups USING (group_id) order by group_name, rank, price, product_name;
SELECT product_name, price, group_name, AVG(price) OVER (PARTITION BY group_name) FROM products INNER JOIN product_groups USING (group_id) order by group_name, product_name, price;
SELECT toDateTime64('1969-12-31 23:59:59.123', 3, 'UTC');
SELECT toTypeName(a), toTypeName(b) FROM strings;
SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d), toTypeName(e), toTypeName(f) FROM floats;
SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d), toTypeName(e), toTypeName(f), toTypeName(g), toTypeName(h) FROM ints;
SELECT "number", CASE "number" WHEN 3 THEN 55 WHEN 6 THEN 77 WHEN 9 THEN 95 ELSE CASE WHEN "number"=1 THEN 10 WHEN "number"=10 THEN 100 ELSE 555555 END END AS "LONG_COL_0" FROM `system`.numbers LIMIT 20;
SELECT "numbers"."number" FROM "system"."numbers" LIMIT 1;
SELECT "ta`ble".dummy, 'hello''world' AS "hel""lo" FROM system.one AS `ta``ble`;
SELECT $$ value1 value2 value3 $$;
SELECT $$$$;
SELECT $$VALUE$$;
SELECT $\xc3\x28$'\xc3\x28'$\xc3\x28$;
SELECT $doc$$do$ $ doc$ $doc $ $doco$$doc$, $doc$$do$ $ doc$ $doc $ $doco$$doc$;
SELECT $doc$$do$ $ doc$ $doc $ $doco$$doc$;
SELECT $doc$$doc$;
SELECT $doc$'\xc3\x28'$doc$;
SELECT $doc$'VALUE'$doc$;
SELECT $doc$VALUE$doc$;
SELECT $doc$ТЕСТ$doc$;
SELECT $doc$该类型的引擎$doc$;
SELECT $РАЗДЕЛИТЕЛЬ$VALUE$РАЗДЕЛИТЕЛЬ$;
SELECT $该类型的引擎$VALUE$该类型的引擎$;
SELECT ' Array(UInt32) | Array(UInt64) ';
SELECT ' # hello', 1;
SELECT ' * A UNION * B:';
SELECT ' * A UNION Event, Datetime B:';
select ' -1: ';
select ' 1:';
select ' 4294967290:';
select ' 4294967299:';
select ' = 1:';
SELECT ' DateTime | UInt64 ';
SELECT ' Event, Datetime A UNION * B:';
SELECT ' Event, Datetime A UNION Event, Datetime B:';
SELECT ' Int32 | UInt64 ';
SELECT ' Int64 | UInt64 ';
SELECT ' String | FixedString(16) ';
SELECT ' UInt32 | UInt64 ';
SELECT '!#$%&(*+,-./:<=>?@[^`{|}~' AS a FORMAT Markdown;
select '# byteSize';
SELECT '# Changing format_csv_null_representation';
SELECT '# Check with dense table';
select '# countSubstrings';
select '# countSubstringsCaseInsensitive';
select '# countSubstringsCaseInsensitiveUTF8';
SELECT '# format_csv_null_representation should initially be \\N';
SELECT '# Invocation with constants';
SELECT '# Invocation with non-constant addresses';
SELECT '# Invocation with non-constant prefixes';
SELECT '# Invocation with non-constants';
SELECT '# Mismatching IP versions is not an error.';
SELECT '# Unparsable arguments';
SELECT '#02136_scalar_subquery_1', (SELECT max(number) FROM numbers(1000)) as n;
SELECT '#02136_scalar_subquery_2', (SELECT max(number) FROM numbers(1000)) as n, (SELECT min(number) FROM numbers(1000)) as n2;
SELECT '#02136_scalar_subquery_3', (SELECT max(number) FROM numbers(1000)) as n, (SELECT max(number) FROM numbers(1000)) as n2;
SELECT '#1';
SELECT '#2';
SELECT '#3';
SELECT '#4';
select '#45218';
select '#45440';
SELECT '#5';
SELECT '' = ALL (SELECT toNullable(''));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('0.0.0.0')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('128.0.0.0')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('240.0.0.0')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('654f:3716::')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('8000::')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('::0')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('c000::')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('e000::')));
SELECT '' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('f000::')));
SELECT '' AS ascii, idnaDecode(ascii) AS unicode, idnaEncode(unicode) AS original, tryIdnaEncode(unicode) AS original_try;
SELECT '', ['\0'], [], singleValueOrNull(( SELECT '\0' ) ), [''];
SELECT '';
select '';
SELECT '(0, A) id = 11', count() FROM (SELECT id, sequenceNextNode('backward', 'tail')(dt, action, 1, action = 'A') AS next_node FROM test_sequenceNextNode WHERE id = 11 GROUP BY id HAVING next_node is NULL);
SELECT '(0, A) id = 11', count() FROM (SELECT id, sequenceNextNode('backward', 'tail')(dt, action, 1, action = 'A') AS next_node FROM test_sequenceNextNode_Nullable WHERE id = 11 GROUP BY id HAVING next_node is NULL);
SELECT '(0, A) id = 11', count() FROM (SELECT id, sequenceNextNode('forward', 'head')(dt, action, 1, action = 'A') AS next_node FROM test_sequenceNextNode WHERE id = 11 GROUP BY id HAVING next_node = 'B');
SELECT '(0, A) id = 11', count() FROM (SELECT id, sequenceNextNode('forward', 'head')(dt, action, 1, action = 'A') AS next_node FROM test_sequenceNextNode_Nullable WHERE id = 11 GROUP BY id HAVING next_node = 'B');
SELECT '(0, A->B->C) id = 11', count() FROM (SELECT id, sequenceNextNode('forward', 'head')(dt, action, 1, action = 'A', action = 'B', action = 'C') AS next_node FROM test_sequenceNextNode WHERE id = 11 GROUP BY id HAVING next_node = 'D');
SELECT '(0, A->B->C) id = 11', count() FROM (SELECT id, sequenceNextNode('forward', 'head')(dt, action, 1, action = 'A', action = 'B', action = 'C') AS next_node FROM test_sequenceNextNode_Nullable WHERE id = 11 GROUP BY id HAVING next_node = 'D');
select '(key, left array join n.x) in ((1, 1), (2, 2))';
select '(key, left array join n.x) in (1, 1)';
SELECT '*';
SELECT '** replaceOne() **';
SELECT '-1', maxMerge(x), length(maxMerge(x)) from (select CAST(unhex('ffffffff') || randomString(100500), 'AggregateFunction(max, String)') as x);
SELECT '-1';
SELECT '-1e-1' AS x, toDecimal128(x, 0);
SELECT '-1e-1' AS x, toDecimal32(x, 0);
SELECT '-1e-1' AS x, toDecimal64(x, 0);
SELECT '-1e-10' AS x, toDecimal32(x, 9);
SELECT '-1e-19' AS x, toDecimal64(x, 18);
SELECT '-1e-39' AS x, toDecimal128(x, 38);
SELECT '-1E9-1E9-1E9-1E9' AS x, toDecimal32(x, 0);
SELECT '-2', maxMerge(x), length(maxMerge(x)) from (select CAST(unhex('fffffffe') || randomString(100500), 'AggregateFunction(max, String)') as x);
SELECT '-2.610898982580138', '0.00916587538237954';
SELECT '-21474836.48', 10000000000., '', count(kbytes), '', 10.0001, toStartOfMinute(datetime) AS dt_m, 10, NULL FROM projection_test__fuzz_0 GROUP BY dt_m WITH ROLLUP WITH TOTALS ORDER BY count(retry_count / duration) ASC NULLS LAST, 100000000000000000000. ASC NULLS FIRST format Null;
SELECT '-28.740781574102936', '7.667329672103986e-133';
SELECT '-2^31', maxMerge(x), length(maxMerge(x)) from (select CAST(unhex('00000080') || randomString(100500), 'AggregateFunction(max, String)') as x);
SELECT '-> $1.00 <-' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT '-x' AS ascii, idnaDecode(ascii) AS unicode, idnaEncode(unicode) AS original, tryIdnaEncode(unicode) AS original_try;
SELECT '-†' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT '...const maps...';
SELECT '...int keys...';
SELECT '...string keys...';
SELECT '/none';
select '/some/cool/url' as url format JSONEachRow;
SELECT '0' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('654f:3716::')));
SELECT '0' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('::0')));
SELECT '0.0.0.0 is ipv4 string: ', isIPv4String('0.0.0.0');
SELECT '0.0.0.0 is ipv6 string: ', isIPv6String('0.0.0.0');
SELECT '0.000000000000000000000000000000000000001' AS x, toDecimal128(x, 38);
SELECT '0.0000000000000000001' AS x, toDecimal64(x, 18);
SELECT '0.0000000001' AS x, toDecimal32(x, 9);
SELECT '0.00339907162713746';
SELECT '0.02' GROUP BY GROUPING SETS (('6553.6'), (CAST('{"x" : 1}', 'Object(\'json\')'))) FORMAT Null;
SELECT '0.021378001462867';
SELECT '0.090773324285671';
SELECT '0.1' AS x, toDecimal128(x, 0);
SELECT '0.1' AS x, toDecimal64(x, 0);
SELECT '0.286';
SELECT '00000000-0000-01f8-9cb8-cb1b82fb3900' AS str, toUUID(str);
SELECT '00000000-0000-03f8-9cb8-cb1b82fb3900' AS str, CAST(str, 'UUID');
SELECT '0000:0000:0000:0000:0000:FFFF:C1FC:110A is ipv4 string: ', isIPv4String('0000:0000:0000:0000:0000:FFFF:C1FC:110A');
SELECT '0000:0000:0000:0000:0000:FFFF:C1FC:110A is ipv6 string: ', isIPv6String('0000:0000:0000:0000:0000:FFFF:C1FC:110A');
select '01231_log_queries_min_type w/ Settings/EXCEPTION_WHILE_PROCESSING', max(number) from system.numbers limit 1e6;
select '01231_log_queries_min_type/EXCEPTION_BEFORE_START';
select '01231_log_queries_min_type/EXCEPTION_WHILE_PROCESSING', max(number) from system.numbers limit 1e6;
select '01231_log_queries_min_type/QUERY_START';
SELECT '01234567-89ab-cdef-0123-456789abcdef' AS str, UUIDNumToString(UUIDStringToNum(str)), UUIDNumToString(UUIDStringToNum(toFixedString(str, 36)));
SELECT '01461_query_log_query_start_time_milliseconds_test';
SELECT '01461_query_thread_log_query_start_time_milliseconds_test';
SELECT '01473_metric_log_table_event_start_time_microseconds_test';
SELECT '01473_query_log_table_event_start_time_microseconds_test';
SELECT '01473_query_thread_log_table_event_start_time_microseconds_test';
SELECT '01473_text_log_table_event_start_time_microseconds_test';
SELECT '01473_trace_log_table_event_start_time_microseconds_test';
select '01546_log_queries_min_query_duration_ms-slow', sleep(0.4) format Null;
select '01547_query_log_current_database' from system.one format Null;
SELECT '01:02:03:04:05:06' AS mac_str, MACStringToNum(mac_str) AS mac_num, hex(mac_num), MACNumToString(mac_num) AS mac_str2, mac_str = mac_str2, MACStringToOUI(mac_str) AS oui_num, hex(oui_num), MACStringToOUI(substring(mac_str, 1, 8)) AS oui_num2, oui_num = oui_num2;
select '02005_log_formatted_queries.sql' from system.one;
select '02095_system_logs_hostname' from system.one format Null;
SELECT '0:0:0:0:0:0:0:0 is ipv4 string: ', isIPv4String('0:0:0:0:0:0:0:0');
SELECT '0:0:0:0:0:0:0:0 is ipv6 string: ', isIPv6String('0:0:0:0:0:0:0:0');
SELECT '1 DAY';
select '1 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(1)) t2 on x = xx or y = yy;
SELECT '1 MONTH';
SELECT '1 WEEK';
SELECT '1' != number FROM numbers(3);
SELECT '1' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('8000::')));
SELECT '1' == replaceRegexpAll(',,1', '^[,]*|[,]*$', '') x;
SELECT '1' == replaceRegexpAll(',,1,,', '^[,]*|[,]*$', '') x;
SELECT '1' == replaceRegexpAll('1,,', '^[,]*|[,]*$', '') x;
SELECT '1' == replaceRegexpOne(',,1', '^[,]*|[,]*$', '') x;
SELECT '1' > number FROM numbers(3);
SELECT '1' FROM numbers(10) INTERSECT DISTINCT SELECT '1' FROM numbers(10);
SELECT '1' FROM numbers(10) INTERSECT SELECT '1' FROM numbers(10);
SELECT '1' IN (SELECT 1);
SELECT '1';
SELECT '1,,' == replaceRegexpOne(',,1,,', '^[,]*|[,]*$', '') x;
SELECT '1,,' == replaceRegexpOne('1,,', '^[,]*|[,]*$', '') x;
select '1,..,2';
SELECT '1,a1,1', arrayEnumerateUniqRanked(1,a1,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a1,1,a2,1', arrayEnumerateUniqRanked(1,a1,1,a2,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a2,1', arrayEnumerateUniqRanked(1,a2,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a3,1', arrayEnumerateUniqRanked(1,a3,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a3,1,a4,1', arrayEnumerateUniqRanked(1,a3,1,a4,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a3,1,a4,2', arrayEnumerateUniqRanked(1,a3,1,a4,2) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a3,2,a4,1', arrayEnumerateUniqRanked(1,a3,2,a4,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a3,2,a4,2', arrayEnumerateUniqRanked(1,a3,2,a4,2) FROM arrays_test ORDER BY a1, a2;
SELECT '1,a4,1', arrayEnumerateUniqRanked(1,a4,1) FROM arrays_test ORDER BY a1, a2;
SELECT '1. test simple distinct';
SELECT '1..20:';
SELECT '10 DAY';
SELECT '10' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffc0::')));
SELECT '100' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:f000:0')));
SELECT '100' AS number FROM d_numbers AS n WHERE n.number = 100 LIMIT 2 SETTINGS max_threads = 1, prefer_localhost_replica=1;
SELECT '100' AS number FROM d_numbers AS n WHERE n.number = 100 LIMIT 2;
select '10000000';
SELECT '1000000000' AS x, toDecimal32(x, 0);
SELECT '101' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:f800:0')));
SELECT '102' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fc00:0')));
SELECT '103' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fe00:0')));
SELECT '104' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ff00:0')));
SELECT '105' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ff80:0')));
SELECT '106' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffc0:0')));
SELECT '107' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffe0:0')));
SELECT '108' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fff0:0')));
SELECT '109' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fff8:0')));
SELECT '11' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffe0::')));
SELECT '110' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fffc:0')));
SELECT '111' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:fffe:0')));
select '1111' as name from system.numbers_mt order by name limit 10000 format Null;
SELECT '112' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:0')));
SELECT '113' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:8000')));
SELECT '114' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:c000')));
SELECT '115' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:e000')));
SELECT '116' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:f000')));
SELECT '117' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:f800')));
SELECT '118' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fc00')));
SELECT '119' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00')));
SELECT '12' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fff0::')));
SELECT '120' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00')));
SELECT '121' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80')));
SELECT '122' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffc0')));
SELECT '123' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffe0')));
SELECT '124' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0')));
SELECT '125' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff8')));
SELECT '126' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc')));
SELECT '127' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe')));
SELECT '127' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')));
SELECT '127.0.0.0/16' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.255.127')));
SELECT '127.0.0.0/24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.0.0')));
SELECT '127.0.0.0/24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.0.127')));
SELECT '127.0.0.1 is ipv4 string: ', isIPv4String('127.0.0.1');
SELECT '127.0.0.1 is ipv6 string: ', isIPv6String('127.0.0.1');
SELECT '127.0.0.1';
SELECT '127.0.0.1/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.0.0.1')));
SELECT '127.0.0.{1,2}';
SELECT '127.255.0.0/16' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.127.127')));
SELECT '127.255.128.0/24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.128.127')));
SELECT '127.255.128.0/24' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.128.9')));
SELECT '127.255.128.10/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.128.10')));
SELECT '127.255.128.128/25' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.128.255')));
SELECT '127.255.255.128/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'prefix', tuple(IPv4StringToNum('127.255.255.128')));
SELECT '128' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')));
SELECT '128.0,0.1' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.248.0.0')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.252.0.0')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.255.254.0')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fff8::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffc::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffe::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:8000::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:c000::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:e000::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f000::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f800::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fc00::')));
SELECT '13' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fe00::')));
SELECT '14' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffc::')));
SELECT '14.971190998235835', '5.898143508382202e-44';
select '15 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(15)) t2 on x = xx or y = yy;
SELECT '15 MINUTE';
SELECT '15' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fffe::')));
select '16 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(16)) t2 on x = xx or y = yy;
SELECT '16' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff::')));
select '17 any left', * from (select 1 as x, 2 as y) t1 any left join (select 1 as xx, 2 as yy from numbers(17)) t2 on x = xx or y = yy;
select '17 any right', * from (select 1 as x, 2 as y) t1 any right join (select 1 as xx, 2 as yy from numbers(17)) t2 on x = xx or y = yy;
select '17 full', * from (select 1 as x, 2 as y) t1 full join (select 1 as xx, 2 as yy from numbers(17)) t2 on x = xx or y = yy;
select '17 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(17)) t2 on x = xx or y = yy;
select '17 right', * from (select 1 as x, 2 as y) t1 right join (select 1 as xx, 2 as yy from numbers(17)) t2 on x = xx or y = yy;
SELECT '17' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:8000::')));
SELECT '18' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:c000::')));
SELECT '19' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:e000::')));
SELECT '192.168.0.91 is ipv4 string: ', isIPv4String('192.168.0.91');
SELECT '192.168.0.91 is ipv6 string: ', isIPv6String('192.168.0.91');
SELECT '1947 #1 CHECK - FALSE' as test, ProfileEvents['SleepFunctionCalls'] as sleep_calls, ProfileEvents['SleepFunctionMicroseconds'] as sleep_microseconds FROM system.query_log WHERE query like '%CREATE MATERIALIZED VIEW src2dst_false%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT '1947 #1 CHECK - TRUE' as test, ProfileEvents['SleepFunctionCalls'] as sleep_calls, ProfileEvents['SleepFunctionMicroseconds'] as sleep_microseconds FROM system.query_log WHERE query like '%CREATE MATERIALIZED VIEW src2dst_true%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT '1947 #2 CHECK - FALSE' as test, ProfileEvents['SleepFunctionCalls'] as sleep_calls, ProfileEvents['SleepFunctionMicroseconds'] as sleep_microseconds FROM system.query_log WHERE query like '%INSERT into src SELECT number + 200 as id, 1 FROM numbers(2)%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT '1947 #2 CHECK - TRUE' as test, ProfileEvents['SleepFunctionCalls'] as sleep_calls, ProfileEvents['SleepFunctionMicroseconds'] as sleep_microseconds FROM system.query_log WHERE query like '%INSERT into src SELECT number + 100 as id, 1 FROM numbers(2)%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT '1947 #3 CHECK - FALSE' as test, ProfileEvents['SleepFunctionCalls'] as sleep_calls, ProfileEvents['SleepFunctionMicroseconds'] as sleep_microseconds FROM system.query_log WHERE query like '%DESCRIBE ( SELECT ''1947 #3 QUERY - FALSE'',%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT '1947 #3 CHECK - TRUE' as test, ProfileEvents['SleepFunctionCalls'] as sleep_calls, ProfileEvents['SleepFunctionMicroseconds'] as sleep_microseconds FROM system.query_log WHERE query like '%DESCRIBE ( SELECT ''1947 #3 QUERY - TRUE'',%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
select '1991-01-02' > toDate32('1990-02-01');
SELECT '1e-1' AS x, toDecimal128(x, 0);
SELECT '1e-1' AS x, toDecimal64(x, 0);
SELECT '1e-10' AS x, toDecimal32(x, 9);
SELECT '1e-19' AS x, toDecimal64(x, 18);
SELECT '1e-39' AS x, toDecimal128(x, 38);
SELECT '1E-7' AS x, toDecimal32(x, 0);
SELECT '1e-7' AS x, toDecimal32(x, 0);
SELECT '1E-8' AS x, toDecimal32(x, 0);
SELECT '1E-9' AS x, toDecimal32(x, 10);
SELECT '1E-9' AS x, toDecimal32(x, 9);
SELECT '1e9' AS x, toDecimal32(x, 0);
SELECT '1M with 0', length(maxMerge(x)) from (select CAST(unhex('00001000') || randomString(0x00100000 - 1) || '\0', 'AggregateFunction(max, String)') as x);
SELECT '1M without 0', length(maxMerge(x)) from (select CAST(unhex('00001000') || randomString(0x00100000 - 1) || 'x', 'AggregateFunction(max, String)') as x);
SELECT '2' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('c000::')));
SELECT '2' FROM numbers(10) EXCEPT DISTINCT SELECT '1' FROM numbers(5);
SELECT '2' FROM numbers(10) EXCEPT SELECT '1' FROM numbers(5);
SELECT '2';
SELECT '2,a3,1,a4,2', arrayEnumerateUniqRanked(2,a3,1,a4,2) FROM arrays_test ORDER BY a1, a2;
SELECT '2,a3,2,a4,1', arrayEnumerateUniqRanked(2,a3,2,a4,1) FROM arrays_test ORDER BY a1, a2;
SELECT '2,a3,2,a4,2', arrayEnumerateUniqRanked(2,a3,2,a4,2) FROM arrays_test ORDER BY a1, a2;
SELECT '2. test distinct with subquery alias';
SELECT '20' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f000::')));
SELECT '20..1:';
select '20000000';
SELECT '2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D is ipv4 string: ', isIPv4String('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D');
SELECT '2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D is ipv6 string: ', isIPv6String('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D');
SELECT '2001:4860:4860::8888' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT '2001:db8::/32' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'prefix', tuple(IPv6StringToNum('2001:db8::1')));
SELECT '2010-10-10'::Date AS c;
SELECT '2010-10-10'::DateTime('UTC') AS c;
SELECT '2015-02-03 04:05:06' < materialize(toDateTime('2015-02-03 05:06:07'));
SELECT '2015-02-03 04:05:06' < toDateTime('2015-02-03 05:06:07');
SELECT '2015-02-05' <= toDate('2015-02-04');
SELECT '2015-02-05' > materialize(toDate('2015-02-04'));
SELECT '2015-02-05' > toDate('2015-02-04');
SELECT '2015-02-05' >= materialize(toDate('2015-02-04'));
SELECT '2015-02-05' >= toDate('2015-02-04');
SELECT '2022-10-11'::Date + tuple(INTERVAL 1 DAY);
SELECT '2022-10-11'::Date - tuple(INTERVAL 1 DAY);
SELECT '2023-10-23' + INTERVAL 1 DAY, '2023-10-23 12:34:56.123' + INTERVAL 1 DAY;
SELECT '2023-10-23' - INTERVAL 1 HOUR, '2023-10-23 12:34:56.123' - INTERVAL 1 HOUR;
SELECT '2023-10-23' - INTERVAL 1 MICROSECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 MICROSECOND;
SELECT '2023-10-23' - INTERVAL 1 MILLISECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 MILLISECOND;
SELECT '2023-10-23' - INTERVAL 1 MINUTE, '2023-10-23 12:34:56.123' - INTERVAL 1 MINUTE;
SELECT '2023-10-23' - INTERVAL 1 MONTH, '2023-10-23 12:34:56.123' - INTERVAL 1 MONTH;
SELECT '2023-10-23' - INTERVAL 1 NANOSECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 NANOSECOND;
SELECT '2023-10-23' - INTERVAL 1 QUARTER, '2023-10-23 12:34:56.123' - INTERVAL 1 QUARTER;
SELECT '2023-10-23' - INTERVAL 1 SECOND, '2023-10-23 12:34:56.123' - INTERVAL 1 SECOND;
SELECT '2023-10-23' - INTERVAL 1 WEEK, '2023-10-23 12:34:56.123' - INTERVAL 1 WEEK;
SELECT '2023-10-23' - INTERVAL 1 YEAR, '2023-10-23 12:34:56.123' - INTERVAL 1 YEAR;
SELECT '21' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:f800::')));
SELECT '22' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fc00::')));
SELECT '223.0', '0.5426959774289482';
select '2283-11-11' > toDate32('1925-02-01');
select '2283-11-11' >= toDate32('2283-11-10');
SELECT '23' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:fe00::')));
SELECT '47' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:fffe::')));
SELECT '47_KO', finalizeAggregation(CAST(unhex('2F0000003031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536010000000000000000'), 'AggregateFunction(argMax, String, UInt64)'));
SELECT '48' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff::')));
SELECT '48_KO', finalizeAggregation(CAST(unhex('30000000303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637010000000000000000'), 'AggregateFunction(argMax, String, UInt64)'));
SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:8000::')));
SELECT '49' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('ffff:ffff:ffff:c000::')));
select '5 left', * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(5)) t2 on x = xx or y = yy;
SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('248.0.0.0')));
SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('252.0.0.0')));
SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('255.240.0.0')));
SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('f800::')));
SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fc00::')));
SELECT '5' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('fe00::')));
SELECT '= 127.0.0.1', ipv4_ FROM ipv4_test WHERE ipv4_ = toIPv4('127.0.0.1') ORDER BY ipv4_;
SELECT '= 127.0.0.1', ipv6_ FROM ipv6_test WHERE ipv6_ = IPv4ToIPv6(toIPv4('127.0.0.1')) ORDER BY ipv6_;
SELECT '=';
select '=';
SELECT '\\w' LIKE '\\w%';
SELECT '\\w' LIKE '\\w';
SELECT '\\xyz\\' LIKE '\\\\%_%\\\\';
SELECT '\\xyz\\' LIKE '\\\\_%_\\\\';
SELECT '\\xyz\\' LIKE '\\\\___\\\\';
SELECT '\i' LIKE '%\i%';
SELECT '\i' LIKE '%\i';
SELECT '\i' LIKE '\i%';
SELECT '\i' LIKE '\i';
SELECT '\w' LIKE '%\w%';
SELECT '\w' LIKE '%\w';
SELECT '\w' LIKE '\w%';
SELECT '\w' LIKE '\w';
SELECT '\x01\x00'::AggregateFunction(groupBitmap, UInt32);
SELECT '\x30 \xD0\xA0';
SELECT '\xED\x20\xA8' AS s FORMAT JSON;
SELECT '\xED\x20\xA8' AS s FORMAT JSONColumns;
SELECT '\xED\x20\xA8' AS s FORMAT JSONColumnsWithMetadata;
SELECT '\xED\x20\xA8' AS s FORMAT JSONCompact;
SELECT '\xED\x20\xA8' AS s FORMAT JSONCompactColumns;
SELECT '\xED\x20\xA8' AS s FORMAT JSONCompactEachRow;
SELECT '\xED\x20\xA8' AS s FORMAT JSONEachRow;
SELECT '\xED\x20\xA8' AS s FORMAT JSONObjectEachRow;
SELECT '\xED\x20\xA8' AS s FORMAT XML;
SELECT 'a' < 'a\0b', 'a' > 'a\0b';
SELECT 'a' AS arr1, 2 AS arr2, round(arrayJaccardIndex(arr1, arr2), 2);
SELECT 'a' AS key, 'b' as value GROUP BY ignore(1) WITH CUBE;
SELECT 'a' AS key, 'b' as value GROUP BY ignore(1);
SELECT 'a' AS key, 'b' as value GROUP BY key WITH CUBE SETTINGS allow_experimental_analyzer = 0;
SELECT 'a' AS key, 'b' as value GROUP BY key WITH CUBE SETTINGS allow_experimental_analyzer = 1;
SELECT 'a' AS key, 'b' as value GROUP BY key;
SELECT 'A' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'a' IN (SELECT 1) SETTINGS transform_null_in = 1;
SELECT 'a' UNION ALL (SELECT 'a' UNION ALL SELECT 'a' UNION SELECT 'a');
SELECT 'a' UNION ALL SELECT 'a' UNION ALL SELECT 'a' UNION SELECT 'a';
SELECT 'a' UNION SELECT 'a' UNION SELECT 'a' UNION ALL SELECT'a';
SELECT 'a', -x FROM primary_key WHERE -x < -3;
SELECT 'A';
select 'a1' as _file, * from test_02302 where _file like '%1' ORDER BY a;
SELECT 'a1,a2 1', arrayEnumerateUniqRanked(a1,a2) FROM arrays_test ORDER BY a1, a2;
SELECT 'a1,a2 12', arrayEnumerateUniqRanked(a1,a2) FROM arrays_test ORDER BY a1, a2;
SELECT 'a1,a2 n', arrayEnumerateUniqRanked(a1,a2) FROM arrays_test ORDER BY a1, a2;
SELECT 'a1,a2 n2', arrayEnumerateUniqRanked(a1,a2) FROM arrays_test ORDER BY a1, a2;
SELECT 'a3,a4 1..1', arrayEnumerateUniqRanked(a3,a4) FROM arrays_test ORDER BY a3, a4;
SELECT 'a3,a4 1..n', arrayEnumerateUniqRanked(a3,a4) FROM arrays_test ORDER BY a3, a4;
SELECT 'a\0\0\0\0' < 'a\0\0\0', 'a\0\0\0\0' > 'a\0\0\0';
SELECT 'a\0b' LIKE 'a%\0b';
SELECT 'a\0b' LIKE 'a\0b';
SELECT 'a\0b' LIKE 'a_b';
SELECT 'a\tb\nc\td' AS x FORMAT Vertical;
SELECT 'a\xFF\xFEb' LIKE '%a\xFF\xFEb';
SELECT 'a\xFFb' LIKE '%a\xFF\xFEb';
SELECT 'a\xFFb' LIKE 'a%\xFF\xFEb';
SELECT 'a\xFFb' LIKE 'a%\xFFb';
SELECT 'aaaa' == trim(both 'b ' FROM 'b aaaabb ') x;
SELECT 'aaaabb ' == trim(leading 'b ' FROM 'b aaaabb ') x;
SELECT 'ab' REGEXP 'a.*b';
SELECT 'ab\0c' < 'ab\0d', 'ab\0c' > 'ab\0d';
SELECT 'ab\ndef' ILIKE '%Abc%def%';
SELECT 'ab\ndef' LIKE '%abc%def%';
SELECT 'abc\n\ndeF' ILIKE '%abc%def%';
SELECT 'abc\n\ndef' LIKE '%abc%def%';
SELECT 'abc\n\ntdef' ILIKE '%abc%deF%';
SELECT 'abc\n\ntdef' LIKE '%abc%def%';
SELECT 'Abc\nDef' ILIKE '%abc%def%';
SELECT 'abc\ndef' LIKE '%abc%def%';
SELECT 'aBc\nef' ILIKE '%ABC%DEF%';
SELECT 'abc\nef' LIKE '%abc%def%';
SELECT 'Abc\nt\ndef' ILIKE '%abc%def%';
SELECT 'abc\nt\ndef' LIKE '%abc%def%';
SELECT 'abc\ntdef' ILIKE '%abc%def%';
SELECT 'abc\ntdef' LIKE '%abc%def%';
SELECT 'ABCDDEF' ILIKE '%abc%def%';
SELECT 'abcdef' ILIKE '%aBc%def%';
SELECT 'abcdef' LIKE '%abc%def%';
SELECT 'abct\n\ndef' ILIKE '%abc%def%';
SELECT 'abct\n\ndef' LIKE '%abc%def%';
SELECT 'abct\ndef' ILIKE '%abc%dEf%';
SELECT 'abct\ndef' LIKE '%abc%def%';
SELECT 'abctdef' LIKE '%abc%def%';
select 'Abs(Offset) > block';
SELECT 'abæcdöef' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'ACTUAL LOG CONTENT:';
SELECT 'Additional test';
SELECT 'aes-128-cbc' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-128-cbc' as mode, decrypt(mode, encrypt(mode, input, key16, iv), key16, iv) == input FROM encryption_test;
SELECT 'aes-128-cbc' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-128-cbc' as mode, hex(encrypt(mode, input, key16, iv)) FROM encryption_test;
SELECT 'aes-128-ctr' as mode, decrypt(mode, encrypt(mode, input, key16, iv), key16, iv) == input FROM encryption_test;
SELECT 'aes-128-ctr' as mode, hex(encrypt(mode, input, key16, iv)) FROM encryption_test;
SELECT 'aes-128-ecb' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-128-ecb' as mode, decrypt(mode, encrypt(mode, input, key16), key16) == input FROM encryption_test;
SELECT 'aes-128-ecb' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-128-ecb' as mode, hex(encrypt(mode, input, key16)) FROM encryption_test;
SELECT 'aes-128-gcm' as mode, decrypt(mode, encrypt(mode, input, key16, iv), key16, iv) == input FROM encryption_test;
SELECT 'aes-128-gcm' as mode, decrypt(mode, encrypt(mode, input, key16, iv, 'AAD'), key16, iv, 'AAD') == input FROM encryption_test;
SELECT 'aes-128-gcm' as mode, hex(encrypt(mode, input, key16, iv)) FROM encryption_test;
SELECT 'aes-128-gcm' as mode, hex(encrypt(mode, input, key16, iv, 'AAD')) FROM encryption_test;
SELECT 'aes-128-ofb' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-128-ofb' as mode, decrypt(mode, encrypt(mode, input, key16, iv), key16, iv) == input FROM encryption_test;
SELECT 'aes-128-ofb' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-128-ofb' as mode, hex(encrypt(mode, input, key16, iv)) FROM encryption_test;
SELECT 'aes-192-cbc' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-192-cbc' as mode, decrypt(mode, encrypt(mode, input, key24, iv), key24, iv) == input FROM encryption_test;
SELECT 'aes-192-cbc' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-192-cbc' as mode, hex(encrypt(mode, input, key24, iv)) FROM encryption_test;
SELECT 'aes-192-ctr' as mode, decrypt(mode, encrypt(mode, input, key24, iv), key24, iv) == input FROM encryption_test;
SELECT 'aes-192-ctr' as mode, hex(encrypt(mode, input, key24, iv)) FROM encryption_test;
SELECT 'aes-192-ecb' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-192-ecb' as mode, decrypt(mode, encrypt(mode, input, key24), key24) == input FROM encryption_test;
SELECT 'aes-192-ecb' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-192-ecb' as mode, hex(encrypt(mode, input, key24)) FROM encryption_test;
SELECT 'aes-192-gcm' as mode, decrypt(mode, encrypt(mode, input, key24, iv), key24, iv) == input FROM encryption_test;
SELECT 'aes-192-gcm' as mode, decrypt(mode, encrypt(mode, input, key24, iv, 'AAD'), key24, iv, 'AAD') == input FROM encryption_test;
SELECT 'aes-192-gcm' as mode, hex(encrypt(mode, input, key24, iv)) FROM encryption_test;
SELECT 'aes-192-gcm' as mode, hex(encrypt(mode, input, key24, iv, 'AAD')) FROM encryption_test;
SELECT 'aes-192-ofb' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-192-ofb' as mode, decrypt(mode, encrypt(mode, input, key24, iv), key24, iv) == input FROM encryption_test;
SELECT 'aes-192-ofb' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-192-ofb' as mode, hex(encrypt(mode, input, key24, iv)) FROM encryption_test;
SELECT 'aes-256-cbc' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-256-cbc' as mode, decrypt(mode, encrypt(mode, input, key32, iv), key32, iv) == input FROM encryption_test;
SELECT 'aes-256-cbc' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-256-cbc' as mode, hex(encrypt(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-256-ctr' as mode, decrypt(mode, encrypt(mode, input, key32, iv), key32, iv) == input FROM encryption_test;
SELECT 'aes-256-ctr' as mode, hex(encrypt(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-256-ecb' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-256-ecb' as mode, decrypt(mode, encrypt(mode, input, key32), key32) == input FROM encryption_test;
SELECT 'aes-256-ecb' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-256-ecb' as mode, hex(encrypt(mode, input, key32)) FROM encryption_test;
SELECT 'aes-256-gcm' as mode, decrypt(mode, encrypt(mode, input, key32, iv), key32, iv) == input FROM encryption_test;
SELECT 'aes-256-gcm' as mode, decrypt(mode, encrypt(mode, input, key32, iv, 'AAD'), key32, iv, 'AAD') == input FROM encryption_test;
SELECT 'aes-256-gcm' as mode, hex(encrypt(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-256-gcm' as mode, hex(encrypt(mode, input, key32, iv, 'AAD')) FROM encryption_test;
SELECT 'aes-256-ofb' as mode, aes_decrypt_mysql(mode, aes_encrypt_mysql(mode, input, key, iv), key, iv) == input FROM encryption_test;
SELECT 'aes-256-ofb' as mode, decrypt(mode, encrypt(mode, input, key32, iv), key32, iv) == input FROM encryption_test;
SELECT 'aes-256-ofb' as mode, hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes-256-ofb' as mode, hex(encrypt(mode, input, key32, iv)) FROM encryption_test;
SELECT 'aes_decrypt_mysql';
SELECT 'Africa/El_Aaiun', rand() as r, toHour(toDateTime(r, 'Africa/El_Aaiun') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'Africa/El_Aaiun', toDateTime('2020-01-02 03:04:05', 'Africa/El_Aaiun') AS x, toStartOfDay(x), toHour(x);
SELECT 'After add statistic';
SELECT 'After database reattachement the table is back (it was detached temporary)';
SELECT 'After database reattachement the table is still absent (it was detached permamently)';
SELECT 'After detach:';
SELECT 'After DROP PARTITION:';
SELECT 'After drop statistic';
SELECT 'After insert';
SELECT 'After materialize statistic';
SELECT 'After merge';
SELECT 'after old OPTIMIZE DEDUPLICATE';
SELECT 'After rename';
SELECT 'After restart';
SELECT 'after_implicit_txn_in_query_settings_target', count() FROM target;
SELECT 'after_implicit_txn_in_session_landing', count() FROM landing;
SELECT 'after_implicit_txn_in_session_target', count() FROM target;
SELECT 'after_transaction_landing', count() FROM landing;
SELECT 'after_transaction_target', count() FROM target;
select 'AggregateFunctionTopKGenericData';
SELECT 'Aggregating Merge Tree';
SELECT 'Alias setting prefer_column_name_to_alias';
SELECT 'ALIAS';
select 'alias1';
select 'alias2';
SELECT 'alias2alias';
SELECT 'Aliases to columns';
SELECT 'Aliases to constants';
SELECT 'all full';
SELECT 'all inner';
SELECT 'all left';
SELECT 'ALL main_table_01818', count() FROM main_table_01818;
SELECT 'all right';
SELECT 'All tests above must return 1, all tests below return something.';
SELECT 'all tests passed';
SELECT 'ALL tmp_table_01818', count() FROM tmp_table_01818;
SELECT 'all' UNION SELECT 'all' UNION ALL SELECT 'all';
SELECT 'all';
select 'all';
SELECT 'allColumns';
SELECT 'allow_experimental_analyzer';
SELECT 'alt';
select 'alter column, NULL modifier is not allowed';
SELECT 'AMAZON' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT 'And detach permanently again to check how database drop will behave';
SELECT 'And we can detach it permanently';
SELECT 'And we can not detach it permanently';
SELECT 'anti left';
SELECT 'anti right';
SELECT 'any inner (rev)';
SELECT 'any inner';
SELECT 'any left (rev)';
SELECT 'any left';
SELECT 'any right (rev)';
SELECT 'any right';
select 'any_join_distinct_right_table_keys = 0';
select 'any_join_distinct_right_table_keys = 1';
SELECT 'APPLY transformer';
SELECT 'arbitrary values in all 4 quarters';
SELECT 'Array avg ', (arrayAvg(array(1,2,3,4,5,6)));
SELECT 'Array max ', (arrayMax(array(1,2,3,4,5,6)));
SELECT 'Array min ', (arrayMin(array(1,2,3,4,5,6)));
SELECT 'Array product with constant column';
SELECT 'Array product with non constant column';
SELECT 'Array sum ', (arraySum(array(1,2,3,4,5,6)));
select 'Array', blockSerializedSize(['foo']);
SELECT 'Array';
SELECT 'array-join';
select 'arrayEnumerateUniq(a1, a2) =';
SELECT 'arrayEnumerateUniqRanked(1,a1,1,a2,1) =';
SELECT 'ArrayFirst constant predicate';
SELECT 'ArrayFirst non constant predicate';
SELECT 'ArrayFirst with Null';
SELECT 'ArrayFirstIndex constant predicate';
SELECT 'ArrayFirstIndex non constant predicate';
SELECT 'ArrayLast constant predicate';
SELECT 'ArrayLast non constant predicate';
SELECT 'ArrayLast with Null';
SELECT 'ArrayLastIndex constant predicate';
SELECT 'ArrayLastIndex non constant predicate';
select 'arrayPopBack(arr1)';
select 'arrayPopFront(arr1)';
select 'arrayPushBack([1, 2, 3], l)';
select 'arrayPushBack([1, 2, 3], nl)';
select 'arrayPushBack([a, b, c], val)';
select 'arrayPushBack([a, b, c], val2)';
select 'arrayPushBack(arr1, 0.1)';
select 'arrayPushBack(arr1, 1)';
select 'arrayPushBack(arr1, l)';
select 'arrayPushBack(arr1, nl)';
select 'arrayPushBack(arr1, val)';
select 'arrayPushBack(arr1, val2)';
select 'arrayPushFront([1, 2, 3], l)';
select 'arrayPushFront([1, 2, 3], nl)' from array_functions;
select 'arrayPushFront([a, b, c], val)';
select 'arrayPushFront([a, b, c], val2)';
select 'arrayPushFront(arr1, 0.1)';
select 'arrayPushFront(arr1, 1)';
select 'arrayPushFront(arr1, l)';
select 'arrayPushFront(arr1, nl)';
select 'arrayPushFront(arr1, val)';
select 'arrayPushFront(arr1, val2)';
SELECT 'arrays';
select 'arraySlice(arr1, -4, -1)';
select 'arraySlice(arr1, -4, 2)';
select 'arraySlice(arr1, -4, l)';
select 'arraySlice(arr1, -4, nl)';
select 'arraySlice(arr1, 2, -4)';
select 'arraySlice(arr1, 2, 4)';
select 'arraySlice(arr1, 2, l)';
select 'arraySlice(arr1, 2, nl)';
select 'arraySlice(arr1, no, -2)';
select 'arraySlice(arr1, no, 2)';
select 'arraySlice(arr1, no, nl)';
select 'arraySlice(arr1, o, -2)';
select 'arraySlice(arr1, o, 2)';
select 'arraySlice(arr1, o, l)';
select 'asc nulls first, asc';
select 'asc nulls first, desc';
select 'asc nulls last, asc';
select 'asc nulls last, desc';
SELECT 'Asia/Pyongyang', rand() as r, toHour(toDateTime(r, 'Asia/Pyongyang') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'Asia/Pyongyang', toDateTime('2020-01-02 03:04:05', 'Asia/Pyongyang') AS x, toStartOfDay(x), toHour(x);
select 'asof on';
select 'asof using';
SELECT 'At most two index arguments';
SELECT 'atomic after rename:';
SELECT 'ATTACH FROM';
select 'aXb' like 'a_b', 'aXb' like 'a\_b', 'a_b' like 'a\_b', 'a_b' like 'a\\_b';
SELECT 'a{' AS x, x LIKE (concat('%', x) AS pat), materialize(x) LIKE pat;
SELECT 'a{' AS x, x LIKE (concat('%', x, '%') AS pat), materialize(x) LIKE pat;
SELECT 'a{' AS x, x LIKE (concat(x, '%') AS pat), materialize(x) LIKE pat;
SELECT 'a{' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
SELECT 'a{a' AS x, x LIKE (concat('%', x) AS pat), materialize(x) LIKE pat;
SELECT 'a{a' AS x, x LIKE (concat('%', x, '%') AS pat), materialize(x) LIKE pat;
SELECT 'a{a' AS x, x LIKE (concat(x, '%') AS pat), materialize(x) LIKE pat;
SELECT 'a{a' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
SELECT 'a}' AS x, x LIKE (concat('%', x) AS pat), materialize(x) LIKE pat;
SELECT 'a}' AS x, x LIKE (concat('%', x, '%') AS pat), materialize(x) LIKE pat;
SELECT 'a}' AS x, x LIKE (concat(x, '%') AS pat), materialize(x) LIKE pat;
SELECT 'a}' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
SELECT 'a}a' AS x, x LIKE (concat('%', x) AS pat), materialize(x) LIKE pat;
SELECT 'a}a' AS x, x LIKE (concat(x, '%') AS pat), materialize(x) LIKE pat;
SELECT 'a}a' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
SELECT 'aяb' LIKE 'a_b';
SELECT 'b aaaa' == trim(trailing 'b ' FROM 'b aaaabb ') x;
SELECT 'b', -x FROM primary_key WHERE -x < -2;
SELECT 'B';
SELECT 'Bahnhof München-Ost' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
select 'basic';
SELECT 'Before DROP PARTITION:';
SELECT 'big match';
select 'Block(UInt32)', blockSerializedSize(number) from numbers(2);
select 'blocks';
SELECT 'Bloom filter on non-sort key';
SELECT 'Bloom filter on sort key';
SELECT 'both nullable';
SELECT 'bug with constant columns in join keys';
SELECT 'byteHammingDistance', s1, s2, byteHammingDistance(s1, s2) FROM t ORDER BY ALL;
select 'byteSize for complex fields';
select 'byteSize for constants';
select 'byteSize for int array of arrays';
select 'byteSize for numbers #0';
select 'byteSize for numbers #1';
select 'byteSize for others: Nullable, Tuple, LowCardinality';
select 'byteSize for simple array';
select 'byteSize for string array of arrays';
select 'byteSize for strings';
SELECT 'c', -x FROM primary_key WHERE -x < -1;
SELECT 'C';
SELECT 'Cache dictionary';
SELECT 'CacheDictionary';
SELECT 'can attach with full syntax';
SELECT 'can attach with short syntax';
SELECT 'can not attach with bad uuid';
SELECT 'can not create table with same name as detached permanently';
SELECT 'can not detach permanently the table which is already detached (temporary)';
SELECT 'Can not remove full duplicates';
SELECT 'can not replace with the other table';
SELECT 'Case insensitive';
select 'case insensitive';
select 'case sensitive';
SELECT 'Cast';
SELECT 'CD' FROM sequence GROUP BY userID HAVING sequenceMatch('(?1)(?t>=10000000000000)(?2)')(EventTime, eventType = 'C', eventType = 'D');
SELECT 'ceil() : ', toDecimal128('1234567890.123456789', 20) AS x, -x AS y, ceil(x), ceil(y), ceil(x, -3), ceil(y, -3);
SELECT 'ceil() : ', toDecimal256('1234567890.123456789', 40) AS x, -x AS y, ceil(x), ceil(y), ceil(x, -3), ceil(y, -3);
select 'char';
SELECT 'Check `exponentialTimeDecayed.*` supports sliding windows';
SELECT 'Check `exponentialTimeDecayedMax` works with negative values';
SELECT 'Check asan bug';
SELECT 'Check bug found fuzzing';
SELECT 'Check bug with hashing of const integer values';
SELECT 'Check const columns';
SELECT 'Check constant key and data from a table';
SELECT 'Check correctness, integer arguments';
SELECT 'Check creating empty parts';
SELECT 'check data again after multiple deduplications with new syntax';
SELECT 'check invalid params';
SELECT 'Check lifetime_bytes/lifetime_rows for Buffer';
SELECT 'Check memsan bug';
SELECT 'Check multiple keys as separate ints from a table with constant data';
SELECT 'Check multiple keys as separate ints from a table';
SELECT 'Check multiple keys as tuple from a table';
SELECT 'check NaN or infinite point input';
SELECT 'Check system.query_log';
SELECT 'Check that an exception is thrown if the needle is empty';
SELECT 'Check that the point is not in Mecca with multiple holes';
SELECT 'check that we have a data';
SELECT 'Check total_bytes/total_rows for Buffer';
SELECT 'Check total_bytes/total_rows for Join';
SELECT 'Check total_bytes/total_rows for Log';
SELECT 'Check total_bytes/total_rows for Memory';
SELECT 'Check total_bytes/total_rows for Set';
SELECT 'Check total_bytes/total_rows for StripeLog';
SELECT 'Check total_bytes/total_rows for TinyLog';
SELECT 'Check total_uncompressed_bytes/total_bytes/total_rows for Materialized views';
SELECT 'Checking s2 index generation.';
SELECT 'clickhouse' AS s1, 'mouse' AS s2, damerauLevenshteinDistance(s1, s2);
SELECT 'clickhouse' AS s1, 'mouse' AS s2, editDistance(s1, s2);
SELECT 'clickhouse' AS s1, 'mouse' AS s2, jaroSimilarity(s1, s2);
SELECT 'clickhouse' AS s1, 'mouse' AS s2, jaroWinklerSimilarity(s1, s2);
SELECT 'clickhouse' AS s1, 'mouse' AS s2, levenshteinDistance(s1, s2);
SELECT 'clickhouse' AS s1, 'mouse' AS s2, mismatches(s1, s2);
SELECT 'clickhouse' AS s1, 'mouse' AS s2, stringJaccardIndex(s1, s2);
SELECT 'clickhouse' AS s1, 'mouse' AS s2, stringJaccardIndexUTF8(s1, s2);
select 'cluster() GROUP BY ORDER BY';
select 'cluster() ORDER BY';
SELECT 'col1';
SELECT 'col2';
SELECT 'col3';
SELECT 'Collapsing Merge Tree';
SELECT 'Columns with aliases';
SELECT 'Columns';
SELECT 'Combine EXCEPT, REPLACE, APPLY transformers';
select 'commit', arraySort(groupArray(n)) from (select n from mt1 union all select * from mt2);
select 'compact fsync_after_insert';
select 'compact fsync_after_insert,fsync_part_directory';
SELECT 'ComparisionOperator column with alias on same column';
SELECT 'ComparisionOperator column with same column';
SELECT 'comparison:';
SELECT 'Complex key dictionary dictGetOrNull';
SELECT 'complex key';
SELECT 'Complex';
SELECT 'complex_cache (smoke)';
SELECT 'Compression:';
select 'concat arr1, arr2';
select 'concat arr1, arr2, arr1';
select 'concat';
select 'const args';
SELECT 'const int, multiple';
SELECT 'Const Nullable Offset';
select 'Const Nullable Offset, Const Nullable Length';
SELECT 'Const Offset';
SELECT 'Const Offset, Const Length';
SELECT 'Const point;
SELECT 'Const Truncate Offset';
select 'Const Truncate Offset, Const Truncate Length';
SELECT 'const' AS r, b FROM ( SELECT a AS r, b FROM literal_alias_misclassification ) AS t1 LEFT JOIN ( SELECT a AS r FROM literal_alias_misclassification ) AS t2 ON t1.r = t2.r ORDER BY b;
SELECT 'const, int';
SELECT 'const, int, negative';
SELECT 'const, uint';
SELECT 'const, uint, multiple';
SELECT 'Constant and non-constant arguments';
select 'Constant column';
SELECT 'Constant map';
SELECT 'Constant result';
SELECT 'Constant tuple';
select 'constant values:';
SELECT 'Constants with aliases';
select 'constants: ', '', byteSize(''), 'a', byteSize('a'), 'abcde', byteSize('abcde');
select 'constants:', [[], [''], ['','a']], byteSize([[], [''], ['','a']]);
select 'constants:', [[], [1,2], [0,0x10000]],toTypeName([[], [1,2], [0,0x10000]]), byteSize([[], [1,2], [0,0x10000]]);
select 'constants:', [], byteSize([]), [1,1], byteSize([1,1]), [-1,-1], byteSize([-1,-1]), toTypeName([256,256]), byteSize([256,256]), toTypeName([1.1,1.1]), byteSize([1.1,1.1]);
select 'constants:', [toDecimal32(1.1,4),toDecimal32(1.1,4)], byteSize([toDecimal32(1.1,4),toDecimal32(1.1,4)]), [toDate('2020-01-01'),toDate('2020-01-01')], byteSize([toDate('2020-01-01'),toDate('2020-01-01')]);
select 'constants:', [toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0'),toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0')], byteSize([toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0'),toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0')]);
select 'constants:', [tuple(NULL, []), tuple(toNullable(toFixedString('a',4)), []), tuple(toNullable(toFixedString('a',4)), [tuple(NULL, 'a')]), tuple(toNullable(toFixedString('a',4)), [tuple(NULL, 'a'), tuple(NULL, 'a')])];
select 'constants:', byteSize([tuple(NULL, []), tuple(toNullable(toFixedString('a',4)), []), tuple(toNullable(toFixedString('a',4)), [tuple(NULL, 'a')]), tuple(toNullable(toFixedString('a',4)), [tuple(NULL, 'a'), tuple(NULL, 'a')])]);
select 'constants:', NULL, byteSize(NULL), tuple(0x10000, NULL), byteSize(tuple(0x10000, NULL)), tuple(0x10000, toNullable('a')), byteSize(tuple(0x10000, toNullable('a')));
select 'constants:', toLowCardinality('abced'),toTypeName(toLowCardinality('abced')), byteSize(toLowCardinality('abced'));
select 'constants:', toTypeName([tuple(NULL, []), tuple(toNullable(toFixedString('a',4)), []), tuple(toNullable(toFixedString('a',4)), [tuple(NULL, 'a')]), tuple(toNullable(toFixedString('a',4)), [tuple(NULL, 'a'), tuple(NULL, 'a')])]);
SELECT 'Control characters \x1f\x1f\x1f\x1f with zero width', 'Invalid UTF-8 which eats pending characters \xf0, and invalid by itself \x80 with zero width' FORMAT Vertical;
SELECT 'Correctness of index with > 1 mark';
select 'count final max_parallel_replicas';
select 'count final';
select 'count sample final';
select 'count sample';
SELECT 'Count', count() FROM lwd_test;
SELECT 'Count', count() FROM lwd_test_02521;
select 'count';
select 'COUNT';
select 'countDistinct GROUP BY number';
select 'countDistinct';
select 'CountSubstringsImpl::constantConstant';
select 'CountSubstringsImpl::constantConstantScalar';
select 'CountSubstringsImpl::constantVector';
select 'CountSubstringsImpl::vectorConstant';
select 'CountSubstringsImpl::vectorVector';
SELECT 'CRC32IEEE()';
SELECT 'CRC64()';
select 'create and check deduplication';
SELECT 'CREATE DATABASE';
SELECT 'CREATE queries';
select 'create replica 1 and check deduplication';
select 'create replica 2 and check deduplication';
select 'create table compression_codec_on_alias with CODEC on ALIAS type';
select 'create table failed, column +type +AUTO_INCREMENT, compatibility disabled';
select 'create table failed, column +type +DEFAULT +AUTO_INCREMENT';
SELECT 'CREATE TABLE t_merge as 01902_db.t ENGINE=Merge(REGEXP(^01902_db), ^t)';
SELECT 'CREATE TABLE t_merge_1 as 01902_db.t ENGINE=Merge(currentDatabase(), ^t)';
select 'create table, +type +AUTO_INCREMENT';
select 'create table, column +AUTO_INCREMENT -type';
select 'create table, column +type +DEFAULT +NOT NULL';
select 'create table, column +type +DEFAULT +NULL';
select 'create table, column +type +NOT NULL +DEFAULT';
select 'create table, column +type +NOT NULL';
select 'create table, column +type +NULL +DEFAULT';
select 'create table, column +type +NULL';
select 'create table, column -type +DEFAULT +NOT NULL';
select 'create table, column -type +DEFAULT +NULL';
select 'create table, column -type +NOT NULL +DEFAULT';
select 'create table, column -type +NULL +DEFAULT';
select 'create table, several columns +/-type +AUTO_INCREMENT';
select 'create table, several columns with different default specifiers';
SELECT 'cross';
SELECT 'CSV';
select 'CSV';
SELECT 'cube';
select 'CustomSeparated';
SELECT 'd', -x FROM primary_key WHERE -x < toInt8(0);
SELECT 'D';
SELECT 'damerauLevenshteinDistance', s1, s2, damerauLevenshteinDistance(s1, s2) FROM t ORDER BY ALL;
SELECT 'Database and table qualified matchers';
SELECT 'database lazy tests';
SELECT 'database ordinary tests';
SELECT 'Date and DateTime arguments';
SELECT 'Date String';
SELECT 'Date';
SELECT 'Date32';
SELECT 'Dates';
SELECT 'DateTime arguments';
SELECT 'DateTime';
SELECT 'DateTime64';
select 'day', date_diff('day', toDate32('1969-12-25'), toDate32('1970-01-05'));
select 'day', date_diff('day', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));
SELECT 'Decimals';
SELECT 'DEDUPLICATE BY * EXCEPT mat';
SELECT 'DEDUPLICATE BY *';
SELECT 'DEDUPLICATE BY COLUMNS("*") EXCEPT mat';
SELECT 'DEDUPLICATE BY COLUMNS(".*k")';
SELECT 'DEDUPLICATE BY pk,sk';
SELECT 'DEDUPLICATE BY pk,sk,val,mat';
SELECT 'DEDUPLICATE BY pk,sk,val,mat,partition_key';
select 'deduplicate_blocks_in_dependent_materialized_views=0, insert_deduplication_token = yes, results inconsitent';
select 'deduplicate_blocks_in_dependent_materialized_views=1, insert_deduplication_token = no, results inconsitent';
select 'deduplicate_blocks_in_dependent_materialized_views=1, insert_deduplication_token = yes, results consitent';
SELECT 'deduplication works';
select 'default precision:';
select 'default';
SELECT 'defaults';
SELECT 'Delete 100K more rows using lightweight DELETE';
SELECT 'Delete 100K rows using lightweight DELETE';
SELECT 'Dependance of timezones';
select 'desc nulls first, asc';
select 'desc nulls first, desc';
select 'desc nulls last, asc';
select 'desc nulls last, desc';
SELECT 'DETACH+ATTACH PARTITION';
select 'dict' src,* FROM TestTblDict ;
SELECT 'dictGet existing value';
SELECT 'dictGet with non existing value';
select 'dictGet', 'cache_decimals' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'd32', k), dictGet(dict_name, 'd64', k), dictGet(dict_name, 'd128', k), dictGet(dict_name, ('d32', 'd64', 'd128'), k);
select 'dictGet', 'cache_ints' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'i8', k), dictGet(dict_name, 'i16', k), dictGet(dict_name, 'i32', k), dictGet(dict_name, 'i64', k), dictGet(dict_name, 'u8', k), dictGet(dict_name, 'u16', k), dictGet(dict_name, 'u32', k), dictGet(dict_name, 'u64', k), dictGet(dict_name, ('i8', 'i16', 'i32'), k);
select 'dictGet', 'cache_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', k), dictGet(dict_name, ('str'), k);
select 'dictGet', 'complex_cache_decimals' as dict_name, tuple(toUInt64(1)) as k, dictGet(dict_name, 'd32', k), dictGet(dict_name, 'd64', k), dictGet(dict_name, 'd128', k), dictGet(dict_name, ('d32', 'd64', 'd128'), k);
select 'dictGet', 'complex_cache_ints' as dict_name, tuple(toUInt64(1)) as k, dictGet(dict_name, 'i8', k), dictGet(dict_name, 'i16', k), dictGet(dict_name, 'i32', k), dictGet(dict_name, 'i64', k), dictGet(dict_name, 'u8', k), dictGet(dict_name, 'u16', k), dictGet(dict_name, 'u32', k), dictGet(dict_name, 'u64', k), dictGet(dict_name, ('i8', 'i16', 'i32'), k);
select 'dictGet', 'complex_cache_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', tuple(k)), dictGet(dict_name, ('str'), tuple(k));
select 'dictGet', 'complex_hashed_decimals' as dict_name, tuple(toUInt64(1)) as k, dictGet(dict_name, 'd32', k), dictGet(dict_name, 'd64', k), dictGet(dict_name, 'd128', k), dictGet(dict_name, ('d32', 'd64', 'd128'), k);
select 'dictGet', 'complex_hashed_ints' as dict_name, tuple(toUInt64(1)) as k, dictGet(dict_name, 'i8', k), dictGet(dict_name, 'i16', k), dictGet(dict_name, 'i32', k), dictGet(dict_name, 'i64', k), dictGet(dict_name, 'u8', k), dictGet(dict_name, 'u16', k), dictGet(dict_name, 'u32', k), dictGet(dict_name, 'u64', k), dictGet(dict_name, ('i8', 'i16', 'i32'), k);
select 'dictGet', 'complex_hashed_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', tuple(k)), dictGet(dict_name, ('str'), tuple(k));
select 'dictGet', 'flat_ints' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'i8', k), dictGet(dict_name, 'i16', k), dictGet(dict_name, 'i32', k), dictGet(dict_name, 'i64', k), dictGet(dict_name, 'u8', k), dictGet(dict_name, 'u16', k), dictGet(dict_name, 'u32', k), dictGet(dict_name, 'u64', k), dictGet(dict_name, ('i8', 'i16', 'i32'), k);
select 'dictGet', 'hashed_decimals' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'd32', k), dictGet(dict_name, 'd64', k), dictGet(dict_name, 'd128', k), dictGet(dict_name, ('d32', 'd64', 'd128'), k);
select 'dictGet', 'hashed_ints' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'i8', k), dictGet(dict_name, 'i16', k), dictGet(dict_name, 'i32', k), dictGet(dict_name, 'i64', k), dictGet(dict_name, 'u8', k), dictGet(dict_name, 'u16', k), dictGet(dict_name, 'u32', k), dictGet(dict_name, 'u64', k), dictGet(dict_name, ('i8', 'i16', 'i32'), k);
select 'dictGet', 'hashed_sparse_ints' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'i8', k), dictGet(dict_name, 'i16', k), dictGet(dict_name, 'i32', k), dictGet(dict_name, 'i64', k), dictGet(dict_name, 'u8', k), dictGet(dict_name, 'u16', k), dictGet(dict_name, 'u32', k), dictGet(dict_name, 'u64', k), dictGet(dict_name, ('i8', 'i16', 'i32'), k);
select 'dictGet', 'hashed_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', k), dictGet(dict_name, ('str'), k);
SELECT 'dictGet';
SELECT 'dictGetHierarchy';
SELECT 'dictGetOrDefault existing value';
SELECT 'dictGetOrDefault non existing value';
select 'dictGetOrDefault', 'cache_decimals' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)), dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)), dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)), dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
select 'dictGetOrDefault', 'cache_decimals' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)), dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)), dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)), dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
select 'dictGetOrDefault', 'hashed_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', k, '*'), dictGetOrDefault(dict_name, ('str'), k, ('*'));
select 'dictGetOrDefault', 'hashed_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', k, '*'), dictGetOrDefault(dict_name, ('str'), k, ('*'));
SELECT 'dictGetOrDefault';
SELECT 'dictHas';
SELECT 'Dictionary .range_lookup_strategy = max';
SELECT 'Dictionary .range_lookup_strategy = min';
SELECT 'Dictionary cache_dictionary_complex_key_complex_attributes';
SELECT 'Dictionary cache_dictionary_complex_key_simple_attributes';
SELECT 'Dictionary cache_dictionary_simple_key_complex_attributes';
SELECT 'Dictionary cache_dictionary_simple_key_hierarchy';
SELECT 'Dictionary cache_dictionary_simple_key_simple_attributes';
SELECT 'Dictionary convert_null_range_bound_to_open = 0';
SELECT 'Dictionary convert_null_range_bound_to_open = 1';
SELECT 'Dictionary direct_dictionary_complex_key_complex_attributes';
SELECT 'Dictionary direct_dictionary_complex_key_simple_attributes';
SELECT 'Dictionary direct_dictionary_simple_key_complex_attributes';
SELECT 'Dictionary direct_dictionary_simple_key_hierarchy';
SELECT 'Dictionary direct_dictionary_simple_key_simple_attributes';
SELECT 'Dictionary flat_dictionary_simple_key_complex_attributes';
SELECT 'Dictionary flat_dictionary_simple_key_hierarchy';
SELECT 'Dictionary flat_dictionary_simple_key_simple_attributes';
SELECT 'Dictionary hashed_dictionary_complex_key_complex_attributes';
SELECT 'Dictionary hashed_dictionary_complex_key_simple_attributes';
SELECT 'Dictionary hashed_dictionary_simple_key_complex_attributes';
SELECT 'Dictionary hashed_dictionary_simple_key_hierarchy';
SELECT 'Dictionary hashed_dictionary_simple_key_simple_attributes';
SELECT 'Dictionary not nullable';
SELECT 'Dictionary nullable';
SELECT 'Dictionary output';
SELECT 'Dictionary sparse_hashed_dictionary_simple_key_complex_attributes';
SELECT 'Dictionary sparse_hashed_dictionary_simple_key_hierarchy';
SELECT 'Dictionary sparse_hashed_dictionary_simple_key_simple_attributes';
SELECT 'Dictionary';
SELECT 'Direct dictionary';
select 'direct';
SELECT 'DirectDictionary';
SELECT 'dist_tbl';
select 'DISTINCT ORDER BY';
select 'DISTINCT';
SELECT 'distributed';
select 'Distributed(number)-over-Distributed(number)';
select 'Distributed(rand)-over-Distributed(number)';
select 'Distributed(rand)-over-Distributed(rand)';
SELECT 'distributed_0', _shard_num, toUInt8(1) AS dummy FROM d_one AS o WHERE o.dummy = 0 ORDER BY _shard_num;
SELECT 'distributed_1', _shard_num, toUInt8(1) AS dummy FROM d_one AS o WHERE o.dummy = 1 ORDER BY _shard_num;
SELECT 'distributed_group_by_no_merge = 0, extremes = 0';
SELECT 'distributed_group_by_no_merge = 0, extremes = 1';
SELECT 'distributed_group_by_no_merge = 1, extremes = 0';
SELECT 'distributed_group_by_no_merge = 1, extremes = 1';
select 'distributed_group_by_no_merge';
SELECT 'distributed_group_by_no_merge=2';
SELECT 'division';
SELECT 'Do ALTER DELETE mutation that does a "heavyweight" delete';
SELECT 'Do UPDATE mutation';
SELECT 'DROP database - Directory not empty error, but database detached';
SELECT 'DROP database - Directory not empty error, but database deteched';
SELECT 'DROP database - now success';
SELECT 'DROP database';
SELECT 'DROP queries and also a cleanup before the test';
select 'drop';
SELECT 'DST boundary test for Asia/Tehran:';
SELECT 'DST boundary test for Australia/Lord_Howe. This is a special timezone with DST offset is 30mins with the timezone epoc also lays at half hour';
SELECT 'DST boundary test for Australia/Lord_Howe:';
SELECT 'dt != const dt64' FROM dt64test WHERE dt_column != toDateTime64('2020-01-13 13:37:00', 3);
SELECT 'dt != dt64' FROM dt64test WHERE dt_column != materialize(toDateTime64('2020-01-13 13:37:00', 3));
SELECT 'dt < const dt64' FROM dt64test WHERE dt_column < toDateTime64('2020-01-13 13:37:00', 3);
SELECT 'dt < dt64' FROM dt64test WHERE dt_column < materialize(toDateTime64('2020-01-13 13:37:00', 3));
SELECT 'dt <= const dt64' FROM dt64test WHERE dt_column <= toDateTime64('2020-01-13 13:37:00', 3);
SELECT 'dt <= dt64' FROM dt64test WHERE dt_column <= materialize(toDateTime64('2020-01-13 13:37:00', 3));
SELECT 'dt = const dt64' FROM dt64test WHERE dt_column = toDateTime64('2020-01-13 13:37:00', 3);
SELECT 'dt = dt64' FROM dt64test WHERE dt_column = materialize(toDateTime64('2020-01-13 13:37:00', 3));
SELECT 'dt > const dt64' FROM dt64test WHERE dt_column > toDateTime64('2020-01-13 13:37:00', 3);
SELECT 'dt > dt64' FROM dt64test WHERE dt_column > materialize(toDateTime64('2020-01-13 13:37:00', 3));
SELECT 'dt >= const dt64' FROM dt64test WHERE dt_column >= toDateTime64('2020-01-13 13:37:00', 3);
SELECT 'dt >= dt64' FROM dt64test WHERE dt_column >= materialize(toDateTime64('2020-01-13 13:37:00', 3));
SELECT 'DT';
SELECT 'dt64 != const dt' FROM dt64test WHERE dt64_column != toDateTime('2020-01-13 13:37:00');
SELECT 'dt64 != dt' FROM dt64test WHERE dt64_column != materialize(toDateTime('2020-01-13 13:37:00'));
SELECT 'dt64 < const dt' FROM dt64test WHERE dt64_column < toDateTime('2020-01-13 13:37:00');
SELECT 'dt64 < dt' FROM dt64test WHERE dt64_column < materialize(toDateTime('2020-01-13 13:37:00'));
SELECT 'dt64 <= const dt' FROM dt64test WHERE dt64_column <= toDateTime('2020-01-13 13:37:00');
SELECT 'dt64 <= dt' FROM dt64test WHERE dt64_column <= materialize(toDateTime('2020-01-13 13:37:00'));
SELECT 'dt64 = const dt' FROM dt64test WHERE dt64_column = toDateTime('2020-01-13 13:37:00');
SELECT 'dt64 = dt' FROM dt64test WHERE dt64_column = materialize(toDateTime('2020-01-13 13:37:00'));
SELECT 'dt64 > const dt' FROM dt64test WHERE dt64_column > toDateTime('2020-01-13 13:37:00');
SELECT 'dt64 > dt' FROM dt64test WHERE dt64_column > materialize(toDateTime('2020-01-13 13:37:00'));
SELECT 'dt64 >= const dt' FROM dt64test WHERE dt64_column >= toDateTime('2020-01-13 13:37:00');
SELECT 'dt64 >= dt' FROM dt64test WHERE dt64_column >= materialize(toDateTime('2020-01-13 13:37:00'));
select 'duplicate column names';
SELECT 'Duplicate keys';
select 'duration_ms';
select 'Dynamic column and offset, negative';
select 'Dynamic column and offset, out of bounds';
select 'Dynamic column and offset, without defaults';
select 'Dynamic Nullable Offset, Dynamic Nullable Length';
select 'Dynamic Offset, Dynamic Length';
select 'Dynamic Truncate Offset, Dynamic Truncate Length';
SELECT 'E';
SELECT 'editDistance', s1, s2, editDistance(s1, s2) FROM t ORDER BY ALL;
select 'empty';
SELECT 'empty:';
SELECT 'english (default)';
SELECT 'english (en)';
SELECT 'english (en_US)';
select 'Enum8', blockSerializedSize(cast('a' as Enum8('a' = 1, 'b' = 2)));
SELECT 'eps for complex polygon in grid';
SELECT 'Equals with existing key';
SELECT 'Equals with non existing key and default value';
SELECT 'Equals with non existing key';
SELECT 'errors';
select 'errors';
SELECT 'errors:';
SELECT 'español (default)';
SELECT 'español (es)';
select 'euqality of IPv4-mapped IPv6 value and IPv4 promoted to IPv6 with function:', toIPv6('::ffff:127.0.0.1') = IPv4ToIPv6(toIPv4('127.0.0.1'));
SELECT 'EXCEPT transformer';
select 'exception on create and fill';
SELECT 'executable_pool_complex';
SELECT 'executable_pool_complex_implicit_key';
SELECT 'Executing ALTER TABLE MOVE PARTITION...';
SELECT 'Expect no entries in the query cache', count(*) FROM system.query_cache;
SELECT 'Expect one entry in the query cache', count(*) FROM system.query_cache;
SELECT 'Expect one entry in the query cache', count(*) FROM system.query_cache;
SELECT 'Expect two entries in the query cache', count(*) FROM system.query_cache;
SELECT 'EXPLAIN syntax:';
SELECT 'exponentialMovingAverage';
SELECT 'exponentialTimeDecayedAvg';
SELECT 'exponentialTimeDecayedCount';
SELECT 'exponentialTimeDecayedMax';
SELECT 'exponentialTimeDecayedSum';
SELECT 'F';
SELECT 'F32';
SELECT 'FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF is ipv4 string: ', isIPv4String('FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF');
SELECT 'FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF is ipv6 string: ', isIPv6String('FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF');
SELECT 'finish ===========================;';
SELECT 'first nullable';
SELECT 'First row', id, length(value) FROM lwd_test ORDER BY id LIMIT 1;
SELECT 'FixedString ConstConst';
SELECT 'FixedString VectorVector';
select 'FixedString(32)', blockSerializedSize(cast('foo', 'FixedString(32)'));
SELECT 'Flat dictionary';
SELECT 'flat: anti left';
SELECT 'flat: any left + any_join_distinct_right_table_keys';
SELECT 'flat: any left';
SELECT 'flat: inner on';
SELECT 'flat: inner or';
SELECT 'flat: inner';
SELECT 'flat: left on';
SELECT 'flat: left';
SELECT 'flat: semi left';
SELECT 'FlatDictionary';
SELECT 'floor() : ', toDecimal128('1234567890.123456789', 20) AS x, -x AS y, floor(x), floor(y), floor(x, -3), floor(y, -3);
SELECT 'floor() : ', toDecimal256('1234567890.123456789', 40) AS x, -x AS y, floor(x), floor(y), floor(x, -3), floor(y, -3);
select 'FLUSH';
SELECT 'fooooo' EXCEPT ALL SELECT 'fooooo';
select 'For unclear reasons this happened only in Release builds, not in Debug builds.';
SELECT 'Force merge to cleanup deleted rows';
SELECT 'Formats';
SELECT 'freeze all';
SELECT 'freeze one';
select 'from table (with const precision):';
select 'fsync';
SELECT 'full (join_use_nulls)';
select 'full subs';
select 'full';
SELECT 'full';
SELECT 'func(aggregate function) GROUP BY';
SELECT 'fuzz1', finalizeAggregation(CAST(unhex('3000000\0303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353600010000000000000000'), 'AggregateFunction(argMax, String, UInt64)'));
SELECT 'fuzz3', finalizeAggregation(CAST(unhex('04000000' || '30313233' || '00' || 'ffffffffffffffff'), 'AggregateFunction(argMax, String, UInt64)')) as x, length(x);
select 'fuzzer issue';
SELECT 'G';
SELECT 'GCM mode with IV and AAD';
SELECT 'GCM mode with IV';
SELECT 'Get all descendants';
SELECT 'Get children';
SELECT 'Get descendants at first level';
SELECT 'Get hierarchy';
SELECT 'Get is in hierarchy';
SELECT 'GLOBAL NOT IN';
SELECT 'GRANT queries';
SELECT 'greatest';
select 'GROUP BY (Distributed-over-Distributed) distributed_group_by_no_merge';
select 'GROUP BY (Distributed-over-Distributed)';
select 'GROUP BY (extemes)';
select 'GROUP BY ..., sharding_key';
select 'GROUP BY 1';
select 'GROUP BY HAVING';
select 'GROUP BY number distributed_group_by_no_merge';
select 'GROUP BY number ORDER BY number DESC';
select 'GROUP BY number%2';
select 'GROUP BY number';
select 'GROUP BY ORDER BY LIMIT';
SELECT 'GROUP BY ORDER BY';
select 'GROUP BY ORDER BY';
select 'GROUP BY sharding_key, ...';
select 'GROUP BY toString(number)';
select 'GROUP BY WITH CUBE';
select 'GROUP BY WITH ROLLUP';
select 'GROUP BY WITH TOTALS LIMIT';
select 'GROUP BY WITH TOTALS ORDER BY LIMIT';
select 'GROUP BY WITH TOTALS ORDER BY';
select 'GROUP BY WITH TOTALS';
SELECT 'H';
SELECT 'Has with existing key';
SELECT 'Has with non existing key and default value';
SELECT 'Has with non existing key';
SELECT 'Hashed array dictionary';
SELECT 'Hashed dictionary';
SELECT 'hashed: anti left';
SELECT 'hashed: any left';
SELECT 'hashed: inner on';
SELECT 'hashed: inner';
SELECT 'hashed: left on';
SELECT 'hashed: left';
SELECT 'hashed: semi left';
SELECT 'HashedArrayDictionary';
SELECT 'HashedDictionary';
select 'hasSubsequence';
select 'hasSubsequenceCaseInsensitive';
select 'hasSubsequenceCaseInsensitiveUTF8';
select 'hasSubsequenceUTF8';
select 'HAVING LIMIT';
select 'HAVING';
SELECT 'Hello & world' AS s, 'Hello\n<World>', toDateTime('2001-02-03 04:05:06') AS time, arrayMap(x -> toString(x), range(10)) AS arr, (s, time) AS tpl SETTINGS extremes = 1 FORMAT XML;
SELECT 'Hello \\ World' FORMAT LineAsString;
SELECT 'hello is ipv4 string: ', isIPv4String('hello');
SELECT 'hello is ipv6 string: ', isIPv6String('hello');
SELECT 'hEllo' ILIKE '%HEL%';
SELECT 'hEllo' NOT ILIKE '%HEL%';
SELECT 'Hello' ILIKE '%%%';
SELECT 'Hello' ILIKE '%%';
SELECT 'Hello' ILIKE '%';
SELECT 'Hello' ILIKE '%_%';
SELECT 'Hello' ILIKE '%_';
SELECT 'Hello' ILIKE '_%';
SELECT 'Hello' ILIKE '_';
SELECT 'Hello' ILIKE 'H%o';
SELECT 'hello' ILIKE 'H%o';
SELECT 'hello' ILIKE 'h%o';
SELECT 'Hello' ILIKE 'h%o';
SELECT 'HELLO' ilike 'hell%';
SELECT 'Hello' IN ('Hello', 'world');
SELECT 'Hello' IN (SELECT 'Hello');
SELECT 'Hello' IN (SELECT materialize('Hello'));
SELECT 'Hello' LIKE '%%%';
SELECT 'Hello' LIKE '%%';
SELECT 'Hello' LIKE '%';
SELECT 'Hello' LIKE '%_%';
SELECT 'Hello' LIKE '%_';
SELECT 'Hello' LIKE '';
SELECT 'Hello' LIKE '_%';
SELECT 'Hello' LIKE '_';
SELECT 'hello' like 'hell%';
SELECT 'Hello' NOT ILIKE 'H%o';
SELECT 'hello' NOT ILIKE 'H%o';
SELECT 'hello' NOT ILIKE 'h%o';
SELECT 'Hello' NOT ILIKE 'h%o';
SELECT 'hello' UNION ALL SELECT toLowCardinality('hello');
SELECT 'Hello' || ', ' || 'World';
SELECT 'Hello' || convertCharset(unhex('2028'), 'utf16be', 'utf8') || 'World' || convertCharset(unhex('2029'), 'utf16be', 'utf8') || '!' AS x, hex(x) AS h FORMAT JSONEachRow;
SELECT 'Hello' || convertCharset(unhex('2028'), 'utf16be', 'utf8') || 'World' || convertCharset(unhex('2029'), 'utf16be', 'utf8') || '!' AS x, hex(x) AS h FORMAT TSV;
select 'hello', untuple((* except (b),)), 'world' from (select 1 a, 2 b, 3 c);
SELECT 'Hello, "World"' AS x, 123 AS y, [1, 2, 3] AS z, (456, ['abc', 'def']) AS a, 'Newline\nhere' AS b FORMAT CSV;
SELECT 'Hello, "World"' AS x, 123 AS y, [1, 2, 3] AS z, (456, ['abc', 'def']) AS a, 'Newline\nhere' AS b FORMAT CSVWithNames;
SELECT 'Hello, "World"' AS x, 123 AS y, [1, 2, 3] AS z, (456, ['abc', 'def']) AS a, 'Newline\nhere' AS b FORMAT CSVWithNamesAndTypes;
SELECT 'Hello, world!' FROM merge_view_00270 LIMIT 5;
SELECT 'Hello, world' FROM (SELECT number FROM system.numbers LIMIT 10) WHERE number < 0 FORMAT JSONCompact;
SELECT 'https://www.clickhouse.com/' AS s, REGEXP_REPLACE(s, '^https?://(?:www\.)?([^/]+)/.*$', '\1');
SELECT 'I';
SELECT 'I16';
SELECT 'I32';
SELECT 'I64';
SELECT 'I8';
select 'if with LC and NULL arguments';
select 'if with one LC argument';
select 'if with two LC arguments';
SELECT 'If';
SELECT 'ignore';
select 'ILIKE';
SELECT 'IN function';
SELECT 'in SELECT';
SELECT 'in WHERE';
SELECT 'IN with existing key';
SELECT 'IN with non existing key and default value';
SELECT 'IN with non existing key';
SELECT 'in_transaction', count() FROM target;
SELECT 'Indexes:';
SELECT 'init';
SELECT 'Initial';
SELECT 'INITIALIZING DICTIONARY';
SELECT 'inner (join_use_nulls)';
select 'inner expr';
SELECT 'Inner parts of Mecca';
select 'inner subs';
SELECT 'inner';
select 'inner';
SELECT 'input values are clamped to -90..90, -180..180 range';
SELECT 'Insert Data';
SELECT 'insert happened';
SELECT 'INSERT INTO main_table_01818';
SELECT 'INSERT INTO tmp_table_01818';
select 'INSERT SELECT max_insert_threads max_threads';
select 'INSERT SELECT max_threads';
select 'INSERT SELECT';
SELECT 'insert to single replica works';
SELECT 'INSERT';
select 'INSERT';
select 'inserted value deduplicated by data digest, the same result as before';
select 'inserted value deduplicated by dedup token, the same result as before';
SELECT 'Inserted';
SELECT 'inside_txn_and_implicit', 1 SETTINGS implicit_transaction=True;
SELECT 'Int128';
SELECT 'Int16';
SELECT 'Int256';
SELECT 'Int32';
SELECT 'Int64';
SELECT 'Int8';
SELECT 'Integer and Float types';
SELECT 'Integer and Integer types';
SELECT 'Integer and String types';
select 'intersect', countSubstrings('00000000', repeat(toString(number), 2)) from numbers(1) format CSV;
select 'intersect', countSubstrings(concat(toString(number), '0000000'), '00') from numbers(1) format CSV;
select 'intersect', countSubstrings(repeat(toString(number), 8), '00') from numbers(1) format CSV;
select 'intersect';
SELECT 'Into FixedString';
SELECT 'Into Numeric Representable';
SELECT 'Into String';
SELECT 'Invalid input types are rejected';
select 'invalid values:';
SELECT 'IPTrie dictionary';
SELECT 'IPTrieDictionary';
SELECT 'IPv4 functions';
SELECT 'IPv6 functions';
SELECT 'Issue #52258: Empty Arrays or Arrays with default values are rejected';
SELECT 'issue 23002';
SELECT 'It is possible to create parts with different Array vector sizes but there will be an error at query time';
SELECT 'J';
SELECT 'JA' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv4StringToNum('101.79.55.22')));
SELECT 'JA' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('::ffff:101.79.55.22')));
SELECT 'JA' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('::ffff:654f:3716')));
SELECT 'jaroSimilarity', s1, s2, jaroSimilarity(s1, s2) FROM t ORDER BY ALL;
SELECT 'jaroWinklerSimilarity', s1, s2, jaroWinklerSimilarity(s1, s2) FROM t ORDER BY ALL;
select 'join on aliases';
select 'join on and chain';
select 'join on complex expression';
select 'join on expression';
select 'join on OR chain (all left)';
select 'join on OR chain (all right)';
select 'join on OR chain (any left)';
select 'join on OR chain (any right)';
select 'join on OR chain (full)';
select 'join on OR/AND chain';
SELECT 'JOIN';
select 'join_use_nulls = 0';
SELECT 'join_use_nulls = 0';
select 'join_use_nulls = 1';
SELECT 'join_use_nulls = 1';
select 'joind columns from right table';
SELECT 'Joins USING';
SELECT 'Joins';
SELECT 'JSON';
SELECT 'JSONColumns';
SELECT 'JSONColumnsWithMetadata';
SELECT 'JSONCompact';
SELECT 'JSONCompactColumns';
SELECT 'JSONCompactEachRow';
select 'JSONCompactEachRow';
SELECT 'JSONEachRow';
select 'JSONEachRow';
SELECT 'JSONObjectEachRow';
SELECT 'K';
SELECT 'K=16';
SELECT 'K=18';
select 'key, arrayJoin(arr) in ((1, 1), (2, 2))';
select 'key, arrayJoin(arr) in (1, 1)';
select 'key, arrayJoin(n.x) in ((1, 1), (2, 2))';
select 'key, arrayJoin(n.x) in (1, 1)';
SELECT 'L';
SELECT 'Lambda as function parameter';
SELECT 'Lambda carrying';
SELECT 'Lambda compound argument';
SELECT 'Lambda matcher';
SELECT 'Lambda untuple';
SELECT 'lambda';
SELECT 'Lambda';
SELECT 'lc_bf_tokenbf';
SELECT 'lc_fixed_bf_tokenbf';
SELECT 'lc_fixed_ngram';
SELECT 'lc_ngram';
SELECT 'Leading zeroes into INTEGER';
SELECT 'least';
SELECT 'left (join_use_nulls)';
select 'left asof on';
select 'left asof using';
select 'left expr';
select 'LEFT JOIN';
select 'left subs';
select 'left';
SELECT 'left';
SELECT 'leftPad';
SELECT 'leftPadUTF8';
SELECT 'Lighweight deleted';
select 'LIKE';
select 'LIMIT (extemes)';
select 'LIMIT BY 1';
SELECT 'LIMIT BY LIMIT';
SELECT 'LIMIT BY';
select 'LIMIT OFFSET';
SELECT 'limit w/ GROUP BY', count(NULL), number FROM remote('127.{1,2}', view(SELECT intDiv(number, 2147483647) AS number FROM numbers(10))) GROUP BY number WITH ROLLUP ORDER BY count() ASC, number DESC NULLS LAST SETTINGS limit = 2;
SELECT 'limit', * FROM remote('127.1', view(SELECT * FROM numbers(10))) SETTINGS limit=5;
SELECT 'LIMIT';
select 'LIMIT';
SELECT 'Lloyd-Atkinson' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'local';
SELECT 'local_0', toUInt8(1) AS dummy FROM system.one AS o WHERE o.dummy = 0;
SELECT 'local_1', toUInt8(1) AS dummy FROM system.one AS o WHERE o.dummy = 1;
SELECT 'local_tbl';
select 'log';
SELECT 'Logical functions not null';
SELECT 'Logical functions nullable';
SELECT 'London' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'lots of groups';
SELECT 'lots of matches';
SELECT 'lower range bound';
SELECT 'M';
SELECT 'main_table_01818', count() FROM main_table_01818 WHERE `advertiser_id` = 'ClickHouse';
SELECT 'MajiでKoiする5秒前' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
select 'many arguments';
SELECT 'Map bloom filter mapKeys';
SELECT 'Map bloom filter mapValues';
SELECT 'Map fixed full text bloom filter ngrambf mapKeys';
SELECT 'Map fixed full text bloom filter tokenbf mapKeys';
SELECT 'Map full text bloom filter ngrambf mapKeys';
SELECT 'Map full text bloom filter ngrambf mapValues';
SELECT 'Map full text bloom filter tokenbf mapKeys';
SELECT 'Map full text bloom filter tokenbf mapValues';
SELECT 'Map';
SELECT 'Map(Date, Int32)';
SELECT 'Map(Int128, String)';
SELECT 'Map(Int32, UInt16)';
SELECT 'Map(Int8, Int8)';
SELECT 'Map(UUID, UInt16)';
SELECT 'MapContains with existing key';
SELECT 'MapContains with non existing key and default value';
SELECT 'MapContains with non existing key';
SELECT 'mapPopulateSeries with map';
SELECT 'mapPopulateSeries with two arrays';
SELECT 'maps';
SELECT 'marks', marks FROM system.parts WHERE table = 'adaptive_table' AND database = currentDatabase() AND active FORMAT CSV;
SELECT 'Mask applied in partition';
SELECT 'Mask applied';
select 'MATCH';
SELECT 'Matcher';
SELECT 'Matchers without FROM section';
select 'max';
select 'max(key) from tab_00612 any left join (select key, arrayJoin(n.x) as val from tab_00612) using key where (key, val) in ((1, 1), (2, 2))';
select 'max(key) from tab_00612 any left join (select key, arrayJoin(n.x) as val from tab_00612) using key where (key, val) in (1, 1)';
select 'max(key) from tab_00612 where (key, left array join n.x) in ((1, 1), (2, 2))';
select 'max(key) from tab_00612 where (key, left array join n.x) in (1, 1)';
SELECT 'max_rows_in_join = 1000';
select 'MergeTree';
select 'min';
SELECT 'minus';
select 'minute', date_diff('minute', toDate32('1969-12-31'), toDate32('1970-01-01'));
SELECT 'Misc queries';
SELECT 'Miscellaneous';
select 'mixing const and non-const-columns:';
SELECT 'Mnchen-3ya' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
select 'month', date_diff('month', toDate32('1969-12-25'), toDate32('1970-01-05'));
select 'month', date_diff('month', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));
SELECT 'Moscow DST Years with perment DST from 2011-2014:';
SELECT 'Multiple Joins USING';
SELECT 'Multiple JOINS';
SELECT 'multiple matches';
SELECT 'multiply';
select 'MULTISEARCHFIRSTINDEX';
select 'MULTISEARCHFIRSTPOSITION';
SELECT 'mutiple groups, multiple matches';
SELECT 'MySQL alias';
SELECT 'MySQL-compatitable mode, with key folding, no length checks, etc.';
SELECT 'München' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'München-Ost' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'n a rj n', t1.x, t2.x FROM nt AS t1 ANY RIGHT JOIN ntxy AS t2 ON t1.x = t2.x OR t1.x = t2.y ORDER BY t1.x;
SELECT 'n a rj t', t1.x, t2.x FROM ntxy AS t1 ANY RIGHT JOIN t AS t2 ON t1.x = t2.x OR t1.y = t2.x ORDER BY t1.x;
SELECT 'n fj n', t1.x, t2.x FROM nt AS t1 FULL JOIN nt AS t2 ON t1.x = t2.x ORDER BY t1.x;
SELECT 'n fj n', t1.x, t2.x FROM nt AS t1 FULL JOIN nt AS t2 USING(x) ORDER BY t1.x;
SELECT 'n fj n', t1.x, t2.x FROM nt AS t1 FULL JOIN ntxy AS t2 ON t1.x = t2.x OR t1.x = t2.y ORDER BY t1.x;
SELECT 'n fj t', t1.x, t2.x FROM nt AS t1 FULL JOIN t AS t2 ON t1.x = t2.x ORDER BY t1.x;
SELECT 'n fj t', t1.x, t2.x FROM nt AS t1 FULL JOIN t AS t2 USING(x) ORDER BY t1.x;
SELECT 'n fj t', t1.x, t2.x FROM ntxy AS t1 FULL JOIN t AS t2 ON t1.x = t2.x OR t2.x = t1.y ORDER BY t1.x;
SELECT 'n fj t', t1.x, t2.x FROM ntxy AS t1 FULL JOIN t AS t2 ON t2.x = t1.y OR t1.x = t2.x ORDER BY t1.x;
SELECT 'n rj n', t1.x, t2.x FROM nt AS t1 RIGHT JOIN nt AS t2 ON t1.x = t2.x ORDER BY t1.x;
SELECT 'n rj n', t1.x, t2.x FROM nt AS t1 RIGHT JOIN nt AS t2 USING(x) ORDER BY t1.x;
SELECT 'n rj n', t1.x, t2.x FROM nt AS t1 RIGHT JOIN ntxy AS t2 ON t1.x = t2.x OR t1.x = t2.y ORDER BY t1.x;
SELECT 'n rj t', t1.x, t2.x FROM nt AS t1 RIGHT JOIN t AS t2 ON t1.x = t2.x ORDER BY t1.x;
SELECT 'n rj t', t1.x, t2.x FROM nt AS t1 RIGHT JOIN t AS t2 USING(x) ORDER BY t1.x;
SELECT 'n rj t', t1.x, t2.x FROM ntxy AS t1 RIGHT JOIN t AS t2 ON t1.x = t2.x OR t1.y = t2.x ORDER BY t1.x;
SELECT 'N';
select 'NativeReader';
select 'Negative offset with const defaults';
select 'Negative offset with defaults';
select 'Negative offset';
SELECT 'negative tests';
SELECT 'Nested';
select 'new record inserted by providing new deduplication token';
SELECT 'ngramMinHash';
SELECT 'ngramMinHashCaseInsensitive';
SELECT 'ngramMinHashCaseInsensitiveUTF8';
SELECT 'ngramMinHashUTF8';
SELECT 'ngramSimHash';
SELECT 'ngramSimHashCaseInsensitive';
SELECT 'ngramSimHashCaseInsensitiveUTF8';
SELECT 'ngramSimHashUTF8';
select 'no cleanup 1', * from test FINAL order by uid;
select 'no cleanup 3', * from test FINAL order by uid;
select 'no Fatal messages', count() from logs where level = 'Fatal';
select 'no fsync';
select 'no nested', arraySort(groupArray(n)) from (select n from mt1 union all select * from mt2);
select 'no new rows';
SELECT 'No output on `throw`';
SELECT 'No problematic policy, select works';
SELECT 'no_transaction_target', count() FROM target;
SELECT 'noColumns';
SELECT 'Non constant map';
SELECT 'Non nullable value nullable key';
SELECT 'Non nullable value only null key ';
SELECT 'Non-const argument';
SELECT 'non-const arguments';
SELECT 'non-const column';
SELECT 'Non-const point;
SELECT 'non-const';
SELECT 'non-const, int';
SELECT 'non-const, uint';
SELECT 'none join t on';
SELECT 'none join t using';
SELECT 'None';
SELECT 'Normal SELECT does not see deleted rows';
SELECT 'Normal';
SELECT 'north pole';
SELECT 'Not equals with existing key';
SELECT 'Not equals with non existing key and default value';
SELECT 'Not equals with non existing key';
select 'NOT ILIKE';
SELECT 'NOT IN with existing key';
SELECT 'NOT IN with non existing key and default value';
SELECT 'NOT IN with non existing key';
select 'NOT LIKE';
SELECT 'not optimized (smoke)';
SELECT 'NOW BAD ==========================:';
SELECT 'NOW okay =========================:';
SELECT 'Nullable and LowCardinality';
SELECT 'Nullable value nullable key';
SELECT 'Nullable value only null key ';
select 'Nullable values';
SELECT 'Nullable';
select 'Nullable';
select 'Nullable(UInt64)', blockSerializedSize(toNullable(0xdeadbeafdead));
select 'Nullable(UInt8)', blockSerializedSize(toNullable(0));
SELECT 'NullableColumnFromCast with transform_null_in=1';
SELECT 'NullableColumnFromTable with transform_null_in=0';
SELECT 'NullableColumnFromTable with transform_null_in=1';
SELECT 'NullableTuple with transform_null_in=0';
SELECT 'NullableTuple with transform_null_in=1';
select 'number of noisy messages', greatest(count(), 10) from (select count() / (select count() from logs) as freq, message_format_string from logs group by message_format_string having freq > 0.05);
SELECT 'numbers';
SELECT 'Numeric array branches';
SELECT 'Numeric branches';
SELECT 'O';
select 'Offset > block';
select 'OFFSET distributed_push_down_limit=0';
select 'OFFSET distributed_push_down_limit=1';
SELECT 'offset', * FROM remote('127.1', view(SELECT * FROM numbers(10))) SETTINGS offset=5;
SELECT 'OFFSET';
SELECT 'Ohello' ILIKE '%hell%';
SELECT 'OHello' ILIKE '%lhell%';
SELECT 'Ohello' NOT ILIKE '%hell%';
SELECT 'OHello' NOT ILIKE '%lhell%';
SELECT 'Ok (3)';
SELECT 'Ok (4)';
SELECT 'Ok' FROM 02703_db.02703_unexpected_columns;
SELECT 'OK';
SELECT 'Ok';
SELECT 'on + join_use_nulls';
select 'on exception before start', arraySort(groupArray(n)) from (select n from mt1 union all select * from mt2);
select 'on exception while processing', arraySort(groupArray(n)) from (select n from mt1 union all select * from mt2);
select 'on session close', arraySort(groupArray(n)) from (select n from mt1 union all select * from mt2);
SELECT 'on with or';
SELECT 'on';
SELECT 'onlySpecificColumn';
SELECT 'onlySpecificColumns';
SELECT 'opt';
SELECT 'OPTIMIZE';
SELECT 'optimize_aggregation_in_order';
select 'optimize_move_to_prewhere_if_final = 0';
select 'optimize_move_to_prewhere_if_final = 1';
SELECT 'optimize_read_in_order';
select 'optimize_skip_unused_shards';
select 'optimize_skip_unused_shards_rewrite_in(0,)';
select 'optimize_skip_unused_shards_rewrite_in(2,)';
select 'ORDER BY LIMIT BY';
SELECT 'ORDER BY LIMIT';
select 'ORDER BY LIMIT';
SELECT 'Order by tuple with collate';
SELECT 'Order by tuple without collate';
SELECT 'ORDER BY w/ ALIAS';
SELECT 'Order by with collate';
SELECT 'Order by without collate';
SELECT 'ORDER BY';
select 'ORDER BY';
SELECT 'ordinary after rename:';
select 'Original bug: the same query executed multiple times yielded different results.';
SELECT 'orZero';
SELECT 'other operators';
SELECT 'other', * FROM 02703_db_asterisk.other;
SELECT 'out_transaction', count() FROM target;
SELECT 'Outer part of Mecca';
SELECT 'outer';
SELECT 'Pacific/Apia', rand() as r, toHour(toDateTime(r, 'Pacific/Apia') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'Pacific/Apia', toDateTime('2020-01-02 03:04:05', 'Pacific/Apia') AS x, toStartOfDay(x), toHour(x);
SELECT 'Pacific/Enderbury', rand() as r, toHour(toDateTime(r, 'Pacific/Enderbury') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'Pacific/Enderbury', toDateTime('2020-01-02 03:04:05', 'Pacific/Enderbury') AS x, toStartOfDay(x), toHour(x);
SELECT 'Pacific/Fakaofo', rand() as r, toHour(toDateTime(r, 'Pacific/Fakaofo') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'Pacific/Fakaofo', toDateTime('2020-01-02 03:04:05', 'Pacific/Fakaofo') AS x, toStartOfDay(x), toHour(x);
SELECT 'Pacific/Kiritimati', rand() as r, toHour(toDateTime(r, 'Pacific/Kiritimati') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'Pacific/Kiritimati', toDateTime('2020-01-02 03:04:05', 'Pacific/Kiritimati') AS x, toStartOfDay(x), toHour(x);
SELECT 'Pacific/Kwajalein', rand() as r, toHour(toDateTime(r, 'Pacific/Kwajalein') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;
SELECT 'Pacific/Kwajalein', toDateTime('2020-01-02 03:04:05', 'Pacific/Kwajalein') AS x, toStartOfDay(x), toHour(x);
SELECT 'pair of lines, different polygons';
SELECT 'pair of lines, single polygon';
SELECT 'parallel_distributed_insert_select=1';
SELECT 'parallel_distributed_insert_select=2';
SELECT 'parseDateTime32BestEffort';
SELECT 'parseDateTime32BestEffortOrNull';
SELECT 'parseDateTime32BestEffortOrZero';
SELECT 'parseDateTime64BestEffortUS';
SELECT 'parseDateTime64BestEffortUSOrNull';
SELECT 'parseDateTime64BestEffortUSOrZero';
SELECT 'parseDateTimeBestEffort';
SELECT 'parseDateTimeBestEffortOrNull';
SELECT 'parseDateTimeBestEffortOrZero';
SELECT 'parseDateTimeBestEffortUS';
SELECT 'parseDateTimeBestEffortUSOrZero', 'parseDateTimeBestEffortUSOrNull';
SELECT 'Parts after OPTIMIZE:';
SELECT 'Parts before OPTIMIZE:';
SELECT 'Parts optimized';
select 'parts';
SELECT 'Parts:';
SELECT 'plus';
SELECT 'Policy not applicable';
SELECT 'Polygon dictionary';
SELECT 'polygon with holes';
SELECT 'PolygonDictionary';
SELECT 'polygons with reversed direction';
select 'pop back';
select 'pop front';
select 'Positive offset with const defaults';
select 'Positive offset with defaults';
select 'Positive offset';
SELECT 'Possible verflow';
SELECT 'PREWHERE';
SELECT 'PROFILE DROPPED';
SELECT 'pure nullable result:';
select 'push back';
select 'push front';
SELECT 'Q1', * FROM mt WHERE d = '2106-02-07';
SELECT 'Q2', * FROM mt WHERE d = '1970-01-01';
SELECT 'quantileInterpolatedWeighted';
select 'quarter', date_diff('quarter', toDate32('1969-12-25'), toDate32('1970-01-05'));
select 'quarter', date_diff('quarter', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));
SELECT 'r1' FROM system.zookeeper WHERE path = '/clickhouse/' || currentDatabase() || '/01700_system_zookeeper_path_in/' || getMacro('shard') || '/replicas' AND name LIKE '%'|| getMacro('replica') ||'%' ORDER BY name;
SELECT 'r1' FROM system.zookeeper WHERE path IN ('/clickhouse/' || currentDatabase() || '/01700_system_zookeeper_path_in/' || getMacro('shard') || '/replicas') AND name LIKE '%' || getMacro('replica') || '%' ORDER BY name;
SELECT 'r1', id, val, count(), uniqExact(unique_value) FROM replicated_deduplicate_by_columns_r1 GROUP BY id, val ORDER BY id, val;
SELECT 'R1, R2, R3, R4, R5: ((x == 1) OR (x == 2) OR (x == 3)) AND (x <= 2) AND (x >= 2)';
SELECT 'R1, R2, R3, R4, R5: ((x == 1) OR (x == 2) OR (x == 3)) AND (x <= 2) AND (y >= 20)';
SELECT 'R1, R2, R3, R4, R5: (x == 2) AND (y >= 20) FROM ANOTHER';
SELECT 'R1, R2, R3, R4: ((x == 1) OR (x == 2) OR (x == 3)) AND (x <= 2)';
SELECT 'R1, R2, R3: (x == 1) OR (x == 2) OR (x == 3)';
SELECT 'R1, R2: (x == 1) OR (x == 2)';
SELECT 'R1, R2: (x == 2) FROM ANOTHER';
SELECT 'R1: x == 1';
SELECT 'r2', id, val, count(), uniqExact(unique_value) FROM replicated_deduplicate_by_columns_r2 GROUP BY id, val ORDER BY id, val;
SELECT 'R2, R3, R4, R5: ((x == 2) OR (x == 3)) AND (x <= 2) AND (x >= 2)';
SELECT 'R2, R3, R4, R5: ((x == 2) OR (x == 3)) AND (x <= 2) AND (y >= 20)';
SELECT 'R3, R4, R5: (x == 3) AND (x <= 2) AND (x >= 2)';
SELECT 'R3, R4, R5: (x == 3) AND (x <= 2) AND (y >= 20)';
SELECT 'R4, R5: (x <= 2) AND (x >= 2)';
SELECT 'R4, R5: (x <= 2) AND (y >= 20)';
SELECT 'R5: (x >= 2)';
SELECT 'r\\a1bbb' LIKE '%r\\\\a1%bbb%' AS res;
SELECT 'Range dictionary';
SELECT 'Range key dictionary dictGetOrNull';
SELECT 'RangeHashedDictionary';
SELECT 'read files';
SELECT 'Read the data after OPTIMIZE, all deleted rwos should be physically removed now';
select 'readonly', arraySort(groupArray(n)) from (select n from mt1 union all select * from mt2);
SELECT 'recursive modulo partition key:';
SELECT 'ReinterpretErrors';
SELECT 'remote_0', toUInt8(1) AS dummy FROM remote('127.0.0.2', system, one) AS o WHERE o.dummy = 0;
SELECT 'remote_1', toUInt8(1) AS dummy FROM remote('127.0.0.2', system, one) AS o WHERE o.dummy = 1;
SELECT 'Remove partial duplicates';
SELECT 'REPLACE empty';
SELECT 'REPLACE recursive';
SELECT 'REPLACE simple';
SELECT 'REPLACE transformer';
SELECT 'Replica synced';
SELECT 'Replicated';
select 'reset deduplication token and insert new row';
select 'Result with different type';
SELECT 'REVOKE queries';
SELECT 'right (join_use_nulls mix)';
SELECT 'right (join_use_nulls mix2)';
SELECT 'right (join_use_nulls)';
select 'RIGHT JOIN';
select 'right subs';
select 'right';
SELECT 'right';
SELECT 'rightPad';
SELECT 'rightPadUTF8';
select 'rollback', arraySort(groupArray(n)) from (select n from mt1 union all select * from mt2);
SELECT 'rollup';
SELECT 'round() : ', toDecimal128('1234567890.123456789', 20) AS x, -x AS y, round(x), round(y), round(x, -3), round(y, -3);
SELECT 'round() : ', toDecimal256('1234567890.123456789', 40) AS x, -x AS y, round(x), round(y), round(x, -3), round(y, -3);
SELECT 'roundBankers() : ', toDecimal128('1234567890.123456789', 20) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, -3), roundBankers(y, -3);
SELECT 'roundBankers() : ', toDecimal256('1234567890.123456789', 40) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, -3), roundBankers(y, -3);
SELECT 'Rows in parts', SUM(rows) FROM system.parts WHERE database = currentDatabase() AND table = 'lwd_test' AND active;
SELECT 'Rows in parts', SUM(rows) FROM system.parts WHERE database = currentDatabase() AND table = 'lwd_test_02521' AND active;
SELECT 'RU' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'cca2', tuple(IPv4StringToNum('127.0.0.1')));
SELECT 'Run another SELECT w/o quota', 1 SETTINGS use_query_cache = true;
SELECT 'Run another SELECT with quota that current user may write only 1 entry in the query cache', 1 SETTINGS use_query_cache = true;
SELECT 'Run SELECT again but w/o quota', 1 SETTINGS use_query_cache = true;
SELECT 'Run SELECT which writes its result in the query cache', 1 SETTINGS use_query_cache = true;
SELECT 'Run SELECT with quota that current user may use only 1 byte in the query cache', 1 SETTINGS use_query_cache = true;
SELECT 'Russian ё and ё', 'Zero bytes \0 \0 in middle' FORMAT Vertical;
SELECT 'Scalar subqueries';
SELECT 'second nullable';
SELECT 'SECOND QUERY:';
select 'second', date_diff('second', toDate32('1969-12-31'), toDate32('1970-01-01'));
SELECT 'second-index';
SELECT 'SELECT * FROM t1, t2 WHERE t1.a = t2.a';
SELECT 'SELECT * FROM t1, t2';
select 'select 1';
select 'select 2';
select 'select 3';
select 'select 4';
select 'select 5';
select 'select 6';
SELECT 'SELECT _database, _table, n FROM 01902_db.t_merge ORDER BY _database, _table, n';
SELECT 'SELECT _database, _table, n FROM 01902_db.t_merge WHERE _database = 01902_db1 ORDER BY _database, _table, n';
SELECT 'SELECT _database, _table, n FROM 01902_db.t_merge WHERE _table = t1 ORDER BY _database, _table, n';
SELECT 'SELECT _database, _table, n FROM 01902_db.t_merge1 ORDER BY _database, _table, n';
SELECT 'SELECT _database, _table, n FROM 01902_db.t_merge_1 ORDER BY _database, _table, n';
SELECT 'SELECT _database, _table, n FROM merge(01902_db, ^t$) ORDER BY _database, _table, n';
SELECT 'SELECT _database, _table, n FROM merge(currentDatabase(), ^t) ORDER BY _database, _table, n';
SELECT 'SELECT _database, _table, n FROM merge(REGEXP(^01902_db), ^t) ORDER BY _database, _table, n';
SELECT 'select all values as input stream';
SELECT 'SELECT avg(number * 2) FROM numbers(10)';
SELECT 'SELECT avg(number + 2) FROM numbers(10)';
SELECT 'SELECT avg(number - 2) FROM numbers(10)';
SELECT 'SELECT avg(number / 2) FROM numbers(10)';
SELECT 'select columns from dictionary';
SELECT 'SELECT t1.a, t2.a FROM t1, t2 WHERE t1.b = t2.b';
SELECT 'SELECT t1.a, t2.b, t3.b FROM t1, t2, t3 WHERE t1.a = t2.a AND t1.a = t3.a';
SELECT 'SELECT t1.a, t2.b, t3.b FROM t1, t2, t3 WHERE t1.b = t2.b AND t1.b = t3.b';
SELECT 'SELECT t1.a, t2.b, t3.b, t4.b FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t1.a = t3.a AND t1.a = t4.a';
SELECT 'SELECT t1.a, t2.b, t3.b, t4.b FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t2.a = t3.a AND t3.a = t4.a';
SELECT 'SELECT t1.a, t2.b, t3.b, t4.b FROM t1, t2, t3, t4 WHERE t1.b = t2.b AND t1.b = t3.b AND t1.b = t4.b';
select 'self full nullable vs not nullable';
select 'self full nullable';
select 'self full';
select 'self inner nullable vs not nullable';
select 'self inner nullable';
select 'self inner';
select 'self left nullable vs not nullable';
select 'self left nullable';
select 'self left';
select 'self right nullable vs not nullable';
select 'self right nullable';
select 'self right';
SELECT 'semi left';
SELECT 'semi right';
select 'sep1';
select 'sep2';
select 'sep3';
select 'sep4';
select 'sep5';
select 'sep6';
SELECT 'serialized state is used', sequenceMatchMerge('(?1)(?2)')(seq) AS seq FROM 02713_seqt;
SELECT 'SET queries';
SELECT 'Settings description should start with capital letter';
SELECT 'Shanghai DST Years:';
SELECT 'shifted grid';
SELECT 'SHOW CREATE TABLE 01902_db.t_merge';
SELECT 'SHOW CREATE TABLE 01902_db.t_merge_1';
SELECT 'sign(Decimal32(5))';
SELECT 'sign(Float32)';
SELECT 'sign(Float64)';
SELECT 'sign(Int32)';
SELECT 'sign(UInt32)';
SELECT 'Signed numbers';
SELECT 'Simple key dictionary dictGetOrNull';
SELECT 'simple key';
SELECT 'simple partition key:';
SELECT 'Simple';
SELECT 'Simplified version of previous test';
select 'single argument';
SELECT 'single line';
SELECT 'sizes';
SELECT 'SLEEP #1 CHECK', ProfileEvents['SleepFunctionCalls'] as calls, ProfileEvents['SleepFunctionMicroseconds'] as microseconds FROM system.query_log WHERE query like '%SELECT ''SLEEP #1 TEST''%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT 'SLEEP #1 TEST', sleep(0.001) FORMAT Null;
SELECT 'SLEEP #2 CHECK', ProfileEvents['SleepFunctionCalls'] as calls, ProfileEvents['SleepFunctionMicroseconds'] as microseconds FROM system.query_log WHERE query like '%SELECT ''SLEEP #2 TEST''%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT 'SLEEP #2 TEST', sleep(0.001) FROM numbers(2) FORMAT Null;
SELECT 'SLEEP #3 CHECK', ProfileEvents['SleepFunctionCalls'] as calls, ProfileEvents['SleepFunctionMicroseconds'] as microseconds FROM system.query_log WHERE query like '%SELECT ''SLEEP #3 TEST''%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT 'SLEEP #3 TEST', sleepEachRow(0.001) FORMAT Null;
SELECT 'SLEEP #4 CHECK', ProfileEvents['SleepFunctionCalls'] as calls, ProfileEvents['SleepFunctionMicroseconds'] as microseconds FROM system.query_log WHERE query like '%SELECT ''SLEEP #4 TEST''%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT 'SLEEP #4 TEST', sleepEachRow(0.001) FROM numbers(2) FORMAT Null;
SELECT 'SLEEP #5 CHECK', ProfileEvents['SleepFunctionCalls'] as calls, ProfileEvents['SleepFunctionMicroseconds'] as microseconds FROM system.query_log WHERE query like '%CREATE VIEW sleep_view AS%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT 'SLEEP #6 CHECK', ProfileEvents['SleepFunctionCalls'] as calls, ProfileEvents['SleepFunctionMicroseconds'] as microseconds FROM system.query_log WHERE query like '%SELECT ''SLEEP #6 TEST''%' AND type > 1 AND current_database = currentDatabase() AND event_date >= yesterday() FORMAT JSONEachRow;
SELECT 'SLEEP #6 TEST', sleepEachRow(0.001) FROM sleep_view LIMIT 10 FORMAT Null;
select 'slice';
SELECT 'small range always produces array of length 1';
select 'snapshot', count(), sum(n) from mt1;
select 'snapshot1', count(), sum(n) from mt1;
select 'snapshot100500', count(), sum(n) from mt1;
select 'snapshot3', count() = (select count() from system.parts where database=currentDatabase() and table='mt1' and _state in ('Active', 'Outdated')) from mt1;
SELECT 'SOME GRANULES FILTERED OUT';
SELECT 'Source table';
SELECT 'south pole';
SELECT 'Special cases';
SELECT 'Special functions array, tuple';
SELECT 'Standalone lambda';
SELECT 'Standalone lambdas';
SELECT 'star', * FROM 02703_db_asterisk.`*`;
SELECT 'status:';
SELECT 'status_after_detach_and_attach:';
SELECT 'Still alive';
SELECT 'Strict mode without key folding and proper key and iv lengths checks.';
SELECT 'String array branches';
SELECT 'String branches';
SELECT 'String ConstConst';
select 'String', blockSerializedSize('foo');
select 'String,UInt8', blockSerializedSize('foo', 1);
SELECT 'stringJaccardIndex', s1, s2, stringJaccardIndex(s1, s2) FROM t ORDER BY ALL;
SELECT 'stringJaccardIndexUTF8', s1, s2, stringJaccardIndexUTF8(s1, s2) FROM t ORDER BY ALL;
SELECT 'Subqueries CTE';
SELECT 'Subqueries FROM section';
select 'subqueries with OR';
select 'subquery alias';
select 'subquery column alias with OR';
select 'subquery column alias';
select 'subquery expression';
select 'subquery';
SELECT 'Subquery';
SELECT 'Sum after DETACH PARTITION:';
SELECT 'Sum after DROP PARTITION:';
SELECT 'Sum before DETACH PARTITION:';
SELECT 'Sum before DROP PARTITION:';
SELECT 'Summing Merge Tree';
SELECT 'SYSTEM RELOAD DICTIONARIES ON CLUSTER test_shard_localhost';
SELECT 'SYSTEM RELOAD DICTIONARY';
SELECT 'system.detached_parts after DETACH PARTITION:';
SELECT 't fj n', t1.x, t2.x FROM t AS t1 FULL JOIN nt AS t2 ON t1.x = t2.x ORDER BY t1.x;
SELECT 't fj n', t1.x, t2.x FROM t AS t1 FULL JOIN nt AS t2 USING(x) ORDER BY t1.x;
SELECT 't fj n', t1.x, t2.x FROM t AS t1 FULL JOIN ntxy AS t2 ON t1.x = t2.x OR t1.x = t2.y ORDER BY t1.x;
SELECT 't join none on';
SELECT 't join none using';
SELECT 't rj n', t1.x, t2.x FROM t AS t1 RIGHT JOIN nt AS t2 ON t1.x = t2.x ORDER BY t1.x;
SELECT 't rj n', t1.x, t2.x FROM t AS t1 RIGHT JOIN nt AS t2 USING(x) ORDER BY t1.x;
SELECT 't rj n', t1.x, t2.x FROM t AS t1 RIGHT JOIN ntxy AS t2 ON t1.x = t2.x OR t1.x = t2.y ORDER BY t1.x;
SELECT 'Table access with database and table name qualification';
SELECT 'Table access with table name qualification';
SELECT 'Table access without table name qualification';
SELECT 'Table array decimal avg';
SELECT 'Table array decimal max';
SELECT 'Table array decimal min';
SELECT 'Table array decimal sum';
SELECT 'Table array int avg';
SELECT 'Table array int max';
SELECT 'Table array int min';
SELECT 'Table array int sum';
SELECT 'Table attached';
SELECT 'Table qualified matchers';
select 'table with 2 blocks final';
select 'table with 2 blocks optimized';
select 'table with 4 blocks final';
select 'table with 4 blocks optimized';
select 'table with 5 blocks final';
select 'table with 5 blocks optimized';
select 'table';
SELECT 'Tabs \t Tabs', 'Long\tTitle' FORMAT PrettyNoEscapes;
SELECT 'Tabs \t Tabs', 'Non-first \t Tabs' FORMAT Vertical;
SELECT 'Tehran DST Years:';
select 'test detach';
select 'test Distributed undrop';
SELECT 'Test float values';
select 'test flush on replace';
SELECT 'test hostname in system log tables';
SELECT 'test intervals';
select 'test Log undrop';
select 'test MergeTree drop and undrop multiple times';
select 'test MergeTree undrop';
select 'test MergeTree with cluster';
select 'test MergeTree without uuid on cluster';
SELECT 'Test null specifics';
SELECT 'Test null variadic';
SELECT 'Test nullable float values';
SELECT 'Test nullable signed integer values';
SELECT 'Test nullable unsigned integer values';
select 'test ReplicatedMergeTree undrop';
SELECT 'Test signed integer values';
SELECT 'Test the default index granularity for vector search indexes (CREATE TABLE AND ALTER TABLE), should be 100 million for Annoy and USearch';
SELECT 'Test unsigned integer values';
select 'test', count(*) from zeros_mt(1000000) where not ignore(zero);
SELECT 'test';
SELECT 'test-join';
SELECT 'test-partition-prune';
SELECT 'test1', number FROM system.numbers GROUP BY number;
SELECT 'test2', number FROM system.numbers GROUP BY number ORDER BY number;
SELECT 'test3', number FROM system.numbers GROUP BY number ORDER BY number;
SELECT 'test4', number FROM numbers(1000) GROUP BY number ORDER BY number;
SELECT 'test5', number FROM numbers(1000) GROUP BY number ORDER BY number;
SELECT 'test_01155_atomic:';
SELECT 'test_01155_ordinary:';
SELECT 'test_cluster_two_shards prefer_localhost_replica=1';
SELECT 'test_cluster_two_shards_internal_replication prefer_localhost_replica=0';
SELECT 'test_cluster_two_shards_internal_replication prefer_localhost_replica=1';
SELECT 'test_jit_nonnull';
SELECT 'test_jit_nullable';
SELECT 'tests';
SELECT 'The argument is after the reference time point';
SELECT 'The argument is before the reference time point';
SELECT 'The data of table:';
SELECT 'The reference time point is 2023-06-30 23:59:30';
SELECT 'The results of query: SELECT id, mapExtractKeyLike(map, \'5-K1\') FROM map_extractKeyLike_test ORDER BY id;';
SELECT 'The results of query: SELECT id, mapExtractKeyLike(map, \'P1%\') FROM map_extractKeyLike_test ORDER BY id;';
select 'the rows get inserted';
select 'The same issue in a much smaller repro happens also in Debug builds';
SELECT 'THIRD QUERY:';
SELECT 'This has spaces' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'Timezones';
SELECT 'tmp_table_01818', count() FROM tmp_table_01818 WHERE `advertiser_id` = 'ClickHouse';
SELECT 'TOTAL rows', count() FROM source_data;
SELECT 'totals';
SELECT 'TP1';
SELECT 'TP2';
SELECT 'TP3';
SELECT 'TP4';
SELECT 'TP5';
SELECT 'trunc() : ', toDecimal128('1234567890.123456789', 20) AS x, -x AS y, trunc(x), trunc(y), trunc(x, -3), trunc(y, -3);
SELECT 'trunc() : ', toDecimal256('1234567890.123456789', 40) AS x, -x AS y, trunc(x), trunc(y), trunc(x, -3), trunc(y, -3);
SELECT 'TSKV';
SELECT 'TSV';
select 'TSV';
SELECT 'TTL GROUP BY';
SELECT 'TTL WHERE';
SELECT 'tuple as partition key:';
SELECT 'Tuple nested in Array nested in Tuple';
SELECT 'Tuple nested in Array';
SELECT 'Tuple nested in Map nested in Tuple';
SELECT 'Tuple nested in Map';
SELECT 'TUPLE vectors and special cases';
SELECT 'Tuple';
select 'two arguments';
select 'two inserts with exact data, one inserted, one deduplicated by data digest';
select 'two inserts with the same dedup token, one inserted, one deduplicated by the token';
SELECT 'Types of aggregation result array avg';
SELECT 'Types of aggregation result array max';
SELECT 'Types of aggregation result array min';
SELECT 'Types of aggregation result array product';
SELECT 'Types of aggregation result array summ';
SELECT 'Türk (default)';
SELECT 'Türk (tr)';
SELECT 'U16';
SELECT 'U32';
SELECT 'U64';
SELECT 'U8';
SELECT 'UBSAN bug';
SELECT 'UInt128';
SELECT 'UInt16';
SELECT 'UInt256';
select 'UInt32', blockSerializedSize(0xdeadbeaf);
SELECT 'UInt32';
select 'UInt64', blockSerializedSize(0xdeadbeafdead);
SELECT 'UInt64';
select 'UInt8', blockSerializedSize(0);
SELECT 'UInt8';
SELECT 'UK' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2a02:6b8:1::')));
select 'UNBLOCK';
SELECT 'Union non constants';
SELECT 'uniqCombined remote()';
SELECT 'uniqCombined(12)';
SELECT 'uniqCombined(12)(IPv4NumToString)';
SELECT 'uniqCombined(12)(round(float))';
SELECT 'uniqCombined(12)(round(toFloat32()))';
SELECT 'uniqCombined(17)';
SELECT 'uniqCombined(17)(IPv4NumToString)';
SELECT 'uniqCombined(17)(round(float))';
SELECT 'uniqCombined(17)(round(toFloat32()))';
SELECT 'uniqCombined(20)';
SELECT 'uniqCombined(20)(IPv4NumToString)';
SELECT 'uniqCombined(20)(round(float))';
SELECT 'uniqCombined(20)(round(toFloat32()))';
SELECT 'uniqCombined(round(float))';
SELECT 'uniqCombined(X)(round(toFloat32()))';
SELECT 'uniqCombined(Z)(IPv4NumToString)';
select 'uniqCombined64State(10000000)', blockSerializedSize(uniqCombined64State(number)) from (select number from system.numbers limit 10000000);
select 'uniqCombinedState(100)', blockSerializedSize(uniqCombinedState(number)) from (select number from system.numbers limit 100);
select 'uniqCombinedState(10000)', blockSerializedSize(uniqCombinedState(number)) from (select number from system.numbers limit 10000);
select 'uniqCombinedState(100000)', blockSerializedSize(uniqCombinedState(number)) from (select number from system.numbers limit 100000);
select 'uniqCombinedState(1000000)', blockSerializedSize(uniqCombinedState(number)) from (select number from system.numbers limit 1000000);
select 'uniqCombinedState(10000000)', blockSerializedSize(uniqCombinedState(number)) from (select number from system.numbers limit 10000000);
SELECT 'uniqExact', uniqExact(s) FROM defaults;
SELECT 'uniqHLL12 IPv4NumToString';
SELECT 'uniqHLL12 remote()';
SELECT 'uniqHLL12 round(float)';
SELECT 'uniqHLL12 round(toFloat32())';
SELECT 'uniqTheta arrays';
SELECT 'uniqTheta complex types';
SELECT 'uniqTheta decimals';
SELECT 'uniqTheta distinct';
SELECT 'uniqTheta intersect test';
SELECT 'uniqTheta IPv4NumToString';
SELECT 'uniqTheta many agrs';
SELECT 'uniqTheta precise';
SELECT 'uniqTheta remote()';
SELECT 'uniqTheta remove injective';
SELECT 'uniqTheta retention test';
SELECT 'uniqTheta retention with AggregatingMergeTree test';
SELECT 'uniqTheta retention with MergeTree test';
SELECT 'uniqTheta round(float)';
SELECT 'uniqTheta round(toFloat32())';
SELECT 'uniqTheta union test';
SELECT 'uniqTheta';
SELECT 'Unix Timestamp with Milliseconds';
SELECT 'Unqualified matchers';
SELECT 'Unsigned numbers';
select 'update dedup token, two inserts with the same dedup token, one inserted, one deduplicated by the token';
SELECT 'upper range bound';
SELECT 'US' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2620:0:870::')));
SELECT 'using + join_use_nulls';
SELECT 'using';
SELECT 'value vs value';
SELECT 'value: ', avg(number * 2) FROM numbers(10);
SELECT 'value: ', avg(number + 2) FROM numbers(10);
SELECT 'value: ', avg(number - 2) FROM numbers(10);
SELECT 'value: ', avg(number / 2) FROM numbers(10);
select 'Values';
SELECT 'Various intervals';
SELECT 'Versioned Collapsing Merge Tree';
select 'Vertival merge';
SELECT 'Very simplified version of previous test';
SELECT 'via Distributed', sequenceMatchMerge('(?1)(?2)')(seq) AS seq FROM 02713_seqt_distr;
select 'view' src,* FROM TestTbl_view;
SELECT 'w/o i 1';
SELECT 'w/o is 1';
SELECT 'w/o is 12';
select 'week', date_diff('week', toDate32('1969-12-25'), toDate32('1970-01-05'));
select 'week', date_diff('week', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));
select 'where id % 200 = +-2:';
select 'where id % 200 > 0:';
select 'wide fsync_after_insert';
select 'wide fsync_after_insert,fsync_part_directory';
select 'wide fsync_part_directory,vertical';
SELECT 'Win\Sys' LIKE '%Win\Sys%';
SELECT 'Window functions WINDOW';
SELECT 'Window functions';
SELECT 'with explicit having';
SELECT 'with explicit timezone';
SELECT 'With max key';
SELECT 'With the setting disabled the deleted rows are visible but still can be filterd out';
SELECT 'With the setting disabled the deleted rows are visible';
select 'with_overflow', * from with_overflow;
SELECT 'Without max key';
select 'word';
SELECT 'wordShingleMinHash';
SELECT 'wordShingleMinHashCaseInsensitive';
SELECT 'wordShingleMinHashCaseInsensitiveUTF8';
SELECT 'wordShingleMinHashUTF8';
SELECT 'wordShingleSimHash';
SELECT 'wordShingleSimHashCaseInsensitive';
SELECT 'wordShingleSimHashCaseInsensitiveUTF8';
SELECT 'wordShingleSimHashUTF8';
SELECT 'world' ilike 'Wo%Ld';
SELECT 'World' IN (SELECT 'Hello');
SELECT 'World' IN (SELECT materialize('Hello'));
SELECT 'world' like 'Wo%Ld';
SELECT 'World', throwIf(1);
SELECT 'wrap point around equator';
SELECT 'wrapping in LC:';
SELECT 'x' FROM numbers(2) GROUP BY number WITH TOTALS HAVING count(number)<0;
SELECT 'XML';
SELECT 'Xx|sfF', match('', '\0'), [], ( SELECT cutURLParameter('C,Ai?X', '\0') ), '\0';
SELECT 'y', * FROM (SELECT count('y'), count('y'), 2 AS x) AS t1 RIGHT JOIN (SELECT count('x'), count('y'), 3 AS x) AS t2 ON t1.x = t2.x;
select 'year', date_diff('year', toDate32('1969-12-25'), toDate32('1970-01-05'));
select 'year', date_diff('year', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));
SELECT 'zooming';
SELECT 'ZZ' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2001:db8::')));
SELECT 'ZZ' == dictGetString({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', 'val', tuple(IPv6StringToNum('2001:db8:ffff::')));
select '{ key: fn, value: concat }' == concat('{ key: ', toFixedString('fn', 2), ', value: ', 'concat', ' }');
select '{ key: fn, value: concat }' == format('{}{}{}{}{}', '{ key: ', toFixedString('fn', 2), ', value: ', 'concat', ' }');
SELECT '{"a": {"b": 1, "c": 2}}'::JSON AS s format JSONEachRow;
SELECT '{"a": {"b": 1, "c": 2}}'::JSON AS s;
SELECT '{a' AS x, x LIKE (concat('%', x) AS pat), materialize(x) LIKE pat;
SELECT '{a' AS x, x LIKE (concat('%', x, '%') AS pat), materialize(x) LIKE pat;
SELECT '{a' AS x, x LIKE (concat(x, '%') AS pat), materialize(x) LIKE pat;
SELECT '{a' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
SELECT '{a}' AS x, x LIKE (concat('%', x) AS pat), materialize(x) LIKE pat;
SELECT '{a}' AS x, x LIKE (concat('%', x, '%') AS pat), materialize(x) LIKE pat;
SELECT '{a}' AS x, x LIKE (concat(x, '%') AS pat), materialize(x) LIKE pat;
SELECT '{a}' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
select '{{}' == format('{{{}', '{}');
SELECT '}a' AS x, x LIKE (concat('%', x) AS pat), materialize(x) LIKE pat;
SELECT '}a' AS x, x LIKE (concat('%', x, '%') AS pat), materialize(x) LIKE pat;
SELECT '}a' AS x, x LIKE (concat(x, '%') AS pat), materialize(x) LIKE pat;
SELECT '}a' AS x, x LIKE (x AS pat), materialize(x) LIKE pat;
SELECT '~~~~parts after drop 3_1_1_0~~~~~';
SELECT '~~~~source parts~~~~~';
SELECT 'ü' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'α' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'αβγ' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'а' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'ощщЁё' ILIKE '%щ%';
SELECT 'ощЩЁё' ILIKE '%Щ%Ё';
SELECT 'ощЩЁё' ILIKE '%ё%';
SELECT 'ощщЁё' ILIKE 'Щ%Ё';
SELECT 'правда' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'привет пр' AS x, lengthUTF8(x) AS y;
SELECT 'привет' AS x, 'мир' AS y FORMAT Pretty;
SELECT 'привет' AS x, 'мир' AS y FORMAT PrettyCompact;
SELECT 'привет' AS x, 'мир' AS y FORMAT PrettySpace;
SELECT 'Русский (ru distributed)';
SELECT 'Русский (ru group by)';
SELECT 'Русский (ru)';
SELECT 'Український (default)';
SELECT 'Український (uk)';
SELECT 'Щущпандер' ILIKE '%щп%е%';
SELECT 'Щущпандер' ILIKE '%щП%е%';
SELECT 'ёЁё' ILIKE 'Ё%Ё';
SELECT 'ยจฆฟคฏข' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT '≠' AS ascii, idnaDecode(ascii) AS unicode, idnaEncode(unicode) AS original, tryIdnaEncode(unicode) AS original_try;
SELECT '≠' AS idna, idnaEncode(idna) AS ascii, tryIdnaEncode(idna) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try;
SELECT '──────────────────────────────────────────────';
SELECT '───────────────────────────────────────────────';
SELECT '「bücher」' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'ドメイン名例' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT 'ファッション.biz' AS ascii, idnaDecode(ascii) AS unicode, idnaEncode(unicode) AS original, tryIdnaEncode(unicode) AS original_try;
SELECT '你好', '世界' FORMAT Vertical;
SELECT '例' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT '团淄' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT '😉' AS str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try;
SELECT ( SELECT throwIf(1 + dummy) );
SELECT ( SELECT toDecimal128([], rowNumberInBlock()) ) , lcm('', [[(CAST(('>A') AS String))]]);
SELECT ('1',2) AS t, t.1, t.2;
SELECT ('1',materialize(2)) AS t, t.1, t.2;
SELECT ((1, 2), (2, 3), (3, 4)) FORMAT TSVWithNames SETTINGS legacy_column_name_of_tuple_literal = 1;
SELECT ((1, 2), (2, 3), (3, 4)) FORMAT TSVWithNames;
select ((1, 2), (3, 4)) in (((1, 2), (3, 4)));
select ((1, 2), (3, 4)) in (((1, 2), (3, 4)), ((5, 6), (7, 8)));
select ((1, 2), (3, 4)) in ((1, 2), (3, 4));
select ((1, 2), (3, 4)) in tuple(((1, 2), (3, 4)));
SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_merge;
SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_numbers;
SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_remote;
SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_remote_explicit_structure;
SELECT (*,).1 AS c, toTypeName(c) FROM tmp;
SELECT (- ((((tan (t1.c0)))+(t1.c0)))), (cos ((sin (pow(t1.c0,t1.c0))))), ((gcd((- (t1.c0)),((t1.c0)+(t1.c0))))*((- ((- (t1.c0)))))) FROM t1 GROUP BY (sqrt ((- (t1.c0)))), t1.c0, pow((erf ((- (t1.c0)))),t1.c0);
SELECT (0 + 1 + 2 + 3 + 4)::Date AS c;
select (0 + 1, 1, toInt8(sin(5))) in (0 + 1, 1, toInt8(sin(5)));
SELECT (0 as a) ? (2 as b) : (3 as c) as d, a, b, c, d FORMAT TSKV;
SELECT (0.1, 0.2)::Tuple(Decimal(75, 70), Decimal(75, 70));
SELECT (0.1::Decimal(4, 4) * 5)::Float64 AS c;
SELECT (0.1::Decimal(4, 4) + 0.2::Decimal(4, 4) + 0.3::Decimal(4, 4))::Decimal(4, 4) AS c;
SELECT (1 + 2)::UInt32 AS c;
select (1 ? ('abc' as s) : 'def') = s;
select (1 ? ('abc' as s) : toFixedString('def', 3)) = s;
select (1 ? (now() as n) : now() - 1) = n;
select (1 ? (today() as t) : yesterday()) = t;
select (1 ? (toInt16(0) as i) : toInt16(1)) = i;
select (1 ? (toInt16(0) as i) : toInt32(1)) = i;
select (1 ? (toInt16(0) as i) : toInt64(1)) = i;
select (1 ? (toInt16(0) as i) : toInt8(1)) = i;
select (1 ? (toInt16(0) as i) : toUInt16(1)) = i;
select (1 ? (toInt16(0) as i) : toUInt32(1)) = i;
select (1 ? (toInt16(0) as i) : toUInt8(1)) = i;
select (1 ? (toInt32(0) as i) : toInt16(1)) = i;
select (1 ? (toInt32(0) as i) : toInt32(1)) = i;
select (1 ? (toInt32(0) as i) : toInt64(1)) = i;
select (1 ? (toInt32(0) as i) : toInt8(1)) = i;
select (1 ? (toInt32(0) as i) : toUInt16(1)) = i;
select (1 ? (toInt32(0) as i) : toUInt32(1)) = i;
select (1 ? (toInt32(0) as i) : toUInt8(1)) = i;
select (1 ? (toInt64(0) as i) : toInt16(1)) = i;
select (1 ? (toInt64(0) as i) : toInt32(1)) = i;
select (1 ? (toInt64(0) as i) : toInt64(1)) = i;
select (1 ? (toInt64(0) as i) : toInt8(1)) = i;
select (1 ? (toInt64(0) as i) : toUInt16(1)) = i;
select (1 ? (toInt64(0) as i) : toUInt32(1)) = i;
select (1 ? (toInt64(0) as i) : toUInt8(1)) = i;
select (1 ? (toInt8(0) as i) : toInt16(1)) = i;
select (1 ? (toInt8(0) as i) : toInt32(1)) = i;
select (1 ? (toInt8(0) as i) : toInt64(1)) = i;
select (1 ? (toInt8(0) as i) : toInt8(1)) = i;
select (1 ? (toInt8(0) as i) : toUInt16(1)) = i;
select (1 ? (toInt8(0) as i) : toUInt32(1)) = i;
select (1 ? (toInt8(0) as i) : toUInt8(1)) = i;
select (1 ? (toUInt16(0) as i) : toInt16(1)) = i;
select (1 ? (toUInt16(0) as i) : toInt32(1)) = i;
select (1 ? (toUInt16(0) as i) : toInt64(1)) = i;
select (1 ? (toUInt16(0) as i) : toInt8(1)) = i;
select (1 ? (toUInt16(0) as i) : toUInt16(1)) = i;
select (1 ? (toUInt16(0) as i) : toUInt32(1)) = i;
select (1 ? (toUInt16(0) as i) : toUInt64(1)) = i;
select (1 ? (toUInt16(0) as i) : toUInt8(1)) = i;
select (1 ? (toUInt32(0) as i) : toInt16(1)) = i;
select (1 ? (toUInt32(0) as i) : toInt32(1)) = i;
select (1 ? (toUInt32(0) as i) : toInt64(1)) = i;
select (1 ? (toUInt32(0) as i) : toInt8(1)) = i;
select (1 ? (toUInt32(0) as i) : toUInt16(1)) = i;
select (1 ? (toUInt32(0) as i) : toUInt32(1)) = i;
select (1 ? (toUInt32(0) as i) : toUInt64(1)) = i;
select (1 ? (toUInt32(0) as i) : toUInt8(1)) = i;
select (1 ? (toUInt64(0) as i) : toUInt16(1)) = i;
select (1 ? (toUInt64(0) as i) : toUInt32(1)) = i;
select (1 ? (toUInt64(0) as i) : toUInt64(1)) = i;
select (1 ? (toUInt64(0) as i) : toUInt8(1)) = i;
select (1 ? (toUInt8(0) as i) : toInt16(1)) = i;
select (1 ? (toUInt8(0) as i) : toInt32(1)) = i;
select (1 ? (toUInt8(0) as i) : toInt64(1)) = i;
select (1 ? (toUInt8(0) as i) : toInt8(1)) = i;
select (1 ? (toUInt8(0) as i) : toUInt16(1)) = i;
select (1 ? (toUInt8(0) as i) : toUInt32(1)) = i;
select (1 ? (toUInt8(0) as i) : toUInt64(1)) = i;
select (1 ? (toUInt8(0) as i) : toUInt8(1)) = i;
select (1 ? toFixedString('abc' as s, 3) : 'def') = s;
select (1 ? toFixedString('abc' as s, 3) : toFixedString('def', 3)) = s;
SELECT (1 AS `interval`) + `interval`;
SELECT (1 as a) ? (number + 2 as b) : (number + 3 as c) as d, a, b, c, d FROM system.numbers LIMIT 1 FORMAT TSKV;
SELECT (1 IN (0,2)) AS x GROUP BY x;
select (1) in [1, 2];
SELECT (1, '') IN ((1, ''));
select (1, 'a') in tuple((1, 'a'), (2, 'b'), (3, 'c'));
select (1, 'a') in tuple((2, 'b'), (3, 'c'), (4, 'd'));
select (1, (2, 'foo')) in tuple((1, (3, 'b')), (1, (2, 'foo')));
SELECT (1, 1) IN ((1, 1), (1, 2));
SELECT (1, 1) IN ((1, 2), (1, 2));
SELECT (1, 1) IN [(1, 1), (1, 2)];
SELECT (1, 1) IN [(1, 2), (1, 2)];
SELECT (1, 1);
SELECT (1, 1.0, NULL) / materialize(NULL);
SELECT (1, 1.0, NULL) / NULL;
SELECT (1, 2) + tupleMultiply((3, 4), materialize((5, 1))) - (6, 3);
SELECT (1, 2) / 2;
SELECT (1, 2) < '(1, 1)';
SELECT (1, 2) IN ((1, (2, 3)), (1 + 1, 1));
select (1, 2) in ((1, 2), (3, 4));
SELECT (1, 2) IN ((1, NULL), (1, 2));
select (1, 2) in (1, 2);
SELECT (1, 2) IN (1, NULL);
select (1, 2) in (select (1, 2));
SELECT (1, 2) IN (SELECT 1, 2);
select (1, 2) in (select 1, 2);
SELECT (1, 2) IN 1;
select (1, 2) in [(1, 3), (1, 2)];
select (1, 2) in array((1, 3), (1, 2));
select (1, 2) in array(tuple(1, 2), tuple(3, 4), tuple(5, 6), tuple(7, 8), tuple(9, 10)) settings max_temporary_columns = 4;
select (1, 2) in tuple((1, 2));
select (1, 2) in tuple(1, 2);
SELECT (1, 2) IN tuple(1, NULL);
select (1, 2) in tuple(tuple(1, 2), tuple(3, 4), tuple(5, 6), tuple(7, 8), tuple(9, 10)) settings max_temporary_columns = 4;
SELECT (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, '') IN ((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, ''));
SELECT (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, '') IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 'a');
SELECT (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) IN ((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17));
SELECT (1, 3) IN (SELECT 1, 2);
SELECT (1, [1]);
SELECT (1, materialize(2)) IN (SELECT 1, 2);
SELECT (1, materialize(2)) IN (SELECT materialize(1), 2);
SELECT (1, materialize(2), 'Hello') IN (SELECT materialize(1), 2, 'Hello');
SELECT (1, materialize(2), 'Hello') IN (SELECT materialize(1), 2, materialize('Hello'));
SELECT (1, materialize(2), 'World') IN (SELECT materialize(1), 2, 'Hello');
SELECT (1, materialize(2), 'World') IN (SELECT materialize(1), 2, materialize('Hello'));
SELECT (1, materialize(2), materialize('Hello')) IN (SELECT materialize(1), 2, 'Hello');
SELECT (1, materialize(2), materialize('Hello')) IN (SELECT materialize(1), 2, materialize('Hello'));
SELECT (1, materialize(2), materialize('World')) IN (SELECT materialize(1), 2, 'Hello');
SELECT (1, materialize(2), materialize('World')) IN (SELECT materialize(1), 2, materialize('Hello'));
SELECT (1, materialize(3)) IN (SELECT 1, 2);
SELECT (1, materialize(3)) IN (SELECT materialize(1), 2);
SELECT (1, NULL) IN (1, NULL);
SELECT (1,'') IN ((-1,''));
SELECT (1,'') IN ((-1,''),(1,''));
SELECT (1,'') IN ((1,''));
SELECT (1,'') IN (-1,'');
SELECT (1,'') IN (1,'');
select (1,2) as x, ((1,2),(3,4)) as y, 1 in x, x in y;
select (3) in [1, 2];
SELECT (5,4) % 2;
SELECT ([(1,3), (2,9)] + [(10.1, 2.4), (4,12)]);
SELECT ([1,2::UInt64]+[1,number]) from numbers(5);
SELECT ([1,2] + [1,4]);
SELECT ([1,2]+[1,number]) from numbers(5);
SELECT ([12,13] % [5,6]);
select ([1], [2]) in (([NULL], [NULL]), ([1], [2]));
select ([1], [2]) in ([NULL], [NULL]);
select ([1], [2]) in [([NULL], [NULL]), ([1], [2])];
select ([1], [2]) in tuple(([NULL], [NULL]), ([1], [2]));
select ([1], [2]) in tuple([NULL], [NULL]);
SELECT ([2.5, 1, 3, 10.1] + [2, 4, 9, 0]);
SELECT ([[1,1],[2]]+[[12,1],[1]]);
SELECT ([materialize(1),materialize(2),materialize(3)]-[1,2,3]);
select (a, 0) from t_tuple_sparse;
select (a, 1) from t_tuple_sparse;
select (a, b) from t_tuple_sparse;
SELECT (a, d, g) = (b, e, h), (a, d, g) != (b, e, h) FROM decimal ORDER BY a;
SELECT (a, d, g) = (c, f, i), (a, d, g) != (c, f, i) FROM decimal ORDER BY a;
select (a, NULL) from t_tuple_sparse;
SELECT (acos(a) <> atan(b)) and (not (acos(a) <> atan(b))) r FROM (SELECT 2 a, 2 b);
SELECT (arrayJoin(['hello', 'world']) AS s) IN set, s;
SELECT (c + 1) as d, (a + 1) as b, 1 AS a, (b + 1) as c, d;
select (date '2001-09-29' + 7) x, toTypeName(x);
select (date '2001-09-29' + interval 1 hour) x, toTypeName(x);
select (date '2001-09-29' + interval 12345 millisecond) x, toTypeName(x);
select (date '2001-09-29' + interval 12345 second) x, toTypeName(x);
select (date '2001-09-29' + interval 7 day) x, toTypeName(x);
select (date '2001-09-29' - interval 1 hour) x, toTypeName(x);
select (date '2001-09-29' - interval 12345 millisecond) x, toTypeName(x);
select (date '2001-10-01' - 7) x, toTypeName(x);
select (date '2001-10-01' - date '2001-09-28') x, toTypeName(x);
select (date '2001-10-01' - interval 7 day) x, toTypeName(x);
SELECT (dummy IN (1)) AS x GROUP BY x;
SELECT (EXPLAIN SYNTAX oneline = 1 SELECT 1) == 'SELECT 1 FROM system.one';
SELECT (EXPLAIN SYNTAX oneline = 1 SELECT 1) == 'SELECT 1';
SELECT (h * h) != 0, (h / h) != 1 FROM decimal WHERE h > 0;
SELECT (i * i) != 0, (i / i) = 1 FROM decimal WHERE i > 0;
SELECT (id + 1 + 1 + 1 + id) AS id FROM test_table;
SELECT (id + 1) AS id FROM test_table;
SELECT (id + b) AS id, id as b FROM test_table;
SELECT (if(a.test == 'a', b.test, c.test)) as `a.test` FROM (SELECT 1 AS id, 'a' AS test) a LEFT JOIN (SELECT 1 AS id, 'b' AS test) b ON b.id = a.id LEFT JOIN (SELECT 1 AS id, 'c' AS test) c ON c.id = a.id;
SELECT (k = 2) OR (k = 1) OR ((NULL OR 1) = k) FROM (SELECT 1 AS k);
SELECT (k = 3) OR ( (k = 1) OR (k = 2) OR ( (NULL OR 1) = k ) ) FROM ( SELECT materialize(1) AS k );
SELECT (k = NULL) OR (k = 1000) FROM t_sparse_pk LIMIT 3;
SELECT (m+n) % 10, count(1) from (SELECT range(0, number+1) as x, range(0, number+2) as y FROM numbers(100)) ARRAY JOIN x as m, y as n group by (m+n) % 10;
SELECT (materialize('1'),2) AS t, t.1, t.2;
SELECT (materialize('1'),materialize(2)) AS t, t.1, t.2;
SELECT (materialize([1,1]) + materialize([1,4]));
SELECT (max(m) - min(m) > 1) AS new_block_is_generated FROM test_block_numbers;
SELECT (NULL IN (SELECT 9223372036854775806 IN (SELECT 65536), inf, NULL IN (NULL))) IN (SELECT NULL IN (NULL));
SELECT (NULL, 1) * materialize((1, NULL));
SELECT (NULL, 1) + (1, NULL);
SELECT (NULL, NULL) * NULL;
SELECT (NULL, NULL) IN ((NULL, 0), (3, 1), (3, 2), (8, 0), (NULL, NULL));
SELECT (nullIf(number, 2), -nullIf(number, 2)) IN ((1, -1), (2, -2), (3, -3)) FROM system.numbers LIMIT 5;
SELECT (nullIf(number, 2), -nullIf(number, 2)) IN ((1, -1), (NULL, NULL), (3, -3)) FROM system.numbers LIMIT 5;
SELECT (nullIf(number, 2), -number) IN ((1, -1), (2, -2), (3, -3)) FROM system.numbers LIMIT 5;
SELECT (nullIf(number, 2), -number) IN ((1, -1), (NULL, NULL), (3, -3)) FROM system.numbers LIMIT 5;
SELECT (nullIf(number, 4), -nullIf(number, 3)) IN (SELECT nullIf(number, 2), -number FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT (nullIf(number, 4), -number) IN (SELECT nullIf(number, 2), -number FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k SETTINGS allow_experimental_analyzer=1;
SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;
SELECT (number * 2)::Int128 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM -3 TO 5;
SELECT (number * 2)::Int128 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM 3 TO 8;
SELECT (number * 2)::Int256 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM -3 TO 5;
SELECT (number * 2)::Int256 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM 3 TO 8;
SELECT (number * 2)::UInt128 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM -3 TO 5;
SELECT (number * 2)::UInt128 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM 3 TO 8;
SELECT (number * 2)::UInt256 FROM numbers(10) ORDER BY 1 ASC WITH FILL FROM 3 TO 8;
SELECT (number - 1, toString(number - 1)) IN ((1, '1'), (-1, '-1')) FROM system.numbers LIMIT 10;
SELECT (number = 1) AND (number = 2) AS value, sum(value) OVER () FROM numbers(1) WHERE 1 SETTINGS allow_experimental_analyzer=1;
SELECT (number = 1) AND (number = 2) AS value, sum(value) OVER () FROM numbers(1) WHERE 1;
SELECT (number AS n, n + 1, n + 2, n + 3) IN (1, 2, 3, 4) FROM system.numbers LIMIT 3;
SELECT (number AS n, n + 1, n + 2, n + 3, n - 1) IN (1, 2, 3, 4, 0) FROM system.numbers LIMIT 3;
SELECT (number AS n, n + 1, toString(n + 2), n + 3, n - 1) IN (1, 2, '3', 4, 0) FROM system.numbers LIMIT 3;
SELECT (number, -nullIf(number, 3)) IN (SELECT nullIf(number, 2), -number FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT (number, -number) IN ((1, -1), (NULL, NULL), (3, -3)) FROM system.numbers LIMIT 5;
SELECT (number, -number) IN (SELECT nullIf(number, 2), -number FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT (number, -number) IN (SELECT number, -number FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT (number, nullIf(number % 3, 0), toString(nullIf(number % 2, 0))) AS tuple FROM system.numbers LIMIT 10 FORMAT PrettyCompactNoEscapes;
SELECT (number, toString(number)) IN ((1, '1'), (-1, '-1')) FROM system.numbers LIMIT 10;
SELECT (number, toString(number), range(number)) AS x, CAST(x AS String) FROM system.numbers LIMIT 10;
SELECT (number, toString(number), range(number)) AS x, toString(x) FROM system.numbers LIMIT 10;
SELECT (SELECT (SELECT (SELECT (SELECT (SELECT count() FROM (SELECT * FROM system.numbers LIMIT 10)))))) = (SELECT 10), ((SELECT 1, 'Hello', [1, 2]).3)[1];
SELECT (SELECT * FROM (SELECT * FROM system.numbers LIMIT 2) WHERE number = number + 1);
SELECT (SELECT * FROM system.numbers LIMIT 1 OFFSET 1) AS n, toUInt64(10 / n) FORMAT CSV;
SELECT (SELECT 1 WHERE 0) AS a, (SELECT 1 WHERE 1) AS b FORMAT TSVWithNames;
SELECT (SELECT 1 WHERE 0);
SELECT (SELECT 1) AS subquery, (SELECT 1) AS subquery;
SELECT (SELECT 1) FROM remote('127.0.0.{1,2}');
SELECT (SELECT 1) FROM remote('127.0.0.{1,2}', system.one);
SELECT (SELECT 1);
SELECT (SELECT 5 UNION DISTINCT SELECT 5) AS subquery, arrayMap(x -> x + arrayMap(x -> subquery, [1])[1], [1,2,3]);
SELECT (SELECT 5) AS subquery, arrayMap(x -> x + arrayMap(x -> subquery, [1])[1], [1,2,3]);
SELECT (SELECT [1]);
SELECT (SELECT a FROM (SELECT 1 AS a)) SETTINGS max_subquery_depth = 1;
SELECT (SELECT CAST(NULL as Nullable(Nothing)) WHERE 0);
SELECT (SELECT count() FROM system.columns SETTINGS max_block_size = 10) = (SELECT count() FROM system.columns SETTINGS max_block_size = 9);
SELECT (SELECT count() FROM system.columns SETTINGS max_block_size = 100) = (SELECT count() FROM system.columns SETTINGS max_block_size = 1000);
SELECT (SELECT count() FROM system.columns SETTINGS max_block_size = 13) = (SELECT count() FROM system.columns SETTINGS max_block_size = 1000000);
SELECT (SELECT count() FROM system.tables SETTINGS max_block_size = 10) = (SELECT count() FROM system.tables SETTINGS max_block_size = 9);
SELECT (SELECT count() FROM system.tables SETTINGS max_block_size = 100) = (SELECT count() FROM system.tables SETTINGS max_block_size = 1000);
select (select eventTimestamp from datDictionary);
SELECT (SELECT id FROM test_table);
SELECT (SELECT id, value FROM test_table);
SELECT (SELECT NULL WHERE 0);
SELECT (SELECT Null WHERE 1);
SELECT (SELECT Null WHERE nuLL IS NOT NULL);
SELECT (SELECT number FROM numbers(100) ORDER BY number LIMIT 1), (SELECT number FROM numbers(100) ORDER BY number DESC LIMIT 1);
select (select sum(cityHash64(*)) from arrays_02735) - (select sum(cityHash64(*)) from arrays_out_02735);
select (select sum(cityHash64(*)) from basic_types_02735) - (select sum(cityHash64(*)) from file(basic_types_02735.parquet));
select (select sum(cityHash64(*)) from file(a.csv, LineAsString)) - (select sum(cityHash64(*)) from file(b.csv, LineAsString));
select (select sum(cityHash64(*)) from nullables_02735) - (select sum(cityHash64(*)) from file(nullables_02735.parquet));
SELECT (SELECT toDate('2015-01-02')) = toDate('2015-01-02'), 'Hello' = (SELECT 'Hello');
SELECT (SELECT toDate('2015-01-02'), 'Hello') AS x, x, identity((SELECT 1)), identity((SELECT 1) AS y);
SELECT (SELECT toDate('2015-01-02'), 'Hello');
select (select toDate32OrNull(''));
select (select toDate32OrZero(''));
SELECT (SELECT toIntervalDay(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT (SELECT toIntervalHour(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT (SELECT toIntervalMinute(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT (SELECT toIntervalMonth(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT (SELECT toIntervalQuarter(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT (SELECT toIntervalSecond(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT (SELECT toIntervalYear(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT (SELECT value FROM test_table);
SELECT (toDate('2000-01-01'), toDate('2000-01-01')) AS x FORMAT PrettyCompact;
select (toDate32('2001-09-29') + interval 12345 millisecond) x, toTypeName(x);
select (toDate32('2001-09-29') - interval 12345 millisecond) x, toTypeName(x);
SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 MICROSECOND) x, toTypeName(x);
SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 MILLISECOND) x, toTypeName(x);
SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 NANOSECOND) x, toTypeName(x);
SELECT (toDateTime('2000-01-01 12:00:00') + INTERVAL 1234567 SECOND) x, toTypeName(x);
SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 MICROSECOND) x, toTypeName(x);
SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 MILLISECOND) x, toTypeName(x);
SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 NANOSECOND) x, toTypeName(x);
SELECT (toDateTime('2000-01-01 12:00:00') - INTERVAL 1234567 SECOND) x, toTypeName(x);
SELECT (toDateTime64('2000-01-01 12:00:00.67', 2) - INTERVAL 12345 MILLISECOND) x, toTypeName(x);
SELECT (toDateTime64('2000-01-01 12:00:00.678', 3) - INTERVAL 12345 MILLISECOND) x, toTypeName(x);
SELECT (toDateTime64('2000-01-01 12:00:00.67898', 5) - INTERVAL 12345 MILLISECOND) x, toTypeName(x);
SELECT (toDecimal128(materialize('1'), 0), toDecimal128('2', 0)) < (toDecimal128('1', 0), toDecimal128('2', 0));
SELECT (toHour(now('Asia/Shanghai')) - toHour(now('UTC'))) IN (8, -16);
select (toInt128(-1) * toInt128(1)) x, (toInt256(-1) * toInt128(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toInt16(1)) x, (toInt256(-1) * toInt16(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toInt256(1)) x, (toInt256(-1) * toInt256(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toInt32(1)) x, (toInt256(-1) * toInt32(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toInt64(1)) x, (toInt256(-1) * toInt64(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toInt8(1)) x, (toInt256(-1) * toInt8(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toUInt16(1)) x, (toInt256(-1) * toUInt16(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toUInt256(1)) x, (toInt256(-1) * toUInt256(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toUInt32(1)) x, (toInt256(-1) * toUInt32(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toUInt64(1)) x, (toInt256(-1) * toUInt64(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) * toUInt8(1)) x, (toInt256(-1) * toUInt8(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toInt128(1)) x, (toInt256(-1) + toInt128(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toInt16(1)) x, (toInt256(-1) + toInt16(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toInt256(1)) x, (toInt256(-1) + toInt256(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toInt32(1)) x, (toInt256(-1) + toInt32(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toInt64(1)) x, (toInt256(-1) + toInt64(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toInt8(1)) x, (toInt256(-1) + toInt8(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toUInt16(1)) x, (toInt256(-1) + toUInt16(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toUInt256(1)) x, (toInt256(-1) + toUInt256(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toUInt32(1)) x, (toInt256(-1) + toUInt32(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toUInt64(1)) x, (toInt256(-1) + toUInt64(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) + toUInt8(1)) x, (toInt256(-1) + toUInt8(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toInt128(1)) x, (toInt256(-1) - toInt128(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toInt16(1)) x, (toInt256(-1) - toInt16(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toInt256(1)) x, (toInt256(-1) - toInt256(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toInt32(1)) x, (toInt256(-1) - toInt32(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toInt64(1)) x, (toInt256(-1) - toInt64(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toInt8(1)) x, (toInt256(-1) - toInt8(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toUInt16(1)) x, (toInt256(-1) - toUInt16(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toUInt256(1)) x, (toInt256(-1) - toUInt256(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toUInt32(1)) x, (toInt256(-1) - toUInt32(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toUInt64(1)) x, (toInt256(-1) - toUInt64(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) - toUInt8(1)) x, (toInt256(-1) - toUInt8(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toInt128(-1)) x, (toInt256(-1) / toInt128(-1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toInt16(-1)) x, (toInt256(-1) / toInt16(-1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toInt256(-1)) x, (toInt256(-1) / toInt256(-1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toInt32(-1)) x, (toInt256(-1) / toInt32(-1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toInt64(-1)) x, (toInt256(-1) / toInt64(-1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toInt8(-1)) x, (toInt256(-1) / toInt8(-1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toUInt16(1)) x, (toInt256(-1) / toUInt16(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toUInt256(1)) x, (toInt256(-1) / toUInt256(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toUInt32(1)) x, (toInt256(-1) / toUInt32(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toUInt64(1)) x, (toInt256(-1) / toUInt64(1)) y, toTypeName(x), toTypeName(y);
select (toInt128(-1) / toUInt8(1)) x, (toInt256(-1) / toUInt8(1)) y, toTypeName(x), toTypeName(y);
select (toLowCardinality('a') as val) || 'b' group by val order by val;
select (toLowCardinality(z) as val) || 'b' from (select arrayJoin(['c', 'd']) as z) group by val order by val;
select (toUInt8(0)) in (-1);
select (toUInt8(255)) in (-1);
SELECT (uniqTheta(a), uniqTheta(b), uniqTheta(c)) FROM (SELECT * FROM decimal ORDER BY a);
SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == '65536';
SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as Date)';
SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as Int32)';
SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as UInt32)';
SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toDate(65536)';
SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toInt32(65536)';
SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toUInt32(65536)';
SELECT (x IN (111)) == 1 FROM ( SELECT ( SELECT 3 :: Nullable(UInt8) WHERE 0 ) AS x FROM ( SELECT 2 AS x ) ) FORMAT Null;
SELECT (x IN (111)) == 1 FROM ( SELECT ( SELECT 3 :: Nullable(UInt8) WHERE 1 ) AS x FROM ( SELECT 2 AS x ) ) FORMAT Null;
SELECT (x IN (111)) == 1 FROM ( SELECT ( SELECT 3 WHERE 0 ) AS x FROM ( SELECT 2 AS x ) ) FORMAT Null;
SELECT * FROM (SELECT 1 AS id, 2 AS value) INNER JOIN (SELECT 1 AS id, 3 AS value_1) USING id WHERE arrayMap(x -> x + value + value_1, [1]) = [6];
SELECT * APPLY (x -> toString(x)) APPLY (x -> length(x)) FROM test_table;
SELECT * APPLY (x -> toString(x)) APPLY length FROM test_table;
SELECT * APPLY (x -> toString(x)) FROM test_table;
select * apply bitmapMin, * apply bitmapMax from (select * apply groupBitmapState from t);
SELECT * APPLY lambda(tuple(x), x + 1) FROM numbers(5);
SELECT * APPLY sum from columns_transformers;
select * apply toJSONString from t;
SELECT * APPLY toString FROM test_table;
SELECT * APPLY x->argMax(x, number) FROM numbers(1);
SELECT * APPLY(sum) from columns_transformers;
SELECT * EXCEPT (id) APPLY toString FROM test_table;
SELECT * EXCEPT (id) FROM test_table;
SELECT * EXCEPT id REPLACE (5 AS id, 6 as value) APPLY toString FROM test_table;
SELECT * EXCEPT STRICT (i, j) from columns_transformers;
SELECT * EXCEPT STRICT (id, value1) FROM test_table;
SELECT * EXCEPT STRICT i from columns_transformers;
SELECT * EXCEPT STRICT i, j1 from columns_transformers;
SELECT * EXCEPT(i) APPLY(sum) from columns_transformers;
SELECT * FROM ( SELECT String1,String2,String3,String4,COUNT(*) FROM Test GROUP by String1,String2,String3,String4 ) AS expr_qry WHERE String4 ='String4_0';
SELECT * FROM ( SELECT String1,String2,String3,String4,COUNT(*) FROM Test GROUP by String1,String2,String3,String4 ) AS expr_qry;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV', 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', NOSIGN) order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', NOSIGN, 'TSV') order by c1, c2, c3;
select * from "/t0" join "/t1" using a;
SELECT * FROM ( EXPLAIN AST SELECT * FROM ( EXPLAIN PLAN SELECT * FROM ( EXPLAIN SYNTAX SELECT trim(explain) == 'Asterisk' FROM ( EXPLAIN AST SELECT * FROM system.numbers LIMIT 10 ) WHERE explain LIKE '%Asterisk%' ) ) ) FORMAT Null;
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM ngrambf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 0;
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM ngrambf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM ngrambf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 0;
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM ngrambf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM tokenbf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( EXPLAIN PLAN indexes = 1 SELECT * FROM tokenbf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( EXPLAIN PLAN indexes=1 SELECT * FROM ngrambf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 0;
SELECT * FROM ( EXPLAIN PLAN indexes=1 SELECT * FROM ngrambf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( EXPLAIN PLAN indexes=1 SELECT * FROM tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( EXPLAIN PLAN indexes=1 SELECT * FROM tokenbf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id ) WHERE explain LIKE '%Granules: %' SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( SELECT a, max((d, b)).2 AS value FROM test GROUP BY rollup(a) ) WHERE a <> '';
SELECT * FROM ( SELECT bitmapHasAny(bitmapBuild([toUInt8(1)]), ( SELECT groupBitmapState(toUInt8(1)) )) has1, bitmapHasAny(bitmapBuild([toUInt64(1)]), ( SELECT groupBitmapState(toUInt64(2)) )) has2 ) SETTINGS allow_experimental_analyzer = 0;
SELECT * FROM ( SELECT bitmapHasAny(bitmapBuild([toUInt8(1)]), ( SELECT groupBitmapState(toUInt8(1)) )) has1, bitmapHasAny(bitmapBuild([toUInt64(1)]), ( SELECT groupBitmapState(toUInt64(2)) )) has2 ) SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM ( SELECT day_, if(type_1 = '', 'all', type_1) AS type_1 FROM ( SELECT day_, type_1 FROM test_grouping_sets_predicate WHERE day_ = '2023-01-05' GROUP BY GROUPING SETS ( (day_, type_1), (day_)) ) AS t ) WHERE type_1 = 'all';
SELECT * FROM ( SELECT n, finalizeAggregation(s) FROM test_00808_push_down_with_finalizeAggregation ) WHERE (n >= 2) AND (n <= 5) ORDER BY n;
SELECT * FROM ( SELECT x, length(x) FROM tbl_repr WHERE ts > now() LIMIT 1 ) WHERE x != '';
select * from ( select 'v1' as c1, null as c2 union all select 'v2' as c1, '' as c2 ) ALL FULL JOIN ( select 'v1' as c1, 'w1' as c2 ) using c1,c2 order by c1, c2;
SELECT * FROM ( SELECT ( SELECT 0 AS x FROM (SELECT 1 AS x) t1 JOIN (SELECT 1 AS x) t2 USING (x) ) AS x FROM ( SELECT 1 AS x ) ) FORMAT Null;
SELECT * FROM ( SELECT 1 FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_10_00223) WITH TOTALS ) WHERE 1 GROUP BY 1;
SELECT * FROM ( SELECT 1 AS a, 2 AS b FROM system.one JOIN system.one USING dummy UNION ALL SELECT 3 AS a, 4 AS b FROM system.one ) WHERE a != 10 ORDER BY a, b;
SELECT * FROM ( SELECT ['left'] as ar, 42 AS left_number ) js1 FULL JOIN ( SELECT ['right'] as ar, 42 AS right_number ) js2 USING(ar) ORDER BY left_number;
SELECT * FROM ( SELECT ['left'] as ar, number AS left_number FROM system.numbers LIMIT 2 ) js1 FULL JOIN ( SELECT ['right'] as ar, number AS right_number FROM system.numbers LIMIT 1, 2 ) js2 ON left_number = right_number ORDER BY left_number;
SELECT * FROM ( SELECT a FROM remote('127.0.0.1', currentDatabase(), local_t) GROUP BY a WITH TOTALS ) WHERE a IN ( SELECT 1 );
SELECT * FROM ( SELECT a FROM remote('127.0.0.{1,2}', currentDatabase(), local_t) GROUP BY a WITH TOTALS ) WHERE a IN ( SELECT 1 );
SELECT * FROM ( SELECT a, t1.val as val1, t2.val as val2 FROM t t1 ANY LEFT JOIN t t2 USING a ) ORDER BY val1;
SELECT * FROM ( SELECT NULL AS x ) js1 FULL OUTER JOIN ( SELECT NULL AS x ) js2 USING (x);
SELECT * FROM ( SELECT NULL AS x ) js1 INNER JOIN ( SELECT NULL AS x ) js2 USING (x);
SELECT * FROM ( SELECT number AS k FROM system.numbers LIMIT 10 ) js1 ALL LEFT JOIN ( SELECT intDiv(number, 2) AS k, number AS joined FROM system.numbers LIMIT 10 ) js2 USING k;
SELECT * FROM ( SELECT number, ['left'] as ar, number AS left_number FROM system.numbers LIMIT 2 ) js1 FULL JOIN ( SELECT number, ['right'] as ar, number AS right_number FROM system.numbers LIMIT 1, 2 ) js2 USING (number) ORDER BY number;
SELECT * FROM ( SELECT number, n, j1, j2 FROM (SELECT dummy + 2 AS number, number / 2 AS n FROM remote('127.0.0.{2,3}', system.one)) ANY INNER JOIN (SELECT number / 3 AS n, number AS j1, 'Hello' AS j2 FROM system.numbers LIMIT 0) USING n LIMIT 10 ) ORDER BY number;
SELECT * FROM ( SELECT number, n, j1, j2 FROM (SELECT dummy + 2 AS number, number / 2 AS n FROM remote('127.0.0.{2,3}', system.one)) GLOBAL ANY INNER JOIN (SELECT number / 3 AS n, number AS j1, 'Hello' AS j2 FROM system.numbers LIMIT 0) USING n LIMIT 10 ) ORDER BY number;
SELECT * FROM ( SELECT number, n, j1, j2 FROM (SELECT number, number / 2 AS n FROM remote('127.0.0.{2,3}', system.numbers)) ANY LEFT JOIN (SELECT number / 3 AS n, number AS j1, 'Hello' AS j2 FROM system.numbers LIMIT 0) USING n LIMIT 10 ) ORDER BY number;
SELECT * FROM ( SELECT number, n, j1, j2 FROM (SELECT number, number / 2 AS n FROM remote('127.0.0.{2,3}', system.numbers)) GLOBAL ANY LEFT JOIN (SELECT number / 3 AS n, number AS j1, 'Hello' AS j2 FROM system.numbers LIMIT 0) USING n LIMIT 10 ) ORDER BY number;
SELECT * FROM ( SELECT number, n, j1, j2 FROM (SELECT number, number / 2 AS n FROM system.numbers) js1 ANY LEFT JOIN (SELECT number / 3 AS n, number AS j1, 'Hello' AS j2 FROM system.numbers LIMIT 10) js2 USING n LIMIT 10 ) ORDER BY n SETTINGS join_algorithm = 'hash';
SELECT * FROM ( SELECT reinterpretAsString(number + reinterpretAsUInt8('A')) AS k FROM system.numbers LIMIT 10 ) js1 ALL LEFT JOIN ( SELECT reinterpretAsString(intDiv(number, 2) + reinterpretAsUInt8('A')) AS k, number AS joined FROM system.numbers LIMIT 10 ) js2 USING k ORDER BY k, joined ;
SELECT * FROM ( SELECT x FROM (SELECT x, y, arrayJoin(z) FROM (SELECT number AS x, number + 1 AS y, [number % 2, number % 3] AS z FROM numbers(10)) UNION ALL SELECT 1, 2, 3) ) ORDER BY x;
SELECT * FROM ( WITH ( SELECT groupArray(a) FROM ( SELECT 1 AS a ) ) AS keys, ( SELECT groupArray(a) FROM ( SELECT 2 AS a ) ) AS values SELECT * FROM ( SELECT 1 AS a ) WHERE transform(a, keys, values, 0) ) AS wrap;
SELECT * FROM ( SELECT * FROM union_bug WHERE Event = 'A' UNION ALL SELECT * FROM union_bug WHERE Event = 'B' ) ORDER BY Datetime;
SELECT * FROM ( SELECT * FROM union_bug WHERE Event = 'A' UNION ALL SELECT Event, Datetime FROM union_bug WHERE Event = 'B' ) ORDER BY Datetime;
SELECT * FROM ( SELECT Event, Datetime FROM union_bug WHERE Event = 'A' UNION ALL SELECT * FROM union_bug WHERE Event = 'B' ) ORDER BY Datetime;
SELECT * FROM ( SELECT Event, Datetime FROM union_bug WHERE Event = 'A' UNION ALL SELECT Event, Datetime FROM union_bug WHERE Event = 'B' ) ORDER BY Datetime;
SELECT * from ( EXPLAIN indexes = 1 SELECT * FROM data_02771 WHERE x = 1 AND y = 2 ) WHERE explain NOT LIKE '%Expression%' AND explain NOT LIKE '%Filter%';
SELECT * from ( EXPLAIN indexes = 1 SELECT * FROM data_02771 WHERE x = 1 AND y = 2 SETTINGS ignore_data_skipping_indices='xy_idx' ) WHERE explain NOT LIKE '%Expression%' AND explain NOT LIKE '%Filter%';
SELECT * FROM ( SELECT 'a' AS key ) AS t1 INNER JOIN ( SELECT 'a' AS key ) AS t2 ON t1.key = t2.key ;
select * from ( SELECT * FROM l full outer join r on l.luid = r.ruid limit 100000000) where luid is null and ruid is not null;
select * from ( SELECT * FROM l full outer join r on l.luid = r.ruid limit 100000000) where luid is null and ruid is not null;
select * from ( SELECT * FROM l full outer join r on l.luid = r.ruid) where luid is null and ruid is not null;
select * from ( SELECT * FROM l full outer join r on l.luid = r.ruid) where luid is null and ruid is not null;
SELECT * FROM ( SELECT * from t1 ) t1 PASTE JOIN ( SELECT * from t2 ) t2 SETTINGS max_threads = 1;
SELECT * FROM ( SELECT 1 AS key GROUP BY NULL ) AS t1 INNER JOIN (SELECT 1 AS key) AS t2 ON t1.key = t2.key WHERE t1.key ORDER BY key;
select * from ( select 1 as x from t_str where cast('1970-01-01' as date) <= cast((select max('1970-01-01') from numbers(1)) as date));
SELECT * FROM ( SELECT 2 AS x ) as t1 RIGHT JOIN ( SELECT count('x') :: Nullable(Int32), count('y') :: Nullable(Int32), 0 AS x ) AS t2 ON t1.x = t2.x;
SELECT * FROM ( SELECT 2 AS x ) as t1 RIGHT JOIN ( SELECT count('x') :: Nullable(Int32), count('y'), 0 AS x ) AS t2 ON t1.x = t2.x;
SELECT * FROM ( SELECT 2 AS x ) as t1 RIGHT JOIN ( SELECT count('x'), count('y'), 0 AS x ) AS t2 ON t1.x = t2.x;
SELECT * FROM ( SELECT 2 AS x ) AS t1 RIGHT JOIN ( SELECT count('x'), count('y'), 2 AS x ) AS t2 ON t1.x = t2.x;
SELECT * FROM ( SELECT [dummy, dummy] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN system.one AS y ON x.dummy + 1 == y.dummy + 1;
SELECT * FROM ( SELECT [dummy, dummy] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN system.one AS y ON x.dummy == y.dummy;
SELECT * FROM ( SELECT [dummy, dummy] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN system.one AS y USING dummy;
SELECT * FROM ( SELECT [toUInt32(dummy), toUInt32(dummy)] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN (select toInt32(dummy) as dummy from system.one ) AS y USING dummy;
SELECT * FROM ( SELECT count('a'), count('b'), count('c'), 2 AS x ) as t1 RIGHT JOIN ( SELECT count('x'), count('y'), 0 AS x ) AS t2 ON t1.x = t2.x;
SELECT * FROM ( SELECT CounterID FROM remote('127.0.0.2', currentDatabase(), 'globalin') WHERE (CounterID GLOBAL IN ( SELECT toUInt32(34) )) GROUP BY CounterID UNION ALL SELECT CounterID FROM remote('127.0.0.2', currentDatabase(), 'globalin') WHERE (CounterID GLOBAL IN ( SELECT toUInt32(34))) GROUP BY CounterID);
SELECT * FROM ( SELECT CounterID FROM remote('127.0.0.2', currentDatabase(), 'globalin') WHERE (CounterID GLOBAL IN ( SELECT toUInt32(34))) GROUP BY CounterID);
SELECT * FROM ((SELECT * FROM system.numbers LIMIT 1) UNION ALL SELECT * FROM system.numbers LIMIT 2 UNION ALL (SELECT * FROM system.numbers LIMIT 3)) ORDER BY number;
SELECT * FROM ((SELECT * FROM table1 ORDER BY number DESC) UNION ALL (SELECT * FROM table2 ORDER BY number DESC)) ORDER BY number DESC;
SELECT * FROM ((SELECT * FROM table1 ORDER BY number) UNION ALL (SELECT * FROM table2 ORDER BY number)) ORDER BY number DESC;
SELECT * FROM ((SELECT * FROM table1 ORDER BY number) UNION ALL (SELECT * FROM table2 ORDER BY number)) ORDER BY number;
select * from (explain actions = 1, sorting=1 select a, any(b), c, d from tab where b = 1 group by a, c, d settings optimize_aggregation_in_order=1, query_plan_aggregation_in_order=1) where explain like '%ReadFromMergeTree%' or explain like '%Aggregating%' or explain like '%Order:%' settings allow_experimental_analyzer=0;
select * from (explain actions = 1, sorting=1 select a, any(b), c, d from tab where b = 1 group by a, c, d settings optimize_aggregation_in_order=1, query_plan_aggregation_in_order=1) where explain like '%ReadFromMergeTree%' or explain like '%Aggregating%' or explain like '%Order:%' settings allow_experimental_analyzer=1;
select * from (EXPLAIN indexes = 1 SELECT c1, sum(c3) FROM t0 GROUP BY c1) where explain like '%ReadFromMergeTree%';
select * from (EXPLAIN indexes = 1 SELECT c1, sum(c3) FROM t0 WHERE c1 = 100 GROUP BY c1) where explain like '%Granules%';
select * from (explain pipeline select sum(x) from (select x from t order by x) settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1, max_streams_to_max_threads_ratio=8, optimize_read_in_order=1, query_plan_read_in_order=1) where explain like '%Resize%';
select * from (explain pipeline select sum(x) from (select x from t order by x) settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1, optimize_read_in_order=1, query_plan_read_in_order=1) where explain like '%Resize%';
select * from (explain pipeline select sum(x) from t settings max_threads=32, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=0) where explain like '%Resize%' or explain like '%MergeTreeSelect%';
select * from (explain pipeline select sum(x) from t settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=0, max_streams_to_max_threads_ratio=8) where explain like '%Resize%' or explain like '%MergeTreeSelect%';
select * from (explain pipeline select sum(x) from t settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1) where explain like '%Resize%' or explain like '%MergeTreeSelect%';
select * from (explain pipeline select sum(x) from t settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1, max_streams_to_max_threads_ratio=8) where explain like '%Resize%' or explain like '%MergeTreeSelect%';
select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab3) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5 union all select * from tab4) order by (a + b) * c, sin(a / b), d limit 3) where explain ilike '%sort description%' or explain like '%ReadType%' or explain like '%Limit%';
select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c) where explain like '%sort description%' or explain like '%ReadType%';
select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b) limit 3) where explain ilike '%sort description%' or explain like '%ReadType%' or explain like '%Limit%';
select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab3 where (a + b) * c = 18) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab4) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
select * from (explain plan actions = 1 select * from (select *, a + b as x from tab) order by x * c) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from (select *, a + b as x, a / b as y from tab) order by x * c, sin(y)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from (select *, a / b as y from (select *, a + b as x from tab)) order by x * c, sin(y)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc , intDiv(sin(a / b), 2)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(intDiv(sin(a / b), -2), -3)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(intDiv(sin(a / b), -2), -3)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b) desc) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2), sin(a / b)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab order by sin(a / b), (a + b) * c) where explain ilike '%sort description%';
select * from (explain plan actions = 1 select * from tab where (a + b) * c = 8 order by sin(a / b)) where explain ilike '%sort description%';
select * from (explain plan actions = 1 select * from tab where (a + b) * c = 8 order by sin(b / a)) where explain ilike '%sort description%';
select * from (explain plan actions = 1 select * from tab where d + 1 = 2 order by (d + 1) * 4, (a + b) * c) where explain ilike '%sort description%';
select * from (explain plan actions = 1 select * from tab where d + 1 = 3 and (a + b) = 4 and c = 2 order by (d + 1) * 4, sin(a / b)) where explain ilike '%sort description%';
select * from (explain plan actions = 1 select * from tab2 order by toStartOfDay(x), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab2 order by toTimeZone(toTimezone(x, 'UTC'), 'CET'), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
select * from (explain plan actions = 1 select * from tab2 where toTimezone(x, 'CET') = '2020-02-03 01:00:00' order by intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
SELECT * FROM (SELECT 'a' :: LowCardinality(Nullable(String)) AS key) AS t1 JOIN (SELECT 'a' :: Nullable(String) AS key) AS t2 ON t1.key = t2.key ORDER BY key;
SELECT * FROM (SELECT 'a' :: LowCardinality(Nullable(String)) AS key) AS t1 JOIN (SELECT 'a' :: String AS key) AS t2 ON t1.key = t2.key ORDER BY key;
SELECT * FROM (SELECT 'a' :: LowCardinality(String) AS key) AS t1 JOIN (SELECT 'a' :: LowCardinality(String) AS key) AS t2 ON t1.key = t2.key ORDER BY key;
SELECT * FROM (SELECT 'a' :: LowCardinality(String) AS key) AS t1 JOIN (SELECT 'a' :: String AS key) AS t2 ON t1.key = t2.key ORDER BY key;
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 inner join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on (or(t1.d = t2.b and t1.e = t2.e, t1.d = t2.b and t1.f=t2.f, t1.c = t2.b and t1.e = t2.e, t1.c = t2.b and t1.f=t2.f));
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 inner join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on (t1.d = t2.b and t1.e = t2.e or t1.d = t2.b and t1.f=t2.f or t1.c = t2.b and t1.e = t2.e or t1.c = t2.b and t1.f=t2.f);
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 inner join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on t1.b = t2.b and t1.c = t2.b and t1.d = t2.b or t1.e = t2.e;
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 inner join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on t1.d = t2.b AND t1.e = t2.e OR t1.c = t2.b AND t1.e = t2.e OR t1.d = t2.b AND t1.f=t2.f OR t1.c = t2.b AND t1.f=t2.f;
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 inner join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on t1.d = t2.b or t1.c = t2.b or t1.d = t2.b and t1.d = t2.b or t1.e = t2.e and t1.a=t2.a and t2.f=t1.f;
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 inner join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on t1.d = t2.b or t1.c = t2.b or t1.e = t2.e and t1.a=t2.a and t2.f=t1.f;
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 left join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on (t1.d = t2.b or t1.c = t2.b or t1.d = t2.b and t1.d = t2.b) or (t1.e = t2.e and t1.a=t2.a and t2.f=t1.f);
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 left join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on t1.d = t2.b or t1.c = t2.b or t1.d = t2.b and t1.d = t2.b or (t1.e = t2.e and t1.a=t2.a and t2.f=t1.f);
select * from (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t1 right join (select 'a' as a, 'b' as b, 'c' as c, 'd' as d, 'e' as e, 'f' as f) as t2 on t1.d = t2.b or t1.c = t2.b or t1.e = t2.e;
select * from (select 'a' as a, 'b' as b, 42 as forty_two) as t1 inner join (select 'a' as a, 'b' as b, 42 as forty_two) as t2 on t1.b = t2.a or t1.forty_two = t2.forty_two;
select * from (select 'a' as a, 'b' as b, 42 as forty_two) as t1 inner join (select 'a' as a, 'b' as b, 42 as forty_two) as t2 on t1.b = t2.b or t1.forty_two = t2.forty_two;
select * from (select 'a' as a, number as c from numbers(2)) as t1 join (select 'a' as a, number as c from numbers(2)) as t2 on t1.a = t2.a or t1.c = t2.c order by t1.c, t2.c;
select * from (select 'a' as a, number as c from numbers(2)) as t1 join (select 'a' as a, number as c from numbers(2)) as t2 on t1.c = t2.c or t1.a = t2.a order by t1.c, t2.c;
SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM mergetree_00673 WHERE x IN (SELECT * FROM numbers(10000000))))))))))));
SELECT * FROM (SELECT * FROM (SELECT * FROM system.numbers LIMIT 20) WHERE number GLOBAL IN (SELECT number FROM system.numbers LIMIT 10));
SELECT * FROM (SELECT * FROM (SELECT * FROM test_00597) ANY LEFT JOIN (SELECT * FROM test_00597) USING id) WHERE id = 1 SETTINGS allow_experimental_analyzer=0;
SELECT * FROM (SELECT * FROM (SELECT * FROM test_00597) ANY LEFT JOIN (SELECT * FROM test_00597) USING id) WHERE id = 1 SETTINGS allow_experimental_analyzer=1;
SELECT * FROM (SELECT * FROM (SELECT * FROM test_00597) AS a ANY LEFT JOIN (SELECT * FROM test_00597) AS b ON a.id = b.id) WHERE id = 1;
SELECT * FROM (SELECT * FROM (SELECT * FROM test_00597) AS a) AS b WHERE b.id = 1;
SELECT * FROM (SELECT * FROM (SELECT * FROM test_00597)) WHERE id = 1;
SELECT * FROM (SELECT * FROM (SELECT * FROM test_table));
SELECT * FROM (SELECT * FROM (SELECT 0 AS a, toNullable(number) AS b, toString(number) AS c FROM numbers(1000000.)) ORDER BY a DESC, b DESC, c ASC LIMIT 1500) LIMIT 10;
select * from (select * from (select a * 2 as c, b from wt order by c limit 3 with ties) order by c, b);
select * from (select * from (with a * 2 as c select a, b from wt order by c limit 3 with ties) order by a, b);
SELECT * FROM (SELECT * FROM 02845_prewhere WHERE e = '5' OR q = '6') WHERE (q = '6');
SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) js1 ANY LEFT OUTER JOIN id2 USING id2;
select * from (select * from bug where k=1 or k=2 or k=3) where (s=21 or s=22 or s=23) SETTINGS allow_experimental_analyzer = 1;
select * from (select * from bug where k=1 or k=2 or k=3) where (s=21 or s=22 or s=23);
select * from (select * from cluster(test_cluster_two_shards, currentDatabase(), test) where i < 10) order by i limit 1 FORMAT JSONCompact;
select * from (select * from numbers(1) union all select * from numbers(2) union all select * from numbers(3)) order by number;
SELECT * FROM (SELECT * FROM numbers(10)) js1 ANY INNER JOIN testJoinTable USING number ORDER BY number;
SELECT * FROM (SELECT * FROM numbers(10)) js1 INNER JOIN testJoinTable USING number;
select * from (select * from numbers(2) union all select * from numbers(3) union all select * from numbers(1)) order by number;
select * from (select * from numbers(3) union all select * from numbers(1) union all select * from numbers(2)) order by number;
select * from (select * from persons) all inner join (select * from children) using id order by id, name, childName;
select * from (select * from persons) as s all inner join (select * from children ) as j using id order by id, name, childName;
select * from (select * from persons) as s all inner join (select * from children) using id order by id, name, childName;
SELECT * FROM (SELECT * FROM remote('127.0.0.{2,3,4}', system.one) WHERE dummy GLOBAL IN (SELECT * FROM remote('127.0.0.{2,3}', system.one)));
SELECT * FROM (SELECT * FROM system.numbers LIMIT 1 UNION ALL (SELECT * FROM system.numbers LIMIT 2 UNION ALL (SELECT * FROM system.numbers LIMIT 3))) ORDER BY number;
SELECT * FROM (SELECT * FROM system.one) WHERE arrayMap(x -> x + 1, [dummy]) = [1];
SELECT * FROM (SELECT * FROM t GROUP BY item_id, price_sold, date WITH TOTALS ORDER BY item_id, price_sold, date) l LEFT JOIN (SELECT * FROM t GROUP BY item_id, price_sold, date WITH TOTALS ORDER BY item_id, price_sold, date ) r ON l.item_id = r.item_id;
SELECT * FROM (SELECT * FROM t_str WHERE (SELECT any('1970-01-01'))::Date > today());
select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b);
select * from (select * from tab union all select * from tab5) order by (a + b) * c;
select * from (select * from tab where (a + b) * c = 8 union all select * from tab3 where (a + b) * c = 18) order by sin(a / b);
select * from (select * from tab where (a + b) * c = 8 union all select * from tab4) order by sin(a / b);
SELECT * FROM (SELECT * FROM test_00597 UNION ALL SELECT * FROM test_00597) WHERE id = 1;
SELECT * FROM (SELECT * FROM test_00597) ANY INNER JOIN (SELECT * FROM (SELECT * FROM test_00597)) as r USING id WHERE r.id = 1 SETTINGS allow_experimental_analyzer=0;
SELECT * FROM (SELECT * FROM test_00597) ANY INNER JOIN (SELECT * FROM (SELECT * FROM test_00597)) as r USING id WHERE r.id = 1 SETTINGS allow_experimental_analyzer=1;
SELECT * FROM (SELECT * FROM test_00597) ANY LEFT JOIN (SELECT * FROM test_00597) AS b USING id WHERE b.id = 1 SETTINGS allow_experimental_analyzer=0;
SELECT * FROM (SELECT * FROM test_00597) ANY LEFT JOIN (SELECT * FROM test_00597) AS b USING id WHERE b.id = 1 SETTINGS allow_experimental_analyzer=1;
SELECT * FROM (SELECT * FROM test_00597) ANY LEFT JOIN (SELECT * FROM test_00597) USING id WHERE id = 1 SETTINGS allow_experimental_analyzer=0;
SELECT * FROM (SELECT * FROM test_00597) ANY LEFT JOIN (SELECT * FROM test_00597) USING id WHERE id = 1 SETTINGS allow_experimental_analyzer=1;
SELECT * FROM (SELECT * FROM test_00597) AS b WHERE b.id = 1;
SELECT * FROM (SELECT * FROM test_00597) WHERE id = 1;
SELECT * FROM (SELECT * FROM test_00808 FINAL) WHERE id = 1;
SELECT * FROM (SELECT * FROM test_00808 LIMIT 1) WHERE id = 1;
SELECT * FROM (SELECT * FROM test_00808 ORDER BY id LIMIT 1) WHERE id = 1;
SELECT * FROM (SELECT * FROM test_fetch ORDER BY a OFFSET 1 ROW FETCH FIRST 3 ROWS WITH TIES) ORDER BY a, b;
SELECT * FROM (SELECT * FROM test_fetch ORDER BY a, b OFFSET 1 ROW FETCH FIRST 3 ROWS ONLY) ORDER BY a, b;
SELECT * FROM (SELECT * WHERE dummy GLOBAL IN (SELECT toUInt8(number) FROM system.numbers LIMIT 10));
select * from (select *, a + b as x, a / b as y from tab) order by x * c, sin(y);
select * from (select *, a / b as y from (select *, a + b as x from tab)) order by x * c, sin(y);
SELECT * FROM (SELECT -1 :: Nullable(Int32) as key) AS t1 FULL JOIN (SELECT 4294967295 :: UInt32 as key) t2 ON t1.key = t2.key ORDER BY key;
SELECT * FROM (SELECT -1 as x, dummy UNION ALL SELECT arrayJoin([-1]) as x, dummy);
select * from (select 0 as k, 'x' as v) t1 asof join (select 0 as k, 'x' as v) t2 using(k, v);
select * from (select 0 as k, toDate(0) as v) t1 asof join (select 0 as k, toDate(0) as v) t2 using(k, v);
select * from (select 0 as k, toDateTime(0, 'UTC') as v) t1 asof join (select 0 as k, toDateTime(0, 'UTC') as v) t2 using(k, v);
select * from (select 0 as k, toDecimal128(1, 0) as v) t1 asof join (select 0 as k, toDecimal128(0, 0) as v) t2 using(k, v);
select * from (select 0 as k, toDecimal32(1, 0) as v) t1 asof join (select 0 as k, toDecimal32(0, 0) as v) t2 using(k, v);
select * from (select 0 as k, toDecimal64(1, 0) as v) t1 asof join (select 0 as k, toDecimal64(0, 0) as v) t2 using(k, v);
select * from (select 0 as k, toInt128('18446744073709551617') as v) t1 asof join (select 0 as k, toInt128('18446744073709551616') as v) t2 using(k, v);
select * from (select 0 as k, toInt16(1) as v) t1 asof join (select 0 as k, toInt16(0) as v) t2 using(k, v);
select * from (select 0 as k, toInt256('340282366920938463463374607431768211457') as v) t1 asof join (select 0 as k, toInt256('340282366920938463463374607431768211456') as v) t2 using(k, v);
select * from (select 0 as k, toInt32(1) as v) t1 asof join (select 0 as k, toInt32(0) as v) t2 using(k, v);
select * from (select 0 as k, toInt64(1) as v) t1 asof join (select 0 as k, toInt64(0) as v) t2 using(k, v);
select * from (select 0 as k, toInt8(1) as v) t1 asof join (select 0 as k, toInt8(0) as v) t2 using(k, v);
select * from (select 0 as k, toUInt128('18446744073709551617') as v) t1 asof join (select 0 as k, toUInt128('18446744073709551616') as v) t2 using(k, v);
select * from (select 0 as k, toUInt16(1) as v) t1 asof join (select 0 as k, toUInt16(0) as v) t2 using(k, v);
select * from (select 0 as k, toUInt256('340282366920938463463374607431768211457') as v) t1 asof join (select 0 as k, toUInt256('340282366920938463463374607431768211456') as v) t2 using(k, v);
select * from (select 0 as k, toUInt32(1) as v) t1 asof join (select 0 as k, toUInt32(0) as v) t2 using(k, v);
select * from (select 0 as k, toUInt64(1) as v) t1 asof join (select 0 as k, toUInt64(0) as v) t2 using(k, v);
select * from (select 0 as k, toUInt8(1) as v) t1 asof join (select 0 as k, toUInt8(0) as v) t2 using(k, v);
SELECT * FROM (SELECT 0 id, 1 val) _ JOIN j USING id;
SELECT * FROM (SELECT 1 :: Int32 as key) AS t1 JOIN (SELECT 1 :: UInt32 as key) t2 ON t1.key = t2.key ORDER BY key;
SELECT * FROM (SELECT 1 :: UInt32 as key) AS t1 FULL JOIN (SELECT 1 :: Nullable(UInt32) as key) t2 USING (key) ORDER BY key;
SELECT * FROM (SELECT 1 :: UInt32 as key) AS t1 FULL JOIN (SELECT NULL :: Nullable(UInt32) as key) t2 USING (key) ORDER BY key;
SELECT * FROM (SELECT 1 AS a UNION ALL SELECT 2 as a) ORDER BY a FORMAT Pretty;
SELECT * FROM (SELECT 1 AS a UNION ALL SELECT 2 as a) ORDER BY a FORMAT PrettyCompact;
SELECT * FROM (SELECT 1 AS a UNION ALL SELECT 2 as a) ORDER BY a FORMAT PrettyCompactMonoBlock;
SELECT * FROM (SELECT 1 AS a UNION ALL SELECT 2 as a) ORDER BY a FORMAT PrettyCompactNoEscapes;
SELECT * FROM (SELECT 1 AS a UNION ALL SELECT 2 as a) ORDER BY a FORMAT PrettyNoEscapes;
SELECT * FROM (SELECT 1 AS a UNION ALL SELECT 2 as a) ORDER BY a FORMAT PrettySpace;
SELECT * FROM (SELECT 1 AS a UNION ALL SELECT 2 as a) ORDER BY a FORMAT PrettySpaceNoEscapes;
SELECT * FROM (SELECT 1 as a) as t1 ANTI JOIN ( SELECT ('b', 256) as b ) AS t2 ON NULL;
SELECT * FROM (SELECT 1 as a) as t1 FULL JOIN ( SELECT ('b', 256) as b ) AS t2 ON NULL;
SELECT * FROM (SELECT 1 as a) as t1 INNER JOIN ( SELECT ('b', 256) as b ) AS t2 ON NULL;
SELECT * FROM (SELECT 1 as a) as t1 LEFT JOIN ( SELECT ('b', 256) as b ) AS t2 ON NULL;
SELECT * FROM (SELECT 1 as a) as t1 RIGHT JOIN ( SELECT ('b', 256) as b ) AS t2 ON NULL;
SELECT * FROM (SELECT 1 as a) as t1 SEMI JOIN ( SELECT ('b', 256) as b ) AS t2 ON NULL;
SELECT * FROM (SELECT 1 AS a, 'x' AS b) any full join (SELECT 1 as a, 'y' as b) using a;
SELECT * FROM (SELECT 1 AS a, 'x' AS b) any join (SELECT 1 as a, 'y' as b) using a;
SELECT * FROM (SELECT 1 AS a, 'x' AS b) any left join (SELECT 1 as a, 'y' as b) using a;
SELECT * FROM (SELECT 1 AS a, 'x' AS b) any right join (SELECT 1 as a, 'y' as b) using a;
SELECT * FROM (SELECT 1 AS a, 'x' AS b) full join (SELECT 1 as a, 'y' as b) using a;
SELECT * FROM (SELECT 1 AS a, 'x' AS b) join (SELECT 1 as a, 'y' as b) using a;
SELECT * FROM (SELECT 1 AS a, 'x' AS b) left join (SELECT 1 as a, 'y' as b) using a;
SELECT * FROM (SELECT 1 AS a, 'x' AS b) right join (SELECT 1 as a, 'y' as b) using a;
select * from (select 1 as a, 1 as b, 1 as c, b, c);
SELECT * FROM (SELECT 1 as A, 2 as B) ALL LEFT JOIN (SELECT 3 as A, 2 as B) Y USING (B);
SELECT * FROM (SELECT 1 AS a, 2 AS b) AS foo FULL JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.a = bar.b) AND (foo.b = bar.b) ORDER BY foo.a, foo.b, bar.a, bar.b;
SELECT * FROM (SELECT 1 AS a, 2 AS b) AS foo FULL JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.b = bar.a) AND (foo.b = bar.b) ORDER BY foo.a, foo.b, bar.a, bar.b;
SELECT * FROM (SELECT 1 AS a, 2 AS b) AS foo RIGHT JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.a = bar.b) AND (foo.b = bar.b) ORDER BY foo.a, foo.b, bar.a, bar.b;
SELECT * FROM (SELECT 1 AS a, 2 AS b) AS foo RIGHT JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.b = bar.a) AND (foo.b = bar.b) ORDER BY foo.a, foo.b, bar.a, bar.b;
SELECT * FROM (SELECT 1 as A, 2 as B) X ALL LEFT JOIN (SELECT 3 as A, 2 as B) USING (B);
SELECT * FROM (SELECT 1 as A, 2 as B) X ALL LEFT JOIN (SELECT 3 as A, 2 as B) Y USING (B);
SELECT * FROM (SELECT 1 AS id UNION ALL SELECT 2) WHERE id = 1;
SELECT * FROM (SELECT 1 AS id) AS t1 INNER JOIN (SELECT 1 AS id) AS t2 ON t1.id = t2.id AND 0;
SELECT * FROM (SELECT 1 AS id) AS t1 INNER JOIN (SELECT 1 AS id) AS t2 ON t1.id = t2.id AND 1;
SELECT * FROM (SELECT 1 AS id) AS t1 INNER JOIN (SELECT 2 AS id) AS t2 ON t1.id = t2.id AND 1;
SELECT * FROM (SELECT 1 AS id) AS t1 INNER JOIN (SELECT 2 AS id) AS t2 ON t1.id = t2.id OR 1;
select * from (select 1 as id) t1 inner join (select 1 as id) t2 on t1.id=t2.id inner join (select 1 as id) t3 on t1.id=t3.id where t1.id in temp_table3;
select * from (select 1 as id) t1 inner join (select 1 as id) t2 on t1.id=t2.id where t1.id in temp_table3;
SELECT * FROM (SELECT 1 AS id, '' AS test) AS a LEFT JOIN (SELECT test, 1 AS id, NULL AS test) AS b ON b.id = a.id SETTINGS join_algorithm = 'auto', max_rows_in_join = 1, allow_experimental_analyzer = 1 ;
SELECT * FROM (SELECT 1 AS id, (SELECT 1) as subquery) WHERE subquery = 1;
SELECT * FROM (SELECT 1 AS id, 1 AS value) AS t1 ASOF LEFT JOIN (SELECT 1 AS id, 1 AS value) AS t2 ON (t1.id = t2.id) AND 1 != 1 AND (t1.value >= t2.value);
SELECT * FROM (SELECT 1 AS id, 1 AS value) AS t1 ASOF LEFT JOIN (SELECT 1 AS id, 1 AS value) AS t2 ON (t1.id = t2.id) AND 1 == 1 AND (t1.value >= t2.value);
SELECT * FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;
SELECT * FROM (SELECT 1 AS id, 2 AS value);
SELECT * FROM (SELECT 1 AS id, 2 AS value, 3 AS A) SEMI LEFT JOIN (SELECT 1 AS id, 4 AS values, 5 AS D) USING id;
SELECT * FROM (SELECT 1 as key) AS t1 JOIN (SELECT 1 as key) t2 ON t1.key = t2.key ORDER BY key;
SELECT * FROM (SELECT 1 as key) AS t1 JOIN (SELECT 1 as key) t2 USING key ORDER BY key;
SELECT * FROM (SELECT 1 as x UNION ALL SELECT -1) ORDER BY x DESC;
SELECT * FROM (SELECT 1 AS X UNION ALL SELECT 2 UNION ALL SELECT 3 AS X) ORDER BY X ASC;
SELECT * FROM (SELECT 1 AS X UNION ALL SELECT 2) ORDER BY X ASC;
SELECT * FROM (SELECT 1 AS x) ALL LEFT JOIN (SELECT 1 AS x) USING x;
SELECT * FROM (SELECT 1 AS x) ALL LEFT JOIN (SELECT 2 AS x) USING x;
SELECT * FROM (SELECT 1 AS x) AS t1 ALL LEFT JOIN (SELECT 1 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ALL LEFT JOIN (SELECT 1 AS x) AS t2 USING x;
SELECT * FROM (SELECT 1 AS x) AS t1 ALL LEFT JOIN (SELECT 2 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ALL LEFT JOIN (SELECT 2 AS x) AS t2 USING x;
SELECT * FROM (SELECT 1 AS x) AS t1 ALL LEFT JOIN (SELECT materialize(2) AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ALL RIGHT JOIN (SELECT 1 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ALL RIGHT JOIN (SELECT 2 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ALL RIGHT JOIN (SELECT materialize(2) AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ANY LEFT JOIN (SELECT 1 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ANY LEFT JOIN (SELECT 2 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ANY LEFT JOIN (SELECT materialize(2) AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ANY RIGHT JOIN (SELECT 1 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ANY RIGHT JOIN (SELECT 2 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x) AS t1 ANY RIGHT JOIN (SELECT materialize(2) AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT 1 AS x, 2 AS y) ORDER BY x;
select * from (select 1 as x, 2 as y, x, y);
select * from (select 1 intersect select 1);
SELECT * FROM (SELECT 1 UNION ALL (SELECT 1 UNION SELECT 1 UNION ALL (SELECT 1 UNION ALL SELECT 1)));
select * from (select 1 union all select 2 union all select 3 union all select 4 except select 3 union all select 5) order by 1;
select * from (select 1 union all select 2 union all select 3 union all select 4 intersect select 3 union all select 5 except select 1) order by 1;
select * from (select 1 union all select 2 union all select 3 union all select 4 intersect select 3 union all select 5) order by 1;
SELECT * FROM (SELECT 1 UNION ALL SELECT 2) ORDER BY 1 ASC;
select * from (select 1) as a, (select 1) as b, (select 2);
select * from (select 1) as a, (select 2), (select 1) as b;
SELECT * FROM (SELECT 1) AS t1, t1 AS t2;
SELECT * FROM (SELECT 1) AS t1, t1.nested AS t2;
SELECT * FROM (SELECT 1) AS test_table, test_table AS subquery;
SELECT * FROM (SELECT 1) FINAL;
SELECT * FROM (SELECT 1) SAMPLE 1 / 2;
SELECT * FROM (SELECT 1) t1 PASTE JOIN (SELECT 2) SETTINGS joined_subquery_requires_alias=0;
select * FROM (SELECT 1), (SELECT 1), (SELECT 1);
select * from (select 2), (select 1) as a, (select 1) as b;
select * from (select 3 as x) s1 left join (select materialize(3) as x) s2 using x;
select * from (select 5 as x) s1 left join (select toLowCardinality(5) as x) s2 using x;
SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [0] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 0 AS id) AS subquery_2 USING (id);
SELECT * FROM (SELECT [0] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);
SELECT * FROM (SELECT [0] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [1.1, 1.2]);
SELECT * FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [1] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 0 AS id) AS subquery_2 USING (id);
SELECT * FROM (SELECT [1] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);
SELECT * FROM (SELECT [1] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [5] AS id) AS subquery_1 ARRAY JOIN [1,2,3] AS id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);
SELECT * FROM (SELECT [5] AS id_array) AS subquery ARRAY JOIN id_array, [0] AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [[0]] AS id) AS subquery ARRAY JOIN id AS id_nested_array ARRAY JOIN id_nested_array AS id INNER JOIN test_table USING (id);
SELECT * FROM (SELECT [dummy, dummy] AS dummy FROM system.one) AS subquery ARRAY JOIN dummy INNER JOIN system.one USING (dummy);
SELECT * FROM (SELECT a, arrayEnumerateUniqRanked(a) FROM ( SELECT * FROM ( SELECT [[], [1, 2, 3, 4]] AS a UNION ALL SELECT [[3, 4, 5]] AS a ) ) ) ORDER BY a ASC;
SELECT * FROM (SELECT any(_shard_num) shard_num, count(), uniq(dummy) FROM remote('127.0.0.{2,3}', system.one)) ORDER BY shard_num LIMIT 1 SETTINGS distributed_group_by_no_merge=2;
SELECT * FROM (SELECT any(_shard_num) shard_num, count(), uniq(dummy) FROM remote('127.0.0.{2,3}', system.one)) ORDER BY shard_num LIMIT 1, 1 SETTINGS distributed_group_by_no_merge=2;
SELECT * FROM (SELECT arrayJoin([1, 2, 3]) AS id) WHERE id = 1;
SELECT * FROM (SELECT arrayJoin([NULL]), 9223372036854775806, arrayJoin([NULL]), NULL AS x) AS t1 RIGHT JOIN (SELECT arrayJoin([arrayJoin([10000000000.])]), NULL AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT arrayMap(x -> (x, nullIf(x, 3)), range(number)) AS x FROM system.numbers LIMIT 10) WHERE length(x) % 2 = 0;
SELECT * FROM (SELECT arrayMap(x -> (x, toNullable(x)), range(number)) AS x FROM system.numbers LIMIT 10) WHERE length(x) % 2 = 0;
SELECT * FROM (SELECT arrayMap(x -> (x, x + 1), range(number)) AS x FROM system.numbers LIMIT 10) WHERE length(x) % 2 = 0;
SELECT * FROM (SELECT arrayMap(x -> (x, x), range(number)) AS x FROM system.numbers LIMIT 10) WHERE length(x) % 2 = 0;
SELECT * FROM (SELECT arrayMap(x -> toNullable(x), range(number)) AS x FROM system.numbers LIMIT 10) WHERE length(x) % 2 = 0;
SELECT * FROM (SELECT b.* FROM (SELECT * FROM test_00597) AS b) WHERE id = 1;
SELECT * FROM (SELECT CAST('104857.5', 'Float32'), corr(NULL, id, id) AS corr_value FROM test_table__fuzz_3 GROUP BY value) AS subquery ANTI LEFT JOIN test_table ON subquery.corr_value = test_table.id format Null;
SELECT * FROM (SELECT col1, col2 FROM (select '1' as col1, '2' as col2) GROUP by col1, col2) AS expr_qry WHERE col2 != '';
SELECT * FROM (SELECT corr(id, id) as corr_value FROM test_table GROUP BY value) AS subquery LEFT ANTI JOIN test_table ON (subquery.corr_value = test_table.id) WHERE (test_table.id >= test_table.id) AND (NOT (test_table.id >= test_table.id));
SELECT * FROM (SELECT date, id, name, value FROM (SELECT date, id, name, value FROM test_00597)) WHERE id = 1;
SELECT * FROM (SELECT date, id, name, value FROM test_00597) WHERE id = 1;
SELECT * FROM (SELECT DISTINCT blockSize() AS x FROM system.numbers SETTINGS max_block_size = 123, max_rows_to_read = 1000, read_overflow_mode = 'break');
SELECT * FROM (SELECT dummy as a, (toUInt8(0), toUInt8(0)) AS tup FROM system.one) js1 GLOBAL ANY FULL OUTER JOIN (SELECT dummy as a, (toUInt8(0), toUInt8(0)) AS tup FROM system.one) js2 USING (a, tup);
SELECT * FROM (SELECT dummy as a, (toUInt8(0), toUInt8(0)) AS tup FROM system.one) js1 JOIN (SELECT dummy as a, (toUInt8(0), toUInt8(0)) AS tup FROM system.one) js2 USING (a, tup);
select * from (select dummy as val from system.one) any left join (select dummy as val from system.one) on val + 0 = val * 1;
select * from (select dummy as val from system.one) any left join (select dummy as val from system.one) using val;
select * from (select dummy as val from system.one) any left join (select toLowCardinality(dummy) as rval from system.one) on val + 0 = rval * 1;
select * from (select dummy as val from system.one) any left join (select toLowCardinality(dummy) as val from system.one) using val;
select * from (select dummy as val from system.one) any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) on val + 0 = rval * 1;
select * from (select dummy as val from system.one) any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) using val;
SELECT * FROM (SELECT dummy AS val FROM system.one) AS s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) AS s2 ON (val + 9223372036854775806) = (rval * 1);
SELECT * FROM (SELECT dummy AS val FROM system.one) JOIN (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one GROUP BY val WITH TOTALS) USING (val);
SELECT * FROM (SELECT dummy, -1 as x UNION ALL SELECT dummy, arrayJoin([-1]) as x);
SELECT * FROM (SELECT dummy, sum(dummy) GROUP BY dummy WITH TOTALS);
SELECT * FROM (SELECT floor(floor(1, floor(NULL), id = 257), floor(floor(floor(floor(NULL), '10485.76', '9223372036854775807', NULL), floor(10, floor(65535, NULL), 100.0000991821289), NULL)), '2.56'), b.* FROM (SELECT floor(floor(floor(floor(NULL), 1000.0001220703125))), * FROM test_00597) AS b) WHERE id = 257;
SELECT * FROM (SELECT id FROM test_00808 GROUP BY id LIMIT 1 BY id) WHERE id = 1;
SELECT * FROM (SELECT id, date, min(value) AS value FROM test_00597 GROUP BY id, date) WHERE id = 1;
SELECT * FROM (SELECT id, event_date, priority, description FROM remote('127.0.0.{2,3}', currentDatabase(), report1) UNION ALL SELECT id, event_date, priority, description FROM remote('127.0.0.{2,3}', currentDatabase(), report2)) ORDER BY id, event_date ASC;
SELECT * FROM (SELECT id, event_date, priority, description FROM remote('127.0.0.{2|3}', currentDatabase(), report)) ORDER BY id ASC;
SELECT * FROM (SELECT id, value FROM (SELECT * FROM test_table));
SELECT * FROM (SELECT if(number % 2 = 0, number, number * 1000) AS k FROM numbers(100)) s1 JOIN dict_flat d ON k = key OR k == 1000 * key ORDER BY key;
SELECT * FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id) l LEFT JOIN (SELECT item_id FROM t ) r ON l.item_id = r.item_id;
SELECT * FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id) l LEFT JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id ) r ON l.item_id = r.item_id;
SELECT * FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id) l RIGHT JOIN (SELECT item_id FROM t ) r ON l.item_id = r.item_id;
SELECT * FROM (SELECT item_id FROM t) l LEFT JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id ) r ON l.item_id = r.item_id;
SELECT * FROM (SELECT item_id FROM t) l RIGHT JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id ) r ON l.item_id = r.item_id;
SELECT * FROM (SELECT item_id FROM tab GROUP BY item_id WITH TOTALS ORDER BY '922337203.6854775806' IN (SELECT NULL)) AS l RIGHT JOIN (SELECT item_id FROM tab) AS r ON l.item_id = r.item_id WHERE NULL;
SELECT * FROM (SELECT item_id, 'foo' AS key, 1 AS val FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id) l LEFT JOIN (SELECT item_id, sum(price_sold) AS val FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id ) r ON l.item_id = r.item_id;
SELECT * FROM (SELECT item_id, sum(price_sold) as price_sold FROM t GROUP BY item_id WITH TOTALS) AS l FULL OUTER JOIN (SELECT item_id, sum(price_sold) as price_sold FROM t GROUP BY item_id WITH TOTALS) AS r USING (item_id) SETTINGS join_use_nulls = '1';
SELECT * FROM (SELECT k as key FROM t2) as t2 INNER JOIN rdb ON rdb.key == t2.key ORDER BY key;
SELECT * FROM (SELECT k as key FROM t2) as t2 INNER JOIN rdb USING key ORDER BY key;
SELECT * FROM (SELECT key AS a FROM t1 ) t1 INNER JOIN (SELECT key AS c FROM t1 ) t2 ON c = a WHERE a;
SELECT * FROM (SELECT materialize('1') AS s1, materialize('2') AS s2 GROUP BY s1, s2) WHERE s2 = '2';
SELECT * FROM (SELECT materialize(1) AS x) AS t1 ALL LEFT JOIN (SELECT 2 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT materialize(1) AS x) AS t1 ALL RIGHT JOIN (SELECT 2 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT materialize(1) AS x) AS t1 ANY LEFT JOIN (SELECT 2 AS x) AS t2 ON t1.x = t2.x;
SELECT * FROM (SELECT materialize(1) AS x) AS t1 ANY RIGHT JOIN (SELECT 2 AS x) AS t2 ON t1.x = t2.x;
select * from (select materialize(2) as x) s1 left join (select 2 as x) s2 using x;
SELECT * FROM (SELECT materialize(42) as a) as t1 JOIN (SELECT materialize(1) as a) as t2 ON t1.a IN (SELECT 42) = t2.a ;
SELECT * FROM (SELECT materialize([1]) AS s1, materialize('2') AS s2 GROUP BY s1, s2) WHERE s2 = '2';
SELECT * FROM (SELECT materialize([[1]]) AS s1, materialize('2') AS s2 GROUP BY s1, s2) WHERE s2 = '2';
SELECT * FROM (SELECT nan, number FROM system.numbers) WHERE number % 100 = 1 LIMIT 1;
SELECT * FROM (SELECT NULL AS a, 1 AS b) AS foo RIGHT JOIN (SELECT 1024 AS b) AS bar ON 1 = foo.b;
SELECT * FROM (SELECT NULL AS y, 1 AS x, '2020-01-01 10:10:10' :: DateTime64 AS t) AS t1 ASOF LEFT JOIN (SELECT NULL AS y, 1 AS x, '2020-01-01 10:10:10' :: DateTime64 AS t) AS t2 ON t1.t <= t2.t AND t1.x == t2.x FORMAT Null;
SELECT * FROM (SELECT number + 2 AS key FROM numbers(4)) s FULL JOIN test t USING(key) ORDER BY s.key, t.key SETTINGS allow_experimental_analyzer=1;
SELECT * FROM (SELECT number + 2 AS key FROM numbers(4)) s FULL JOIN test t USING(key) ORDER BY s.key, t.key;
SELECT * FROM (SELECT number + 2 AS key FROM numbers(4)) s1 FULL JOIN dict_flat d USING(key) ORDER BY s1.key, d.key;
select * from (SELECT number as a FROM numbers(10)) t1 ANY PASTE JOIN (select number as a from numbers(10)) t2;
select * from (SELECT number as a FROM numbers(10)) t1 PASTE JOIN (select number as a from numbers(10) order by a desc) t2;
select * from (SELECT number as a FROM numbers(10)) t1 PASTE JOIN (select number as a from numbers(10)) t2;
select * from (SELECT number as a FROM numbers(11)) t1 PASTE JOIN (select * from test limit 2) t2 SETTINGs max_threads=1;
select * from (SELECT number as a FROM numbers(11)) t1 PASTE JOIN test t2 SETTINGS max_threads=1;
select * from (SELECT number as a FROM numbers_mt(10)) t1 PASTE JOIN (select number as a from numbers(10) ORDER BY a DESC) t2 SETTINGS max_block_size=10;
SELECT * FROM (SELECT number AS k FROM numbers(100)) s1 JOIN dict_flat d ON k = key ORDER BY k;
SELECT * FROM (SELECT number AS k FROM numbers(100)) s1 JOIN dict_hashed d ON k = key ORDER BY k;
SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 ANTI RIGHT JOIN dict_flat d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 ANY INNER JOIN dict_flat d USING(key) ORDER BY s1.key;
SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 ANY RIGHT JOIN dict_flat d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 JOIN dict_flat d USING(key);
SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 JOIN dict_hashed d USING(key);
SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 RIGHT JOIN dict_flat d ON s1.key = d.key ORDER BY d.key;
SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 RIGHT JOIN dict_flat d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 SEMI RIGHT JOIN dict_flat d USING(key) ORDER BY s1.key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANTI JOIN dict_flat d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANTI JOIN dict_hashed d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANY LEFT JOIN dict_flat d USING(key) ORDER BY key SETTINGS any_join_distinct_right_table_keys = '1';
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANY LEFT JOIN dict_flat d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANY LEFT JOIN dict_hashed d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_complex_cache d ON s1.key = d.key ORDER BY s1.key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_flat d ON s1.key = d.key ORDER BY s1.key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_flat d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_hashed d ON s1.key = d.key ORDER BY s1.key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_hashed d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 SEMI JOIN dict_flat d USING(key) ORDER BY key;
SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 SEMI JOIN dict_hashed d USING(key) ORDER BY key;
select * from (select number as l from system.numbers limit 3) any left join (select number as r from system.numbers limit 3) on l + 1 = r * 1;
select * from (select number as l from system.numbers limit 3) any left join (select toLowCardinality(number) as r from system.numbers limit 3) on l + 1 = r * 1;
select * from (select number from system.numbers limit 5 union all select x from table_1) order by number settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};
select * from (select number, count() from numbers(2) group by number with totals) where number > 0 settings enable_optimize_predicate_expression=0;
select * from (select number, intDiv(number,5) value from numbers(20) order by value limit 3 with ties) ORDER BY number, value;
SELECT * FROM (SELECT path, name, value FROM system.zookeeper ORDER BY path, name) WHERE path LIKE '/' || currentDatabase() || '/1-insert-test%';
SELECT * FROM (SELECT path, name, value FROM system.zookeeper ORDER BY path, name) WHERE path LIKE '/' || currentDatabase() || '/2-insert-test%';
SELECT * FROM (SELECT perf_1.z AS z_1 FROM perf AS perf_1);
SELECT * FROM (SELECT range(number) AS x FROM system.numbers LIMIT 10) WHERE length(x) % 2 = 0;
select * from (select sum(number) from num_10m union all select sum(number) from num_10m) limit 1 settings max_block_size = 1024;
SELECT * FROM (SELECT sum(x) AS a, avg(x) AS b FROM (SELECT number AS x FROM numbers(10)));
SELECT * FROM (SELECT toInt128(NULL) AS x UNION ALL SELECT materialize(toInt128(-2))) WHERE x;
SELECT * FROM (SELECT toInt8(1) AS id) ANY LEFT JOIN test_00597 USING id WHERE value = 1;
SELECT * FROM (SELECT toInt8(1) AS id, toDate('2000-01-01') AS date FROM system.numbers LIMIT 1) ANY LEFT JOIN (SELECT * FROM test_00597) AS b USING date, id WHERE b.date = toDate('2000-01-01') SETTINGS allow_experimental_analyzer=0;
SELECT * FROM (SELECT toInt8(1) AS id, toDate('2000-01-01') AS date FROM system.numbers LIMIT 1) ANY LEFT JOIN (SELECT * FROM test_00597) AS b USING date, id WHERE b.date = toDate('2000-01-01') SETTINGS allow_experimental_analyzer=1;
select * from (select toLowCardinality(4) as x) s1 left join (select 4 as x) s2 using x;
select * from (select toLowCardinality(dummy) as val from system.one) any left join (select dummy as rval from system.one) on val + 0 = rval * 1;
select * from (select toLowCardinality(dummy) as val from system.one) any left join (select dummy as val from system.one) using val;
select * from (select toLowCardinality(dummy) as val from system.one) any left join (select toLowCardinality(dummy) as rval from system.one) on val + 0 = rval * 1;
select * from (select toLowCardinality(dummy) as val from system.one) any left join (select toLowCardinality(dummy) as val from system.one) using val;
select * from (select toLowCardinality(dummy) as val from system.one) any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) on val + 0 = rval * 1;
select * from (select toLowCardinality(dummy) as val from system.one) any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) using val;
select * from (select toLowCardinality(number) as l from system.numbers limit 3) any left join (select number as r from system.numbers limit 3) on l + 1 = r * 1;
select * from (select toLowCardinality(number) as l from system.numbers limit 3) any left join (select toLowCardinality(number) as r from system.numbers limit 3) on l + 1 = r * 1;
select * from (select toLowCardinality(number) as l from system.numbers limit 3) any left join (select toLowCardinality(toNullable(number)) as r from system.numbers limit 3) on l + 1 = r * 1;
select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) any left join (select dummy as rval from system.one) on val + 0 = rval * 1;
select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) any left join (select dummy as val from system.one) using val;
select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) any left join (select toLowCardinality(dummy) as rval from system.one) on val + 0 = rval * 1;
select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) any left join (select toLowCardinality(dummy) as val from system.one) using val;
select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) on val + 0 = rval * 1;
select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) using val;
select * from (select toLowCardinality(toNullable(number)) as l from system.numbers limit 3) any left join (select toLowCardinality(number) as r from system.numbers limit 3) on l + 1 = r * 1;
select * from (select toLowCardinality(toNullable(number)) as l from system.numbers limit 3) any left join (select toLowCardinality(toNullable(number)) as r from system.numbers limit 3) on l + 1 = r * 1;
SELECT * FROM (select toUInt64(1) s limit 1) js1 any right join (select number s, s as x from numbers(11)) js2 using (s) ORDER BY s;
SELECT * FROM (SELECT toUInt64(b) AS a, sum(id) AS b FROM test_00597 AS table_alias) AS outer_table_alias WHERE outer_table_alias.b = 3;
SELECT * FROM (SELECT toUInt64(b) AS a, sum(id) AS b FROM test_00597) WHERE a = 3;
SELECT * FROM (SELECT toUInt64(b), sum(id) AS b FROM test) WHERE `toUInt64(sum(id))` = 3;
select * from (select tuple(1) as a union all select tuple(1) as a) order by a;
select * from (select tuple(1) as a union all select tuple(2) as a) order by a;
select * from (select tuple(materialize(0)) as a union all select tuple(0) as a) order by a;
select * from (select tuple(range(1)[1]) as a union all select tuple(0) as a) order by a;
select * from (select tuple(range(1)[2]) as a union all select tuple(1) as a) order by a;
select * from (select untuple((1,2)));
select * from (select x + 1 as a, y from table_1 union all select x as a, y from table_1) order by a, y settings additional_result_filter='a != 3';
select * from (select x + 1 as a, y from table_1 union all select x as a, y from table_1) order by a, y settings additional_result_filter='a = 3';
SELECT * FROM (SELECT x FROM (SELECT 2 AS x, arrayJoin([1,2,3]))) ORDER BY x;
SELECT * FROM (SELECT x FROM (SELECT toString(number) AS x FROM system.numbers LIMIT 2000000) ORDER BY x LIMIT 10000) LIMIT 10;
SELECT * FROM (SELECT x, toTypeName(x) FROM (SELECT 1 AS x UNION ALL SELECT -1)) ORDER BY x DESC;
SELECT * FROM (SELECT x, toTypeName(x) FROM (SELECT 1 AS x UNION ALL SELECT NULL)) ORDER BY x DESC;
SELECT * FROM (SELECT x, toTypeName(x), count() FROM (SELECT 1 AS x UNION ALL SELECT NULL UNION ALL SELECT 1.0) GROUP BY x) ORDER BY x DESC;
SELECT * FROM (WITH (SELECT * FROM system.numbers LIMIT 1 OFFSET 1) AS n, toUInt64(10 / n) as q SELECT * FROM system.one WHERE q > 0);
SELECT * FROM (WITH test1 AS (SELECT toInt32(*) i FROM numbers(5)) SELECT * FROM test1) l ANY INNER JOIN test1 r on (l.i == r.i);
select * from (　( select *, count() over () cnt from　( select * from numbers(10000000) )　)　) limit 3　;
select * from (　( select *, count() over () cnt from　( select * from numbers(10000000) )　)　) order by number limit 3　;
SELECT * FROM /* test 01413, query 3 */ rows_events_test WHERE v = 2;
SELECT * FROM 01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes ORDER BY id;
SELECT * FROM 01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes ORDER BY id;
SELECT * FROM 01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes ORDER BY id;
SELECT * FROM 01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes ORDER BY id;
SELECT * FROM 01686_test WHERE key = 'Hello';
SELECT * FROM 01686_test WHERE key = -123;
SELECT * FROM 01686_test WHERE key = 123 OR key = 4567 ORDER BY key;
SELECT * FROM 01686_test WHERE key = 123;
SELECT * FROM 01686_test WHERE key = NULL OR key = 0;
SELECT * FROM 01686_test WHERE key = NULL;
SELECT * FROM 01686_test WHERE key IN (123, 456, -123) ORDER BY key;
SELECT * FROM 01686_test WHERE key IN (99, 999, 9999, -123) ORDER BY key;
SELECT * FROM 01720_dictionary_db.dictionary;
SELECT * FROM 01753_dictionary_db.direct_dictionary_simple_key_complex_attributes;
SELECT * FROM 01753_dictionary_db.direct_dictionary_simple_key_simple_attributes;
SELECT * FROM 01754_dictionary_db.direct_dictionary_complex_key_complex_attributes;
SELECT * FROM 01754_dictionary_db.direct_dictionary_complex_key_simple_attributes;
SELECT * FROM 01760_db.example_complex_key_dictionary;
SELECT * FROM 01760_db.example_simple_key_dictionary;
SELECT * FROM 01765_db.hashed_dictionary_simple_key_complex_attributes ORDER BY id;
SELECT * FROM 01765_db.hashed_dictionary_simple_key_simple_attributes ORDER BY id;
SELECT * FROM 01765_db.sparse_hashed_dictionary_simple_key_complex_attributes ORDER BY id;
SELECT * FROM 01765_db.sparse_hashed_dictionary_simple_key_simple_attributes ORDER BY id;
SELECT * FROM 01766_db.hashed_dictionary_complex_key_complex_attributes ORDER BY (id, id_key);
SELECT * FROM 01766_db.hashed_dictionary_complex_key_simple_attributes ORDER BY (id, id_key);
SELECT * FROM 01780_db.dict2;
SELECT * FROM 01780_db.dict3;
SELECT * FROM 01785_db.complex_key_hashed_dictionary;
SELECT * FROM 01785_db.simple_key_flat_dictionary;
SELECT * FROM 01785_db.simple_key_hashed_dictionary;
SELECT * FROM 01837_db.simple_key_direct_dictionary;
SELECT * FROM 01913_db.test_dictionary;
SELECT * FROM 01914_db.dictionary_1;
SELECT * FROM 01914_db.dictionary_2;
SELECT * FROM 02015_db.test_table_default;
SELECT * FROM 02131_rptable;
SELECT * FROM 02131_rqtable;
SELECT * FROM 02155_test_dictionary;
SELECT * FROM 02155_test_dictionary_view;
SELECT * FROM 02162_test_dictionary;
SELECT * FROM 02179_test_dictionary;
SELECT * FROM 02181_test_dictionary;
SELECT * FROM 02183_cache_dictionary;
SELECT * FROM 02183_dictionary_source_table;
SELECT * FROM 02183_dictionary_test_table;
SELECT * FROM 02183_direct_dictionary;
SELECT * FROM 02183_flat_dictionary;
SELECT * FROM 02183_hashed_array_dictionary;
SELECT * FROM 02183_hashed_dictionary;
SELECT * FROM 02183_ip_trie_dictionary;
SELECT * FROM 02183_ip_trie_dictionary_source_table;
SELECT * FROM 02183_polygon_dictionary;
SELECT * FROM 02183_range_dictionary;
SELECT * FROM 02183_range_dictionary_source_table;
SELECT * FROM 02184_range_dictionary;
SELECT * FROM 02185_range_dictionary;
SELECT * FROM 02185_range_dictionary_source_table;
SELECT * FROM 02186_range_dictionary;
SELECT * FROM 02186_range_dictionary_source_table;
SELECT * FROM 02188_test_dictionary_complex_primary_key;
SELECT * FROM 02188_test_dictionary_simple_primary_key;
SELECT * FROM 02265_atomic_db.join_table;
SELECT * FROM 02267_t ORDER BY n1, n2 FORMAT JSONLines;
SELECT * FROM 02267_t ORDER BY n1, n2 FORMAT NDJSON;
SELECT * FROM 02416_rocksdb ORDER BY key;
SELECT * FROM 02417_test ORDER BY key;
SELECT * FROM 02417_test_another ORDER BY key;
SELECT * FROM 02476_query_parameters_insert;
SELECT * FROM 02483_substitute_udf ORDER BY id;
SELECT * FROM 02526_keeper_map WHERE key in (SELECT number * 5 FROM numbers(1000)) FORMAT Null;
SELECT * FROM 02526_rocksdb WHERE key in (SELECT number * 5 FROM numbers(1000)) FORMAT Null;
SELECT * FROM 02538_bf_ngrambf_map_values_test PREWHERE (map['']) = 'V2V\0V2V2V2V2V2V2' WHERE (map[NULL]) = 'V2V\0V2V2V2V2V2V2V2V\0V2V2V2V2V2V2V2V\0V2V2V2V2V2V2V2V\0V2V2V2V2V2V2' SETTINGS force_data_skipping_indices = 'map_values_ngrambf';
SELECT * FROM 02668_logical_optimizer WHERE 3 = a AND b = 'another' AND a = 3;
SELECT * FROM 02668_logical_optimizer WHERE a <> 1 AND 1 <> a;
SELECT * FROM 02668_logical_optimizer WHERE a <> 1 AND 3 <> a AND 1 <> a;
SELECT * FROM 02668_logical_optimizer WHERE a = 1 OR 1 = a;
SELECT * FROM 02668_logical_optimizer WHERE a = 1 OR 3 = a OR 1 = a;
SELECT * FROM 02668_logical_optimizer WHERE a = 2 AND 2 = a;
select * from 02681_undrop_log order by id;
select * from 02681_undrop_mergetree order by id;
select * from 02681_undrop_multiple order by id;
select * from 02681_undrop_no_uuid_on_cluster order by id;
select * from 02681_undrop_replicatedmergetree order by id;
select * from 02681_undrop_uuid_on_cluster order by id;
SELECT * FROM 02702_logical_optimizer WHERE a = 1 OR 3 = a OR 2 = a OR a = NULL;
SELECT * FROM 02702_logical_optimizer WHERE a = 1 OR 3 = a OR NULL = a;
SELECT * FROM 02702_logical_optimizer_with_null_column WHERE a = 1 OR 3 = a OR 2 = a;
SELECT * FROM 02703_db.02703_after_rp;
SELECT * FROM 02703_db.02703_rptable;
SELECT * FROM 02703_db.02703_rptable_another;
SELECT * FROM 02703_db.02703_unexpected_columns;
SELECT * FROM 02703_rqtable_default;
SELECT * FROM 02706_keeper_map_insert_strict WHERE key = 1;
SELECT * FROM 02751_query_log_test_partitions WHERE a = 3;
SELECT * FROM 02952_disjunction_optimization WHERE (a <> 1 AND a <> 2 AND a <> 4) OR b = '';
SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4 AND b <> '';
SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4 AND true;
SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4;
SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND b = '' AND a <> 4;
SELECT * FROM `01945.db`.`test_dictionary.test`;
SELECT * FROM `01945.db`.test_dictionary;
SELECT * FROM `system`.`one` AS `xxx`;
select * from `table_00609` prewhere val > 2 format Null SETTINGS max_block_size=10000;
select * from `table_00609` prewhere val > 2 format Null SETTINGS max_block_size=1000;
select * from `table_00609` prewhere val > 2 format Null SETTINGS max_block_size=100;
select * from `table_00609` prewhere val > 2 format Null SETTINGS max_block_size=20000;
select * from `table_00609` prewhere val > 2 format Null SETTINGS max_block_size=30000;
select * from `table_00609` prewhere val > 2 format Null SETTINGS max_block_size=40000;
select * from `table_00609` prewhere val > 2 format Null SETTINGS max_block_size=80000;
select * from `table_00609` prewhere val > 2 format Null;
SELECT * FROM a ANY LEFT OUTER JOIN j USING id ORDER BY a.id, a.val SETTINGS enable_optimize_predicate_expression = 0;
SELECT * FROM a ANY LEFT OUTER JOIN j USING id ORDER BY a.id, a.val SETTINGS enable_optimize_predicate_expression = 1;
SELECT * FROM a INNER JOIN b USING(key) GROUP BY ID, key;
select * from a where i > 0 and j = 4 settings force_index_by_date = 1;
SELECT * FROM a1 as a left JOIN a2 as b on a.a=b.a ORDER BY b SETTINGS join_default_strictness='ANY';
SELECT * FROM agg_table;
select * from agg_view01747;
SELECT * FROM aggregating_merge_tree ORDER BY key;
select * from aliases_test;
SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) js2 USING (foo) ORDER BY foo;
SELECT * FROM Alpha FULL JOIN Beta ON Alpha.foo = Beta.foo ORDER BY foo;
SELECT * FROM Alpha FULL JOIN Beta USING (foo) ORDER BY foo;
SELECT * FROM alter_00061 ORDER BY k;
SELECT * FROM alter_00121 ORDER BY d;
SELECT * FROM alter_00147 ARRAY JOIN n ORDER BY n.x;
SELECT * FROM alter_00147 ARRAY JOIN n WHERE n.x LIKE '%Hello%' ORDER BY n.x;
SELECT * FROM alter_00147 ARRAY JOIN n WHERE n.x LIKE '%Hello%';
SELECT * FROM alter_00147 ARRAY JOIN n;
SELECT * FROM alter_00147 ORDER BY n.x;
SELECT * FROM alter_00147;
SELECT * FROM alter_00665 ORDER BY boolean_false NULLS LAST;
SELECT * FROM alter_00665;
SELECT * FROM alter_attach ORDER BY x;
SELECT * FROM alter_bug;
SELECT * FROM alter_column ORDER BY _part;
SELECT * FROM alter_compression_codec ORDER BY id;
SELECT * FROM alter_compression_codec1 ORDER BY id;
SELECT * FROM alter_compression_codec2 ORDER BY id;
SELECT * FROM alter_drop_version;
SELECT * FROM alter_enum_array ORDER BY Key;
SELECT * FROM alter_test;
SELECT * FROM arr;
select * from array where arr > [12.2];
select * from array where arr > [null, 12.2];
select * from array where arr > [null, 12];
select * from array_functions;
SELECT * FROM array_pk ORDER BY n;
SELECT * FROM arrays_test ORDER BY a1, a2;
SELECT * FROM arrays_test;
SELECT * FROM attach_partition_t6 WHERE b = '1';
select * from auto_assign_enum where x = 1;
select * from auto_assign_enum1 where x = -999;
select * from auto_assign_enum1;
select * from auto_assign_enum;
select * from ay;
SELECT * FROM b JOIN a USING (key) WHERE ID = '1' HAVING ID = '1';
SELECT * FROM b;
SELECT * FROM bf_ngram_array_test WHERE has(array, 'K1') SETTINGS force_data_skipping_indices='array_ngram';
SELECT * FROM bf_ngram_array_test WHERE has(array, 'K2') SETTINGS force_data_skipping_indices='array_ngram';
SELECT * FROM bf_ngram_array_test WHERE has(array, 'K3') SETTINGS force_data_skipping_indices='array_ngram';
SELECT * FROM bf_ngram_array_test WHERE has(array_fixed, 'K1') SETTINGS force_data_skipping_indices='array_fixed_ngram';
SELECT * FROM bf_ngram_array_test WHERE has(array_fixed, 'K2') SETTINGS force_data_skipping_indices='array_fixed_ngram';
SELECT * FROM bf_ngram_array_test WHERE has(array_fixed, 'K3') SETTINGS force_data_skipping_indices='array_fixed_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc, '%CD3%') SETTINGS force_data_skipping_indices='lc_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc, '%CD4%') SETTINGS force_data_skipping_indices='lc_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc, '%CD5%') SETTINGS force_data_skipping_indices='lc_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc, 'K1') SETTINGS force_data_skipping_indices='lc_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc, 'K2') SETTINGS force_data_skipping_indices='lc_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc, 'K3') SETTINGS force_data_skipping_indices='lc_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc_fixed, '%CD3%') SETTINGS force_data_skipping_indices='lc_fixed_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc_fixed, '%CD4%') SETTINGS force_data_skipping_indices='lc_fixed_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc_fixed, '%CD5%') SETTINGS force_data_skipping_indices='lc_fixed_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc_fixed, 'K1ZZZZZZ') SETTINGS force_data_skipping_indices='lc_fixed_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc_fixed, 'K2ZZZZZZ') SETTINGS force_data_skipping_indices='lc_fixed_ngram';
SELECT * FROM bf_ngram_lowcard_test WHERE like(lc_fixed, 'K3ZZZZZZ') SETTINGS force_data_skipping_indices='lc_fixed_ngram';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_keys_ngrambf';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_keys_ngrambf';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_keys_ngrambf';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_keys_ngrambf';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map['K3'] != '';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map['K3'] = '';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map_fixed['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_fixed_keys_ngrambf';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map_fixed['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_fixed_keys_ngrambf';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map_fixed['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_fixed_keys_ngrambf';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map_fixed['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_fixed_keys_ngrambf';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map_fixed['K3'] != '';
SELECT * FROM bf_ngrambf_map_keys_test WHERE map_fixed['K3'] = '';
SELECT * FROM bf_ngrambf_map_values_test WHERE map['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map['K3'] != '';
SELECT * FROM bf_ngrambf_map_values_test WHERE map['K3'] = '';
SELECT * FROM bf_ngrambf_map_values_test WHERE map_fixed['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_fixed_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map_fixed['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_fixed_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map_fixed['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_fixed_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map_fixed['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_fixed_values_ngrambf';
SELECT * FROM bf_ngrambf_map_values_test WHERE map_fixed['K3'] != '';
SELECT * FROM bf_ngrambf_map_values_test WHERE map_fixed['K3'] = '';
SELECT * FROM bf_tokenbf_array_test WHERE has(array, 'K1') SETTINGS force_data_skipping_indices='array_bf_tokenbf';
SELECT * FROM bf_tokenbf_array_test WHERE has(array, 'K2') SETTINGS force_data_skipping_indices='array_bf_tokenbf';
SELECT * FROM bf_tokenbf_array_test WHERE has(array, 'K3') SETTINGS force_data_skipping_indices='array_bf_tokenbf';
SELECT * FROM bf_tokenbf_array_test WHERE has(array_fixed, 'K1') SETTINGS force_data_skipping_indices='array_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_array_test WHERE has(array_fixed, 'K2') SETTINGS force_data_skipping_indices='array_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_array_test WHERE has(array_fixed, 'K3') SETTINGS force_data_skipping_indices='array_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc, '%CD3%') SETTINGS force_data_skipping_indices='lc_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc, '%CD4%') SETTINGS force_data_skipping_indices='lc_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc, '%CD5%') SETTINGS force_data_skipping_indices='lc_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc, 'K1') SETTINGS force_data_skipping_indices='lc_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc, 'K2') SETTINGS force_data_skipping_indices='lc_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc, 'K3') SETTINGS force_data_skipping_indices='lc_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc_fixed, '%CD3%') SETTINGS force_data_skipping_indices='lc_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc_fixed, '%CD4%') SETTINGS force_data_skipping_indices='lc_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc_fixed, '%CD5%') SETTINGS force_data_skipping_indices='lc_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc_fixed, 'K1ZZZZZZ') SETTINGS force_data_skipping_indices='lc_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc_fixed, 'K2ZZZZZZ') SETTINGS force_data_skipping_indices='lc_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_lowcard_test WHERE like(lc_fixed, 'K3ZZZZZZ') SETTINGS force_data_skipping_indices='lc_fixed_bf_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_keys_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_keys_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_keys_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_keys_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map['K3'] != '';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map['K3'] = '';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map_fixed['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_fixed_keys_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map_fixed['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_fixed_keys_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map_fixed['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_fixed_keys_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map_fixed['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_fixed_keys_tokenbf';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map_fixed['K3'] != '';
SELECT * FROM bf_tokenbf_map_keys_test WHERE map_fixed['K3'] = '';
SELECT * FROM bf_tokenbf_map_values_test WHERE map['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_values_tokenbf';
SELECT * FROM bf_tokenbf_map_values_test WHERE map['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_values_tokenbf';
SELECT * FROM bf_tokenbf_map_values_test WHERE map['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_values_tokenbf';
SELECT * FROM bf_tokenbf_map_values_test WHERE map['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_values_tokenbf';
SELECT * FROM bf_tokenbf_map_values_test WHERE map['K3'] != '';
SELECT * FROM bf_tokenbf_map_values_test WHERE map['K3'] = '';
SELECT * FROM bf_tokenbf_map_values_test WHERE map_fixed['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_fixed_values_tokenbf';
SELECT * FROM bf_tokenbf_map_values_test WHERE map_fixed['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_fixed_values_tokenbf';
SELECT * FROM bf_tokenbf_map_values_test WHERE map_fixed['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_fixed_values_tokenbf';
SELECT * FROM bf_tokenbf_map_values_test WHERE map_fixed['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_fixed_values_tokenbf';
SELECT * FROM bf_tokenbf_map_values_test WHERE map_fixed['K3'] != '';
SELECT * FROM bf_tokenbf_map_values_test WHERE map_fixed['K3'] = '';
SELECT * FROM bloom_filter_not_has WHERE NOT has(ary, 'b') ORDER BY ary;
SELECT * FROM bloom_filter_not_has WHERE NOT has(ary, 'c') ORDER BY ary;
SELECT * FROM bloom_filter_not_has WHERE NOT has(ary, 'd') ORDER BY ary;
SELECT * FROM bloom_filter_not_has WHERE NOT has(ary, 'f') ORDER BY ary;
SELECT * FROM bloom_filter_nullable_index WHERE str IN (SELECT '1048576', str FROM bloom_filter_nullable_index) SETTINGS transform_null_in = 0;
SELECT * FROM bloom_filter_nullable_index WHERE str IN (SELECT '1048576', str FROM bloom_filter_nullable_index) SETTINGS transform_null_in = 1;
SELECT * FROM bloom_filter_nullable_index WHERE str IN (SELECT cast('test', 'Nullable(String)')) SETTINGS transform_null_in = 0;
SELECT * FROM bloom_filter_nullable_index WHERE str IN (SELECT cast('test', 'Nullable(String)')) SETTINGS transform_null_in = 1;
SELECT * FROM bloom_filter_nullable_index WHERE str IN (SELECT value FROM nullable_string_value) SETTINGS transform_null_in = 0;
SELECT * FROM bloom_filter_nullable_index WHERE str IN (SELECT value FROM nullable_string_value) SETTINGS transform_null_in = 1;
SELECT * FROM bloom_filter_nullable_index__fuzz_0 WHERE str IN (SELECT value FROM nullable_string_value__fuzz_2);
SELECT * FROM bloom_filter_nullable_index__fuzz_1 WHERE str IN (SELECT value FROM nullable_string_value__fuzz_2);
SELECT * FROM broken WHERE time>-1;
SELECT * FROM buf ORDER BY timestamp;
SELECT * FROM buf;
SELECT * FROM buffer_00753 ORDER BY x;
SELECT * FROM buffer_00753 ORDER BY y;
select * from bug where (k =1 or k=2 or k =3) and (s=21 or s=22 or s=23) SETTINGS allow_experimental_analyzer = 1;
select * from bug where (k =1 or k=2 or k =3) and (s=21 or s=22 or s=23);
select * from bug;
SELECT * FROM bug_36995 PREWHERE (time IS NOT NULL) WHERE (product IN (SELECT '1'));
SELECT * FROM bug_36995 WHERE (time IS NOT NULL) AND (product IN (SELECT '1')) SETTINGS optimize_move_to_prewhere = 0;
SELECT * FROM bug_36995 WHERE (time IS NOT NULL) AND (product IN (SELECT '1')) SETTINGS optimize_move_to_prewhere = 1;
select * from bug_delta_gorilla;
select * from bx, ax where ax.A = bx.A and ax.B in (1,2);
SELECT * FROM calendar WHERE (year, month) IN ( SELECT (year, month) FROM events32 );
select * from cardinality;
SELECT * FROM cast1;
SELECT * FROM cast2;
SELECT * FROM cast;
select * from cc;
SELECT * FROM cdp_orders;
SELECT * FROM clear_column ORDER BY x;
SELECT * FROM clear_column2 ORDER BY d, i, s;
SELECT * FROM cluster('test_cluster_interserver_secret', system, one);
select * from cluster('test_cluster_two_shards', currentDatabase(), data_01227) prewhere key global in (select key from data_01227 prewhere key = 2);
select * from cluster(test_cluster_two_shards, currentDatabase(), dist_01223) group by key order by key;
select * from cluster(test_cluster_two_shards, currentDatabase(), dist_01223) order by key;
select * from cluster(test_cluster_two_shards, currentDatabase(), test) where i < 20 order by i limit 1 FORMAT JSONCompact;
select * from cluster(test_cluster_two_shards, currentDatabase(), test) where i < 30 order by i limit 1 FORMAT JSONCompact;
SELECT * FROM cluster(test_cluster_two_shards, view(SELECT 'Hello' AS all, 'World' AS distinct));
SELECT * FROM cluster(test_cluster_two_shards_localhost, system, one) ORDER BY toDateTime(dummy);
SELECT * FROM codecs10;
SELECT * FROM codecs11;
SELECT * FROM codecs1;
SELECT * FROM codecs2;
SELECT * FROM codecs3;
SELECT * FROM codecs4;
SELECT * FROM codecs5;
SELECT * FROM codecs6;
SELECT * FROM codecs7;
SELECT * FROM codecs8;
SELECT * FROM codecs9;
SELECT * FROM collapsing ORDER BY key;
SELECT * FROM collapsing_merge_tree ORDER BY key;
SELECT * FROM collate_test1 ORDER BY s COLLATE 'ru', x;
SELECT * FROM collate_test1 ORDER BY s COLLATE 'ru';
SELECT * FROM collate_test1 ORDER BY x, s COLLATE 'ru';
SELECT * FROM collate_test2 ORDER BY s COLLATE 'ru', x;
SELECT * FROM collate_test2 ORDER BY s COLLATE 'ru';
SELECT * FROM collate_test2 ORDER BY x, s COLLATE 'ru';
SELECT * FROM collate_test3 ORDER BY s COLLATE 'ru', x;
SELECT * FROM collate_test3 ORDER BY s COLLATE 'ru';
SELECT * FROM collate_test3 ORDER BY x, s COLLATE 'ru';
SELECT * FROM columns_with_multiple_streams ORDER BY field0;
SELECT * FROM columns_with_multiple_streams;
SELECT * FROM columns_with_multiple_streams_bad_case ORDER BY field0;
SELECT * FROM columns_with_multiple_streams_compact ORDER BY field0;
SELECT * FROM columns_with_multiple_streams_compact;
SELECT * FROM compress_table ORDER BY key;
SELECT * FROM compress_table;
SELECT * FROM compression_codec ORDER BY id;
SELECT * FROM compression_codec_log ORDER BY id;
SELECT * FROM compression_codec_multiple ORDER BY id;
SELECT * FROM compression_codec_multiple_log ORDER BY id;
SELECT * FROM compression_codec_multiple_more_types order by id;
SELECT * FROM compression_codec_multiple_more_types_replicated order by id;
SELECT * FROM compression_codec_multiple_replicated1 ORDER BY id;
SELECT * FROM compression_codec_multiple_replicated2 ORDER BY id;
SELECT * FROM compression_codec_multiple_tiny_log ORDER BY id;
SELECT * FROM compression_codec_replicated1 ORDER BY id;
SELECT * FROM compression_codec_replicated2 ORDER BY id;
SELECT * FROM compression_codec_tiny_log ORDER BY id;
SELECT * FROM constraint_constant_number_expression;
SELECT * FROM constraint_on_low_cardinality_nullable_type;
SELECT * FROM constraint_on_low_cardinality_type;
SELECT * FROM constraint_on_nullable_type;
select * from copy_02572;
select * from count_lc_test where arr != [];
select * from count_lc_test where arr < [];
select * from count_lc_test where arr <= [];
select * from count_lc_test where arr = [];
select * from count_lc_test where arr > [];
select * from count_lc_test where arr >= [];
select * from count_lc_test where empty(arr);
select * from count_lc_test where notEmpty(arr);
SELECT * FROM create_as_select_01021;
SELECT * FROM d;
select * from data order by key;
select * from data where indexHint(_partition_id = '1');
SELECT * FROM data WHERE v1 >= now() - INTERVAL 180 DAY FORMAT Null SETTINGS max_threads=1, max_final_threads=1, force_data_skipping_indices='v1_index', merge_tree_min_rows_for_seek=0, max_rows_to_read=1999999;
SELECT * FROM data WHERE v1 >= now() - INTERVAL 180 DAY FORMAT Null SETTINGS max_threads=1, max_final_threads=1, force_data_skipping_indices='v1_index', merge_tree_min_rows_for_seek=1, max_rows_to_read=1999999;
SELECT * FROM data;
select * from data;
select * from data_01279 group by key format Null;
SELECT * FROM data_01283 LIMIT 1 FORMAT Null;
SELECT * FROM data_01285 WHERE assumeNotNull(value) = 1;
SELECT * FROM data_01285 WHERE assumeNotNull(value) = 3;
SELECT * FROM data_01285;
select * from data_01292 where key > 0;
select * from data_01295;
SELECT * FROM data_01515 SETTINGS force_data_skipping_indices='';
SELECT * FROM data_01515 WHERE d1 = 0 SETTINGS force_data_skipping_indices=' d1_idx ';
SELECT * FROM data_01515 WHERE d1 = 0 SETTINGS force_data_skipping_indices=' d1_idx ';
SELECT * FROM data_01515 WHERE d1 = 0 SETTINGS force_data_skipping_indices='`d1_idx`';
SELECT * FROM data_01515 WHERE d1 = 0 SETTINGS force_data_skipping_indices='d1_idx,d1_null_idx';
SELECT * FROM data_01515;
select * from data_01643 order by key;
select * from data_01643;
SELECT * FROM data_01655 SETTINGS merge_tree_min_rows_for_concurrent_read=0, merge_tree_min_bytes_for_concurrent_read=0;
select * from data_01801 where key = 0 order by key desc settings max_rows_to_read=10 format Null;
select * from data_01801 where key = 0 order by key settings max_rows_to_read=9 format Null;
select * from data_01832;
select * from data_02000 where key = 0xdeadbeafdeadbeaf;
select * from data_02021 prewhere 0 or ignore(key) where key = 1;
select * from data_02021 prewhere 0 or ignore(key);
select * from data_02021 prewhere 1 or ignore(key) where key = 1;
SELECT * FROM data_02200 WHERE value = 1 SETTINGS use_skip_indexes=0, max_rows_to_read=1;
SELECT * FROM data_02201 FINAL WHERE value_max = 1 ORDER BY key, value_max SETTINGS use_skip_indexes=1, use_skip_indexes_if_final=1;
SELECT * FROM data_02411 FORMAT Null SETTINGS max_read_buffer_size=0;
select * from data_02572 order by key;
select * from data_02572;
SELECT * FROM data_02771 SETTINGS ignore_data_skipping_indices='';
SELECT * FROM data_02771 SETTINGS ignore_data_skipping_indices='na_idx';
SELECT * FROM data_02771 WHERE x = 1 AND y = 1 SETTINGS ignore_data_skipping_indices='xy_idx',force_data_skipping_indices='xy_idx' ;
SELECT * FROM data_02771;
SELECT * FROM database_dictionary_test_key_expression.test_query_log_dictionary_complex ORDER BY value_id;
SELECT * FROM database_dictionary_test_key_expression.test_query_log_dictionary_simple ORDER BY value_id;
SELECT * FROM database_for_dict.dict_with_conversion ORDER BY CompanyID;
SELECT * FROM database_for_range_dict.range_dictionary ORDER BY CountryID, StartDate, EndDate;
SELECT * FROM database_for_range_dict.range_dictionary_nullable ORDER BY CountryID, StartDate, EndDate;
SELECT * FROM date ORDER BY d;
SELECT * FROM date;
SELECT * from db_01721.decimal_dict where KeyField = 42;
SELECT * from db_01721.decimal_dict where KeyField = 4999;
SELECT * from db_01721.decimal_dict where KeyField = 5000;
SELECT * from db_01721.table_decimal_dict where KeyField = 42;
SELECT * from db_01721.table_decimal_dict where KeyField = 4999;
SELECT * from db_01721.table_decimal_dict where KeyField = 5000;
SELECT * FROM decimal ORDER BY a FORMAT JSONEachRow;
SELECT * FROM decimal ORDER BY b DESC FORMAT CSV;
SELECT * FROM decimal ORDER BY c FORMAT TabSeparated;
SELECT * FROM decimal ORDER BY d, e, f;
SELECT * FROM decimal WHERE d1 > 5 AND d2 < 30 ORDER BY d2 DESC;
SELECT * FROM decimal WHERE d1 IN(1, 3) ORDER BY d2;
SELECT * FROM decimal;
SELECT * FROM decimal_insert_cast_issue;
SELECT * FROM decimal_sum;
SELECT * FROM deduplication;
SELECT * FROM deduplication_by_partition ORDER BY d, x;
SELECT * FROM default_table ORDER BY x;
select * from defaulted order by payload;
select * from defaulted;
SELECT * FROM defaults ORDER BY (x, y);
SELECT * FROM defaults WHERE x = 7 FORMAT JSONEachRow;
SELECT * FROM defaults WHERE x > 7 ORDER BY x FORMAT JSONEachRow;
SELECT * FROM defaults;
SELECT * FROM defaults_all_columns ORDER BY n, s;
SELECT * from defaults_on_defaults where ArrLen = 0;
SELECT * FROM demo_loan_01568_dist ORDER BY id;
SELECT * FROM derived_metrics_local;
SELECT * FROM dest_01019 ORDER BY v;
SELECT * from dest_a ORDER BY count DESC;
SELECT * FROM dest_dictionary;
select * from dest_table order by Date, Id, Units;
SELECT * FROM dest_view_log ORDER BY x LIMIT 1;
SELECT * FROM dest_view_memory ORDER BY x LIMIT 1;
SELECT * FROM dest_view_merge_tree ORDER BY x LIMIT 1;
SELECT * FROM dest_view_set ORDER BY x LIMIT 1;
SELECT * FROM dest_view_stripe_log ORDER BY x LIMIT 1;
SELECT * FROM dest_view_tiny_log ORDER BY x LIMIT 1;
SELECT * FROM destination_join WHERE key in destination_set;
SELECT * FROM destination_join;
SELECT * FROM detach_all_no_partition ORDER BY x;
SELECT * FROM dict1;
SELECT * FROM dictionary('dict') ORDER BY id;
SELECT * FROM dictionary('dict');
SELECT * FROM dictionary('table_function_dictionary_test_dictionary');
select * from dictionary(regexp_dict1);
select * from dictionary_source_view ORDER BY id;
select * from dist group by key;
select * from dist2_01071 where key = 1;
SELECT * FROM dist_00967;
select * from dist_01071 where key = 0;
select * from dist_01071;
select * from dist_01072 where key=0 and _part='0' settings force_optimize_skip_unused_shards=2;
select * from dist_01072 where key=0 and _part='0';
select * from dist_01072 where key=0 and length(str)=0;
select * from dist_01072 where key=0 and str='';
select * from dist_01072 where key=toInt32(toInt32(toInt32(xxHash32(0))));
select * from dist_01072 where key=toInt32(toInt32(xxHash32(0)));
select * from dist_01072 where key=toInt32(value) settings force_optimize_skip_unused_shards=0;
select * from dist_01072 where key=toInt32(xxHash32(0));
select * from dist_01072 where key=toInt32OrZero(toString(xxHash64(0)));
select * from dist_01072 where key=value;
select * from dist_01072 where xxHash64(0)==xxHash64(0) and key=0;
select * from dist_01223 group by key having key = 1;
select * from dist_01223 group by key order by key limit 1;
select * from dist_01223 group by key order by key settings distributed_aggregation_memory_efficient=1;
select * from dist_01223 group by key order by key settings group_by_two_level_threshold=1, group_by_two_level_threshold_bytes=1, distributed_aggregation_memory_efficient=1;
select * from dist_01223 group by key order by key settings group_by_two_level_threshold=1, group_by_two_level_threshold_bytes=1;
select * from dist_01223 group by key order by key;
select * from dist_01223 having key = 1;
select * from dist_01223 order by key limit 1 by key;
select * from dist_01223 order by key limit 1;
select * from dist_01223 order by key;
select * from dist_01223;
select * from dist_01247 group by key, value;
select * from dist_01247 group by value, key;
select * from dist_01247;
select * from dist_01270 where key = 1;
select * from dist_01319 where key = 1;
select * from dist_01320 where key = 0;
select * from dist_01528 where dummy = 2;
select * from dist_01755 where 1 settings enable_early_constant_folding = 0;
select * from dist_01756 where dummy in ('0');
select * from dist_01756 where dummy in (0, 2) settings optimize_skip_unused_shards_limit=1;
select * from dist_01756 where dummy in tuple(0);
select * from dist_01756 where dummy in tuple(0, 2);
select * from dist_01756 where dummy in tuple(2);
select * from dist_01756 where dummy not in (2, 3) and dummy in (0, 2);
select * from dist_01756_column where dummy in (0, '255');
select * from dist_01756_column where dummy in (0, '255foo');
select * from dist_01756_str where key in ('0', '2');
select * from dist_01756_str where key in (0, 2);
select * from dist_01757 where dummy = 0 and dummy = 1 and dummy = 3 settings optimize_skip_unused_shards_limit=3;
select * from dist_01757 where dummy in (0, 1) format Null settings optimize_skip_unused_shards_limit=2;
select * from dist_02000 where key = 0xdeadbeafdeadbeaf settings force_optimize_skip_unused_shards=2;
select * from dist_02175 l global join local_02175 r using dummy;
select * from dist_02346 order by x settings additional_table_filters={'dist_02346' : 'x > 3 and x < 7'};
SELECT * FROM dist_3;
SELECT * FROM dist_tbl;
SELECT * FROM dist_test_01040 ORDER BY key;
select * from distr order by number LIMIT 20;
select * from distr order by number;
SELECT * FROM distr1;
select * from distr2 order by number;
select * from distr_table order by x settings additional_table_filters={'distr_table' : 'length(y) < 3'};
select * from distr_table order by x settings additional_table_filters={'distr_table' : 'length(y) > 3'};
select * from distr_table order by x settings additional_table_filters={'distr_table' : 'x < 3'};
select * from distr_table order by x settings additional_table_filters={'distr_table' : 'x > 3'};
select * from distr_table settings additional_table_filters={'distr_table' : 'x != 2 and x != 3'};
select * from distr_table settings additional_table_filters={'distr_table' : 'x = 2'};
SELECT * FROM distributed_00588 PREWHERE x = 1 WHERE s LIKE '%l%' ORDER BY x, s;
SELECT * FROM distributed_00952;
SELECT * FROM distributed_01099_b;
SELECT * FROM dm_metric_small2 WHERE (x = 1) AND (y = 1) AND z IS NULL;
select * from dp where i in (1);
SELECT * FROM dst ORDER BY x;
SELECT * FROM dst1 ORDER BY x;
SELECT * FROM dst2 ORDER BY x;
SELECT * FROM dst_00753 ORDER BY x;
SELECT * FROM dst_00753 ORDER BY y;
select * from dst_02224;
select * from dst_mv order by number;
select * from dt_overflow ORDER BY d;
SELECT * FROM empty ORDER BY key;
SELECT * FROM empty1 ORDER BY key;
SELECT * FROM empty2 ORDER BY key;
SELECT * FROM empty_summing;
SELECT * FROM encryption_test;
SELECT * FROM enum ORDER BY x, y FORMAT PrettyCompact;
select * from enum where enum = 1;
select * from enum_alter_issue order by a;
select * from enum_alter_issue order by b;
select * from enum_alter_issue;
SELECT * FROM enum_nested_alter ORDER BY x;
SELECT * FROM enum_nested_alter;
SELECT * FROM enum_test ORDER BY timestamp, e desc SETTINGS optimize_read_in_order=1;
select * from enums ORDER BY _part;
select * from enums order by e desc;
select * from enums where e != 'a';
select * from enums where e = 'a' or e = 'd';
select * from enums where e in (select e from enums);
select * from enums;
select * from enums_copy;
SELECT * FROM ES LIMIT 10 format Null;
SELECT * FROM ES LIMIT 100 format Null;
SELECT * FROM ES LIMIT 1000 format Null;
SELECT * FROM ES LIMIT 10000 format Null;
SELECT * FROM ES LIMIT 100000 format Null;
SELECT * FROM ES LIMIT 1000000 format Null;
SELECT * from executable('JSON', 'data String', SETTINGS max_command_execution_time=100);
SELECT * FROM f32_table where my_field = '49.9';
select * from file('01545_url_file_format_settings.csv', CSV, 'a int, b int') settings format_csv_delimiter = '|';
select * from file('02268_data.jsonCompactEachRow');
select * from file('02268_data.jsonl');
select * from file('02269_data', 'RowBinary', 'x UInt8');
SELECT * FROM file('::a');
select * from file('data.jsonl') order by x;
select * from file('data.native.zst');
select * from file(02293_data.arrow) settings max_threads=1;
select * from file(02322_data.sql, 'MySQLDump');
select * from file(02376_data.arrow);
select * from file(02384_data.arrow);
select * from file(02405_data.avro, auto, 'nested Nested(x UInt32, y String)');
select * from file(02405_data.avro, auto, 'nested Nested(x UInt32, y Tuple(y1 UInt32, y2 Array(String)), z Nested(z1 UInt32, z2 String))');
select * from file(02416_data.json);
select * from file(02416_data.jsonColumnsWithMetadata);
select * from file(02416_data.jsonCompact);
select * from file(02417_data.jsonObjectEachRow);
select * from file(02421_data.jsonl, auto, 'd Decimal32(3)');
select * from file(02422_data.msgpack, auto, 'x Int32');
select * from file(02453_data.jsonl, auto, 'x UInt32') settings input_format_allow_errors_num=1, input_format_record_errors_file_path='../error_file';
select * from file(02454_data.jsonobjecteachrow);
select * from file(concat(currentDatabase(), '/test2/data.1.Parquet'), 'Parquet', 'number UInt64');
select * from file(concat(currentDatabase(), '/test2/data.Parquet'), 'Parquet', 'number UInt64');
select * from file(concat(currentDatabase(), '/test4/data.1.Parquet.gz'), 'Parquet', 'number UInt64');
select * from file(concat(currentDatabase(), '/test4/data.Parquet.gz'), 'Parquet', 'number UInt64');
select * from file(data_02302.arrow, auto, 'x UInt8, y default 42, z default x + y') settings input_format_arrow_allow_missing_columns=1;
select * from file(data_02302.orc, auto, 'x UInt8, y default 42, z default x + y') settings input_format_orc_allow_missing_columns=1;
select * from file(data_02302.parquet, auto, 'x UInt8, y default 42, z default x + y') settings input_format_parquet_allow_missing_columns=1;
select * from file(data_02313.avro);
select * from file(data_02314.csv) order by c1 settings input_format_csv_skip_first_lines=5;
select * from file(data_02314.tsv) order by c1 settings input_format_tsv_skip_first_lines=5;
select * from file(data_02323.tsv, auto, 'x UInt32 NOT NULL');
select * from file(data_02323.tsv, auto, 'x UInt32 NULL');
select * from file(strings1_02735.parquet);
select * from file(strings2_02735.parquet);
select * from file(strings3_02735.parquet);
SELECT * FROM file2;
SELECT * FROM file;
select * from file;
select * from file_delim;
SELECT * FROM file_engine_table;
SELECT * FROM fill ORDER BY a WITH FILL STEP -1;
SELECT * FROM fill ORDER BY a WITH FILL, b WITH fill TO 6 STEP 2;
SELECT * FROM fill ORDER BY a WITH FILL, b WITH fill;
SELECT * FROM fill ORDER BY date DESC WITH FILL, val WITH FILL FROM 1 TO 6;
SELECT * FROM fill ORDER BY date WITH FILL FROM toDate('2019-05-01') TO toDate('2019-05-31'), val WITH FILL;
SELECT * FROM fill ORDER BY date WITH FILL TO toDate('2019-06-23') STEP 3, val WITH FILL FROM -10 STEP 2;
SELECT * FROM final_test FINAL PREWHERE id == '2018-01-02';
SELECT * FROM flat_dictionary;
SELECT * FROM float;
SELECT * FROM foo_distributed JOIN _tmp_baz ON foo_distributed.bar = _tmp_baz.qux;
SELECT * FROM foo_merge WHERE Val = 3 AND Id = 3;
select * from format('CSV', '-100000000000000000000');
select * from format('CSV', '100000000000000000000');
select * from format('RowBinaryWithDefaults', 'x Array(Tuple(UInt32, UInt32)) default [(42, 42)]', x'01');
select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'000001000000');
select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'0001');
select * from format('RowBinaryWithDefaults', 'x Nullable(UInt32) default 42', x'01');
select * from format('RowBinaryWithDefaults', 'x UInt32 default 42', x'0001000000');
select * from format('RowBinaryWithDefaults', 'x UInt32 default 42', x'01');
select * from format('TSV', '01/12/1925');
select * from format('TSV', '2022-04-22T03:45:06.381');
select * from format('TSV', '2022-04-22T03:45:06.381Z');
select * from format('TSV', '22222222222.2222');
select * from format('TSV', '222222222222222');
select * from format(BSONEachRow, 'x UInt32', x'00000000');
select * from format(BSONEachRow, 'x UInt32, y UInt32', x'1a0000001078002a0000001078002a0000001079002a00000000');
select * from format(CSV, '""');
select * from format(CSV, '1,1\n2\n\n3,3,3,3') settings input_format_csv_allow_variable_number_of_columns=1;
select * from format(CSV, '1,2,"[1,2,3]","[[\'abc\'], [], [\'d\', \'e\']]"');
select * from format(CSV, 'a1 Int32, a2 UInt64, a3 Array(Int32), a4 Array(Array(String))', '1,2,"[1,2,3]","[[\'abc\'], [], [\'d\', \'e\']]"');
select * from format(CSV, 'c1 DateTime, c2 String', '01-01-2000,abc') settings date_time_input_format='best_effort';
select * from format(CSV, 'c1 DateTime64(3), c2 String', '01-01-2000,abc') settings date_time_input_format='best_effort';
select * from format(CSV, 'd Date, s String', '2020-01-2,SomeString');
select * from format(CSV, 'd Date, s String', '2020-1-02,SomeString');
select * from format(CSV, 'd Date, s String', '2020-1-2,SomeString');
select * from format(CSV, 'd Date, s String', 'abcd-ef-gh,SomeString');
select * from format(CSV, 'd Date, s String', 'abcdefgh,SomeString');
select * from format(CSV, 'x UInt32, y UInt32', '1,1\n2\n\n3,3,3,3') settings input_format_csv_allow_variable_number_of_columns=1;
select * from format(CSV, 'x UInt32, y UInt32', '1,2\n\n1,2\n') settings input_format_csv_skip_trailing_empty_lines=1;
select * from format(CSVWithNames, '"x","y"\n1,1\n2\n\n3,3,3,3') settings input_format_csv_allow_variable_number_of_columns=1;
select * from format(CSVWithNames, 'x UInt32, z UInt32', '"x","y"\n1,1\n2\n\n3,3,3,3') settings input_format_csv_allow_variable_number_of_columns=1;
SELECT * FROM format(CSVWithNamesAndTypes, 'ip,port\nIPv6,UInt16\n::1,42\n');
select * from format(CustomSeparated, 'x UInt32, y UInt32', '1\t2\n\n\n1\t2\n\n\n') settings input_format_custom_skip_trailing_empty_lines=1;
select * from format(CustomSeparatedIgnoreSpaces, 'x String', ' unquoted_string\n') settings format_custom_escaping_rule='CSV';
select * from format(JSON, '{"a" : 10, "b" : "Hello"}');
select * from format(JSONCompactEachRow, '[1,1]\n[2]\n[]\n[3,3,3,3]') settings input_format_json_compact_allow_variable_number_of_columns=1;
select * from format(JSONCompactEachRow, 'x UInt32, y Array(UInt32)', '[1,[1,2,3],1]\n[2]\n[]\n[3,[3],3,3,[1,2,3]]') settings input_format_json_compact_allow_variable_number_of_columns=1;
select * from format(JSONCompactEachRow, 'x UInt32, y UInt32', '[1,1,[1,2,3]]\n[2]\n[]\n[3,3,3,3,[1,2,3]]') settings input_format_json_compact_allow_variable_number_of_columns=1;
select * from format(JSONCompactEachRow, 'x UInt32, y UInt32', '[1,1]\n[2]\n[]\n[3,3,3,3]') settings input_format_json_compact_allow_variable_number_of_columns=1;
select * from format(JSONCompactEachRowWithNames, '["x","y"]\n[1,1]\n[2]\n[]\n[3,3,3,3]') settings input_format_json_compact_allow_variable_number_of_columns=1;
select * from format(JSONCompactEachRowWithNames, 'x UInt32, z UInt32', '["x","y"]\n[1,1]\n[2]\n[]\n[3,3,3,3]') settings input_format_json_compact_allow_variable_number_of_columns=1;
SELECT * FROM format(JSONCompactEachRowWithNamesAndTypes, '["ip","port"]\n["IPv6","UInt16"]\n["::1",42]\n');
select * from format(JSONEachRow, 'a String, b Int64', $$ {"a": "Hello", "b": 111} {"a": "World", "b": 123} {"a": "Hello", "b": 111} {"a": "World", "b": 123} $$);
select * from format(JSONEachRow, 'arr String', '{"arr" : [1, "Hello", [1,2,3]]}');
select * from format(JSONEachRow, 'payload Array(String)', '{"payload" : ["root"]}') settings input_format_null_as_default=1;
select * from format(JSONEachRow, 'payload Array(String)', '{"payload" : []}') settings input_format_null_as_default=0;
select * from format(JSONEachRow, 'payload Array(String)', '{"payload" : []}') settings input_format_null_as_default=1;
select * from format(JSONEachRow, 'payload Array(String)', '{"payload" : null}') settings input_format_null_as_default=0;
select * from format(JSONEachRow, 'payload Map(String, Map(String, Map(String, String)))', '{"payload" : {"pull_request": {"merged_by": null}}}') settings input_format_null_as_default=0;
select * from format(JSONEachRow, 'payload Map(String, String)', '{"payload" : {}}') settings input_format_null_as_default=0;
select * from format(JSONEachRow, 'payload Map(String, String)', '{"payload" : {}}') settings input_format_null_as_default=1;
select * from format(JSONEachRow, 'payload Tuple(pull_request Tuple(merged_by Tuple(login Nullable(String))))', '{"payload" : {"pull_request": {"merged_by": null}}}') settings input_format_null_as_default=1;
select * from format(JSONEachRow, 'payload Tuple(pull_request Tuple(merged_by Tuple(login String)))', '{"payload" : {"pull_request": {"merged_by": null}}}') settings input_format_null_as_default=0;
select * from format(JSONEachRow, 'payload Tuple(pull_request Tuple(merged_by Tuple(login String)))', '{"payload" : {"pull_request": {"merged_by": {"login": "root"}}}}') settings input_format_null_as_default=1;
select * from format(JSONEachRow, 'payload Tuple(pull_request Tuple(merged_by Tuple(login String)))', '{"payload" : {}}') settings input_format_null_as_default=0;
select * from format(JSONEachRow, 'payload Tuple(pull_request Tuple(merged_by Tuple(login String)))', '{"payload" : {}}') settings input_format_null_as_default=1;
select * from format(JSONEachRow, 'x String', '{"x" : true}, {"x" : false}, {"x" : "str"}');
select * from format(JSONEachRow, 'x String', '{"x" : tru}');
select * from format(JSONEachRow, '{"a" : null, "b" : {}, "c" : []}');
select * from format(JSONEachRow, '{"a" : {"b" : null, "c" : [[], []]}, "d" : {"e" : [{}, {}], "f" : null}}');
SELECT * FROM format(JSONEachRow, '{"arr" : [{"x" : "aaa", "y" : [1,2,3]}]}') FORMAT JSONEachRow;
select * from format(JSONEachRow, '{"obj" : [{"a" : 42, "b" : "Hello", "c" : [1,2,3]}, {"a" : 43, "b" : "World", "d" : "2020-01-01"}]}, {"obj" : [{}]}');
select * from format(JSONEachRow, '{"obj" : {"a" : 42, "b" : "Hello", "c" : [1,2,3]}}');
select * from format(JSONEachRow, '{"obj" : {"a" : 42, "b" : "Hello", "c" : [1,2,3]}}, {"obj" : {"a" : 43, "b" : "World", "d" : "2020-01-01"}}');
select * from format(JSONEachRow, '{"obj" : {"a" : 42, "b" : "Hello", "c" : [1,2,3]}}, {"obj" : {"a" : 43, "b" : "World", "d" : "2020-01-01"}}, {"obj" : {}}');
select * from format(JSONEachRow, '{"obj" : {"a" : 42, "b" : "Hello", "c" : [1,2,3]}}, {"obj" : {"a" : 43, "b" : "World", "d" : "2020-01-01"}}, {"obj" : {}}, {"obj" : {"d" : "Hello", "b" : "2020-01-01"}}');
select * from format(JSONEachRow, '{"obj" : {"a" : [{}, {"b" : null}, {"c" : {"d" : 10}}]}}, {"obj" : {"a" : [{"e" : "Hello", "b" : [1,2,3]}]}}');
select * from format(JSONEachRow, '{"obj" : {"a" : {"b" : 1}}}, {"obj" : {"a.b" : 2, "a.b.c" : "Hello"}}');
select * from format(JSONEachRow, '{"obj" : {"a" : {}}}');
select * from format(JSONEachRow, '{"obj" : {"a" : {}}}, {"obj" : {"a" : {"b" : {"c" : 10}}}}');
select * from format(JSONEachRow, '{"obj" : {"nested_obj" : {"a" : 42, "b" : "Hello", "c" : [1,2,3]}}}, {"obj" : {"nested_obj" : {"a" : 43, "b" : "World", "d" : "2020-01-01"}}}, {"obj" : {"nested_obj" : {}}}');
select * from format(JSONEachRow, '{"obj" : {}}');
select * from format(JSONEachRow, '{"payload" : {"pull_request": {"merged_by": {"login": "root"}}}}') settings input_format_null_as_default=0;
select * from format(JSONEachRow, '{"payload" : {"pull_request": {"merged_by": {"login": "root"}}}}') settings input_format_null_as_default=1;
select * from format(JSONEachRow, '{"x" : "19000101"}');
select * from format(JSONEachRow, '{"x" : "20000101"}');
select * from format(JSONEachRow, '{"x" : "abc"}, {"x" : {"a" : 10, "b" : "abc"}}');
select * from format(JSONEachRow, '{"x" : 123}\n{"x" : "str"}');
select * from format(JSONEachRow, '{"x" : [123, "456"]}\n{"x" : ["str", "rts"]}');
select * from format(JSONEachRow, '{"x" : [123, "str"]}');
select * from format(JSONEachRow, '{"x" : [true, false]}, {"x" : [false, true]}, {"x" : ["str1", "str2"]}');
select * from format(JSONEachRow, '{"x" : null}, {"x" : 42}') settings schema_inference_make_columns_nullable=0, input_format_null_as_default=0;
select * from format(JSONEachRow, '{"x" : null}, {"x" : 42}') settings schema_inference_make_columns_nullable=0, input_format_null_as_default=1;
select * from format(JSONEachRow, '{"x" : null}, {"x" : 42}') settings schema_inference_make_columns_nullable=1;
select * from format(JSONEachRow, '{"x" : true}, {"x" : false}, {"x" : "str"}');
select * from format(JSONEachRow, '{"x" : {"a" : "b"}}, {"x" : {"a" : 1, "b" : [1,2,3]}}');
SELECT * FROM format(Native, 'k0\x23Array(Tuple(FixedString(1), Int64))\0\0\0\0\0\0\0�����\0����������������\0�\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0d\0\0\0\0\0\0\0\0\0\0\0\0\0�1?Vi�%');
SELECT * FROM format(Native, '\x01\x01\x01x\x0CArray(UInt8)\x01\x00\xBD\xEF\xBF\xBD\xEF\xBF\xBD\xEF');
select * from format(TSV, '1\t1\n2\n\n3\t3\t3\t3') settings input_format_tsv_allow_variable_number_of_columns=1;
select * from format(TSV, '9279104479c7da1114861274de32208ead91b60e') settings date_time_input_format='best_effort';
select * from format(TSV, 'x UInt32, y UInt32', '1\t1\n2\n\n3\t3\t3\t3') settings input_format_tsv_allow_variable_number_of_columns=1;
select * from format(TSV, 'x UInt32, y UInt32', '1\t2\n\n') settings input_format_tsv_skip_trailing_empty_lines=0;
select * from format(TSV, 'x UInt32, y UInt32', '1\t2\n\n1\t2\n') settings input_format_tsv_skip_trailing_empty_lines=1;
select * from format(TSVWithNames, 'x UInt32, z UInt32', 'x\ty\n1\t1\n2\n\n3\t3\t3\t3') settings input_format_tsv_allow_variable_number_of_columns=1;
select * from format(TSVWithNames, 'x\ty\n1\t1\n2\n\n3\t3\t3\t3') settings input_format_tsv_allow_variable_number_of_columns=1;
SELECT * FROM format(TSVWithNamesAndTypes, 'ip\tport\nIPv6\tUInt16\n::1\t42\n');
select * from forms where text_field like '%this%' or 0 = 1;
select * from forms where text_field like '%this%';
SELECT * FROM forward;
select * from from_table;
SELECT * FROM full_duplicates;
SELECT * FROM functional_index_mergetree WHERE (NOT x < 7.4) AND (NOT x > 7.49);
SELECT * FROM functional_index_mergetree WHERE NOT (NOT x < 7.49);
SELECT * FROM functional_index_mergetree WHERE NOT (NOT x < 7.5);
SELECT * FROM functional_index_mergetree WHERE NOT (NOT x > 7.42);
SELECT * FROM functional_index_mergetree WHERE NOT (x > 7.41 AND x < 7.51);
SELECT * FROM functional_index_mergetree WHERE NOT or(NOT x, toUInt64(x) AND NOT floor(x) > 6, x >= 7.42 AND round(x) <= 7);
SELECT * FROM functional_index_mergetree WHERE NOT x < 7.41 AND NOT x > 7.49;
SELECT * FROM functional_index_mergetree WHERE NOT x < 7.41;
SELECT * FROM functional_index_mergetree WHERE NOT x < 7.42 AND NOT x > 7.42;
SELECT * FROM functional_index_mergetree WHERE NOT x < 7.42;
SELECT * FROM functional_index_mergetree WHERE NOT x < 7.5;
SELECT * FROM functional_index_mergetree WHERE NOT x > 7.49;
SELECT * FROM functional_index_mergetree WHERE x < 7.49;
SELECT * FROM functional_index_mergetree WHERE x < 7.5;
SELECT * FROM functional_index_mergetree WHERE x > 7.41 AND x < 7.51;
SELECT * FROM functional_index_mergetree WHERE x > 7.42;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"schedule":[{"breakfast":"7am"}, {"lunch":"12pm"}]}', random_seed=123456, reuse_output=0, max_output_length=128) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"schedule":[{"breakfast":"7am"}, {"lunch":"12pm"}]}', random_seed=123456, reuse_output=0, max_output_length=65536, max_nesting_level=10, max_array_size=20) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=6667, max_nesting_level=0) LIMIT 10;
SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=6667, max_object_size=0, max_array_size=0) LIMIT 10;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"ClickHouse":"Is Fast"}', random_seed=1337) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"schedule":[{"breakfast":"7am"}, {"lunch":"12pm"}]}', random_seed=123456, reuse_output=false) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"schedule":[{"breakfast":"7am"}, {"lunch":"12pm"}]}', random_seed=123456, reuse_output=true) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{"students":[{"name":"Alice"}, {"name":"Bob"}]}', random_seed=1337) LIMIT 20;
SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=54321) LIMIT 10;
SELECT * FROM generateRandom('i8', 1, 10, 10);
select * from generateRandom('x UInt64 NULL', 7, 3) limit 2;
select * from generateRandom(10000000) limit 1;
select * from generateRandom(10000000, 2) limit 1;
select * from generateRandom(10000000, 2, 2) limit 1;
select * from generateRandom(10000000, 2, 2, 2) limit 1;
SELECT * FROM generateRandom(generateRandomStructure(5, 42), 42) LIMIT 1;
SELECT * from geo;
SELECT * FROM HASH_MV;
select * from hdfs('hdfs://localhost:12222/test_{1,2,3}.tsv') order by c1, c2, c3;
select * from hdfs('hdfs://localhost:12222/test_{1,2,3}.tsv', 'TSV') order by c1, c2, c3;
select * from hdfs('hdfs://localhost:12222/test_{1,2,3}.tsv', 'TSV', 'c1 UInt32, c2 UInt32, c3 UInt32') order by c1, c2, c3;
select * from hdfs('hdfs://localhost:12222/test_{1,2,3}.tsv', 'TSV', 'c1 UInt32, c2 UInt32, c3 UInt32', 'auto') order by c1, c2, c3;
select * from hdfsCluster('test_cluster_one_shard_three_replicas_localhost', 'hdfs://localhost:12222/test_02458_{1,2}.tsv') order by c1, c2, c3;
select * from hdfsCluster('test_cluster_one_shard_three_replicas_localhost', 'hdfs://localhost:12222/test_02458_{1,2}.tsv', 'TSV') order by c1, c2, c3;
select * from hdfsCluster('test_cluster_two_shards_localhost', 'hdfs://localhost:12222/test_{1,2,3}.tsv') order by c1, c2, c3;
select * from hdfsCluster('test_cluster_two_shards_localhost', 'hdfs://localhost:12222/test_{1,2,3}.tsv', 'TSV') order by c1, c2, c3;
select * from hdfsCluster('test_cluster_two_shards_localhost', 'hdfs://localhost:12222/test_{1,2,3}.tsv', 'TSV', 'c1 UInt32, c2 UInt32, c3 UInt32') order by c1, c2, c3;
select * from hdfsCluster('test_cluster_two_shards_localhost', 'hdfs://localhost:12222/test_{1,2,3}.tsv', 'TSV', 'c1 UInt32, c2 UInt32, c3 UInt32', 'auto') order by c1, c2, c3;
SELECT * FROM hierarchy_flat_dictionary_index;
SELECT * FROM hierarchy_hashed_array_dictionary_index;
SELECT * FROM hierarchy_hashed_dictionary_index;
SELECT * FROM index WHERE d > toDateTime('2020-04-06 23:59:59');
SELECT * FROM index WHERE identity(d > toDateTime('2020-04-06 23:59:59'));
select * from index where key < -0.5;
select * from index where key = -1;
select * from index where key = 1;
SELECT * FROM information_schema.columns WHERE table_schema = currentDatabase() AND table_name NOT LIKE '%inner%' ORDER BY table_name, column_name;
SELECT * FROM information_schema.key_column_usage WHERE table_schema = currentDatabase() AND table_name = 'kcu1' ORDER BY table_schema, column_name;
SELECT * FROM information_schema.key_column_usage WHERE table_schema = currentDatabase() AND table_name = 'kcu2' ORDER BY table_schema, column_name;
SELECT * FROM information_schema.referential_constraints;
SELECT * FROM information_schema.schemata WHERE schema_name ilike 'information_schema' ORDER BY schema_name;
SELECT * FROM information_schema.statistics;
SELECT * FROM information_schema.tables WHERE table_schema = currentDatabase() AND table_name NOT LIKE '%inner%' ORDER BY table_name;
SELECT * FROM information_schema.views WHERE table_schema = currentDatabase() ORDER BY table_name;
SELECT * FROM insert ORDER BY i;
SELECT * FROM insert_dedup_token ORDER BY id;
SELECT * FROM insert_dedup_token1 ORDER BY id;
SELECT * FROM insert_fewer_columns;
SELECT * FROM ints l INNER JOIN ints r USING i64 ORDER BY l.i32, r.i32;
SELECT * FROM ints l LEFT JOIN ints r USING i64 ORDER BY l.i32, r.i32;
SELECT * FROM ip4test;
SELECT * FROM ip_bloom;
SELECT * FROM ips_v6;
SELECT * FROM ipv6_test;
select * from issue_46128 where id <= 2 order by id;
SELECT * from join;
SELECT * from join_all_inner ORDER BY k;
SELECT * from join_all_left ORDER BY k;
SELECT * from join_any_inner ORDER BY k;
SELECT * from join_any_left ORDER BY k;
select * from joinbug;
SELECT * FROM json ORDER BY title;
SELECT * FROM json ORDER BY y;
select * from json;
SELECT * FROM json_columns FORMAT JSONColumns;
SELECT * FROM json_square_brackets ORDER BY id;
SELECT * FROM json_square_brackets;
SELECT * FROM keeper_retries_r1 order by a;
select * from kql($$Customers | where FirstName != 'Peter'$$);
select * from kql($$Customers | where FirstName !contains 'Pet'$$);
select * from kql($$Customers | where FirstName !contains_cs 'Pet'$$);
select * from kql($$Customers | where FirstName !endswith 'ter'$$);
select * from kql($$Customers | where FirstName !endswith_cs 'ter'$$);
select * from kql($$Customers | where FirstName !has 'Peter'$$);
select * from kql($$Customers | where FirstName !has_cs 'peter'$$);
select * from kql($$Customers | where FirstName !in ("test", "test2")$$);
select * from kql($$Customers | where FirstName !in ('Peter', 'Latoya')$$);
select * from kql($$Customers | where FirstName !startswith 'Peter'$$);
select * from kql($$Customers | where FirstName !startswith_cs 'Peter'$$);
Select * from kql(Customers|project FirstName) limit 1;
select * from kql_table2 limit 1;
SELECT * FROM kv WHERE value = 442;
SELECT * FROM l full outer join r on l.luid = r.ruid where luid is null and ruid is not null;
SELECT * FROM l full outer join r on l.luid = r.ruid where luid is null and ruid is not null;
SELECT * from l LEFT JOIN r USING a ORDER BY a;
SELECT * from l RIGHT JOIN r USING a ORDER BY a;
SELECT * FROM landing FINAL ORDER BY time;
select * from lc_00800_1;
SELECT * FROM lc_00931 WHERE (key < 100 OR key > 50000) AND NOT has(value, toString(key)) AND length(value) == 1 LIMIT 10 SETTINGS max_block_size = 8192, max_threads = 1;
select * from lc_mv_00752 order by letter;
select * from lc_null_int8_defnull order by val;
select * from lc_null_int8_defnull values;
SELECT * FROM lc_nullable_string ORDER BY c1;
select * from lc_perm;
SELECT * FROM lc_table INNER JOIN lc_table AS lc_table2 ON (CAST(lc_table.col AS String) = CAST(lc_table2.col AS String)) OR (CAST(lc_table.col AS String) = CAST(lc_table2.col AS String));
SELECT * FROM lc_table INNER JOIN lc_table AS lc_table2 ON (lc_table.col = lc_table2.col) OR (lc_table.col = lc_table2.col);
SELECT * FROM lc_table INNER JOIN lc_table AS lc_table2 ON CAST(lc_table.col AS String) = CAST(lc_table2.col AS String);
SELECT * FROM lc_table INNER JOIN lc_table AS lc_table2 ON lc_table.col = lc_table2.col;
select * from limit_by order by id, val limit 1, 2 by id limit 3 offset 1;
select * from limit_by order by id, val limit 1, 2 by id limit 3;
select * from limit_by order by id, val limit 2 offset 1 by id;
select * from limit_by order by id, val limit 2, 2 by id;
SELECT * FROM local_00952;
SELECT * FROM local_tbl;
SELECT * FROM log LIMIT 1;
SELECT * FROM log ORDER BY x;
SELECT * FROM log;
SELECT * FROM low_card WHERE lc = '1';
SELECT * FROM low_card;
SELECT * FROM lwd_test ORDER BY id, value;
SELECT * FROM m INNER JOIN b USING(key) GROUP BY ID, key;
SELECT * FROM m INNER JOIN b USING(key) WHERE ID = 1 GROUP BY ID, key HAVING ID = 1 ORDER BY ID;
SELECT * FROM m INNER JOIN b USING(key) WHERE ID = 1 HAVING ID = 1 ORDER BY ID;
SELECT * FROM m INNER JOIN b USING(key) WHERE ID = 1;
SELECT * FROM m INNER JOIN b USING(key);
SELECT * FROM m PREWHERE f = 0;
SELECT * FROM m PREWHERE f = 1 ORDER BY a, f;
SELECT * FROM m PREWHERE f = 1 ORDER BY a;
SELECT * FROM m WHERE a = 'OK' SETTINGS optimize_move_to_prewhere=1;
SELECT * FROM m WHERE f = 0 SETTINGS optimize_move_to_prewhere=0;
SELECT * FROM m WHERE f = 0 SETTINGS optimize_move_to_prewhere=1;
SELECT * FROM m2 WHERE id > 1 AND id < 5 ORDER BY id SETTINGS force_primary_key=1, max_bytes_to_read=64;
select * from m;
select * from m_table order by x settings additional_table_filters={'m_table' : 'x != 4', 'table_1' : 'x != 2', 'table_2' : 'x != 5'};
select * from m_table order by x settings additional_table_filters={'m_table' : 'x != 4'};
select * from m_table order by x settings additional_table_filters={'table_1' : 'x != 2', 'table_2' : 'x != 5'};
select * from m_table order by x settings additional_table_filters={'table_1' : 'x != 4', 'table_2' : 'x != 4'};
select * from m_table order by x settings additional_table_filters={'table_1' : 'x != 4'};
select * from m_table order by x settings additional_table_filters={'table_2' : 'x != 4'};
select * from m_table order by x settings additional_table_filters={'table_2' : 'x != 5'};
select * from m_table order by x settings additional_table_filters={'table_1' : 'x != 2'};
SELECT * FROM main;
SELECT * FROM main_01487.d WHERE value IN (SELECT l.value FROM l) ORDER BY value;
SELECT * FROM map_comb ORDER BY a, statusMap;
SELECT * FROM map_extractKeyLike_test ORDER BY id;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT CSV;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT JSON;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT JSONEachRow;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT TSKV;
SELECT * FROM map_formats ORDER BY m['k1'] FORMAT TSV;
SELECT * FROM map_test_index_map_keys WHERE has(map, '') SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE has(map, 'K0') SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE has(map, 'K2') SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K0'] IN 'V0' SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K0'] NOT IN 'V0' SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K2'] IN 'V2' SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K2'] NOT IN 'V2' SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE map['K3'] != '';
SELECT * FROM map_test_index_map_keys WHERE map['K3'] = '';
SELECT * FROM map_test_index_map_keys WHERE map['K3'] IN '';
SELECT * FROM map_test_index_map_keys WHERE map['K3'] NOT IN '';
SELECT * FROM map_test_index_map_keys WHERE mapContains(map, '');
SELECT * FROM map_test_index_map_keys WHERE mapContains(map, 'K0') SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_keys WHERE mapContains(map, 'K2') SETTINGS force_data_skipping_indices='map_bloom_filter_keys';
SELECT * FROM map_test_index_map_values WHERE map['K0'] != 'V0' SETTINGS force_data_skipping_indices='map_bloom_filter_values';
SELECT * FROM map_test_index_map_values WHERE map['K0'] = 'V0' SETTINGS force_data_skipping_indices='map_bloom_filter_values';
SELECT * FROM map_test_index_map_values WHERE map['K0'] IN 'V0' SETTINGS force_data_skipping_indices='map_bloom_filter_values';
SELECT * FROM map_test_index_map_values WHERE map['K0'] NOT IN 'V0' SETTINGS force_data_skipping_indices='map_bloom_filter_values';
SELECT * FROM map_test_index_map_values WHERE map['K2'] != 'V2' SETTINGS force_data_skipping_indices='map_bloom_filter_values';
SELECT * FROM map_test_index_map_values WHERE map['K2'] = 'V2' SETTINGS force_data_skipping_indices='map_bloom_filter_values';
SELECT * FROM map_test_index_map_values WHERE map['K2'] IN 'V2' SETTINGS force_data_skipping_indices='map_bloom_filter_values';
SELECT * FROM map_test_index_map_values WHERE map['K2'] NOT IN 'V2' SETTINGS force_data_skipping_indices='map_bloom_filter_values';
SELECT * FROM map_test_index_map_values WHERE map['K3'] != '';
SELECT * FROM map_test_index_map_values WHERE map['K3'] = '';
SELECT * FROM map_test_index_map_values WHERE map['K3'] IN '';
SELECT * FROM map_test_index_map_values WHERE map['K3'] NOT IN '';
SELECT * FROM markdown FORMAT Markdown;
SELECT * FROM mass_table_457;
SELECT * FROM mem_test FORMAT Null;
SELECT * FROM memory ORDER BY x;
SELECT * FROM memory_01069.file ORDER BY n;
SELECT * FROM memory_01069.mt ORDER BY n;
SELECT * FROM merge ORDER BY _part_index, x;
select * from merge order by dt;
SELECT * FROM merge('', '');
select * from merge('', 't');
SELECT * FROM merge('system', '^one$') AS one WHERE (one.dummy = 0) OR (one.dummy = 1);
SELECT * FROM merge(currentDatabase(), '') WHERE value = 1048575;
SELECT * FROM merge(currentDatabase(), '^numbers\\d+$') SAMPLE 0.01;
SELECT * FROM merge(currentDatabase(), '^numbers\\d+$') SAMPLE 0.1;
SELECT * FROM merge(currentDatabase(), '^view_without_sample$') SAMPLE 1 / 100;
SELECT * FROM merge(currentDatabase(), 'test_distributed_1') PREWHERE _table = 'test_distributed_1';
SELECT * FROM merge(currentDatabase(), 'test_distributed_1') PREWHERE _table in ('test_distributed_1', 'test_distributed_2');
SELECT * FROM merge(currentDatabase(), 'test_distributed_1') WHERE _table = 'test_distributed_1';
SELECT * FROM merge(currentDatabase(), 'test_distributed_1');
SELECT * FROM merge(currentDatabase(), 'test_distributed_1|test_distributed_2') ORDER BY _table;
SELECT * FROM merge(currentDatabase(), 'test_distributed_1|test_distributed_2') PREWHERE _table = 'test_distributed_1';
SELECT * FROM merge(currentDatabase(), 'test_distributed_1|test_distributed_2') PREWHERE _table in ('test_distributed_1', 'test_distributed_2') ORDER BY value;
SELECT * FROM merge(currentDatabase(), 'test_distributed_1|test_distributed_2') WHERE _table = 'test_distributed_1';
SELECT * FROM merge(currentDatabase(), 'test_local_1') PREWHERE _table = 'test_local_1';
SELECT * FROM merge(currentDatabase(), 'test_local_1') PREWHERE _table in ('test_local_1', 'test_local_2');
SELECT * FROM merge(currentDatabase(), 'test_local_1') WHERE _table = 'test_local_1';
SELECT * FROM merge(currentDatabase(), 'test_local_1');
SELECT * FROM merge(currentDatabase(), 'test_local_1|test_distributed_2') ORDER BY _table;
SELECT * FROM merge(currentDatabase(), 'test_local_1|test_distributed_2') PREWHERE _table = 'test_local_1';
SELECT * FROM merge(currentDatabase(), 'test_local_1|test_distributed_2') PREWHERE _table in ('test_local_1', 'test_distributed_2') ORDER BY value;
SELECT * FROM merge(currentDatabase(), 'test_local_1|test_distributed_2') WHERE _table = 'test_local_1';
SELECT * FROM merge(currentDatabase(), 'test_local_1|test_local_2') ORDER BY _table;
SELECT * FROM merge(currentDatabase(), 'test_local_1|test_local_2') PREWHERE _table = 'test_local_1';
SELECT * FROM merge(currentDatabase(), 'test_local_1|test_local_2') PREWHERE _table in ('test_local_1', 'test_local_2') ORDER BY value;
SELECT * FROM merge(currentDatabase(), 'test_local_1|test_local_2') WHERE _table = 'test_local_1';
SELECT * FROM merge(currentDatabase(), 'test_s64_distributed|test_u64_distributed') ORDER BY value;
SELECT * FROM merge(currentDatabase(), 'test_s64_distributed|test_u64_distributed') WHERE _table = 'test_u64_distributed' ORDER BY value;
SELECT * FROM merge(currentDatabase(), 'test_s64_distributed|test_u64_distributed') WHERE date = '2018-08-01' ORDER BY value;
SELECT * FROM merge(currentDatabase(), 'test_s64_distributed|test_u64_distributed') WHERE value = 1;
SELECT * FROM merge1 WHERE Val = 3 AND Val = 1;
SELECT * FROM merge1;
SELECT * FROM merge2 WHERE Val = 3 AND Val = 1;
SELECT * FROM merge3 WHERE Val = 3 AND Val = 1;
select * from merge;
SELECT * FROM merge_one_two WHERE x IN ('1');
SELECT * FROM merge_one_two WHERE x IN (1);
SELECT * FROM merge_tree_deduplication WHERE part = 33 ORDER BY key;
SELECT * FROM merge_tree_deduplication WHERE part = 44 ORDER BY key;
SELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT * FROM system.numbers LIMIT 0) SETTINGS allow_experimental_parallel_reading_from_replicas=2;
SELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT * FROM system.numbers LIMIT 0);
SELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT * FROM system.numbers LIMIT 2, 3) ORDER BY id SETTINGS allow_experimental_parallel_reading_from_replicas=1;
SELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT * FROM system.numbers LIMIT 2, 3) ORDER BY id SETTINGS allow_experimental_parallel_reading_from_replicas=2;
SELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT * FROM system.numbers LIMIT 2, 3) ORDER BY id;
SELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT 1) ORDER BY id SETTINGS allow_experimental_parallel_reading_from_replicas=1;
SELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT 1) ORDER BY id SETTINGS allow_experimental_parallel_reading_from_replicas=2;
SELECT * FROM merge_tree_in_subqueries WHERE name IN (SELECT 'test' || toString(number) FROM system.numbers LIMIT 2, 3) ORDER BY id;
SELECT * FROM merge_tree_no_deduplication ORDER BY key;
SELECT * FROM merge_tree_pk FINAL ORDER BY key, value;
SELECT * FROM merge_tree_pk ORDER BY key, value;
SELECT * FROM merge_tree_pk_sql FINAL ORDER BY key, value;
SELECT * FROM merge_tree_pk_sql ORDER BY key, value;
SELECT * FROM mergetree_00588 PREWHERE x = 1 WHERE s LIKE '%l%' ORDER BY x, s;
SELECT * FROM mergetree_00698;
SELECT * FROM mergetree_00712 ORDER BY x;
SELECT * FROM mergetree_00712;
SELECT * FROM minmax_idx WHERE u64 * i32 = 2 ORDER BY (u64, i32);
SELECT * FROM minmax_idx WHERE u64 * i32 = 2;
SELECT * FROM minmax_idx WHERE u64 * i32 > 1 ORDER BY (u64, i32);
SELECT * FROM minmax_idx2 WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt;
SELECT * FROM minmax_idx2 WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt;
SELECT * FROM minmax_idx2 WHERE u64 * i32 = 2;
SELECT * FROM minmax_idx2 WHERE u64 * i32 >= 2 ORDER BY (u64, i32);
SELECT * FROM minmax_idx2_r WHERE u64 * i32 >= 2 ORDER BY (u64, i32);
SELECT * FROM minmax_idx_r WHERE u64 * i32 = 2 ORDER BY (u64, i32);
SELECT * FROM minmax_idx_r WHERE u64 * i32 > 1 ORDER BY (u64, i32);
SELECT * FROM mmm;
SELECT * FROM moving_sum_num ORDER BY k,dt FORMAT TabSeparatedWithNames;
select * from mt order by p, n;
select * from mt where toUInt64(substr(_part, 1, position(_part, '_') - 1)) = 1;
select * from mt;
SELECT * FROM mt;
SELECT * FROM mt_00168_buffer;
select * from mt_compact order by a limit 10;
select * from mt_compact order by a, s limit 10;
select * from mt_compact where a > 1 order by a, s limit 10;
select * from mult_tab final order by date, value, sign;
select * from mult_tab final order by date, value, version, sign;
select * from mult_tab;
SELECT * FROM multidimensional ORDER BY t;
SELECT * FROM multidimensional;
select * from mut;
SELECT * FROM mutate_and_zero_copy_replication2 WHERE NOT ignore(*);
SELECT * from mutation_1;
SELECT * from mutation_2;
SELECT * FROM mutation_delete_null_rows ORDER BY EventDate;
select * from mutation_table order by dt, name;
SELECT * FROM mutation_table;
SELECT * FROM mv FINAL ORDER BY hour;
SELECT * FROM mv ORDER BY a;
SELECT * FROM mv ORDER BY n;
SELECT * FROM mv1_00726 ORDER BY x;
SELECT * FROM mv2_00726 ORDER BY x;
SELECT * FROM mv_00508 ORDER BY x;
SELECT * FROM mv_00610 ORDER BY y;
select * from mv_bad;
SELECT * FROM mv_extra_columns_dst ORDER by v;
SELECT * FROM mv_extra_columns_view;
select * from mv_good;
select * from mv_group;
select * from mv_table settings additional_table_filters={'mv_table' : 'x != 5'};
select * from mv_table settings additional_table_filters={'table_1' : 'x != 5'};
select * from mv_table settings additional_table_filters={'table_2' : 'x != 5'};
SELECT * FROM mv_target ORDER BY a;
SELECT * FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) ORDER BY key;
SELECT * FROM myTable mt WHERE myDay = '2021-01-02';
select * from n where nc is null;
select * from named_tuples format JSONEachRow settings output_format_json_named_tuples_as_objects = 1;
select * from needle_table;
SELECT * FROM nested ORDER BY column.name;
SELECT * FROM nested ORDER BY x;
SELECT * FROM nested1 ORDER BY x;
SELECT * FROM nested2 ORDER BY x;
SELECT * FROM nested;
SELECT * FROM nested_alter;
select * from nested_map_multiple_values;
select * from nested_not_a_map;
select * from nested_smt final;
select * from nested_smt;
SELECT * FROM nested_test;
SELECT * FROM new_mv ORDER BY x;
SELECT * FROM new_view_table_00942 ORDER BY x;
SELECT * FROM ngrambf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;
SELECT * FROM ngrambf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;
SELECT * FROM ngrambf_tab WHERE match(str, 'OLAP.*') ORDER BY id;
SELECT * FROM ngrambf_v1_hasany_test WHERE hasAny(array, ['another example', 'example.com']) ORDER BY id ASC SETTINGS force_data_skipping_indices='idx_array_ngrambf_v1';
SELECT * FROM ngrambf_v1_hasany_test WHERE hasAny(array, ['another test']) SETTINGS force_data_skipping_indices='idx_array_ngrambf_v1';
SELECT * FROM ngrambf_v1_hasany_test WHERE hasAny(array, ['example.com']) SETTINGS force_data_skipping_indices='idx_array_ngrambf_v1';
SELECT * FROM ngrambf_v1_hasany_test WHERE hasAny(array, ['this is a test']) SETTINGS force_data_skipping_indices='idx_array_ngrambf_v1';
SELECT * FROM non_ascii;
SELECT * FROM nORX WHERE B >= 1000 ORDER BY A ASC, -B ASC LIMIT 3 SETTINGS max_threads = 1;
SELECT * FROM null();
SELECT * FROM null_00481;
SELECT * FROM null_00549 ORDER BY k, a, b;
SELECT * FROM null_view;
SELECT * FROM nullable_00457 ORDER BY s;
SELECT * FROM nullable_00465;
SELECT * FROM nullable_00571;
SELECT * FROM nullable_key ORDER BY k, v;
SELECT * FROM nullable_key WHERE k < 10;
SELECT * FROM nullable_key WHERE k > 10;
SELECT * FROM nullable_key WHERE k IN (10, 20) SETTINGS transform_null_in = 1;
SELECT * FROM nullable_key WHERE k IN (3, NULL) SETTINGS transform_null_in = 1;
SELECT * FROM nullable_key WHERE k IS NOT NULL;
SELECT * FROM nullable_key WHERE k IS NULL;
SELECT * FROM nullable_key_without_final_mark WHERE s IS NOT NULL;
SELECT * FROM nullable_key_without_final_mark WHERE s IS NULL;
SELECT * FROM nullable_minmax_index ORDER BY k, v;
SELECT * FROM nullable_minmax_index WHERE v <= 2;
SELECT * FROM nullable_minmax_index WHERE v > 2;
SELECT * FROM nullable_minmax_index WHERE v IS NOT NULL;
SELECT * FROM nullable_minmax_index WHERE v IS NULL;
select * from nullable_set_index where b = 'a';
select * from nullable_set_index where b = 'b';
select * from nullable_set_index where b = 'c';
SELECT * FROM nulls_first_sort_test ORDER BY a NULLS FIRST,b NULLS FIRST,c NULLS FIRST LIMIT 5;
SELECT * FROM numbers(0);
select * from numbers(1) format JSONEachRow;
select * from numbers(1) t1 all right join numbers(1) t2 using number;
select * from numbers(1) t1 anti left join numbers(1) t2 using number;
select * from numbers(1) t1 anti right join numbers(1) t2 using number;
select * from numbers(1) t1 any left join numbers(1) t2 using number;
select * from numbers(1) t1 any right join numbers(1) t2 using number;
select * from numbers(1) t1 asof join numbers(1) t2 using number;
select * from numbers(1) t1 left anti join numbers(1) t2 using number;
select * from numbers(1) t1 left any join numbers(1) t2 using number;
select * from numbers(1) t1 left outer join numbers(1) t2 using number;
select * from numbers(1) t1 left semi join numbers(1) t2 using number;
select * from numbers(1) t1 right anti join numbers(1) t2 using number;
select * from numbers(1) t1 right any join numbers(1) t2 using number;
select * from numbers(1) t1 right outer join numbers(1) t2 using number;
select * from numbers(1) t1 right semi join numbers(1) t2 using number;
select * from numbers(1) t1 semi left join numbers(1) t2 using number;
select * from numbers(1) t1 semi right join numbers(1) t2 using number;
select * from numbers(1) where null format JSONEachRow;
SELECT * FROM numbers(1);
SELECT * FROM numbers(1, 1);
select * from numbers(10) as t any join join on t.number=join.n order by n;
select * from numbers(10) FORMAT JSONCompact settings max_result_rows = 10, output_format_write_statistics = 0;
SELECT * FROM numbers(10) FORMAT JSONLines;
SELECT * FROM numbers(10) FORMAT NDJSON;
SELECT * FROM numbers(10) FORMAT Pretty;
SELECT * FROM numbers(10) FORMAT PrettyCompact;
SELECT * FROM numbers(10) FORMAT PrettyCompactMonoBlock;
SELECT * FROM numbers(10) FORMAT PrettyCompactNoEscapes;
SELECT * FROM numbers(10) FORMAT PrettyNoEscapes;
SELECT * FROM numbers(10) FORMAT PrettySpace;
SELECT * FROM numbers(10) FORMAT PrettySpaceNoEscapes;
SELECT * FROM numbers(10) LIMIT 0.33 / 0.165 - 0.33 + 0.67;
SELECT * FROM numbers(10) LIMIT 3 OFFSET 2;
SELECT * FROM numbers(10) LIMIT 5 OFFSET 2;
SELECT * FROM numbers(10) ORDER BY number FORMAT Pretty;
SELECT * FROM numbers(10) ORDER BY number FORMAT PrettyCompact;
SELECT * FROM numbers(10) ORDER BY number FORMAT PrettyCompactMonoBlock;
SELECT * FROM numbers(10) ORDER BY number FORMAT PrettyCompactNoEscapes;
SELECT * FROM numbers(10) ORDER BY number FORMAT PrettyNoEscapes;
SELECT * FROM numbers(10) ORDER BY number FORMAT PrettySpace;
SELECT * FROM numbers(10) ORDER BY number FORMAT PrettySpaceNoEscapes;
SELECT * FROM numbers(10) SETTINGS limit=5, offset=2;
select * from numbers(10) settings max_result_rows = 10;
SELECT * FROM numbers(10);
select * from numbers(10);
select * from numbers(100) settings max_result_rows = 1;
select * from numbers(1e2) format Null;
SELECT * FROM numbers(2) AS n1 JOIN numbers(3) AS n2 ON n1.number = n2.number, numbers(4) AS n3 ORDER BY n1.number, n2.number, n3.number;
SELECT * FROM numbers(2) AS n1, numbers(3) AS n2 RIGHT JOIN numbers(4) AS n3 ON n2.number = n3.number ORDER BY n1.number, n2.number, n3.number;
SELECT * FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3 ORDER BY n1.number, n2.number, n3.number;
SELECT * FROM numbers(2) WHERE NOT ignore(*);
SELECT * FROM numbers(2) WHERE NOT ignore(COLUMNS('.+'));
SELECT * FROM numbers(2) WHERE NOT ignore(COLUMNS('x'));
SELECT * FROM numbers(3) AS a ANY LEFT JOIN numbers(3) AS b ON a.number = b.number ORDER BY a.number;
SELECT * FROM numbers(3) AS n1, numbers(2) AS n2 LEFT JOIN numbers(2) AS n3 ON n1.number = n3.number ORDER BY n1.number, n2.number, n3.number;
SELECT * FROM numbers(30);
SELECT * FROM numbers(4) GROUP BY number WITH TOTALS HAVING sum(number) <= arrayJoin([]);
SELECT * FROM numbers(4) where sleepEachRow(1);
SELECT * FROM numbers(SETTINGS x = 1);
select * from numbers_mt('100') format Null;
select * from numbers_mt(1e2) format Null;
SELECT * FROM old_school_table ORDER BY key;
SELECT * from one A JOIN system.one one ON A.dummy = one.dummy JOIN system.one two ON A.dummy = two.dummy FORMAT PrettyCompact;
SELECT * FROM one;
select * from one_0023;
SELECT * FROM or_bug WHERE (key = 1) OR false;
SELECT * FROM or_bug WHERE (key = 1);
SELECT * FROM original_mv ORDER BY x;
select * from p order by i settings max_partitions_to_read = 0;
select * from p order by i;
SELECT * FROM parallel_replicas_final FINAL FORMAT Null;
select * from part_info order by t;
SELECT * FROM partial_duplicates;
SELECT * FROM partition_and_primary_keys_using_same_expression ORDER BY dt;
SELECT * FROM partitioned_by_tuple ORDER BY d, x, w, y;
SELECT * FROM partitioned_by_tuple_replica2_00661 ORDER BY d, x, w, y;
select * from persons all inner join (select * from children) as j using id order by id, name, childName;
select * from persons all inner join (select * from children) using id order by id, name, childName;
select * from persons all inner join children using id order by id, name, childName;
SELECT * FROM pk WHERE x = 1;
SELECT * FROM pk WHERE x = 2 AND y = 11;
SELECT * FROM pk WHERE x = 3 AND y = 44 AND z = 4577;
SELECT * FROM pk WHERE x = 3 AND y = 44 AND z = 4578;
SELECT * FROM pk WHERE x = 3 AND y = 44 AND z = 4579;
SELECT * FROM pk WHERE x = 3 AND y = 44 AND z = 4934;
SELECT * FROM pk WHERE x = 3 AND y = 44 AND z = 4935;
SELECT * FROM pk WHERE x = 3 AND y = 44 AND z = 4936;
SELECT * FROM pk WHERE x = 3 AND y = 44;
SELECT * FROM pk WHERE x = 3 AND y = 55 AND z = 5786;
SELECT * FROM pk WHERE x = 3 AND y = 55 AND z > 1235;
SELECT * FROM pk WHERE x = 3 AND y = 55 AND z > 5786;
SELECT * FROM pk WHERE x = 3 AND y = 55 AND z >= 1000 AND x < 10000;
SELECT * FROM pk WHERE x = 3 AND y = 55 AND z >= 1000;
SELECT * FROM pk WHERE x = 3 AND y = 55 AND z >= 1235;
SELECT * FROM pk WHERE x = 3 AND y = 55 AND z >= 5786;
SELECT * FROM pk WHERE x = 3 AND y = 55;
SELECT * FROM pk WHERE x = 3 AND y > 44;
SELECT * FROM pk WHERE x = 3 AND y >= 50;
SELECT * FROM pk WHERE x = 3;
SELECT * FROM pk WHERE x > 2 AND y > 44;
SELECT * FROM pk WHERE x >= 3 AND y > 44;
SELECT * FROM pk WHERE x >= toDateTime(120) AND x <= toDateTime(NULL);
SELECT * FROM pk WHERE y = 11;
SELECT * FROM pk WHERE y = 22;
SELECT * FROM pk WHERE y = 33;
SELECT * FROM pk WHERE y = 44;
SELECT * FROM pk WHERE y = 55;
SELECT * FROM pk WHERE z = 1235;
SELECT * FROM pk WHERE z = 2791;
SELECT * FROM pk WHERE z = 4578;
SELECT * FROM pk WHERE z = 5786;
SELECT * FROM pk_func ORDER BY toDate(d), ui LIMIT 5;
SELECT * FROM pk_order ORDER BY (a / b), a LIMIT 5;
SELECT * FROM polygons_test_dictionary;
SELECT * FROM polygons_test_dictionary_no_option;
SELECT * FROM prefetched_table FORMAT Null;
select * from prewhere_column_missing prewhere hash_x = intHash64(x) and length(arr) = 0 and arraySum(arr) = 0;
select * from prewhere_column_missing prewhere hash_x = intHash64(x) and length(arr) = 0;
select * from prewhere_column_missing prewhere hash_x = intHash64(x);
select * from prewhere_column_missing where hash_x = intHash64(x) and length(arr) = 0 and arraySum(arr) = 0;
select * from prewhere_column_missing where hash_x = intHash64(x) and length(arr) = 0;
select * from prewhere_column_missing where hash_x = intHash64(x);
select * from prewhere_column_missing;
SELECT * FROM prewhere_defaults PREWHERE x != 0 ORDER BY x;
SELECT * FROM primary_key_test FINAL;
SELECT * FROM products AS p GLOBAL LEFT JOIN cat_hist AS c USING (categoryId);
SELECT * FROM products AS p LEFT JOIN cat_hist AS c USING (categoryId);
select * from projection_test;
SELECT * FROM queue;
SELECT * FROM r1;
SELECT * FROM r2;
SELECT * FROM range_dictionary ORDER BY CountryID, StartDate, EndDate;
SELECT * FROM range_dictionary_nullable ORDER BY CountryID, StartDate, EndDate;
select * from receiver_02572 order by key;
SELECT * FROM remote('127..2', 'a.');
select * from remote('127.0.0.1', numbers(2));
SELECT * FROM remote('127.0.0.1', system.one);
SELECT * FROM remote('127.0.0.1', view(SELECT 1));
SELECT * FROM remote('127.0.0.2', currentDatabase(), 'simple') ORDER BY d;
select * from remote('127.0.0.2', currentDatabase(), enums_copy);
SELECT * FROM remote('127.0.0.2', currentDatabase(), t1) ORDER BY x;
SELECT * FROM remote('127.0.0.2', currentDatabase(), t2) ORDER BY x;
SELECT * FROM remote('127.0.0.2', currentDatabase(), t3) ORDER BY x;
SELECT * FROM remote('127.0.0.2', currentDatabase(), t4) ORDER BY x;
select * from remote('127.0.0.2', numbers(2));
select * from remote('127.0.0.2', system, one, ' ', '');
select * from remote('127.0.0.2', system, one, ' INTERSERVER SECRET ', '');
select * from remote('127.0.0.2', system, one, 'default', 'wrong password');
SELECT * FROM remote('127.0.0.2', system.one) GLOBAL INNER JOIN ( SELECT * FROM ( SELECT dummy FROM remote('127.0.0.2', system.one) ) t1_00850 GLOBAL INNER JOIN ( SELECT dummy FROM remote('127.0.0.3', system.one) ) t2_00850 USING dummy ) USING dummy;
SELECT * FROM remote('127.0.0.2', system.one) GLOBAL INNER JOIN ( SELECT *, dummy FROM ( SELECT dummy FROM remote('127.0.0.2', system.one) ) t1_00850 GLOBAL INNER JOIN ( SELECT dummy FROM remote('127.0.0.3', system.one) ) t2_00850 USING dummy ) USING dummy;
SELECT * FROM remote('127.0.0.2', system.one) GLOBAL INNER JOIN ( SELECT *, dummy FROM ( SELECT toUInt8(0) AS dummy ) t1_00850 INNER JOIN ( SELECT toUInt8(0) AS dummy ) t2_00850 USING dummy ) USING dummy;
SELECT * FROM remote('127.0.0.2', system.one) GLOBAL INNER JOIN ( SELECT *, dummy as other FROM ( SELECT dummy FROM remote('127.0.0.3', system.one) ) t1_00850 GLOBAL INNER JOIN ( SELECT toUInt8(0) AS dummy ) t2_00850 USING dummy ) USING dummy;
SELECT * FROM remote('127.0.0.2', system.one) GLOBAL INNER JOIN ( SELECT *, dummy, dummy as other FROM ( SELECT toUInt8(0) AS dummy ) t1_00850 GLOBAL INNER JOIN ( SELECT dummy FROM remote('127.0.0.3', system.one) ) t2_00850 USING dummy ) USING dummy;
SELECT * FROM remote('127.0.0.2', system.one) GLOBAL INNER JOIN ( SELECT *, t1_00850.*, t2_00850.* FROM ( SELECT toUInt8(0) AS dummy ) t1_00850 INNER JOIN ( SELECT toUInt8(0) AS dummy ) t2_00850 USING dummy ) USING dummy;
select * from remote('127.0.0.{1,1}', numbers(2));
SELECT * FROM remote('127.0.0.{1,2,3}', currentDatabase(), mergetree_00588) PREWHERE x = 1 WHERE s LIKE '%l%' ORDER BY x, s;
SELECT * FROM remote('127.0.0.{1,2}', currentDatabase(), y) ORDER BY number;
select * from remote('127.0.0.{1,2}', numbers(2));
select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy != 0'};
select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy = 0'};
SELECT * FROM remote('127.0.0.{1,2}', system.one);
select * from remote('127.0.0.{2,2}', numbers(2));
SELECT * FROM remote('127.0.0.{2,3}', system.numbers) WHERE number < 10 FORMAT Null;
SELECT * FROM remote('127.0.0.{2|3|4}', currentDatabase(), t);
select * from remote('127.1', currentDatabase(), data_01227) prewhere key global in (select key from data_01227 prewhere key = 2);
select * from remote('127.1', currentDatabase(), dist_02175) l global join local_02175 r using dummy;
select * from remote('127.1', system.one) settings max_distributed_connections=0;
select * from remote('127.1', system.one, identity(dummy)) format Null;
select * from remote('127.1', view(select * from system.one), dummy) format Null;
select * from remote('127.1', view(select * from system.one), identity(dummy)) format Null;
select * from remote('127.2', system.one);
select * from remote('127.2', view(select sleep(3) from system.one)) settings receive_timeout=1, async_socket_for_remote=0, use_hedged_requests=0 format Null;
select * from remote('127.2', view(select sleep(3) from system.one)) settings receive_timeout=1, async_socket_for_remote=0, use_hedged_requests=1 format Null;
select * from remote('127.2', view(select sleep(3) from system.one)) settings receive_timeout=1, async_socket_for_remote=1, use_hedged_requests=0 format Null;
SELECT * FROM remote('127.{1,2}', view( SELECT number%20 number FROM numbers(40) WHERE (number % 2) = (shardNum() - 1) ), number) GROUP BY number ORDER BY number ASC LIMIT 1 BY number LIMIT 5, 5 SETTINGS distributed_group_by_no_merge=2, distributed_push_down_limit=1;
select * from remote('127.{1,2}', view(select 'foo.com' key), cityHash64(key)) where key = cutToFirstSignificantSubdomainCustom('bar.com', 'public_suffix_list') settings optimize_skip_unused_shards=1, force_optimize_skip_unused_shards=1;
select * from remote('127.{1,2}', view(select * from system.one), dummy) format Null;
select * from remote('127.{1,2}', view(select * from system.one), identity(dummy)) format Null;
select * from remote('127.{2..11}', currentDatabase(), data_01730) group by key order by key limit 1e6 settings distributed_group_by_no_merge=2, max_memory_usage='100Mi', optimize_aggregation_in_order=1 format Null;
SELECT * FROM remote('[::1') FORMAT Null;
SELECT * FROM remote('[::1', system.one) FORMAT Null;
SELECT * FROM remote('[::1]', system.one) FORMAT Null;
SELECT * FROM remote('[::1]:9000') FORMAT Null;
SELECT * FROM remote('[::1]:9000', system.one) FORMAT Null;
select * from remote('localhost', system.one) where dummy global in (0);
select * from remote('localhost', system.one) where dummy global in (select 0);
select * from remote('localhost', system.one) where dummy global in system.one;
select * from remote('localhost', system.one) where dummy global not in (0);
select * from remote('localhost', system.one) where dummy global not in (select 0);
select * from remote('localhost', system.one) where dummy global not in system.one;
SELECT * FROM rename1;
SELECT * FROM rename_table FORMAT TSVWithNames;
SELECT * FROM rename_table ORDER BY k FORMAT TSVWithNames;
SELECT * FROM rename_table_multiple FORMAT TSVWithNames;
SELECT * FROM rename_table_multiple ORDER BY key FORMAT TSVWithNames;
SELECT * FROM rename_table_multiple_compact FORMAT TSVWithNames;
SELECT * FROM rename_table_multiple_compact ORDER BY key FORMAT TSVWithNames;
SELECT * FROM rename_table_polymorphic FORMAT TSVWithNames;
SELECT * FROM rename_table_polymorphic ORDER BY k FORMAT TSVWithNames;
select * from rep_fsync_r2 order by key;
select * from rep_fsync_r2;
SELECT * FROM replace FINAL ORDER BY Id, Version;
SELECT * FROM replace FINAL WHERE Version = 0 ORDER BY Id, Version;
SELECT * FROM replace ORDER BY Id, Version;
SELECT * FROM replace_partition_dest1;
SELECT * FROM replace_partition_dest1_2;
SELECT * FROM replace_partition_dest2;
SELECT * FROM replace_partition_dest2_2;
SELECT * FROM replace_partition_source;
SELECT * FROM replacing;
select * from replacing;
SELECT * FROM replacing_00616 FINAL ORDER BY ver;
SELECT * FROM replacing_00616 ORDER BY ver;
SELECT * FROM replacing_merge_tree ORDER BY key;
SELECT * FROM replica1;
SELECT * FROM replica2;
SELECT * FROM replicated_alter1 ORDER BY k;
SELECT * FROM replicated_collapsing;
SELECT * FROM replicated_merge_tree_pk_sql FINAL ORDER BY key, value;
SELECT * FROM replicated_merge_tree_pk_sql ORDER BY key, value;
SELECT * FROM replicated_report WHERE product = 'IU';
SELECT * FROM replicated_report WHERE product = 'PS';
select * from replicated_table_detach_all1 order by id;
select * from replicated_table_detach_all2 order by id;
SELECT * FROM replicated_truncate1 ORDER BY k;
SELECT * FROM replicated_truncate2 ORDER BY k;
SELECT * FROM replicated_versioned_collapsing;
SELECT * FROM report WHERE product = 'IU';
SELECT * FROM report WHERE product = 'PS';
select * from requests as "t" where "t".event_date > '2000-01-01';
select * from requests as `t` where `t`.event_tm > toDate('2000-01-01');
select * from requests as t where t.event_date > '2000-01-01';
select * from requests as t where t.event_tm > toDate('2000-01-01');
select * from requests where event_date > '2000-01-01';
select * from rmt2 order by n;
select * from rmt3 order by n;
select * from rmt;
SELECT * FROM row_level_policy_prewhere PREWHERE y = 'foo';
select * from s3('http://localhost:11111/test/{a,b,c}.tsv', 'test', 'testtest') ORDER BY c1, c2, c3;
select * from s3('http://localhost:11111/test/{a,b,c}.tsv', 'test', 'testtest', 'TSV') ORDER BY c1, c2, c3;
select * from s3('http://localhost:11111/test/{a,b,c}.tsv', 'test', 'testtest', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64') ORDER BY c1, c2, c3;
select * from s3('http://localhost:11111/test/{a,b,c}.tsv', 'test', 'testtest', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64', 'auto') ORDER BY c1, c2, c3;
select * from s3('http://localhost:11111/test/{a,b,c}.tsv', 'TSV') ORDER BY c1, c2, c3;
select * from s3('http://localhost:11111/test/{a,b,c}.tsv', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64') ORDER BY c1, c2, c3;
select * from s3('http://localhost:11111/test/{a,b,c}.tsv', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64', 'auto') ORDER BY c1, c2, c3;
SELECT * FROM s3('http://localhost:8123/123/4', LineAsString, headers('exact_header' = 'value'));
SELECT * FROM s3(decodeURLComponent(NULL), [NULL]);
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'test', 'testtest') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'test', 'testtest', 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'test', 'testtest', 'TSV') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'test', 'testtest', 'TSV', 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'test', 'testtest', 'TSV', 'auto', 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV', 'auto', 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV', 'auto', headers(MyCustomHeader = 'SomeValue'), 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', headers(MyCustomHeader = 'SomeValue')) order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', NOSIGN, 'TSV', 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', NOSIGN, 'TSV', 'auto', 'auto') order by c1, c2, c3;
select * from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv') ORDER BY c1, c2, c3;
select * from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'test', 'testtest') ORDER BY c1, c2, c3;
select * from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'test', 'testtest', 'TSV') ORDER BY c1, c2, c3;
select * from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'test', 'testtest', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64') ORDER BY c1, c2, c3;
select * from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'test', 'testtest', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64', 'auto') ORDER BY c1, c2, c3;
select * from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'TSV') ORDER BY c1, c2, c3;
select * from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64') ORDER BY c1, c2, c3;
select * from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64', 'auto') ORDER BY c1, c2, c3;
select * from s3Cluster(test_cluster_one_shard_three_replicas_localhost, 'http://localhost:11111/test/02876.parquet');
SELECT * FROM sample_merge_tree ORDER BY x;
SELECT * FROM segfault_table;
SELECT * FROM select_final FINAL ORDER BY x, t;
SELECT * FROM session;
select * from set_index_not where NOT (NOT (status ='rip'));
select * from set_index_not where NOT (status ='rip');
select * from set_index_not where NOT (status!='rip');
select * from set_index_not where status!='rip';
SELECT * FROM shard_0.demo_loan_01568;
SELECT * FROM shard_1.demo_loan_01568;
select * from simple final order by id;
select * from simple;
select * from simple_agg_groupArrayLastArray final order by key, value;
select * from simple_agg_groupArrayLastArray order by key, value;
SELECT * FROM simple_key_direct_dictionary_01862 FORMAT Null;
SELECT * FROM simple_key_flat_dictionary_01862 FORMAT Null;
SELECT * FROM simple_key_flat_dictionary_01862 WHERE id = 0 FORMAT Null;
SELECT * from somedict;
SELECT * FROM source WHERE toYear(ts) = 2021 SETTINGS allow_experimental_analyzer=1;
SELECT * FROM source WHERE toYear(ts) = 2021;
SELECT * FROM source WHERE toYYYYMM(ts) = 202112 SETTINGS allow_experimental_analyzer=1;
SELECT * FROM source WHERE toYYYYMM(ts) = 202112;
SELECT * FROM squares WHERE number = 999;
select * from src;
SELECT * FROM stripelog ORDER BY x;
SELECT * FROM subcolumns;
SELECT * FROM sum_map ORDER BY timeslot, statusMap.status, statusMap.requests;
SELECT * FROM summing FINAL ORDER BY x, y, z;
SELECT * FROM summing;
SELECT * FROM summing_composite_key ORDER BY d, k, FirstMap.k1, FirstMap.k2ID, FirstMap.s, SecondMap.k1ID, SecondMap.k2Key, SecondMap.k3Type, SecondMap.s;
SELECT * FROM summing_merge_tree ORDER BY d, a, x, y, z;
SELECT * FROM summing_merge_tree ORDER BY key;
SELECT * FROM summing_merge_tree_datetime64 FINAL;
SELECT * FROM summing_r2 FINAL ORDER BY x, y, z;
SELECT * FROM summing_r2;
SELECT * FROM summing_table ORDER BY id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total;
SELECT * FROM system . one;
SELECT * FROM system /* Hello */. `one`;
SELECT * FROM system.columns WHERE table = 'check.comments' and database = currentDatabase();
SELECT * FROM system.columns WHERE table LIKE 'test_01602%' ORDER BY table, name;
SELECT * FROM system.data_skipping_indices WHERE database = currentDatabase();
SELECT * FROM system.data_skipping_indices WHERE table = 'alter_index_test' AND database = currentDatabase();
SELECT * FROM system.database_engines WHERE name IN ('Atomic', 'Lazy', 'Ordinary') ORDER BY name;
select * from system.dropped_tables_parts format Null;
SELECT * FROM system.errors WHERE name = 'UNKNOWN_IDENTIFIER' AND last_error_time > now() - 1 AND last_error_message LIKE '%Missing columns%89467d35-77c2-4f82-ae7a-f093ff40f4cd%' ;
SELECT * FROM system.formats WHERE name IN ('CSV', 'Native') ORDER BY name;
SELECT * FROM system.grants WHERE user_name = 'test_user_01074' format Pretty;
SELECT * FROM system.macros WHERE macro = 'test';
select * from system.merge_tree_settings order by length(description) limit 1;
SELECT * FROM system.mutations WHERE database = currentDatabase() AND table = 'testing' AND not is_done;
select * from system.numbers as t limit 5 settings additional_table_filters={'t' : 'number % 2 != 0'};
SELECT * FROM system.numbers LIMIT 3;
select * from system.numbers limit 5 settings additional_table_filters={'system.numbers' : 'number != 3'};
select * from system.numbers limit 5 settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};
select * from system.numbers limit 5;
SELECT * FROM system.numbers ORDER BY number;
SELECT * FROM system.numbers WHERE number == 7 LIMIT 1;
SELECT * FROM system.numbers WHERE number > toUInt64(10)(number) LIMIT 10;
SELECT * FROM system.numbers WHERE number NOT IN truncate_test_set LIMIT 1;
SELECT * FROM system.numbers WHERE sleepEachRow(0.05) LIMIT 10;
SELECT * FROM system.one ARRAY JOIN arrayFilter((a) -> ((a, arrayJoin([])) IN (NULL)), []) AS arr_x;
select * from system.one cross join system.one r;
select * from system.one cross join system.one;
SELECT * FROM system.one INNER JOIN (SELECT number AS k FROM system.numbers) js2 ON dummy = k;
select * from system.one l cross join system.one r;
select * from system.one l cross join system.one;
select * from system.one left join system.one using dummy;
select * from system.one t1 join system.one t2 on t1.dummy = t2.dummy join system.one t3 ON t1.dummy = t3.dummy;
select * from system.one t1 join system.one t2 on t1.dummy = t2.dummy limit 0 FORMAT TabSeparated;
select * from system.one t1 join system.one t2 on t1.dummy = t2.dummy where t2.dummy > 0 FORMAT TabSeparated;
SELECT * FROM system.one;
select * from system.part_log where database = currentDatabase() and table like 'ttl_02265%' and error != 0;
SELECT * FROM system.parts WHERE database = currentDatabase() AND table = 'data_01660';
select * from system.projection_parts where database = currentDatabase() and table = 'tp_2' and name = 'pp' and active;
SELECT * FROM system.query_log PREWHERE ProfileEvents['Query'] > 0 and current_database = currentDatabase() LIMIT 0;
SELECT * FROM system.query_log WHERE event_date >= yesterday() AND current_database = currentDatabase() AND memory_usage > 100e6 FORMAT JSONEachRow;
SELECT * FROM system.quota_limits WHERE quota_name LIKE 'q%\_01297' ORDER BY quota_name, duration;
SELECT * FROM system.settings_profile_elements WHERE profile_name LIKE 's%\_01294' ORDER BY profile_name, index;
SELECT * FROM system.settings_profile_elements WHERE role_name LIKE 'r%\_01293' ORDER BY role_name, index;
SELECT * FROM system.settings_profile_elements WHERE user_name LIKE 'u%\_01292' ORDER BY user_name, index;
SELECT * FROM system.settings_profile_elements WHERE user_name='test_01605' OR profile_name='test_01605';
SELECT * FROM system.table_engines WHERE name in ('MergeTree', 'ReplicatedCollapsingMergeTree') ORDER BY name FORMAT PrettyCompactNoEscapes;
SELECT * FROM system.tables FORMAT Null;
SELECT * FROM system.text_log WHERE event_time >= now() - 30 and level == 'Error' and message like '%BAD_DATA_PART_NAME%'and message like '%p_norm%';
SELECT * FROM system.text_log WHERE event_time >= now() - INTERVAL 120 SECOND and level == 'Error' and message like '%CHECKSUM_DOESNT_MATCH%' and logger_name like ('%' || currentDatabase() || '%checksums_r%');
SELECT * FROM system.warnings where message in ('The number of attached tables is more than 10', 'The number of attached databases is more than 10', 'The number of active parts is more than 10');
select * from system.zookeeper where path like '/clickhouse/zero_copy/zero_copy_s3/' || (select value from system.zookeeper where path='/test/02446/'||currentDatabase()||'/rmt' and name='table_shared_id') || '/%' and path not like '%/all_0_5_2_6%';
SELECT * FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 + 1 FORMAT TSVWithNames;
SELECT * FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT * FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
select * from t join s on (t.a=s.a and t.b=s.b);
select * from t join s using (a,b);
select * from t left join s on (s.a = t.a and s.b = t.b) SETTINGS join_use_nulls = 1;
select * from t left join s on (s.a = t.a and s.b = t.b);
select * from t left outer join s on (t.a=s.a and t.b=s.b) where s.a is null;
select * from t left outer join s using (a,b) order by t.a;
select * from t left outer join s using (a,b) where s.a is null;
SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true, query_cache_squash_partial_results = false;
SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true, query_cache_squash_partial_results = true;
SELECT * FROM t ORDER BY c SETTINGS max_block_size = 3, use_query_cache = true;
SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true, query_cache_compress_entries = false;
SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true, query_cache_compress_entries = true;
SELECT * FROM t ORDER BY c SETTINGS use_query_cache = true;
SELECT * FROM t ORDER BY i;
select * from t order by n;
select * from t right join s on (s.a = t.a and s.b = t.b) SETTINGS join_use_nulls = 1;
select * from t right join s on (s.a = t.a and s.b = t.b);
select * from t where c < 1.2;
select * from t where i < 5 and j in (1, 2);
SELECT * FROM t WHERE id2 = 3 FORMAT Null;
SELECT * FROM t WHERE toUInt64(x) = 1;
SELECT * FROM t WHERE value IN (SELECT number FROM numbers(1000000000));
SELECT * FROM t0 ANTI LEFT JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 ANY INNER JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 ANY INNER JOIN t1 USING (x);
SELECT * FROM t0 ANY LEFT JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 ANY LEFT JOIN t1 USING (x);
SELECT * FROM t0 ANY RIGHT JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 ANY RIGHT JOIN t1 USING (x);
SELECT * FROM t0 ASOF LEFT JOIN t1 ON t1.x = t0.x AND t0.y > t1.y;
SELECT * FROM t0 CROSS JOIN t1;
SELECT * FROM t0 FULL JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 FULL JOIN t1 USING (x);
SELECT * FROM t0 FULL JOIN t1 USING x;
SELECT * FROM t0 INNER JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 INNER JOIN t1 USING (x);
SELECT * FROM t0 INNER JOIN t1 USING x;
SELECT * FROM t0 LEFT JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 LEFT JOIN t1 USING (x);
SELECT * FROM t0 LEFT JOIN t1 USING x;
SELECT * FROM t0 RIGHT JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 RIGHT JOIN t1 USING (x);
SELECT * FROM t0 RIGHT JOIN t1 USING x;
SELECT * FROM t0 SEMI LEFT JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 SEMI RIGHT JOIN t1 ON t1.x = t0.x;
SELECT * FROM t0 SEMI RIGHT JOIN t1 USING (x);
SELECT * FROM t1 ALL JOIN t2 ON t1.dt = t2.dt ORDER BY t1.time, t2.time;
SELECT * FROM t1 ALL JOIN t2 USING (dt) ORDER BY t1.time, t2.time;
SELECT * FROM t1 ALL RIGHT JOIN t2 USING (key) ORDER BY key;
SELECT * FROM t1 ALL RIGHT JOIN tj ON t1.id1 == tj.key1 AND t1.id2 == tj.key2 ORDER BY key1 FORMAT TSVWithNames;
SELECT * FROM t1 ANTI LEFT JOIN anti_left_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 ANTI RIGHT JOIN anti_right_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 ANY INNER JOIN any_inner_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 ANY INNER JOIN t0 ON t1.x = t0.x ORDER BY x;
SELECT * FROM t1 ANY INNER JOIN t0 USING (x) ORDER BY x;
SELECT * FROM t1 ANY INNER JOIN t2 ON ((NULL = t1.key) = t2.id) AND (('' = t1.key) = t2.id);
SELECT * FROM t1 ANY LEFT JOIN any_left_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 ANY LEFT JOIN t0 ON t1.x = t0.x ORDER BY x;
SELECT * FROM t1 ANY LEFT JOIN t0 USING (x) ORDER BY x;
SELECT * FROM t1 ANY RIGHT JOIN any_right_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 ANY RIGHT JOIN t0 ON t1.x = t0.x ORDER BY x;
SELECT * FROM t1 ANY RIGHT JOIN t0 USING (x) ORDER BY x;
SELECT * FROM t1 AS t2, (SELECT 1) AS t1;
SELECT * FROM t1 ASOF JOIN t2 ON t1.a = t2.a AND t1.b < t2.b ORDER BY t1.b;
SELECT * FROM t1 ASOF JOIN t2 ON t1.a = t2.a AND t1.b <= t2.b ORDER BY t1.b;
SELECT * FROM t1 ASOF JOIN t2 ON t1.a = t2.a AND t1.b > t2.b ORDER BY t1.b;
SELECT * FROM t1 ASOF JOIN t2 ON t1.a = t2.a AND t1.b >= t2.b ORDER BY t1.b;
SELECT * FROM t1 ASOF LEFT JOIN t2 ON t1.a = t2.a AND t1.b < t2.b ORDER BY t1.b;
SELECT * FROM t1 ASOF LEFT JOIN t2 ON t1.a = t2.a AND t1.b <= t2.b ORDER BY t1.b;
SELECT * FROM t1 ASOF LEFT JOIN t2 ON t1.a = t2.a AND t1.b > t2.b ORDER BY t1.b;
SELECT * FROM t1 ASOF LEFT JOIN t2 ON t1.a = t2.a AND t1.b >= t2.b ORDER BY t1.b;
SELECT * FROM t1 FULL JOIN full_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 FULL JOIN rdb ON rdb.key == t1.k;
SELECT * FROM t1 FULL JOIN t0 ON t1.x = t0.x ORDER BY x;
SELECT * FROM t1 FULL JOIN t0 USING (x) ORDER BY x;
SELECT * FROM t1 FULL JOIN t2 ON NULL ORDER BY t1.id NULLS FIRST, t2.id SETTINGS join_use_nulls = 1;
SELECT * FROM t1 FULL JOIN t2 ON NULL ORDER BY t1.id, t2.id;
SELECT * FROM t1 FULL JOIN t2 ON t1.id = t2.id AND 1 = 1 SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM t1 FULL JOIN t2 ON t1.id = t2.id AND 1 = 2 SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM t1 INNER JOIN (SELECT * FROM rdb) AS rdb ON rdb.key == t1.k;
SELECT * FROM t1 INNER JOIN inner_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 INNER JOIN rdb ON rdb.key + 1 == t1.k;
SELECT * FROM t1 INNER JOIN s ON t1.k = s.k INNER JOIN t2 ON t2.x = t1.x WHERE (t1.d >= now());
SELECT * FROM t1 INNER JOIN t0 ON t1.x = t0.x ORDER BY x;
SELECT * FROM t1 INNER JOIN t0 USING (x) ORDER BY x;
SELECT * FROM t1 JOIN t2 ON (t1.x <=> t2.x OR (t1.x IS NULL AND t2.x IS NULL)) AND (t1.y == t2.y OR (t1.y IS NULL AND t2.y IS NULL)) AND COALESCE(t1.x, 0) != 2 ORDER BY t1.x NULLS LAST;
SELECT * FROM t1 JOIN t2 ON (t1.x <=> t2.x OR t1.x IS NULL AND t1.y <=> t2.y AND t2.x IS NULL) ORDER BY t1.x NULLS LAST;
SELECT * FROM t1 JOIN t2 ON (t1.x <=> t2.x OR t1.y <=> t2.y OR (t1.x IS NULL AND t1.y IS NULL AND t2.x IS NULL AND t2.y IS NULL)) ORDER BY t1.x NULLS LAST;
SELECT * FROM t1 JOIN t2 ON (t1.x = t2.x OR t1.x IS NULL AND t2.x IS NULL) AND t1.y <=> t2.y ORDER BY t1.x NULLS LAST;
SELECT * FROM t1 JOIN t2 ON 0;
SELECT * FROM t1 JOIN t2 ON 1 = 2;
select * from t1 join t2 on a = c;
select * from t1 join t2 on c = a;
SELECT * FROM t1 JOIN t2 ON NULL ORDER BY t1.id NULLS FIRST, t2.id SETTINGS join_use_nulls = 1;
SELECT * FROM t1 JOIN t2 ON NULL;
SELECT * FROM t1 JOIN t2 ON t1.dt1 = t2.dt2 ORDER BY t1.time, t1.dimension_1, t2.time, t2.dimension_2;
SELECT * FROM t1 JOIN t2 ON t1.foo = t2.bar WHERE t2.aliascol2 == 'fact2t1_val2';
SELECT * FROM t1 JOIN t2 ON t1.foo = t2.bar WHERE t2.dt >= '2020-02-01';
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id AND 1 != 1 SETTINGS allow_experimental_analyzer = 0;
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id AND 1 == 2 SETTINGS allow_experimental_analyzer = 0;
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id AND 1 SETTINGS allow_experimental_analyzer = 0;
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id AND NULL;
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id AND t1.attr != 0;
SELECT * FROM t1 JOIN t2 ON t1.key = t2.key AND t2.key > 0;
SELECT * FROM t1 JOIN t2 ON toUInt16(1);
SELECT * FROM t1 LEFT JOIN left_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 LEFT JOIN t0 ON t1.x = t0.x ORDER BY x;
SELECT * FROM t1 LEFT JOIN t0 USING (x) ORDER BY x;
SELECT * FROM t1 LEFT JOIN t2 ON NULL ORDER BY t1.id NULLS FIRST, t2.id SETTINGS join_use_nulls = 1;
SELECT * FROM t1 LEFT JOIN t2 ON NULL ORDER BY t1.id, t2.id;
SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id AND 1 = 2 SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM t1 ORDER BY n;
SELECT * FROM t1 RIGHT JOIN rdb ON rdb.key == t1.k;
SELECT * FROM t1 RIGHT JOIN right_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 RIGHT JOIN t0 ON t1.x = t0.x ORDER BY x;
SELECT * FROM t1 RIGHT JOIN t0 USING (x) ORDER BY x;
SELECT * FROM t1 RIGHT JOIN t2 ON NULL ORDER BY t1.id NULLS FIRST, t2.id SETTINGS join_use_nulls = 1;
SELECT * FROM t1 RIGHT JOIN t2 ON NULL ORDER BY t1.id, t2.id;
SELECT * FROM t1 RIGHT JOIN t2 ON t1.id = t2.id AND 1 = 1 SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM t1 RIGHT JOIN t2 ON t1.id = t2.id AND 1 = 2 SETTINGS allow_experimental_analyzer = 1;
SELECT * FROM t1 RIGHT SEMI JOIN (SELECT * FROM rdb) AS rdb ON rdb.key == t1.k;
SELECT * FROM t1 SEMI LEFT JOIN semi_left_join j USING(x) ORDER BY x, str, s;
SELECT * FROM t1 SEMI RIGHT JOIN semi_right_join j USING(x) ORDER BY x, str, s;
select * from t1 where id = 21585718595728998;
SELECT * FROM t1, t2 ORDER BY t1.a, t2.b;
SELECT * FROM t1, t2 WHERE t1.a = t2.a ORDER BY t1.a, t2.b;
SELECT * FROM t1, t2, (SELECT a as x from t3 where a + 1 = b ) as t3 WHERE t1.a = if(t2.b > 0, t2.a, 0) AND t2.a = t3.x AND 1 ;
SELECT * FROM t1, t2, (SELECT a as x from t3 where a + 1 = b ) as t3 WHERE t1.a = if(t2.b > 0, t2.a, 0) ORDER BY t1.a, t2.a, t3.x ;
SELECT * FROM t1, test_table AS t1;
select * from t1;
SELECT * FROM t1;
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.a + 1 = t2_00826.a + t2_00826.b AND (t1_00826.a + t1_00826.b + t2_00826.a + t2_00826.b > 5);
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.a = t1_00826.b order by (t1_00826.a, t2_00826.a, t2_00826.b);
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.a = t2_00826.a and (t1_00826.b = t2_00826.b and 1);
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.a = t2_00826.a and t1_00826.b = t2_00826.b and (t1_00826.a >= 1 OR t2_00826.b = 1);
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.a = t2_00826.a and t1_00826.b = t2_00826.b and t1_00826.a >= 1 and t2_00826.b = 1;
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.a = t2_00826.a and t1_00826.b = t2_00826.b;
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.a = t2_00826.a;
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.a = t2_00826.b ORDER BY t1_00826.a;
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.b = t2_00826.a AND (t2_00826.b IS NULL OR t2_00826.b > t2_00826.a) ORDER BY t1_00826.a;
SELECT * FROM t1_00826 cross join t2_00826 where t1_00826.b = t2_00826.b;
SELECT * FROM t1_00826 x cross join t1_00826 y where x.a = y.a and x.b = y.b ORDER BY x.a;
SELECT * FROM t1_00826, t2_00826 where t1_00826.a = t2_00826.a AND (t2_00826.b IS NULL OR t2_00826.b < 2);
SELECT * FROM t1_00826, t2_00826 where t1_00826.a = t2_00826.a;
SELECT * FROM t1_00826, t2_00826 where t1_00826.b = t2_00826.b;
SELECT * FROM t1_00841;
SELECT * FROM t1_00850 GLOBAL INNER JOIN ( SELECT * FROM ( SELECT * FROM t2_00850 ) INNER JOIN ( SELECT * FROM t1_00850 ) USING dummy ) USING dummy;
SELECT * FROM t1__fuzz_13 FULL OUTER JOIN t2__fuzz_47 ON 1 = 2;
SELECT * FROM t1__fuzz_17 INNER JOIN t2__fuzz_0 ON c = a WHERE a format Null;
SELECT * FROM t1__fuzz_8 FULL OUTER JOIN full_join__fuzz_4 USING (x) ORDER BY x DESC, str ASC, s ASC NULLS LAST;
select * from t1_all t1 where t1.a in (select t2.a from t2_all t2);
SELECT * FROM t1_local ORDER BY tc1, tc2;
SELECT * FROM t2 INNER JOIN rdb ON rdb.key == t2.k ORDER BY rdb.key;
SELECT * FROM t2 LIMIT 18;
select * from t2;
SELECT * FROM t2;
SELECT * FROM t3 AS t4, (SELECT 1) AS t1, t1 AS t2, t2 AS t3;
SELECT * FROM t3 ORDER BY z ASC;
SELECT * FROM t3 where number > 17 and number < 25;
SELECT * FROM t3, test_table AS t1, t1 AS t2, t2 AS t3;
SELECT * FROM t3_00519;
SELECT * FROM t4 ORDER BY z ASC;
SELECT * FROM t64 ORDER BY i64;
SELECT * FROM t64 ORDER BY u64;
SELECT * FROM t64 WHERE i16 != t_i16;
SELECT * FROM t64 WHERE i32 != t_i32;
SELECT * FROM t64 WHERE i64 != t_i64;
SELECT * FROM t64 WHERE i8 != t_i8;
SELECT * FROM t64 WHERE u16 != t_u16;
SELECT * FROM t64 WHERE u32 != t_u32;
SELECT * FROM t64 WHERE u64 != t_u64;
SELECT * FROM t64 WHERE u8 != t_u8;
SELECT * FROM t;
select * from t;
select * from t_00725_2 all left join (select a s_a, b s_b from s_00725_2) on (s_a = t_00725_2.a and s_b = t_00725_2.b);
select * from t_00725_3 all left join z_00725_3 on (z_00725_3.c = t_00725_3.a and z_00725_3.d = t_00725_3.b) ORDER BY t_00725_3.a;
select * from t_00818 left join s_00818 on t_00818.a = s_00818.a and t_00818.a = s_00818.a ORDER BY t_00818.a;
select * from t_00818 left join s_00818 on t_00818.a = s_00818.a and t_00818.a = s_00818.b ORDER BY t_00818.a;
select * from t_00818 left join s_00818 on t_00818.a = s_00818.a and t_00818.b = s_00818.a ORDER BY t_00818.a;
select * from t_00818 left join s_00818 on t_00818.a = s_00818.a ORDER BY t_00818.a;
select * from t_00818 left join s_00818 on t_00818.a = s_00818.a where s_00818.a = 1 ORDER BY t_00818.a;
SELECT * FROM t_02267 WHERE hasAll(a, ['x']) ORDER BY b DESC SETTINGS max_threads=1, max_block_size=1000;
SELECT * FROM t_02559 WHERE (key < 5 OR key > 500) AND NOT has(value, toString(key)) AND length(value) == 1 LIMIT 10 SETTINGS max_block_size = 81, max_threads = 1;
select * from t_306;
SELECT * FROM t_array_index ARRAY JOIN n WHERE n.key = 'a';
SELECT * FROM t_async_insert_02193_1 ORDER BY id;
SELECT * FROM t_async_insert_skip_settings ORDER BY id;
SELECT * FROM t_async_insert_table_function ORDER BY id;
SELECT * FROM t_collisions ORDER BY e798545eefc8b7a1c2c81ff00c064ad8;
SELECT * FROM t_create_as_tuple ORDER BY number;
SELECT * FROM t_distr WHERE a = 1;
SELECT * FROM t_enum16;
SELECT * FROM t_enum8;
SELECT * FROM t_enum;
SELECT * FROM t_ephemeral_02205_1;
SELECT * FROM t_filter WHERE f != 0 LIMIT 5;
SELECT * FROM t_filter WHERE f LIMIT 5;
SELECT * FROM t_json_array ORDER BY id FORMAT JSONEachRow;
SELECT * FROM t_json_empty_str ORDER BY id;
SELECT * FROM t_json_mutations ORDER BY id;
SELECT * FROM t_json_partitions ORDER BY id FORMAT JSONEachRow;
select * from t_l5ydey order by c_qv5rv;
SELECT * FROM t_large WHERE a in (1,1000,1005,50000) order by a;
select * from t_light order by a;
SELECT * FROM t_light_r1 ORDER BY a;
SELECT * FROM t_light_r2 ORDER BY a;
SELECT * FROM t_light_sync_r2 ORDER BY a;
SELECT * FROM t_materialize_column ORDER BY i;
SELECT * FROM t_memory_compressed ORDER BY id;
SELECT * FROM t_missed_subcolumns WHERE obj.k1.k3 = 'fee' ORDER BY id FORMAT JSONEachRow;
SELECT * FROM t_missed_subcolumns WHERE obj.k4 = 5 ORDER BY id FORMAT JSONEachRow;
SELECT * FROM t_mutations_subcolumns ORDER BY a FORMAT JSONEachRow;
SELECT * FROM t_nested_tuple FORMAT JSONEachRow;
SELECT * FROM t_nested_with_dots;
SELECT * FROM t_parse_tuples ORDER BY id;
SELECT * FROM t_parts_columns_filenames ORDER BY id;
SELECT * FROM t_read_in_order WHERE date = '2020-10-11' ORDER BY i, v LIMIT 5;
SELECT * FROM t_remove_sample_by SAMPLE 1 / 10;
select * from t_row_exists;
SELECT * FROM t_sparse WHERE arr1 != [] ORDER BY id;
SELECT * FROM t_sparse WHERE arr2 != [] ORDER BY id;
SELECT * FROM t_sparse WHERE s != '' ORDER BY id;
SELECT * FROM t_sparse WHERE u != 0 ORDER BY id;
SELECT * FROM t_sparse_1 ORDER BY v DESC, id LIMIT 5;
SELECT * FROM t_sparse_1 ORDER BY v DESC, id;
SELECT * FROM t_sparse_1 ORDER BY v, id LIMIT 5;
SELECT * FROM t_sparse_1 ORDER BY v, id;
SELECT * FROM t_summing_lc ORDER BY key;
SELECT * FROM t_tuple_numeric FORMAT JSONEachRow;
SELECT * FROM t_update_empty_nested FORMAT Null;
SELECT * FROM t_uuid ORDER BY x ASC;
SELECT * FROM t_uuid ORDER BY x FORMAT RowBinary;
SELECT * FROM t_uuid ORDER BY x LIMIT 1 FORMAT RowBinary;
SELECT * FROM t_v FORMAT JSON SETTINGS extremes = 1;
SELECT * FROM t_v ORDER BY A;
SELECT * FROM t_with_dots;
select * from tab final sample 1/2 order by x limit 5;
select * from tab order by (a + b) * c desc, sin(a / b) desc;
select * from tab order by (a + b) * c desc;
select * from tab order by (a + b) * c, sin(a / b) desc;
select * from tab order by intDiv((a + b) * c, 2), sin(a / b);
select * from tab order by val;
SELECT * FROM tab ORDER BY x LIMIT 3 SETTINGS optimize_read_in_order=1;
SELECT * FROM tab ORDER BY x LIMIT 4 SETTINGS optimize_read_in_order=1;
select * from tab order by x;
SELECT * FROM tab PREWHERE (s[1]) = 'Click a03' SETTINGS allow_experimental_analyzer=1;
SELECT * FROM tab PREWHERE (s[NULL]) = 'Click a03' SETTINGS allow_experimental_analyzer=1;
SELECT * FROM tab PREWHERE x IN (set) WHERE x IN (set) LIMIT 1 settings allow_experimental_analyzer=0;
SELECT * FROM tab PREWHERE x IN (set) WHERE x IN (set) LIMIT 1 settings allow_experimental_analyzer=1;
select * from tab where d + 1 = 2 order by (d + 1) * 4, (a + b) * c;
select * from tab where d + 1 = 3 and (a + b) = 4 and c = 2 order by (d + 1) * 4, sin(a / b);
SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;
SELECT * FROM tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;
SELECT * FROM tab WHERE match(str, 'OLAP.*') ORDER BY id;
SELECT * FROM tab WHERE str == 'b' AND 1.0;
SELECT * FROM tab WHERE str == 'else' AND 1.0;
select * from tab2 order by toStartOfDay(x), intDiv(intDiv(y, -2), -3);
select * from tab_00577 order by version;
select * from tab_00577;
select * from tab_00612 order by key;
SELECT * FROM tabl_1 SETTINGS log_comment = 'ad15a651';
SELECT * FROM tabl_2 SETTINGS log_comment = 'ad15a651';
SELECT * FROM table1 AS t1 ALL LEFT JOIN (SELECT *, '0.10', c, d AS b FROM table2) AS t2 USING (a, b) ORDER BY d, t1.a ASC FORMAT PrettyCompact settings max_rows_in_join = 1;
select * from table1 as t1 join table2 as t2 on t1.a = t2.a join table3 as t3 on t2.b = t3.b ORDER BY t1.a FORMAT PrettyCompactNoEscapes;
select * from table1 as t1 join table2 as t2 on t1_a = t2_a where (table1.a as t1_a) > 4 and (table2.a as t2_a) > 2;
SELECT * FROM table1 t1 ALL INNER JOIN (SELECT *, c, d as b FROM table2) t2 USING (a, b) ORDER BY d, t1.a FORMAT PrettyCompact;
SELECT * FROM table1 t1 ALL LEFT JOIN (SELECT *, c, d as b FROM table2) t2 USING (a, b) ORDER BY d, t1.a FORMAT PrettyCompact;
SELECT * FROM table1 t1 FORMAT PrettyCompact;
SELECT * FROM table_02513 PREWHERE n%11 WHERE n%13;
SELECT * FROM table_02513 PREWHERE n%11;
SELECT * FROM table_02513 PREWHERE n%143011 WHERE n%13;
SELECT * FROM table_02513 WHERE n%11 AND n%13;
SELECT * FROM table_02513 WHERE n%11;
SELECT * FROM table_02513 WHERE n%143011;
select * from table_1 limit 3 settings additional_result_filter='x != 2';
select * from table_1 order by x settings additional_table_filters={'table_1' : 'length(y) < 3'};
select * from table_1 order by x settings additional_table_filters={'table_1' : 'length(y) >= 3'};
select * from table_1 order by x settings additional_table_filters={'table_1' : 'x < 3'};
select * from table_1 order by x settings additional_table_filters={'table_1' : 'x > 3'};
select * from table_1 prewhere x != 3 where x != 1 settings additional_result_filter='x != 2';
select * from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};
select * from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};
select * from table_1 settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};
select * from table_1 settings additional_table_filters={'table_1' : 'x != 2'};
select * from table_1 where x != 1 settings additional_result_filter='x != 2 and x != 3';
select * from table_1 where x != 1 settings additional_result_filter='x != 2';
select * from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};
SELECT * FROM table_csv_01375;
SELECT * FROM table_for_alter ORDER BY d;
SELECT * FROM table_for_alter;
SELECT * FROM table_for_rename ORDER BY key;
SELECT * FROM table_for_rename WHERE key = 1 FORMAT TSVWithNames;
SELECT * FROM table_for_rename WHERE key = 7 FORMAT TSVWithNames;
SELECT * FROM table_for_rename1 ORDER BY key;
SELECT * FROM table_for_rename_nested WHERE key = 7 FORMAT TSVWithNames;
SELECT * FROM table_gcd_codec_date32;
SELECT * FROM table_gcd_codec_date;
SELECT * FROM table_gcd_codec_datetime64;
SELECT * FROM table_gcd_codec_datetime;
SELECT * FROM table_gcd_codec_decimal128;
SELECT * FROM table_gcd_codec_decimal256;
SELECT * FROM table_gcd_codec_decimal32;
SELECT * FROM table_gcd_codec_decimal64;
SELECT * FROM table_gcd_codec_int128;
SELECT * FROM table_gcd_codec_int16;
SELECT * FROM table_gcd_codec_int256;
SELECT * FROM table_gcd_codec_int32;
SELECT * FROM table_gcd_codec_int64;
SELECT * FROM table_gcd_codec_int8;
SELECT * FROM table_gcd_codec_one_hundred_ones;
SELECT * FROM table_gcd_codec_one_hundred_zeros;
SELECT * FROM table_gcd_codec_only_zeros;
SELECT * FROM table_gcd_codec_uint128;
SELECT * FROM table_gcd_codec_uint16;
SELECT * FROM table_gcd_codec_uint256;
SELECT * FROM table_gcd_codec_uint32;
SELECT * FROM table_gcd_codec_uint64;
SELECT * FROM table_gcd_codec_uint8;
SELECT * FROM table_log_02525;
select * from table_map;
SELECT * FROM table_merge_tree_02525;
SELECT * FROM table_rename_with_default WHERE key = 1 FORMAT TSVWithNames;
SELECT * FROM table_rename_with_ttl WHERE value1 = '1' FORMAT TSVWithNames;
SELECT * FROM table_stripe_log_02525;
SELECT * FROM table_tiny_log_02525;
SELECT * FROM table_tsv_01375;
SELECT * from table_view;
SELECT * FROM table_with_compact_parts WHERE key = 1 FORMAT TSVWithNames;
SELECT * FROM table_with_compact_parts WHERE key = 7 FORMAT TSVWithNames;
SELECT * FROM table_with_defaults_on_aliases WHERE col1 = 1;
SELECT * FROM table_with_defaults_on_aliases WHERE col1 = 2;
SELECT * FROM table_with_defaults_on_aliases WHERE col1 = 3;
SELECT * FROM table_with_dot_column;
SELECT * FROM table_with_lc_key WHERE enum_key > 0 and lc_key like 'h%';
select * from table_with_range;
SELECT * FROM table_with_string_key WHERE int_key > 0 and str_key like 'h%';
SELECT * FROM table_with_version FINAL ORDER BY key;
SELECT * FROM table_with_version ORDER BY key;
SELECT * FROM table_with_version_replicated_1 FINAL ORDER BY key;
SELECT * FROM table_with_version_replicated_1 ORDER BY key;
SELECT * FROM table_with_version_replicated_2 FINAL ORDER BY key;
select * from tb where `index` >= 0 AND `index` <= 2;
select * from tb where idx >= 0 AND idx <= 2;
SELECT * FROM tbl AS t ANY LEFT JOIN some_join AS d USING (id) ORDER BY id;
SELECT * FROM tbl AS t ANY LEFT JOIN some_join USING (id) ORDER BY id;
SELECT * FROM tbl FORMAT TabSeparatedWithNamesAndTypes;
select * from tbl prewhere s = '123' where i = 123;
select * from tbl WHERE indexHint(p = 2) order by t;
select * from tbl WHERE indexHint(p in (select toInt64(number) - 2 from numbers(3))) order by t;
select * from tbl WHERE indexHint(t = 1) order by t;
select * from tbl WHERE indexHint(t in (select toInt64(number) + 2 from numbers(3))) order by t;
SELECT * FROM tbl;
select * from tbl;
SELECT * FROM temp ORDER BY id;
SELECT * FROM temp WHERE x IN (toDecimal128(128, 1));
SELECT * FROM temp WHERE x IN (toDecimal128(128, 2));
SELECT * FROM temp WHERE x IN (toDecimal128(128, 3));
SELECT * FROM temp WHERE x IN (toDecimal256(256, 1));
SELECT * FROM temp WHERE x IN (toDecimal256(256, 2));
SELECT * FROM temp WHERE x IN (toDecimal256(256, 3));
SELECT * FROM temp WHERE x IN (toDecimal32(32, 1));
SELECT * FROM temp WHERE x IN (toDecimal32(32, 2));
SELECT * FROM temp WHERE x IN (toDecimal32(32, 3));
SELECT * FROM temp WHERE x IN (toDecimal64(64, 1));
SELECT * FROM temp WHERE x IN (toDecimal64(64, 2));
SELECT * FROM temp WHERE x IN (toDecimal64(64, 3));
SELECT * FROM temp WHERE y IN (toDecimal128(128, 1));
SELECT * FROM temp WHERE y IN (toDecimal128(128, 2));
SELECT * FROM temp WHERE y IN (toDecimal128(128, 3));
SELECT * FROM temp WHERE y IN (toDecimal256(256, 1));
SELECT * FROM temp WHERE y IN (toDecimal256(256, 2));
SELECT * FROM temp WHERE y IN (toDecimal256(256, 3));
SELECT * FROM temp WHERE y IN (toDecimal32(32, 1));
SELECT * FROM temp WHERE y IN (toDecimal32(32, 2));
SELECT * FROM temp WHERE y IN (toDecimal32(32, 3));
SELECT * FROM temp WHERE y IN (toDecimal64(64, 1));
SELECT * FROM temp WHERE y IN (toDecimal64(64, 2));
SELECT * FROM temp WHERE y IN (toDecimal64(64, 3));
SELECT * FROM temporary_table;
select * from tesd_dedupl;
SELECT * FROM test WHERE tuple(report_date) IN tuple(toDate('2023-04-17'));
SELECT * FROM test ARRAY JOIN products;
select * from test FINAL order by uid;
select * from test final;
SELECT * FROM test FORMAT Null;
select * from test format Null;
select * from test group by i having i in (10, 11, 12) order by i limit 1 FORMAT JSONCompact;
select * from test limit 1 FORMAT JSONCompact;
SELECT * FROM test LIMIT 1;
SELECT * FROM test LIMIT 20 OFFSET 100;
SELECT * FROM test LIMIT 4*5 OFFSET 10*10;
SELECT * FROM test LIMIT 50 OFFSET 50;
SELECT * FROM test ORDER BY code;
SELECT * FROM test ORDER BY i;
SELECT * FROM test ORDER BY id;
SELECT * FROM test ORDER BY ip;
select * from test order by number;
SELECT * FROM test ORDER BY toFloat32(x), -(-y), -z DESC;
SELECT * FROM test ORDER BY toFloat32(x), -y, -z DESC;
select * from test order by uid;
SELECT * FROM test ORDER BY x, y;
SELECT * FROM test ORDER BY x;
select * from test order by x;
SELECT * FROM test ORDER BY y;
SELECT * FROM test WHERE '2020-10-15' != timestamp ORDER BY timestamp;
SELECT * FROM test WHERE '2020-10-15' < timestamp ORDER BY timestamp;
SELECT * FROM test WHERE '2020-10-15' <= timestamp ORDER BY timestamp;
SELECT * FROM test WHERE '2020-10-15' == timestamp ORDER BY timestamp;
SELECT * FROM test WHERE '2020-10-16' > timestamp ORDER BY timestamp;
SELECT * FROM test WHERE '2020-10-16' >= timestamp ORDER BY timestamp;
SELECT * FROM test WHERE `int16` = -1;
SELECT * FROM test WHERE `int32` = -1;
SELECT * FROM test WHERE `int64` = -1;
SELECT * FROM test WHERE `int8` = -1;
select * from test where a like '1%1' order by a;
select * from test where a not like '1%1' order by a;
select * from test where a not like '1%2' order by a;
select * from test where d != '2020-01-01';
SELECT * FROM test WHERE d >= '07-08-2019';
select * from test where i < 10 group by i order by i limit 1 FORMAT JSONCompact;
select * from test where i < 20 order by i limit 1 FORMAT JSONCompact;
select * from test where insid IN (1) AND insidvalue IN (1);
select * from test where insid IN (1) OR insidvalue IN (1);
SELECT * FROM test WHERE isZeroOrNull(x = 'xyz');
SELECT * FROM test WHERE NOT x = 'xyz';
SELECT * FROM test WHERE timestamp != '2020-10-15' ORDER BY timestamp;
SELECT * FROM test WHERE timestamp < '2020-10-16' ORDER BY timestamp;
SELECT * FROM test WHERE timestamp <= '2020-10-16' ORDER BY timestamp;
SELECT * FROM test WHERE timestamp == '2020-10-15' ORDER BY timestamp;
SELECT * FROM test WHERE timestamp > '2020-10-15' ORDER BY timestamp;
SELECT * FROM test WHERE timestamp >= '2020-10-15' ORDER by timestamp;
SELECT * FROM test WHERE timestamp >= '2020-10-15' ORDER BY timestamp;
SELECT * FROM test WHERE x != 'xyz';
SELECT * FROM test1 LEFT JOIN test2 ON test1.col1 = test2.col1 WHERE test2.col1 IS NOT NULL ORDER BY test2.col1 ;
select * from test1 where i not in (1,2,3,4,5) order by i;
SELECT * FROM test1;
SELECT * FROM test1_00395 ORDER BY col1,col2,col3,col4,col5,col6,col7,col8 ASC;
SELECT * FROM test2 ORDER BY x;
SELECT * FROM test2 RIGHT JOIN test1 ON test2.col1 = test1.col1 WHERE test2.col1 IS NOT NULL ORDER BY test2.col1 ;
SELECT * FROM test2 RIGHT JOIN test1 ON test2.col1 = test1.col1 WHERE test2.col1 IS NULL ORDER BY test2.col1 ;
SELECT * FROM test2;
SELECT * FROM test;
select * from test;
SELECT * FROM test_00563 WHERE toInt32(site_id) IN (100);
SELECT * FROM test_00563 WHERE toInt32(site_id) IN (100,101);
SELECT * FROM test_00597 WHERE id = 1;
SELECT * FROM test_00615 ORDER BY data NULLS FIRST;
SELECT * FROM test_00616 ORDER BY ver;
select * from test_00670;
SELECT * FROM test_00724;
SELECT * FROM test_00861 ORDER BY key;
SELECT * FROM test_01073_crlf_end_of_line FORMAT CSV SETTINGS output_format_csv_crlf_end_of_line = 0;
SELECT * FROM test_01073_crlf_end_of_line FORMAT CSV SETTINGS output_format_csv_crlf_end_of_line = 1;
SELECT * FROM test_01073_crlf_end_of_line FORMAT TSV SETTINGS output_format_tsv_crlf_end_of_line = 0;
SELECT * FROM test_01073_crlf_end_of_line FORMAT TSV SETTINGS output_format_tsv_crlf_end_of_line = 1;
SELECT * FROM test_01109_ordinary.t4;
SELECT * FROM test_01109_other_atomic.t3;
SELECT * FROM test_01343;
SELECT * FROM test_01344 WHERE x = 'Hello, world';
SELECT * FROM test_01676.table ORDER BY x;
SELECT * FROM test_01915_db.test_dictionary;
select * from test_02152;
SELECT * FROM test_02187 FINAL LIMIT 1;
SELECT * FROM test_02187 FINAL;
select * from test_02245;
select * from test_02245_2;
select * from test_02249;
select * from test_02250;
select * from test_02302 where (_file like '%.1' OR _file like '%.2') AND a > 1;
select * from test_02302 where _file like '%1';
select * from test_02302;
select * from test_02312;
SELECT * FROM test_02327;
select * from test_02377 order by n;
select * from test_02381 where a = 10000 limit 1;
select * from test_02381_compact order by a;
select * from test_02381_compress where a = 1000 limit 1;
select * from test_02381_compress where a = 10000 limit 1;
SELECT * FROM test_02504;
SELECT * FROM test_02559 ORDER BY x;
SELECT * FROM test_02559;
select * from test_02902 format JSONEachRow settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 0;
select * from test_02902 format JSONEachRow settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 1;
select * from test_23634 where (id, s, s1) != ('', '', '') order by id, s1, s1;
select * from test_23634 where (id, s, s1) = ('', '', '') order by id, s1, s1;
select * from test_23634 where (id, s, s1) = ('', '', 's2') order by id, s1, s1;
select * from test_23634 where (id, s, s1) = ('', 's1', 's1') order by id, s1, s1;
select * from test_23634 where (id, s, s1) = ('s', 's', 's') order by id, s1, s1;
select * from test_23634 where (id, s, s1) = (null::Nullable(String), null::Nullable(String), null::Nullable(String)) order by id, s1, s1;
select * from test_23634 where id !='' and s != '' and s1 != '';
select * from test_23634 where id !='' and s != '';
select * from test_23634 where id !='';
SELECT * FROM test_2554_log;
SELECT * FROM test_2554_stripelog;
SELECT * FROM test_2554_tinylog;
SELECT * FROM test_alter_decimal ORDER BY n;
SELECT * FROM test_apply_deleted_mask WHERE _row_exists SETTINGS apply_deleted_mask = 0;
SELECT * FROM test_bloom_filter_index WHERE (`uint16`, `index_column`) IN (SELECT toUInt16(2), toUInt64(2));
SELECT * FROM test_collate ORDER BY s COLLATE 'ru', x;
SELECT * FROM test_collate ORDER BY s COLLATE 'ru';
SELECT * FROM test_collate ORDER BY s, x;
SELECT * FROM test_collate ORDER BY s;
SELECT * FROM test_collate ORDER BY x, s COLLATE 'ru';
SELECT * FROM test_collate ORDER BY x, s;
SELECT * FROM test_collate_null ORDER BY s COLLATE 'ru';
SELECT * FROM test_collate_null ORDER BY s;
SELECT * FROM test_collate_null ORDER BY x, s COLLATE 'ru';
SELECT * FROM test_collate_null ORDER BY x, s;
SELECT * FROM test_collation ORDER BY v ASC COLLATE 'en';
SELECT * FROM test_data FORMAT CSV;
SELECT * FROM test_datetime WHERE time=toDate(18012);
SELECT * FROM test_dictionary;
select * from test_enum;
SELECT * FROM test_filter PREWHERE b != 0 WHERE intDiv(b, c) > 0;
SELECT * FROM test_filter PREWHERE intDiv(b, c) > 0;
SELECT * FROM test_generic_events_all PREWHERE APIKey = 42 WHERE SessionType = 42;
SELECT * FROM test_generic_events_all WHERE APIKey = 42 AND SessionType = 42;
select * from test_in where a in ('a');
select * from test_ins_arr limit 10;
select * from test_ins_arr_arr limit 10;
select * from test_ins_arr_arr_arr limit 10;
select * from test_ins_arr_arr_null limit 10;
select * from test_ins_arr_null limit 10;
select * from test_ins_null limit 10;
SELECT * FROM test_joined_view_00740;
SELECT * FROM test_mv ORDER BY arr;
select * from test_mv_00609;
SELECT * FROM test_nested;
SELECT * FROM test_nested_default;
SELECT * FROM test_nested_view_00740;
SELECT * FROM test_null_as_default ORDER BY a;
select * from test_param_view(param_test_val = 3);
select * from test_param_view2(param_test_val = 3);
SELECT * FROM test_r1;
SELECT * FROM test_r2;
SELECT * FROM test_table AS subquery, (SELECT 1) AS test_table;
SELECT * FROM test_table AS t1, t1;
SELECT * FROM test_table AS test_table, test_table;
SELECT * FROM test_table AS test_table;
SELECT * FROM test_table AS test_table_alias SETTINGS asterisk_include_alias_columns = 1, asterisk_include_materialized_columns = 1;
SELECT * FROM test_table AS test_table_alias SETTINGS asterisk_include_alias_columns = 1;
SELECT * FROM test_table AS test_table_alias SETTINGS asterisk_include_materialized_columns = 1;
SELECT * FROM test_table FORMAT JSONCompactEachRow;
SELECT * FROM test_table FORMAT JSONCompactEachRowWithNames;
SELECT * FROM test_table FORMAT JSONCompactStringsEachRow;
SELECT * FROM test_table FORMAT JSONCompactStringsEachRowWithNames;
SELECT * FROM test_table ORDER BY a, d, c;
SELECT * FROM test_table ORDER BY id;
SELECT * FROM test_table ORDER BY n, s LIMIT 30;
SELECT * FROM test_table WHERE 1 == 1 AND col1 == col1 OR 0 AND col2 == NULL;
select * from test_table where B is null;
SELECT * FROM test_table WHERE id = 1 SETTINGS query_plan_optimize_primary_key = 0;
SELECT * FROM test_table WHERE id = 1;
SELECT * FROM test_table;
SELECT * FROM test_table_2 FORMAT JSONCompactEachRow;
SELECT * FROM test_table_2 FORMAT JSONCompactEachRowWithNames;
SELECT * FROM test_table_2 FORMAT JSONCompactEachRowWithNamesAndTypes;
SELECT * FROM test_table_2 FORMAT JSONCompactStringsEachRow;
SELECT * FROM test_table_2 FORMAT JSONCompactStringsEachRowWithNames;
SELECT * FROM test_table_2 FORMAT JSONCompactStringsEachRowWithNamesAndTypes;
SELECT * FROM test_table_2 LIMIT 100;
SELECT * FROM test_table_for_01070_exception_code_in_query_log_table;
SELECT * FROM test_table_join;
SELECT * FROM test_table_join_1 AS t1 FULL JOIN test_table_join_2 AS t2 ON t1.id = t2.id ORDER BY t1.id, t1.value;
SELECT * FROM test_table_join_1 AS t1 FULL JOIN test_table_join_2 AS t2 USING (id) ORDER BY id, t1.value;
SELECT * FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 USING (id) FULL JOIN test_table_join_3 AS t3 USING (id) ORDER BY id, t1.value;
SELECT * FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 USING (id) INNER JOIN test_table_join_3 AS t3 USING (id) ORDER BY id, t1.value;
SELECT * FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 USING (id) LEFT JOIN test_table_join_3 AS t3 USING (id) ORDER BY id, t1.value;
SELECT * FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 USING (id) RIGHT JOIN test_table_join_3 AS t3 USING (id) ORDER BY id, t1.value;
SELECT * FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 USING (id, id, id) ORDER BY id, t1.value;
SELECT * FROM test_table_join_1 AS t1 LEFT JOIN test_table_join_2 AS t2 ON t1.id = t2.id ORDER BY t1.id, t1.value;
SELECT * FROM test_table_join_1 AS t1 LEFT JOIN test_table_join_2 AS t2 USING (id) ORDER BY id, t1.value;
SELECT * FROM test_table_join_1 AS t1 RIGHT JOIN test_table_join_2 AS t2 ON t1.id = t2.id ORDER BY t1.id, t1.value;
SELECT * FROM test_table_join_1 AS t1 RIGHT JOIN test_table_join_2 AS t2 USING (id) ORDER BY id, t1.value;
select * From test_tbl where ship_dt >= toDate('2020-01-01') and ship_dt <= toDate('2021-05-05') order by ship_dt;
select * From test_tbl where ship_dt >= toDate('2020-11-01') and ship_dt <= toDate('2021-05-05') order by ship_dt;
SELECT * FROM test_tuple;
SELECT * FROM test_tuple_filter WHERE ((id, value), id * 2) = ((1, 'A'), 2);
SELECT * FROM test_tuple_filter WHERE ((id, value), log_date) = ((1, 'A'), '2021-01-01');
SELECT * FROM test_tuple_filter WHERE ((id, value), tuple(log_date)) = ((1, 'A'), tuple('2021-01-01'));
SELECT * FROM test_tuple_filter WHERE (1, 'A') = (id, value);
SELECT * FROM test_tuple_filter WHERE (1, (1, (1, (1, (id, value))))) = (1, (1, (1, (1, (1, 'A')))));
SELECT * FROM test_tuple_filter WHERE (1, (1, (1, (1, tuple(id))))) = (1, (1, (1, (1, tuple(1)))));
SELECT * FROM test_tuple_filter WHERE (1, value) = (id, 'A');
SELECT * FROM test_tuple_filter WHERE (id, (id, id) = (1, NULL)) == (NULL, NULL);
SELECT * FROM test_tuple_filter WHERE (id, value) = (1, 'A') AND (id, log_date) = (1, '2021-01-01');
SELECT * FROM test_tuple_filter WHERE (id, value) = (1, 'A');
SELECT * FROM test_tuple_filter WHERE (log_date, value) = ('2021-01-01', 'A');
SELECT * FROM test_tuple_filter WHERE (log_date, value) = tuple('2021-01-01');
SELECT * FROM test_tuple_filter WHERE tuple(id) = tuple(1);
SELECT * FROM test_tuple_nested_in_array;
SELECT * FROM test_tuple_nested_in_array_nested_in_tuple;
SELECT * FROM test_tuple_nested_in_map;
SELECT * FROM test_tuple_nested_in_map_nested_in_tuple;
SELECT * FROM test_view ORDER BY f1, f2;
SELECT * FROM test_view;
SELECT * FROM test_view_00740;
SELECT * FROM test_view_different_db;
SELECT * FROM test_view_filtered;
select * from test_wide_nested where id = 1 order by id;
select * from test_wide_nested;
SELECT * FROM test_wide_not_nested ORDER BY id;
SELECT * FROM test_xy ORDER BY x, y;
SELECT * FROM testAggregatingMT order by uid;
SELECT * FROM testCleanupR1 order by uid;
SELECT * FROM testCollapsingMT order by uid;
SELECT * FROM testJoinTable ORDER BY number;
SELECT * FROM testMT order by uid;
SELECT * FROM testSettingsR1 where is_deleted=0 order by col1;
SELECT * FROM testSummingMT order by uid;
SELECT * FROM testVersionedCMT order by uid;
SELECT * FROM TestView ORDER BY key;
SELECT * FROM tmp;
select * from to_table;
SELECT * FROM tokenbf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;
SELECT * FROM tokenbf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;
SELECT * FROM tokenbf_tab WHERE match(str, 'OLAP.*') ORDER BY id;
SELECT * FROM tokenbf_v1_hasany_test WHERE hasAny(array, ['another example', 'example.com']) ORDER BY id ASC SETTINGS force_data_skipping_indices='idx_array_tokenbf_v1';
SELECT * FROM tokenbf_v1_hasany_test WHERE hasAny(array, ['another test']) SETTINGS force_data_skipping_indices='idx_array_tokenbf_v1';
SELECT * FROM tokenbf_v1_hasany_test WHERE hasAny(array, ['example.com']) SETTINGS force_data_skipping_indices='idx_array_tokenbf_v1';
SELECT * FROM tokenbf_v1_hasany_test WHERE hasAny(array, ['this is a test']) SETTINGS force_data_skipping_indices='idx_array_tokenbf_v1';
select * from tp_2 order by x;
SELECT * FROM truncate_test ORDER BY uint8;
SELECT * FROM truncate_test_log;
SELECT * FROM truncate_test_materialized_view;
SELECT * FROM truncate_test_memory;
SELECT * FROM truncate_test_merge_tree;
SELECT * FROM truncate_test_stripe_log;
SELECT * FROM truncate_test_tiny_log;
select * from ts order by sensor_id DESC, timestamp with fill from 6 step 1 interpolate (value as 9999) settings use_with_fill_by_sorting_prefix=0;
select * from ts order by sensor_id DESC, timestamp with fill from 6 to 10 step 1 interpolate (value as 9999) settings use_with_fill_by_sorting_prefix=0;
select * from ts order by sensor_id DESC, timestamp with fill to 10 step 1 interpolate (value as 9999) settings use_with_fill_by_sorting_prefix=0;
select * from ts order by sensor_id, timestamp with fill from 6 step 1 interpolate (value as 9999) settings use_with_fill_by_sorting_prefix=0;
select * from ts order by sensor_id, timestamp with fill from 6 to 10 step 1 interpolate (value as 9999) settings use_with_fill_by_sorting_prefix=0;
select * from ts order by sensor_id, timestamp with fill step 1 settings max_block_size=2;
select * from ts order by sensor_id, timestamp with fill step 1 settings max_block_size=3;
select * from ts order by sensor_id, timestamp with fill to 10 step 1 interpolate (value as 9999) settings use_with_fill_by_sorting_prefix=0;
select * from tst final order by timestamp;
select * from tsv_raw format JSONCompactEachRow;
select * from tsv_raw format TSVRaw;
SELECT * FROM tt_m WHERE b != 0 order by b, a;
SELECT * FROM tt_m WHERE b != 1 order by b, a;
SELECT * FROM tt_m WHERE b != a * 2 order by b, a;
SELECT * FROM tt_m WHERE b / 2 != a order by b, a;
select * from ttl order by a;
select * from ttl order by d, a;
select * from ttl order by i;
select * from ttl;
select * from ttl_00933_1 order by d;
select * from ttl_00933_1;
SELECT * FROM ttl_group_by ORDER BY d, i;
SELECT * FROM ttl_table;
select * from ttl_test_02129 order by a, b, d, c;
SELECT * FROM ttl_where ORDER BY d, i;
select * from ttt01778 where 1=2;
SELECT * FROM tuple ORDER BY t;
SELECT * FROM tuple_01016 WHERE a < tuple(toDateTime('2019-01-01 00:00:00'), 0) format Null;
SELECT * FROM tutorial;
SELECT * FROM type_json_dst ORDER BY data.k1 FORMAT JSONEachRow;
SELECT * FROM type_names ORDER BY n;
SELECT * FROM underlying_01795 FORMAT Null;
SELECT * FROM underlying_01796 FORMAT Null;
SELECT * FROM underlying_01797 FORMAT Null;
SELECT * FROM unicode SETTINGS max_threads = 1 FORMAT PrettyNoEscapes;
SELECT * FROM union ORDER BY test;
SELECT * FROM unsorted;
SELECT * FROM unsorted_collapsing FINAL;
SELECT * FROM unsorted_collapsing;
SELECT * FROM unsorted_replacing FINAL;
SELECT * FROM unsorted_replacing;
SELECT * FROM url('http://127.0.0.1:1337/? HTTP/1.1\r\nTest: test', CSV, 'column1 String');
select * from url('http://127.0.0.1:8123/?query=select%201%2C%202%20format%20CSV%20settings%20format_csv_delimiter%3D%27/%27%3B%0A', CSV, 'a int, b int') settings format_csv_delimiter = '/';
select * from url('http://127.0.0.1:8123/?query=select+1&user=default&password=wrong', LineAsString, 's String');
select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Database'='default'));
select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Database'='default', 'X-ClickHouse-Format'='JSONEachRow'));
select * from url('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Format'='JSONEachRow', 'X-ClickHouse-Database'='kek'));
SELECT * FROM url('http://127.0.0.1:8123?query=select+{1,2}+as+x+format+TSV', 'TSV') WHERE 0;
select * from url(url_with_headers, url='http://127.0.0.1:8123?query=select+12', format='RawBLOB');
select * from url(url_with_headers, url='http://127.0.0.1:8123?query=select+12', format='RawBLOB', headers('X-ClickHouse-Database'='default', 'X-ClickHouse-Format'='JSONEachRow'));
select * from url(url_with_headers, url='http://127.0.0.1:8123?query=select+12', format='RawBLOB', headers('X-ClickHouse-Database'='kek'));
select * from url;
select * from url_delim;
select * from urlCluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv') order by c1, c2, c3;
select * from urlCluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'auto') order by c1, c2, c3;
select * from urlCluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV') order by c1, c2, c3;
select * from urlCluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV', 'auto') order by c1, c2, c3;
select * from urlCluster('test_cluster_one_shard_three_replicas_localhost', 'http://localhost:11111/test/{a,b}.tsv', 'TSV', 'auto', 'auto') order by c1, c2, c3;
select * from urlCluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'TSV') ORDER BY c1, c2, c3;
select * from urlCluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64') ORDER BY c1, c2, c3;
select * from urlCluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv', 'TSV', 'c1 UInt64, c2 UInt64, c3 UInt64', 'auto') ORDER BY c1, c2, c3;
SELECT * FROM urlCluster('test_cluster_two_shards_localhost', 'http://localhost:8123/', LineAsString, headers('exact_header' = 'value'));
SELECT * FROM userid_test WHERE (userid, name) IN (userid_set);
SELECT * FROM userid_test WHERE toUInt64(1) IN (userid_set);
SELECT * FROM userid_test WHERE userid IN (1, 2, 3);
SELECT * FROM userid_test WHERE userid IN (userid_set);
SELECT * FROM using1 ALL LEFT JOIN (SELECT * FROM using2) js2 USING (a, b) ORDER BY a;
SELECT * FROM v1 AS t1 JOIN v1 AS t2 USING (id) CROSS JOIN v2 AS n1 CROSS JOIN v2 AS n2;
SELECT * FROM v1 AS t1 JOIN v1 AS t2 USING (id) JOIN v1 AS t3 USING (value);
SELECT * FROM v1 AS t1 JOIN v1 AS t2 USING (id) JOIN v2 AS n1 ON t1.id = n1.value JOIN v2 AS n2 ON t1.id = n2.value;
SELECT * FROM v1;
SELECT * FROM v2;
select * from v4test_array_joins array join arr_1, arr_2, arr_3, arr_4 where match(arr_4,'a') and id < 100 order by id format Null settings optimize_read_in_order = 1;
select * from v4test_array_joins array join columns('^arr') where match(arr_4,'a') and id < 100 order by id format Null settings optimize_read_in_order = 0;
select * from v;
select * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3', 'v_numbers' : 'x != 3'};
select * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3'};
select * from v_numbers settings additional_table_filters={'v_numbers' : 'x != 3'};
SELECT * FROM VALUES('a Decimal(4, 4), b String, c String', (divide(toDecimal32(5, 3), 3), 'a', 'b'));
SELECT * FROM VALUES('a UInt64, s String', (1, 'one'), (2, 'two'), (3, 'three'));
SELECT * FROM values('arr Array(JSON)', '[\'{"x" : 1}\']') FORMAT JSONEachRow;
SELECT * FROM values('arr Map(String, JSON)', '{\'x\' : \'{"y" : 1}\', \'t\' : \'{"y" : 2}\'}') FORMAT JSONEachRow;
SELECT * FROM values('arr Tuple(Int32, JSON)', '(1, \'{"y" : 1}\')', '(2, \'{"y" : 2}\')') FORMAT JSONEachRow;
SELECT * FROM VALUES('n UInt64, s String, ss String', (1 + 22, '23', toString(23)), (toUInt64('24'), '24', concat('2', '4')));
select * from values('s LowCardinality(Nullable(String))', (NULL));
SELECT * FROM VALUES('s String', ('abra'), ('cadabra'), ('abracadabra'));
SELECT * FROM VALUES('x Decimal128(0)', (3));
SELECT * FROM VALUES('x Decimal256(0)', (4));
SELECT * FROM VALUES('x Decimal32(0)', (1));
SELECT * FROM VALUES('x Decimal64(0)', (2));
SELECT * FROM VALUES('x Float64', toUInt64(-1));
SELECT * FROM VALUES('x String, y String', ('привет', 'мир'), ('мир', 'привет')) FORMAT Pretty;
SELECT * FROM VALUES('x String, y String', ('привет', 'мир'), ('мир', 'привет')) FORMAT PrettyCompact;
SELECT * FROM VALUES('x String, y String', ('привет', 'мир'), ('мир', 'привет')) FORMAT PrettySpace;
select * from values('x UInt8 NULL', NULL);
SELECT * FROM VALUES('x UInt8, y UInt16', 1 + 2, 'Hello');
select * from values([1, 2.2]);
select * from values([[1, 2, 3], [1.1, 2.2, 3.3]]);
SELECT * FROM values_list;
SELECT * FROM values_template ORDER BY d;
SELECT * FROM values_template_fallback ORDER BY n;
SELECT * FROM values_template_nullable ORDER BY d;
SELECT * FROM versioned_collapsing_merge_tree ORDER BY key;
SELECT * FROM view(SELECT 1);
SELECT * FROM view1 WHERE id = 1 ORDER BY id;
SELECT * FROM view1 WHERE id = 1;
SELECT * FROM view_00843;
select * from view_bug_const;
SELECT * FROM view_foo_bar;
SELECT * FROM view_no_nulls;
SELECT * FROM view_no_nulls_set;
SELECT * FROM view_nulls;
SELECT * FROM view_nulls_set;
SELECT * FROM view_table_00942 ORDER BY x;
SELECT * FROM viewExplain('', '');
SELECT * FROM visits_dist ORDER BY StartDate, Name2;
SELECT * FROM without_fixed_size_columns ORDER BY s;
SELECT * FROM without_fixed_size_columns_replica2 ORDER BY s;
SELECT * FROM wrong_metadata ORDER BY column1;
SELECT * FROM wrong_metadata ORDER BY column1_renamed FORMAT JSONEachRow;
SELECT * FROM wrong_metadata_wide ORDER by column1;
SELECT * FROM wrong_metadata_wide ORDER BY column1_renamed FORMAT JSONEachRow;
SELECT * FROM x ORDER BY number;
select * from x where _partition_id = partitionId(1);
select * from x where dt like '2022-10-01%';
select * from x where i > 30;
SELECT * FROM x_dist ORDER by number;
select * from xp where i global in (null);
select * from xp where i global in (select * from numbers(2));
select * from xp where i global in [0, 1];
select * from xp where i in [0, 1];
select * from xp_d where i global in (null);
select * from xp_d where i global in [0, 1];
select * from xp_d where i in (null);
select * from xp_d where i in (select * from numbers(2));
select * from xp_d where i in [0, 1];
SELECT * FROM xxxx_null WHERE ts > '2021-10-11 00:00:00';
select * from xy where intHash64(x) % 2 = intHash64(2) % 2;
select * from xyz where y = 2;
SELECT * FROM y_dist ORDER by number;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.dst ORDER BY x;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.mv_00508 ORDER BY x;
select * from {CLICKHOUSE_DATABASE:Identifier}.my_materialized_view;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.t_00751 ORDER BY date;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.t_mv_00751 ORDER BY date;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_00571;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_joined_view_00740;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_materialized_00571;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_nested_view_00740;
SELECT * FROM {CLICKHOUSE_DATABASE:Identifier}.test_view_00740;
SELECT * REPLACE (5 AS id) FROM test_table;
SELECT * REPLACE (5 AS id, 6 as value) FROM test_table;
SELECT * REPLACE STRICT (1 AS id, 2 AS value_1) FROM test_table;
SELECT * REPLACE STRICT(i + 1 AS col) from columns_transformers;
SELECT * REPLACE substring(license_text, 1, position(license_text, '\n')) AS license_text FROM system.licenses WHERE library_name = 'poco' FORMAT Vertical;
SELECT * REPLACE({test_a:UInt32} as number) FROM numbers(2);
SELECT *, _file FROM s3(s3_conn, filename = 'test_02495_1', format = Parquet) WHERE _file = 'test_02495_1';
SELECT *, _part FROM ip_part_test;
select *, _part from mt order by _part;
SELECT *, _part FROM t_dst ORDER BY v;
select *, _path, _file from test_02377 format Null;
SELECT *, _row_exists FROM test_apply_deleted_mask SETTINGS apply_deleted_mask = 0;
SELECT *, _row_exists FROM test_apply_deleted_mask;
SELECT *, _shard_num FROM table_02916_distributed;
SELECT *, _state FROM system.parts FORMAT Null;
select *, _state from system.parts where database=currentDatabase() and table like 'rmt%' and active=0;
select *, _table from merge(currentDatabase(), '') order by _table, (*,);
select *, _table from merge(currentDatabase(), '') order by _table, (*,);
SELECT *, _table FROM merge(currentDatabase(), 'test_distributed_1') ORDER BY _table;
SELECT *, _table FROM merge(currentDatabase(), 'test_distributed_1|test_distributed_2') ORDER BY _table;
SELECT *, _table FROM merge(currentDatabase(), 'test_local_1') ORDER BY _table;
SELECT *, _table FROM merge(currentDatabase(), 'test_local_1|test_distributed_2') ORDER BY _table;
SELECT *, _table FROM merge(currentDatabase(), 'test_local_1|test_local_2') ORDER BY _table;
SELECT *, _version FROM 02577_keepermap_delete_update ORDER BY key;
SELECT *, _version FROM 02707_keepermap_delete_update ORDER BY key;
SELECT *, _version, _version FROM 02707_keepermap_delete_update ORDER BY key;
select *, arr from lc_left_aj left array join null_str as arr;
select *, arr from lc_left_aj left array join null_val as arr;
select *, arr from lc_left_aj left array join str as arr;
select *, arr from lc_left_aj left array join val as arr;
select *, arraySum(arr) as s from prewhere_column_missing prewhere s = 0;
select *, arraySum(arr) as s from prewhere_column_missing where s = 0;
select *, arraySum(arr) as s from prewhere_column_missing;
SELECT *, b FROM merge_00160 WHERE x IN (12345, 67890) AND NOT ignore(blockSize() < 10 AS b) ORDER BY x;
SELECT *, b FROM mt_00160 WHERE (z, y, x) IN ((617, 1244, 1234), (2839, 5688, 5678), (1,1,1)) AND NOT ignore(blockSize() < 10 AS b) ORDER BY (x, y, z);
SELECT *, b FROM mt_00160 WHERE x IN (12345, 67890) AND NOT ignore(blockSize() < 10 AS b) ORDER BY x;
SELECT *, c as a, d as b FROM table2 FORMAT PrettyCompact;
SELECT *, d.* FROM ( SELECT 1 AS id, 2 AS value ) a SEMI LEFT JOIN ( SELECT 1 AS id, 3 AS values ) AS d USING id;
SELECT *, d.* FROM ( SELECT 1 AS id, 2 AS value ) SEMI LEFT JOIN ( SELECT 1 AS id, 3 AS values ) AS d USING id;
SELECT *, d.*, d.values FROM ( SELECT 1 AS id, 2 AS value ) SEMI LEFT JOIN ( SELECT 1 AS id, 3 AS values ) AS d USING id;
select *, e < 'b' from enums;
select *, e > 'b' from enums;
SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);
SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);
SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);
SELECT *, id FROM (SELECT [0] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);
SELECT *, id FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);
SELECT *, id FROM (SELECT [1] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);
SELECT *, id FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);
SELECT *, id FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);
SELECT *, id FROM (SELECT [[0]] AS id) AS subquery ARRAY JOIN id AS id_nested_array ARRAY JOIN id_nested_array AS id INNER JOIN test_table USING (id);
select *, length(arr) as l from prewhere_column_missing prewhere l = 0;
select *, length(arr) as l from prewhere_column_missing where l = 0;
select *, length(arr) as l from prewhere_column_missing;
select *, payload_length from defaulted order by payload;
select *, payload_length from defaulted;
select *, toString(t.v) as s from t_02147_merge as t order by date, s;
select *, toTypeName(b) from tab_00718;
select *, toTypeName(id), toTypeName(name) from t1;
select *, toTypeName(id), toTypeName(name) from t2;
select *, toTypeName(id), toTypeName(name) from t3;
select *, toTypeName(id), toTypeName(name) from t4;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 ANY FULL JOIN t3_00848 t3 ON t1.id = t3.id ORDER BY t1.id, t3.id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 ANY FULL JOIN t3_00848 t3 USING(id) ORDER BY id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 ANY FULL JOIN t3_00848 t3 USING(id) ORDER BY t1.id, t3.id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 ANY LEFT JOIN t3_00848 t3 ON t1.id = t3.id ORDER BY t1.id, t3.id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 ANY LEFT JOIN t3_00848 t3 USING(id) ORDER BY id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 ANY LEFT JOIN t3_00848 t3 USING(id) ORDER BY t1.id, t3.id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 FULL JOIN t3_00848 t3 ON t1.id = t3.id ORDER BY t1.id, t3.id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 FULL JOIN t3_00848 t3 USING(id) ORDER BY id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 FULL JOIN t3_00848 t3 USING(id) ORDER BY t1.id, t3.id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 LEFT JOIN t3_00848 t3 ON t1.id = t3.id ORDER BY t1.id, t3.id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 LEFT JOIN t3_00848 t3 USING(id) ORDER BY id;
SELECT *, toTypeName(t1.id), toTypeName(t3.id) FROM t1_00848 t1 LEFT JOIN t3_00848 t3 USING(id) ORDER BY t1.id, t3.id;
SELECT *, toTypeName(t2.id), toTypeName(t3.id) FROM t2_00848 t2 ANY FULL JOIN t3_00848 t3 ON t2.id = t3.id ORDER BY t2.id, t3.id;
SELECT *, toTypeName(t2.id), toTypeName(t3.id) FROM t2_00848 t2 ANY FULL JOIN t3_00848 t3 USING(id) ORDER BY id;
SELECT *, toTypeName(t2.id), toTypeName(t3.id) FROM t2_00848 t2 ANY FULL JOIN t3_00848 t3 USING(id) ORDER BY t2.id, t3.id;
SELECT *, toTypeName(t2.id), toTypeName(t3.id) FROM t2_00848 t2 FULL JOIN t3_00848 t3 ON t2.id = t3.id ORDER BY t2.id, t3.id;
SELECT *, toTypeName(t2.id), toTypeName(t3.id) FROM t2_00848 t2 FULL JOIN t3_00848 t3 USING(id) ORDER BY id;
SELECT *, toTypeName(t2.id), toTypeName(t3.id) FROM t2_00848 t2 FULL JOIN t3_00848 t3 USING(id) ORDER BY t2.id, t3.id;
SELECT *, value_array FROM test_table ARRAY JOIN [4,5,6] AS value_array;
SELECT *, value_array FROM test_table ARRAY JOIN value_array AS value_array;
SELECT *, value_array, value_element FROM test_table ARRAY JOIN value_array, [4,5,6] AS value_element;
SELECT *, value_array_element FROM test_table ARRAY JOIN value_array AS value_array_element;
select *, x != 2 from table_1 settings additional_result_filter='x != 2';
select *, X from data_02053 order by id;
SELECT *,_block_number,_part from test ORDER BY id;
SELECT *,UserID = 0 as UserIDEquals0, if(UserID = 0, 'delete', 'leave') as verdict FROM mutation_delete_null_rows ORDER BY EventDate;
select *;
SELECT *;
select *　from (　select 'table' as table, toInt64(10) as rows, toInt64(101) as elements　union all　select 'another table' as table, toInt64(0) as rows, toInt64(0) as elements　)　where rows - elements <> 0;
SELECT +1234;
SELECT +1_2_3_4;
select +_1;
SELECT +inf;
SELECT +Inf;
SELECT +INF;
SELECT - -1 IN (2 - 1);
SELECT - -1 IN (2 - 1, 3);
SELECT -(NULL, NULL, 1);
SELECT -.34e+21;
SELECT -.34e+2_1;
SELECT -.34e-21;
SELECT -.34e-2_1;
SELECT -.34e21;
SELECT -.34e2_1;
SELECT -.3_4e+2_1;
SELECT -.3_4e-2_1;
SELECT -.3_4e2_1;
SELECT -0, toTypeName(-0), -1, toTypeName(-1), -0., toTypeName(-0.);
SELECT -0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
SELECT -0.111::Float64;
SELECT -0.1::Decimal(38, 38);
SELECT -0b10000000 as number, toTypeName(number);
SELECT -0b1000000000000000 as number, toTypeName(number);
SELECT -0b10000000000000000000000000000000 as number, toTypeName(number);
SELECT -0b1000000000000000000000000000000000000000000000000000000000000000 as number, toTypeName(number);
SELECT -0b1111;
SELECT -0b1_111;
SELECT -0b1_1_1_1;
SELECT -0x1.234;
SELECT -0x1.234p+01;
SELECT -0x1.234p-01;
SELECT -0x1.234p01;
SELECT -0x1.2_34p+01;
SELECT -0x1.2_34p+0_1;
SELECT -0x1.2_34p-01;
SELECT -0x1.2_34p-0_1;
SELECT -0x1.2_34p01;
SELECT -0x1.2_34p0_1;
SELECT -0x1.2_3_4;
SELECT -0x1234;
SELECT -0x1_234;
SELECT -0x1_2_3_4;
SELECT -1 % -1;
SELECT -1 % -2;
select -1 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -1 as offset, -16 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -1 as offset, -16 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -1 as offset, 1 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -1 as offset, 1 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -1 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT -1 AS x, 2 AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
SELECT -1 DIV 0;
SELECT -1 DIV number FROM numbers(1, 10);
SELECT -1 IN (SELECT 1) SETTINGS transform_null_in = 1;
SELECT -1 IN (SELECT 1);
SELECT -1.34e+21;
SELECT -1.34e+2_1;
SELECT -1.34e-21;
SELECT -1.34e-2_1;
SELECT -1.34e21;
SELECT -1.34e2_1;
SELECT -1.3_4e+2_1;
SELECT -1.3_4e-2_1;
SELECT -1.3_4e2_1;
select -10 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -10 as offset, -7 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -10 as offset, -7 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -10 as offset, 10 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -10 as offset, 10 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -10 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -11 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -11 as offset, -6 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -11 as offset, -6 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -11 as offset, 11 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -11 as offset, 11 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -11 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -12 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -12 as offset, -5 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -12 as offset, -5 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -12 as offset, 12 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -12 as offset, 12 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -12 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT -12.34;
SELECT -1234;
select -13 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -13 as offset, -4 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -13 as offset, -4 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -13 as offset, 13 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -13 as offset, 13 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -13 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -14 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -14 as offset, -3 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -14 as offset, -3 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -14 as offset, 14 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -14 as offset, 14 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -14 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -15 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -15 as offset, -2 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -15 as offset, -2 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -15 as offset, 15 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -15 as offset, 15 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -15 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -16 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -16 as offset, -1 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -16 as offset, -1 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -16 as offset, 16 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -16 as offset, 16 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -16 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT -199 % toFloat64(200) as k, toTypeName(k);
SELECT -1::Int32;
SELECT -1_2.34;
SELECT -1_2.3_4;
SELECT -1_2_3_4;
select -2 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -2 as offset, -15 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -2 as offset, -15 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -2 as offset, 2 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -2 as offset, 2 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -2 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT -2487, globalNullIn(toIntervalMinute(-88074), 'qEkek..'), [-27.537293];
select -3 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -3 as offset, -14 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -3 as offset, -14 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -3 as offset, 3 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -3 as offset, 3 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -3 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT -34e+21;
SELECT -34e+2_1;
SELECT -34e-21;
SELECT -34e-2_1;
SELECT -34e21;
SELECT -34e2_1;
select -36-number as offset, 8 as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
SELECT -3_4e+2_1;
SELECT -3_4e-2_1;
SELECT -3_4e2_1;
select -4 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -4 as offset, -13 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -4 as offset, -13 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -4 as offset, 4 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -4 as offset, 4 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -4 as offset, number as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
select -4 as offset, number as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
select -4 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -41 as offset, 41 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -41 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -41 as offset, -40 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -44 as offset, -36 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -44 as offset, number + 40 as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
select -44 as offset, number as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
select -44-number as offset, 8 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
select -49 as offset, 49 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -49 as offset, -48 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -49 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -5 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -5 as offset, -12 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -5 as offset, -12 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -5 as offset, 5 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -5 as offset, 5 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -5 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -52 as offset, -44 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -52 as offset, number + 48 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
select -52 as offset, number as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
select -6 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -6 as offset, -11 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -6 as offset, -11 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -6 as offset, 6 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -6 as offset, 6 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -6 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -7 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -7 as offset, -10 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -7 as offset, -10 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -7 as offset, 7 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -7 as offset, 7 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -7 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -8 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -8 as offset, -9 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -8 as offset, -9 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -8 as offset, 8 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -8 as offset, 8 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -8 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -9 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -9 as offset, -8 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -9 as offset, -8 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -9 as offset, 9 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -9 as offset, 9 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select -9 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select -_1;
SELECT -a, sum(c), avg(d) FROM pk_order GROUP BY -a ORDER BY -a;
SELECT -inf as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=0;
SELECT -inf as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=1;
SELECT -inf;
SELECT -Inf;
SELECT -INF;
select -interval 23 hour;
SELECT -materialize((1, 2, 3));
SELECT -nan = toFloat32(0.0), -nan != toFloat32(0.0), -nan < toFloat32(0.0), -nan > toFloat32(0.0), -nan <= toFloat32(0.0), -nan >= toFloat32(0.0);
SELECT -nan = toFloat64(0.0), -nan != toFloat64(0.0), -nan < toFloat64(0.0), -nan > toFloat64(0.0), -nan <= toFloat64(0.0), -nan >= toFloat64(0.0);
SELECT -nan = toInt16(0), -nan != toInt16(0), -nan < toInt16(0), -nan > toInt16(0), -nan <= toInt16(0), -nan >= toInt16(0);
SELECT -nan = toInt32(0), -nan != toInt32(0), -nan < toInt32(0), -nan > toInt32(0), -nan <= toInt32(0), -nan >= toInt32(0);
SELECT -nan = toInt64(0), -nan != toInt64(0), -nan < toInt64(0), -nan > toInt64(0), -nan <= toInt64(0), -nan >= toInt64(0);
SELECT -nan = toInt8(0), -nan != toInt8(0), -nan < toInt8(0), -nan > toInt8(0), -nan <= toInt8(0), -nan >= toInt8(0);
SELECT -nan = toUInt16(0), -nan != toUInt16(0), -nan < toUInt16(0), -nan > toUInt16(0), -nan <= toUInt16(0), -nan >= toUInt16(0);
SELECT -nan = toUInt32(0), -nan != toUInt32(0), -nan < toUInt32(0), -nan > toUInt32(0), -nan <= toUInt32(0), -nan >= toUInt32(0);
SELECT -nan = toUInt64(0), -nan != toUInt64(0), -nan < toUInt64(0), -nan > toUInt64(0), -nan <= toUInt64(0), -nan >= toUInt64(0);
SELECT -nan = toUInt8(0), -nan != toUInt8(0), -nan < toUInt8(0), -nan > toUInt8(0), -nan <= toUInt8(0), -nan >= toUInt8(0);
SELECT -number % -9223372036854775808 FROM system.numbers;
select -number % 2 as i, toDecimal32(number % 20, 3) as j from numbers(600) order by i, j;
select -number as offset, -16+number as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(16);
select -number as offset, -16+number as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(16);
select -number as offset, number as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(16);
select -number as offset, number as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(16);
SELECT -number IN (1, 2, 3, -5.0, -2.0) FROM system.numbers LIMIT 10;
SELECT -number y, toInt128(number) + y, toInt256(number) + y, toUInt256(number) + y FROM numbers_mt(10) ORDER BY number;
SELECT -tuple(1);
SELECT -tuple(NULL, * * 2, *) FROM numbers(2);
SELECT /* # hello */ 1;
select /* test=01531, enable_global_with_statement=0 */ 2;
select /* test=01531, enable_global_with_statement=1 */ 2;
SELECT /*/**/*/ 1;
SELECT /*a/*b*/c*/ 1;
SELECT /*ab/*cd*/ef*/ 1;
select 0 != multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), ['.*goo.*', '.*yan.*']) from system.numbers limit 10;
select 0 != multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), materialize(['.*goo.*', '.*yan.*'])) from system.numbers limit 10;
SELECT 0 % 255;
SELECT 0 < ans[1] and ans[1] < 0.15 and 0.95 < ans[2] and ans[2] < 1.0 and 0 < ans[3] and ans[3] < 0.05 FROM (SELECT stochasticLinearRegression(0.000001, 0.01, 100, 'SGD')(number, rand() % 100, number) AS ans FROM numbers(1000));
SELECT 0 = '';
select 0 = isValidUTF8('123456789012345\xc2') from system.numbers limit 10;
select 0 = isValidUTF8('123456789012345\xed') from system.numbers limit 10;
select 0 = isValidUTF8('123456789012345\xed123456789012345\xed') from system.numbers limit 10;
select 0 = isValidUTF8('123456789012345\xf1') from system.numbers limit 10;
select 0 = isValidUTF8('12345678901234\xed') from system.numbers limit 10;
select 0 = isValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF0\x80\x80\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1') from system.numbers limit 10;
select 0 = isValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80\xC2\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\x00\x00\x00\x00\x00\xC2\x80\x00\x00\x00\xE1\x80\x80\x00\x00\xC2\xC2\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00') from system.numbers limit 10;
select 0 = isValidUTF8('\x00\x00\x00\x00\x00\xC2\xC2\x80\x00\x00\xE1\x80\x80\x00\x00\x00') from system.numbers limit 10;
select 0 = isValidUTF8('\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\xa0\xa1') from system.numbers limit 10;
select 0 = isValidUTF8('\xBF') from system.numbers limit 10;
select 0 = isValidUTF8('\xC0\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\xc0\x9f') from system.numbers limit 10;
select 0 = isValidUTF8('\xC1\x00') from system.numbers limit 10;
select 0 = isValidUTF8('\xC2\x7F') from system.numbers limit 10;
select 0 = isValidUTF8('\xc3\x28') from system.numbers limit 10;
select 0 = isValidUTF8('\xDF\xC0') from system.numbers limit 10;
select 0 = isValidUTF8('\xE0\x9F\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\xE0\xC2\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\xe2\x28\xa1') from system.numbers limit 10;
select 0 = isValidUTF8('\xe2\x82\x28') from system.numbers limit 10;
select 0 = isValidUTF8('\xED\x7F\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\xED\xA0\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\xed\xa0\x81') from system.numbers limit 10;
select 0 = isValidUTF8('\xEF\x80\x00') from system.numbers limit 10;
select 0 = isValidUTF8('\xf0\x28\x8c\x28') from system.numbers limit 10;
select 0 = isValidUTF8('\xf0\x28\x8c\xbc') from system.numbers limit 10;
select 0 = isValidUTF8('\xF0\x8F\x80\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\xf0\x90\x28\xbc') from system.numbers limit 10;
select 0 = isValidUTF8('\xF0\xEE\x80\x80') from system.numbers limit 10;
select 0 = isValidUTF8('\xF2\x90\x91\x7F') from system.numbers limit 10;
select 0 = isValidUTF8('\xF4\x00\xBF\xBF') from system.numbers limit 10;
select 0 = isValidUTF8('\xF4\x90\x88\xAA') from system.numbers limit 10;
select 0 = isValidUTF8('\xf5\xff\xff\xff') from system.numbers limit 10;
select 0 = isValidUTF8('\xf8\x90\x80\x80\x80') from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('123456789012345\xc2', 16)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('123456789012345\xed', 16)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('123456789012345\xf1', 16)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF0\x80\x80\x80', 35)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1', 32)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80', 32)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80\x80', 33)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80\xC2\x80', 34)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\x00\x00\x00\x00\x00\xC2\x80\x00\x00\x00\xE1\x80\x80\x00\x00\xC2\xC2\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', 32)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\x00\x00\x00\x00\x00\xC2\xC2\x80\x00\x00\xE1\x80\x80\x00\x00\x00', 16)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\x80', 1)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xa0\xa1', 2)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xBF', 1)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xC0\x80', 2)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xc0\x9f', 2)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xC1\x00', 2)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xC2\x7F', 2)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xc3\x28', 2)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xDF\xC0', 2)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xE0\x9F\x80', 3)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xE0\xC2\x80', 3)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xe2\x28\xa1', 3)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xe2\x82\x28', 3)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xED\x7F\x80', 3)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xED\xA0\x80', 3)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xed\xa0\x81', 3)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xEF\x80\x00', 3)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xf0\x28\x8c\x28', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xf0\x28\x8c\xbc', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xF0\x8F\x80\x80', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xf0\x90\x28\xbc', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xF0\xEE\x80\x80', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xF2\x90\x91\x7F', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xF4\x00\xBF\xBF', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xF4\x90\x88\xAA', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xf5\xff\xff\xff', 4)) from system.numbers limit 10;
select 0 = isValidUTF8(toFixedString('\xf8\x90\x80\x80\x80', 5)) from system.numbers limit 10;
select 0 = multiMatchAny(materialize(''), ['some string']);
select 0 = multiMatchAny(materialize(''), materialize(['some string']));
select 0 = multiMatchAny(materialize('aaaa'), ['.*aa.*aaa.*', 'aaaaaa{2}', '\(aa\){3}']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('aaaa'), materialize(['.*aa.*aaa.*', 'aaaaaa{2}', '\(aa\){3}'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['abcd']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['abcde']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['abcdef']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['abcdefg']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['bcde']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['bcdef']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['bcdefg']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['bcdefgh']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['d']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['d']);
select 0 = multiMatchAny(materialize('abc'), ['de']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['de']);
select 0 = multiMatchAny(materialize('abc'), ['def']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['def']);
select 0 = multiMatchAny(materialize('abc'), ['defg']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['defg']);
select 0 = multiMatchAny(materialize('abc'), ['defgh']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), ['defgh']);
select 0 = multiMatchAny(materialize('abc'), []::Array(String)) from system.numbers limit 5;
select 0 = multiMatchAny(materialize('abc'), materialize(['abcd'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['abcde'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['abcdef'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['abcdefg'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['bcde'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['bcdef'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['bcdefg'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['bcdefgh'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['d'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['d']));
select 0 = multiMatchAny(materialize('abc'), materialize(['de'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['de']));
select 0 = multiMatchAny(materialize('abc'), materialize(['def'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['def']));
select 0 = multiMatchAny(materialize('abc'), materialize(['defg'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['defg']));
select 0 = multiMatchAny(materialize('abc'), materialize(['defgh'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abc'), materialize(['defgh']));
select 0 = multiMatchAny(materialize('abc'), materialize([]::Array(String))) from system.numbers limit 5;
select 0 = multiMatchAny(materialize('abcd'), ['cde']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcd'), ['cdef']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcd'), ['cdefg']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcd'), ['cdefgh']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcd'), materialize(['cde'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcd'), materialize(['cdef'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcd'), materialize(['cdefg'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcd'), materialize(['cdefgh'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcdef'), ['a......']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('abcdef'), materialize(['a......'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('mpnsguhwsitzvuleiwebwjfitmsg'), ['wbirxqoabpblrnvvmjizj', 'cfcxhuvrexyzyjsh', 'oldhtubemyuqlqbwvwwkwin', 'bumoozxdkjglzu', 'intxlfohlxmajjomw', 'dxkeghohv', 'arsvmwwkjeopnlwnan', 'ouugllgowpqtaxslcopkytbfhifaxbgt', 'hkedmjlbcrzvryaopjqdjjc', 'tbqkljywstuahzh', 'o', 'wowoclosyfcuwotmvjygzuzhrery', 'vpefjiffkhlggntcu', 'ytdixvasrorhripzfhjdmlhqksmctyycwp']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('mpnsguhwsitzvuleiwebwjfitmsg'), materialize(['wbirxqoabpblrnvvmjizj', 'cfcxhuvrexyzyjsh', 'oldhtubemyuqlqbwvwwkwin', 'bumoozxdkjglzu', 'intxlfohlxmajjomw', 'dxkeghohv', 'arsvmwwkjeopnlwnan', 'ouugllgowpqtaxslcopkytbfhifaxbgt', 'hkedmjlbcrzvryaopjqdjjc', 'tbqkljywstuahzh', 'o', 'wowoclosyfcuwotmvjygzuzhrery', 'vpefjiffkhlggntcu', 'ytdixvasrorhripzfhjdmlhqksmctyycwp'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('omgghgnzjmecpzqmtcvw'), ['fjhlzbszodmzavzg', 'gfofrnwrxprkfiokv', 'jmjiiqpgznlmyrxwewzqzbe', 'pkyrsqkltlmxr', 'crqgkgqkkyujcyoc', 'endagbcxwqhueczuasykmajfsvtcmh', 'xytmxtrnkdysuwltqomehddp', 'etmdxyyfotfyifwvbykghijvwv', 'mwqtgrncyhkfhjdg', 'iuvymofrqpp', 'pgllsdanlhzqhkstwsmzzftp', 'disjylcceufxtjdvhy']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('omgghgnzjmecpzqmtcvw'), materialize(['fjhlzbszodmzavzg', 'gfofrnwrxprkfiokv', 'jmjiiqpgznlmyrxwewzqzbe', 'pkyrsqkltlmxr', 'crqgkgqkkyujcyoc', 'endagbcxwqhueczuasykmajfsvtcmh', 'xytmxtrnkdysuwltqomehddp', 'etmdxyyfotfyifwvbykghijvwv', 'mwqtgrncyhkfhjdg', 'iuvymofrqpp', 'pgllsdanlhzqhkstwsmzzftp', 'disjylcceufxtjdvhy'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('pqqnugshlczcuxhpjxjbcnro'), ['dpeedqy', 'rtsc', 'jdgla', 'qkgudqjiyzvlvsj', 'xmfxawhijgxxtydbd', 'ebgzazqthb', 'wyrjhvhwzhmpybnylirrn', 'iviqbyuclayqketooztwegtkgwnsezfl', 'bhvidy', 'hijctxxweboq', 't', 'osnzfbziidteiaifgaanm']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('pqqnugshlczcuxhpjxjbcnro'), materialize(['dpeedqy', 'rtsc', 'jdgla', 'qkgudqjiyzvlvsj', 'xmfxawhijgxxtydbd', 'ebgzazqthb', 'wyrjhvhwzhmpybnylirrn', 'iviqbyuclayqketooztwegtkgwnsezfl', 'bhvidy', 'hijctxxweboq', 't', 'osnzfbziidteiaifgaanm'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('uymwxzyjbfegbhgswiqhinf'), ['lizxzbzlwljkr', 'ukxygktlpzuyijcqeqktxenlaqi', 'onperabgbdiafsxwbvpjtyt', 'xfqgoqvhqph', 'aflmcwabtwgmajmmqelxwkaolyyhmdlc', 'yfz', 'meffuiaicvwed', 'hhzvgmifzamgftkifaeowayjrnnzw', 'nwewybtajv', 'ectiye', 'epjeiljegmqqjncubj', 'zsjgftqjrn', 'pssng', 'raqoarfhdoeujulvqmdo']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('uymwxzyjbfegbhgswiqhinf'), materialize(['lizxzbzlwljkr', 'ukxygktlpzuyijcqeqktxenlaqi', 'onperabgbdiafsxwbvpjtyt', 'xfqgoqvhqph', 'aflmcwabtwgmajmmqelxwkaolyyhmdlc', 'yfz', 'meffuiaicvwed', 'hhzvgmifzamgftkifaeowayjrnnzw', 'nwewybtajv', 'ectiye', 'epjeiljegmqqjncubj', 'zsjgftqjrn', 'pssng', 'raqoarfhdoeujulvqmdo'])) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('yasnpckniistxcejowfijjsvkdajz'), ['slkpxhtsmrtvtm', 'crsbq', 'rdeshtxbfrlfwpsqojassxmvlfbzefldavmgme', 'ipetilcbpsfroefkjirquciwtxhrimbmwnlyv', 'knjpwkmdwbvdbapuyqbtsw', 'horueidziztxovqhsicnklmharuxhtgrsr', 'ofohrgpz', 'oneqnwyevbaqsonrcpmxcynflojmsnix', 'shg', 'nglqzczevgevwawdfperpeytuodjlf']) from system.numbers limit 10;
select 0 = multiMatchAny(materialize('yasnpckniistxcejowfijjsvkdajz'), materialize(['slkpxhtsmrtvtm', 'crsbq', 'rdeshtxbfrlfwpsqojassxmvlfbzefldavmgme', 'ipetilcbpsfroefkjirquciwtxhrimbmwnlyv', 'knjpwkmdwbvdbapuyqbtsw', 'horueidziztxovqhsicnklmharuxhtgrsr', 'ofohrgpz', 'oneqnwyevbaqsonrcpmxcynflojmsnix', 'shg', 'nglqzczevgevwawdfperpeytuodjlf'])) from system.numbers limit 10;
select 0 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), []::Array(String)) from system.numbers limit 5;
select 0 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), materialize([]::Array(String))) from system.numbers limit 5;
select 0 = multiSearchAny('\0', CAST([], 'Array(String)'));
select 0 = multiSearchAny(materialize('abc'), ['abcd']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['abcd']);
select 0 = multiSearchAny(materialize('abc'), ['abcde']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['abcde']);
select 0 = multiSearchAny(materialize('abc'), ['abcdef']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['abcdef']);
select 0 = multiSearchAny(materialize('abc'), ['abcdefg']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['abcdefg']);
select 0 = multiSearchAny(materialize('abc'), ['bcde']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['bcde']);
select 0 = multiSearchAny(materialize('abc'), ['bcdef']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['bcdef']);
select 0 = multiSearchAny(materialize('abc'), ['bcdefg']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['bcdefg']);
select 0 = multiSearchAny(materialize('abc'), ['bcdefgh']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['bcdefgh']);
select 0 = multiSearchAny(materialize('abc'), ['d']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['d']);
select 0 = multiSearchAny(materialize('abc'), ['de']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['de']);
select 0 = multiSearchAny(materialize('abc'), ['def']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['def']);
select 0 = multiSearchAny(materialize('abc'), ['defg']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['defg']);
select 0 = multiSearchAny(materialize('abc'), ['defgh']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abc'), ['defgh']);
select 0 = multiSearchAny(materialize('abcd'), ['cde']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abcd'), ['cde']);
select 0 = multiSearchAny(materialize('abcd'), ['cdef']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abcd'), ['cdef']);
select 0 = multiSearchAny(materialize('abcd'), ['cdefg']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abcd'), ['cdefg']);
select 0 = multiSearchAny(materialize('abcd'), ['cdefgh']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('abcd'), ['cdefgh']);
select 0 = multiSearchAny(materialize('Hello World'), materialize(['Hallo', 'Welt']));
select 0 = multiSearchAny(materialize('mpnsguhwsitzvuleiwebwjfitmsg'), ['wbirxqoabpblrnvvmjizj', 'cfcxhuvrexyzyjsh', 'oldhtubemyuqlqbwvwwkwin', 'bumoozxdkjglzu', 'intxlfohlxmajjomw', 'dxkeghohv', 'arsvmwwkjeopnlwnan', 'ouugllgowpqtaxslcopkytbfhifaxbgt', 'hkedmjlbcrzvryaopjqdjjc', 'tbqkljywstuahzh', 'o', 'wowoclosyfcuwotmvjygzuzhrery', 'vpefjiffkhlggntcu', 'ytdixvasrorhripzfhjdmlhqksmctyycwp']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('omgghgnzjmecpzqmtcvw'), ['fjhlzbszodmzavzg', 'gfofrnwrxprkfiokv', 'jmjiiqpgznlmyrxwewzqzbe', 'pkyrsqkltlmxr', 'crqgkgqkkyujcyoc', 'endagbcxwqhueczuasykmajfsvtcmh', 'xytmxtrnkdysuwltqomehddp', 'etmdxyyfotfyifwvbykghijvwv', 'mwqtgrncyhkfhjdg', 'iuvymofrqpp', 'pgllsdanlhzqhkstwsmzzftp', 'disjylcceufxtjdvhy']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('pqqnugshlczcuxhpjxjbcnro'), ['dpeedqy', 'rtsc', 'jdgla', 'qkgudqjiyzvlvsj', 'xmfxawhijgxxtydbd', 'ebgzazqthb', 'wyrjhvhwzhmpybnylirrn', 'iviqbyuclayqketooztwegtkgwnsezfl', 'bhvidy', 'hijctxxweboq', 't', 'osnzfbziidteiaifgaanm']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('uymwxzyjbfegbhgswiqhinf'), ['lizxzbzlwljkr', 'ukxygktlpzuyijcqeqktxenlaqi', 'onperabgbdiafsxwbvpjtyt', 'xfqgoqvhqph', 'aflmcwabtwgmajmmqelxwkaolyyhmdlc', 'yfz', 'meffuiaicvwed', 'hhzvgmifzamgftkifaeowayjrnnzw', 'nwewybtajv', 'ectiye', 'epjeiljegmqqjncubj', 'zsjgftqjrn', 'pssng', 'raqoarfhdoeujulvqmdo']) from system.numbers limit 10;
select 0 = multiSearchAny(materialize('yasnpckniistxcejowfijjsvkdajz'), ['slkpxhtsmrtvtm', 'crsbq', 'rdeshtxbfrlfwpsqojassxmvlfbzefldavmgme', 'ipetilcbpsfroefkjirquciwtxhrimbmwnlyv', 'knjpwkmdwbvdbapuyqbtsw', 'horueidziztxovqhsicnklmharuxhtgrsr', 'ofohrgpz', 'oneqnwyevbaqsonrcpmxcynflojmsnix', 'shg', 'nglqzczevgevwawdfperpeytuodjlf']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitive('\0', CAST([], 'Array(String)'));
select 0 = multiSearchAnyCaseInsensitive(materialize('CdnrzjzmwtMMPLjgcXWsbtrBs'), ['RfgIUeerlPIozKpRQR', 'QRoYzjZlgngJxX', 'mEbqlBIzTQH', 'UmrfJxKyTllktPfyHA', 'ukoZeOPA', 'pbbRaUcJijcxt', 'Rg', 'lSBG', 'HvuwuiqVy', 'Fo', 'aGpUVjaFCrOwFCvjc', 'zKhfkgymcWmXdsSrqAHBnxJhvcpplgUecg', 'ioTdwUnrJBGUEESnxKuaRM', 'QciYRCjRDUxPkafN']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitive(materialize('cYnMXJMJCdibMXoUQHEw'), ['BFrGFZRgzwHGkUVbBiZMe', 'piORdVIWHMBsBDeJRLbGZAHGBrzNg', 'bmDePbTPnFQiCFfBJUxAEYNSbgrOoM', 'gtzeAGwqjFrasTQUgAscfcangexE', 'okLG', 'l', 'EBkkGYNZZURgFgJPlb', 'HDQVngp', 'vEHhtBqWhZHCOrqEKO', 'fgqdFc', 'COig', 'VftTpSXAmTmvnShHJqJTdEFcyKPUN', 'WDI', 'knBm']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitive(materialize('LsTqxiGRdvQClVNBCGMOUHOAmOqPEC'), ['NdFuUQEUWaxS', 'fdOHzUzineBDnWJJvhPNZgB', 'rYAWGIBPxOLrjuquqGjLLoIHrHqSFmjh', 'IVgYBJARY', 'ToivVgUJAxRJoCIFo', 'yQXGrRjhIqFtC', 'PNYdEPsWVqjZOhanGNAq', 'nrQIDDOfETr', 'usJcPtiHKhgKtYO', 'vPKqumGhPbmAJGAoiyZHJvNBd', 'eXINlP', 'WQeESQJcJJV']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitive(materialize('lTvINMXVojkokvNBXPZOm'), ['ZQOJMEJfrjm', 'vIpmXnGlmWze', 'wbdDKcjrrIzBHypzJU', 'omotHOYbZjWfyVNeNtyOsfXPALJG', 'SXxu', 'yZPDFsZq', 'OVYVWUjQDSQTKRgKoHSovXbROLRQ', 'RnXWZfZwHipewOJimTeRoNRYIdcZGzv', 'sizoEJibbfzwqFb', 'vgFmePQYlajiqSyBpvaKdmMYZohM', 'ENsFoFCxDQofsBSkLZRtOcJNU', 'nG']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitive(materialize('miTQkQcxbKMwGOyzzRJpfXLyGx'), ['yMwgQQJkeshUugm', 'wGVe', 'XncShWqjp', 'KWjGQCOsfMKWRcgCfebkXZwZ', 'SFWbU', 'WdFDMIcfWeApTteNfcDsHIjEB', 'XRuUJznPOCQbK', 'tibBMGZHiIKVAKuUAIwuRAAfG', 'VVCqVGGObZLQsuqUjrXrsBSQJKChGpZxb', 'bWYAOLuwMcwWYeECkpVYLGeWHRrIp', 'SLzCgfkRWmZQQcQzP', 'VvfOhFBhfiVezUSPdIbr']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitive(materialize('RIDPJWYYSGBFWyXikHofbTcZAnj'), ['aFxQyVe', 'OcnZBgPsA', 'iBQaH', 'oesSvsWtgQprSSIPaDHdW', 'EfytiMfW', 'qHiFjeUvQRm', 'LfQkfmhTMUfoTOmGJUnJpevIoPpfpzMuKKjv', 'scYbCYNzJhEMMg', 'yTLwClSbqklywqDiSKmEdyfU', 'HYlGFMM', 'TMQhjOMTImXbCv', 'AVtzpxurFkmpVkddQANedlyVlQsCXWcRjEr']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitive(materialize('XKCeCpxYeaYOWzIDcreyPWJWdrck'), ['tTRLUYJTkSWOabLJlIBshARIkwVRKemt', 'jQgn', 'wdNRsKIVunGlvwqkwn', 'BsbKGBJlkWQDBwqqeIjENvtkQue', 'yLuUru', 'zoLGzThznNmsitmJFIjQ', 'WFKnfdrnoxOWcXBqxkvqrFbahQx', 'QHbgRXcfuESPcMkwGJuDN', 'NPqfqLS', 'bi', 'HnccYFPObXjeGYtrmAEHDZQiXTvbNcOiesqRPS', 'KobVCJewfUsjBXDfgSnPxzeJhz', 'AqYNUPOYDZjwXx', 'xbZydBGZFFYFsFHwm']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitiveUTF8('\0', CAST([], 'Array(String)'));
select 0 = multiSearchAnyCaseInsensitiveUTF8(materialize('кЧбоЗХфвБХхусмШгНаШШаГзш'), ['Ури', 'лММшткфНзцЦСВАдЩПМШфйОМшефигЖлуЕП', 'сМтЕдчЦафйСТЖЗфлРЙПЦдипжШскцВКХЦЖ', 'АУкжИФцшЛБЦЧм', 'ФПлнАаДСХзфоХПСБоСгМТОкЗЧйЛ', 'ЦшСГЛрцДмнНнХщивППттжв', 'жзЕгнциФ', 'МШЛсЙЧтЛАГжд', 'уИиЕжцоРНх', 'ЧбйГуХтшОНкрЧИеПД', 'ЦдЩЕкКвРЦжщЧциекЗРйхрббЖуЧ', 'иВжен', 'ГчОржвБГсжштРЕБ', 'ШоЖдуЙфчсЧегумщс', 'йчЙГ', 'РДедвТ']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitiveUTF8(materialize('нщМаНдЧЛмиВврПокПШмКБичкхвРГ'), ['АЙбаЙйШЛЙРЦмЗчВеИЕощсЦ', 'щЦФдВжчТСЩВКЦСпачЙсумщАтЩувеиниХПДоМС', 'иоАкДРршуойиЩищпрфВаЦПж', 'еЖПйШкГжЧтоГЙМВ', 'ЩПалиБ', 'ТвВлт', 'оХжйЛФеКчхЗВвЕ', 'ерцЩ', 'ШХЖОАрзеп', 'ККМрфктКГишпГЩхаллхДиВИИЛЗДеКйХмжШ']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitiveUTF8(materialize('РлчгхзуВШежХЦуМмнВЙщдцО'), ['ХшвМЦДШпЩОСшЦПдруа', 'ФИЦчУвРкпнПшИЕСЧАувиХд', 'фшвбЦОИЗфпИУМщзОЧЗфВцЙПнмтаТгг', 'мЖЩйавтнМСЛ', 'НВбШ', 'ааФДДрВвЙТдПд', 'ЗнчЧущшхЙС', 'рзуСзнеДфЩПуХЙЕл', 'ШСЩсАгдЦбНиШмшКрКс', 'ггнЕфБГзрОнАГЙзЧеИП', 'вшТИпЧдЖРкМНшзпиоиЩчзДмлШКТдпЦчж', 'фЦТЙц', 'ОтУшмбптТКЗеПлЧцЛОкЩБпккфгИн', 'ЩпвхпЗлШБЦ']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitiveUTF8(materialize('фйадзЧмщЖШйЖЛшцГигцШ'), ['НТХеМРшДНУЗгадцуЧИ', 'жпСИКЩМлНлиоктлЦИвНЛ', 'КхшКРчХ', 'кгТЗаШИарХЧЛЖмСЖм', 'ОмиЛй', 'жЕРбФЩНуЕКЕАВоБМОнАЕнКщшзйПкОЗ', 'гиЗдадкбжХМЗслшВИШай', 'двтЗйЙНгПуТзД', 'ТНкмаВЕФ', 'Шеа']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitiveUTF8(materialize('ШкКРаоПеЗалРсТОиовРжгЙЧМКЛШ'), ['рчсажЕК', 'пЧТМфУрУММждЛйжзУрбкмам', 'бАШеНмВШзлзтушШШсхОсцрчЙПКИБнКжфЧЕХ', 'ЖМЛшбсУМкшфзочщАЖцМбмШСбВб', 'гтРХсщхАИОащчлИЧуйиСпСДФПбРл', 'ЧуОРУаоойГбУппМйЩФДКПВ', 'уУпугйРЕетвцБес', 'ЙЖЦТбСЖж', 'ИБКЛ', 'ТДтвОШСХГКУИПСмФМтНМзвбЦрднлхвДРсРФ', 'вВгНЙХИрвйЕЗпчРГЩ', 'ПчмТуивШб']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitiveUTF8(materialize('ШНвпкфЗвгДжУЙГлрТШаШЛгНЗг'), ['нЗБенВшщрЛАрблцщшБАдзччммсцКЖ', 'бЗЩхзЗЗбФЕйМоазщугБбмМ', 'рЙсВжВсхдйлЩгБтХлчсщФ', 'пиБшКРнбВБгЕуЖ', 'жПшнхпШзУБрУЛРНЩДиаГШщКдЕвшоуПС', 'чЕщкЗмДуузуСдддзгКлИнгРмЙщВКТчхзЗЛ', 'кЖУЗЖС', 'щххОВМшуажвН', 'фбцЖМ', 'ДШитЧЩДсйНбдШеООУдг', 'ЛХПфБВХЦТИаФПЕвгкпкпщлхмЙхГбц', 'чЦсщЗщрМ']) from system.numbers limit 10;
select 0 = multiSearchAnyCaseInsensitiveUTF8(materialize('шоКнВЕрОЖЛпУйХзСугКПВжиРсЙпо'), ['игВербфНахчжЙггч', 'лтимрдфЕг', 'нкеаЖАшНБвйСдКИВГДшАГиАТнФШ', 'МжсТЙМГОииУКВГнцткДнцсоАд', 'ХтпгУСдБдцАЖЛАННоЕцзЕшштккз', 'ншУЦгФСЖшмс', 'нЩшМ', 'гоЖхМшаЕмаДРЧБЛИТпмЗОоД', 'фГКШхчФбЕГЛйкчПИЙххуМГНШзхг', 'ХпХщПЦАзщтг']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8('\0', CAST([], 'Array(String)'));
select 0 = multiSearchAnyUTF8(materialize('апрчвзфжмбутццрйщкар'), ['индхжз', 'жилцовщччгстби', 'ажс', 'фктйамйтаг', 'шммнзачггоннксцушпчн', 'чдлйтзтоцдгзццисц', 'пнбтувщцдсчнщмсакрлгфмгрй', 'овмсйнщзушвщгуитщрхвйодф', 'бзлштезвлаижхбмигйзалчолшеунлц', 'фкжпеввгшгащз', 'тменбщжмсхщсогттршгек', 'чап', 'х', 'шкомегурлнйпшбщглав']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8(materialize('вхкшгфпфмнщаохтмизпврйопцуйзмк'), ['дтчбкхащаткифружжейабфйкйтрскбощиеч', 'фтоуабхмдааиснрбраттклмйонлфна', 'цадзиднщймшкщолттпгщбх', 'кштбчжтждпкцнтщвмухнлби', 'микудпдпумцдцгфахгб', 'ирик', 'емлжухвмк', 'чгуросфйдцшигцхжрухжпшдкфгдклмдцнмодкп', 'ттбнллквдувтфжвчттжщажзчлнбждчщцонцлуж', 'елцофйамкхзегхклйгглаувфтуувее', 'двкзчсифвтекб', 'шсус']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8(materialize('змейдмоодкшуищвеишчддуцпх'), ['здсщесгдкзмчбжчщчиоо', 'чфззцмудщхтфрмсзрвшйщ', 'рлунбнзрфубуббдочтвлзмпгскузохк', 'ктзлебцам', 'вчспмж', 'нгкк', 'гпзйа', 'щпйкччнабакцтлапсбваихншхфридб', 'афсузжнайхфи', 'йрздеучфдбсвпжохрз', 'ошбечпзлг', 'полшхидфр']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8(materialize('йхцглкцвзтшщочпзмнчтуеао'), ['йечдай', 'дащжщзлосмй', 'афуккгугаазшрчпцнхщцтмлфф', 'чфтфскрфйщк', 'жлччкцшнфижтехппафхвщфс', 'бзжчв', 'щкщймнкщлпедидсу', 'оцбажцзшзйпптгщтфекртдпдзшодвойвох', 'йжддбссерхичгнчлкидвгбдзуфембрц', 'ктщвшкрщмдшчогхфхусдотсщтцхтищ', 'пшстккамнбнардпзчлшечхундргтоегцзр', 'нсрнфузгжррчнжначучиелебрб', 'шгжмквршжтккднгаткзтпвкгзхшйр', 'змквцефтулхфохбнхбакдичудфмйчп']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8(materialize('уузшсржоцчтсачтедебозцвчвс'), ['бомбсзхйхкх', 'отвгстзихфойукарацуздшгбщеховпзкй', 'мфнев', 'вйийшшггилцохнзбхрлхи', 'втинбтпсщрбевзуокб', 'оиойвулхкзлифкзиххт', 'зацччзвибшицщрзиптвицзхщхкбйгшфи', 'кнузршшднмвтощрцвтрулхцх', 'рчбкагчкпзжвтбажиабиркдсройцл', 'щргчкзожийтпдзфч', 'щбошгщзсжтнжцтлкщитеееигзцлцсмч', 'сцкк']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8(materialize('фбуоойпцщишщлбхчрсллзвг'), ['уччхщ', 'вщчсарфмйшгшпйфгмжугмщжкцщгйжзфл', 'кклл', 'лпнжирпсиуо', 'нчипзфщхнтштхйхщрпзитко', 'вйпсдергвцзсцсгмхпбз', 'чфщдфоилгцевпц', 'чааиае', 'чгингршжтчпу', 'щетбнгутшйсгмвмучдхстнбрптничихб']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8(materialize('хтиелйтарквурйлжпеегфш'), ['зпмйвзуднцпвжкбмйрпушдуавднвцх', 'фбссчгчвжакуагдвижйтщтшоабпхабжш', 'щхшибаскрщбшрндххщт', 'сммрсцзмптисвим', 'цсргщфж', 'восжбшйштезвлкммвдхд', 'вбсапкефецщжквплуо', 'даеуфчвеби', 'бтптлжпин', 'шчддтнсйкщйщ', 'фжхщецпзчбйкц', 'цсвфпздхрщхцбуцвтег']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8(materialize('шщпееасбтхогвгвцниуевисгшгбч'), ['гпа', 'стимсркзебхрвфпиемзчзу', 'нзгофухвекудблкадбшшусбеулрлмгфнйгиух', 'кфиашфобакщворувгвкчавфзшх', 'гфпгщгедкмтгрдодфпуйддхзчждихгрчтб', 'тцтжр', 'рцйна', 'йцбпбдрреаолг', 'житсфосшлтгсщдцидгсгфтвлз', 'жвтнжедцфцтхжчщч']) from system.numbers limit 10;
select 0 = multiSearchAnyUTF8(materialize('щчбслгзвйдйжрнщчвфшй'), ['пдашзбалйнзвузкдвймц', 'щхтшйоч', 'фднвфигозржаз', 'рйфопхкшщвщдвл', 'цдкйхтусожпешпджпатфуиткп', 'щпбчсслгщййлвскшц', 'жпснс', 'уиицуувешвмчмиеднлекшснчлйц', 'пххаедштхмчщчбч', 'ичтмжз', 'лсбкчу', 'бгфдвпзрл', 'йицц', 'цфйвфлнвопкмщк', 'бгщцвбелхефв', 'мймсвзаелхнжйчохомлизенфш', 'трйднхндшсщмпвщомашчнгхд', 'жфцнифлгдзйе', 'зспкшщщенбцжгл', 'рщтб']) from system.numbers limit 10;
select 0 = multiSearchFirstIndex('\0', CAST([], 'Array(String)'));
select 0 = multiSearchFirstIndex(materialize('cufztqffwjhtlkysekklpaywemm'), ['cpawuauqodogaitybtvplknjrsb', 'ynsocxfnxshzwnhlrfilynvz', 'ylrpytgcvtiumdckm', 'mvgrkueaslpgnjvvhzairgldtl', 'iliorsjypskmxfuuplfagktoycywb', 'drvwngp', 'zviuhcxaspwmqqz', 'qfgmrmhycskus', 'szj', 'rooivliiqufztcqlhrqyqvp', 'tufdmsmwue', 'cssowtldgwksbzlqyfereodcpuedighwd', 'odcjdffchhabtaxjvnr', 'o']) from system.numbers limit 10;
select 0 = multiSearchFirstIndex(materialize('Hello World'), materialize(['Hallo', 'Welt']));
select 0 = multiSearchFirstIndex(materialize('iepqqbvekaflprupsmnpoijrld'), ['kqomoeysekwcplpegdwcdoeh', 'mwdvr', 'aobviioktzwzmpilblbdwstndhimabfgct', 'vqustluciruiyfkoontehnwylnauwpol', 'utcqnitztcgr', 'ityszrqmlwzspnrwdcvdhtziob', 'hmll', 'ilfzvuxbkyppwejtp', 'euxdzqcqutnfeiivw', 'rbcjlmjniiznzaktsuawnfjzqjri', 'fzyxlzzretsshklrkwru', 'jrujmdevqqojloz']) from system.numbers limit 10;
select 0 = multiSearchFirstIndex(materialize('jtgvvkggpkqhbxptjgoy'), ['nplzawmacgtqfxsp', 'oosw', 'akw', 'hnsenqoqwiydiufozomkyirgjepeqw', 'fpafgahvfdxukzvskbuy', 'tqimmsqffiqfoni', 'rrxkjklmkdhxqwcpfyutqzxu', 'esfqeujcbqxwnvodkwwdbsyozptaf', 'rqnyguyz', 'fftl', 'ccfyavxtxrpi', 'wftpsblszgovfgf']) from system.numbers limit 10;
select 0 = multiSearchFirstIndex(materialize('kcwchxxyujbhrxkxgnomg'), ['jmvqipszutxfnhdfaxqwoxcz', 'nrgzkbsakdtdiiyphozjoauyughyvlz', 'qbszx', 'sllthykcnttqecpequommemygee', 'bvsbdiufrrrjxaxzxgbd', 'hdkpcmpdyjildw', 'frxkyukiywngfcxfzwkcun', 'dmvxf', 'esamivybor', 'eoggdynqwlnlxr']) from system.numbers limit 10;
select 0 = multiSearchFirstIndex(materialize('steccxkwnptybaddcuau'), ['qagxfznhjaxtyclxdsi', 'rtxwptfyzgthkwrx', 'rmcoxxs', 'vlubx', 'siecygstzivz', 'tksiagm', 'kq', 'dgsqrobxegmdbjkanb', 'lxokyvhveklvdakrxyiqokr', 'tgpmehwdrirpfjonqzhqshbo', 'cqmkargvsfjoxrguymtzsfwkg', 'avkmufhoywprjw', 'xzywtvlpoozmgkrcavevwebv', 'hfiuwslapamiceaouznxm', 'tmfjhqddafhhjbybfphlbwu', 'mrigvhmjvdpny']) from system.numbers limit 10;
select 0 = multiSearchFirstIndex(materialize('wmvuoeqphsycrvtxghrcozortmdnh'), ['hv', 'ugcmpebvlzgdtcmgkbgzyfel', 'qvmofayljsvybupvvnbhhibsz', 'zvlihxmyxlxwbffwjzjrfjgimmltftqqre', 'mwassqvxptav', 'jrumvqzkiaewngoufhrleakcfrsaxhpxyg', 'sxlxwhvkpavgfhxrxcbnqbstyrejtosxwe', 'psnlqakyfhcupryqatrmwqlswwjylpaiqammx', 'ivozojwldsgtnxpvsi', 'epyzjs', 'legi', 'sdqxxahfbddhacqrglgdcmlslraxfaahhfyodon']) from system.numbers limit 10;
select 0 = multiSearchFirstIndex(materialize('zggbeilrfpkleafjjldgyfgn'), ['rpypxkpgvljhqthneremvabcd', 'qchzlnsctuwkdxqcrjgihvtfxhqxfqsxm', 'vtozkivjyqcqetmqenuihq', 'fixcvjyzbzejmwdivjf', 'lydoolvnuuamwlnzbyuuwpqqjaxf', 'elkodwthxqpcybwezm', 'wpiju', 'wdzuuwumlqfvga', 'iokphkai', 'wkbwdstplhivjyk', 'wxfbhfturuqoymwklohawgwltptytc', 'jehprkzofqvurepbvuwdqj']) from system.numbers limit 10;
select 0 = multiSearchFirstIndex(materialize('zxmeusmehplcgbqabjof'), ['hqxgrw', 'fydjyrr', 'cocwtbazwjrswygttvrna', 'wpkvowuq', 'mwnzdxihrxihzhqtl', 'ljkjtmrfbonhqkioyzotyeegrw', 'ofxo', 'rjubwtpbweratrelqlrqotl', 'wvxkcil', 'qvolxxgqs', 'afqlhjnlvxowtnuuzywxuob', 'slwbmq']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitive('\0', CAST([], 'Array(String)'));
select 0 = multiSearchFirstIndexCaseInsensitive(materialize('AYMpbVsUQqAfoaMiJcYsulujYoSIx'), ['aXECumHNmAEefHPJy', 'hTosrERBdVCIilCYcMdHwaRh', 'PVDBpwrc', 'uFvQRPePvmzmocOauvEjqoxMhytzOwPSOCjmtm', 'kQqIlSCHDmWXCKN', 'ybAHGYDEDvvOJsF', 'WpkANi', 'cFGuzEcdahZtTdLFNBrRW', 'EBaybUFxO', 'mRlZUzHzMsMAgvtRtATEDLQvXZnZHw', 'uqxckjqpCBHiLgSPRz', 'Lv', 'AJcRfAvBmQVMOjaFfMfNHJt', 'FYsPM', 'pkKXTPgijOHFclqgVq', 'Ck']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitive(materialize('EUzxPFYxMsJaTDzAKRXgZIVSFXU'), ['TDKAgICICjzBKHRqgFAuPCSODemldGGd', 'LvMluSJTIlgL', 'srbRhQKjPIchsipVHsjxwhK', 'vdurVsYkUWiFQVaDOnoNIJEX', 'UzZsZqAUNjMvWJaTqSWMHpzlDhVOaLzHPZfV', 'XcnnPXXEJJv', 'JSwFBNnYzNbIRZdeMfYiAfxzWfnCQFqoTUjns', 'HBMeqdLkrhebQeYfPzfJKAZgtuWHl', 'cMfSOnWgJvGhFPjgZdMBncnqdX', 'orDafpQXkrADEikyLVTHYmbVxtD', 'Vz', 'bfYwQkUC', 'q', 'YqomKpmYpHGv']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitive(materialize('KhwhbOzWvobUwJcteCHguFCn'), ['LkDYrpvDfPL', 'CIaTaShobVIaWjdbsNsCMdZKlGdtWuJmn', 'zYcsxxFyfuGrPdTPgEvGbXoYy', 'vDIeYpJbLMGMuRkIrPkAnqDDkqXPzy', 'Ievib', 'CREiuEsErFgvGEkQzThHtYtPmcL', 'JjRWKyALtSkoGmRxh', 'JxPhpijkDOpncCKyDEyXvKNua', 'jo', 'mKpFscuBEABMAlQO', 'qiFTgJpcnUMRKzTEuKY', 'pXBtITxCPRaXijM', 'guYVLpIbu', 'tSKYIxv', 'oDnWaFAmsXGRdGvRPhbCIvFSFQNlSVYB', 'phdckINUiYL']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitive(materialize('kOzLaInSCOFHikwfkXaBfkyjdQ'), ['t', 'emHGfAiZSkZaVTSfplxRiPoDZUTT', 'YHnGJDTzxsboDsLPGHChMHwrHHICBIs', 'gbcbVHSlVeVDOeILWtSLkKfVVjG', 'fPaJjbnNthEwWZyg', 'qS', 'PCQxoLaSdQOjioMKPglmoWR', 'KLMNszm', 'TCErEFyxOvqnHs', 'dRbGzEJqvIGAcilZoHlXtZpjmLLZfsYueKqo', 'iKHmNSbGgaJYJEdMkbobXTdlFgAGEJMQ', 'mUGB']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitive(materialize('ZHcEinZEFtfmHBLuCHntUhbIgY'), ['GKElMPEtmkLl', 'mkrzzjSRfXThuCQHkbZxRbhcymzTxcn', 'PREwQjxBJkpkiyuYEvtMZNFELgbINWsgf', 'lFEGlPtaDJSyoXzwREiRfpzNpsaBYo', 'tmVTuLPhqhgnFNhHvqpmc', 'NtijVhVfAwpRsvkUTkhwxcHJ', 'O', 'FSweqlUXdDcrlT', 'uljEFtKVjIzAEUBUeKZXzCWmG', 'dBIsjfm', 'CNaZCAQdKGiRUDOGMtUvFigloLEUr', 'yWjizKZ', 'QqPVdyIFXcweHz', 'uPmgGWGjhzt']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitive(materialize('ZxTznPEbfoBfLElYOrRiHrDLMmTpIh'), ['bJhYwKLeeLvLmXwWvQHWFkDQp', 'dLyZmUicTZmUfjfsFjxxgOiMJn', 'UCYbbGcY', 'kpPiwfWHEuh', 'jviwmHeiTQGxlTKGVEnse', 'cVnEyLFjKXiLebXjjVxvVeNzPPhizhAWnfCFr', 'gkcoAlFFA', 'ahZFvTJLErKpnnqesNYueUzI', 'VIJXPlFhp', 'rxWeMpmRFMZYwHnUP', 'iFwXBONeEUkQTxczRgm', 'ZnbOGKnoWh', 'SokGzZpkdaMe', 'EfKstISJNTmwrJAsxJoAqAzmZgGCzVRoC', 'HTmHWsY', 'CpRDbhLIroWakVkTQujcAJgrHHxc']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8('\0', CAST([], 'Array(String)'));
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('жггкщцзщшамдбРЗжйТзвхшАпХСбе'), ['лВТвтлРБжиЛЦвРЦкАЦаНБгуОН', 'рШаавцжзМрзВЧДРСузб', 'оемрЗМгФБНмжп', 'ЛбмХбФЧШГЛХИуТСрфхп', 'ЖшТдтЧйчМР', 'ЧнИМбфУпмЙлШЗТрТИкКИЩОЧеМщПЩлдБ', 'ГвРдПжГдБаснилз', 'уТнТчТРЗИЛ', 'ИТЕВ', 'дИСЖпПнПСНОвсЩЩшНтХЧшВ', 'штабтлМнсчРЗтфсТЩублЕЧйцеЦТтХ', 'ХбхгУШвАзкшЖ']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('ИИКДМЛхРчнвЙЕкВЧелТйЛВТ'), ['АчшОЛтНЙуЦЛЙфАКУйуТЗМеЗщОХТМЗеТА', 'НЦУДбчфРТОпЛкОгВпоО', 'неДавнНРеАУфТтфАнДчтнУМЛПШнроАчжш', 'бГржВПЧлЛтСВТтаМЦШШ', 'БщГщРнБхЕЛоЛсмЙцВЕГ', 'цбАжЦРеу', 'ХсЦРаНиН', 'нббДдВЗРС', 'змОПпеЛЖзушлнДЛфчЗлцЙЛфЖрЛКг', 'фШиЖСУоаНПйИВшшаоуЙУА', 'ЛктХиШРП', 'МапщВйцХч', 'жмУТкуГбУ', 'сйпзДЩоНдШЕТбПзФтсрмАФГСз', 'ЛБУвйладЕижрКзШУАгНЩчЕмАа', 'мЧпФлМчРбШРблмтмПМоС']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('ипозйпхЛОЛТлСМХЩдМвМгШИвГиЛп'), ['ФСГзиГррБДНКГЛХбААФхИ', 'гегпАвхДЕ', 'ЦХжзщХИвхп', 'ЗЖ', 'ХОКцКзЩо', 'абИОрГПМТКшБ', 'кмХТмФихСЦсшУдхВбИШМНАНмпмХОЗйПЩч', 'еОжТСкфЕТУУжГ', 'НтщМЕПЧИКЙКйй', 'ежСикИвйЛж', 'ушЩФОтпБзЩЛЗЦЧЙиВгБЧоПХНгОуАДТЙж', 'фМЕРефнутпнцФРнрГЖ', 'хшДЧзнХпфорвЩжмГРЦуХГ', 'ЧЖн', 'вВзгОСхгНумм', 'ЗДоВлСжпфщСКсщХаолЛнЛЗбСхвЩвЩНоЩЩМ']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('ИпрУщйжббКВНИчйацпцоЛП'), ['цШСкЕвеГЕЗЦщруИБтЦсБГАу', 'Хнщта', 'БшА', 'СалШйР', 'ЩфДГРРчшБДММГЧоноЖСчдпВХшшгйН', 'бЕжПШЦддожнЧоЕишчшЕЙфСщиВПФМ', 'ТЗзГФх', 'Чфл', 'КнНкнЖЕкППварНрхдгЙкДешмСКИЛкеО', 'ЖИсЧПСФФМДиТШХЦфмЗУпфрУщСЛщсфмвШ', 'ллЙумпхчОсЦМщУ', 'ГМУНЦФшНУбРжоПвШШщлВФАтоРфИ', 'БХцжеНЗкжЗЗшЦзфгдЖОзЗЖщКМИШАтЦАп', 'мтСкЕнбХШнЛхХГР']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('МрЗтВФуЖРеЕШЧхПФбжжхчД'), ['щжОожЦндцШйТАй', 'йуРСЦУЗФУЦПвРфевСлфдРещЦтИтЩЩТг', 'ЕГЧдмХмРАлнЧ', 'йнкФизГСЗнуКбЙВЙчАТТрСхаЙШтсдгХ', 'ЧПрнРЖЙцХИщ', 'зЕ', 'СжВЩчГзБХбйТиклкдШШИееАлЧЩН', 'МШщГйБХжЙпйЕЗТзКмпе', 'НКбНщОМДзлдЧОс', 'НчзВХОпХХШМОХФумБгсрРЧИчВтгутВЩо']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('нсЩЙЕМмЧЛСйФцГВМиатГХш'), ['КсОПЧИкВсКшРхнкхБжду', 'мШмпТащжФ', 'ББЖнианЧЦпмрГЩГМаЛКжА', 'арИжзжфГТУДИРРРбцил', 'дфдмшМИщТиЗПруКфОнСЦ', 'Рцч', 'гмДгВДАтсщКЗлхвжЦУеФДАТГЙЦЧОЗвРш', 'чфХЩсДбУбВжАМшРлКРщв', 'нцБйсУ', 'фасДЕчвчДмбтЖХвоД', 'аБЧшЖшЖАКргОИшпШЧзТбтфйвкЕц', 'ЗжжсмкжЛд', 'щщлПзг', 'бП']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('риШМбгиПЖннНоЧргзГзеДпЛиНт'), ['икДкбйдройВУсвФзрПСусДнАШо', 'чуУеТкУВФхз', 'ЕГпйчехЗвЛлБблЧПДм', 'зеоЩЧожКЛбШЩдАрКБНйшКВШаЗгПш', 'виФКуЗОтгВмТкБ', 'цДрЙгЗРаЧКаМДдБЕЧзСРщВФзПВЧГвЩрАУшс', 'мБЗИУдчХХжТж', 'ФТНМмгЖилуЛйМ', 'ЗегЩЦнЦщцИк', 'оГОусхФсДЖДЩИЕХЗпсПЩХБТГЕп', 'АУКНзАДНкусВЧХвАж', 'КвКрбсВлНАоЗсфХОйЦхТ', 'вФдеХацЧБкрхМЖЗЧчКшпфВчс', 'йХшиОвХЗжТпДТбвУрпшЕ']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('упТУЖелФкЧЧУЦРжоБтХсжКщД'), ['щКшуОЖааЖйнЕбДИжМК', 'ЕкнШцХРВтНйШоНбЙйУоЧщУиРпШЧхмКЧжх', 'рвЩЗоЗхшЗвлизкСзебЩКМКжбша', 'ДииБНСШвцЦбаСсИжЕЗмхмВ', 'СЦоБЗПМтмшрУлрДТФГЖиувШЗууШзв', 'ЦЗБЕзВХЙбйВОмЗпхндЗ', 'ЗНизЧВШкГВтпсЖж', 'уШиБПЙЧтРаЕгИ', 'ЙшпПА', 'ЧоММаАйМСфбхуФкефФштгУА']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('цмйвГЖруДлдЦавхЖАлоЕхЗКд'), ['ХфБПМДВХЙ', 'саЗваАбднХбЦттмКсМбШбВМУйНКСЖжХЦНц', 'плиЩщШАцЖсхГ', 'ЗнУЕФЗВаНА', 'ЧДйСаЗГЕшойСжбсуЩуЩщбПР', 'ЧЕуЩкФБВвчмабШЦтЖбОрЗп', 'йХбМсрТАФм', 'РЖСЗвЦлНВПЧщГУцЖ', 'ГГлЩрОХКнШРТуДФ', 'шСабРжла', 'ЕчБвгаРЧифаЙщХПпГЦхчШ', 'дайшйцВНЩЧуцйдМХг', 'УнзНКЧххВрцЩМлАнЖСДОДцбИгЛЛР', 'сЛЗзПбиАгзК']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('чЕжАфАрБпКбДмшАшТШККауЩИхНВО'), ['ЧЙпЗЧЧлйПЙЖЙшККг', 'зйхуМЩАИПГЗА', 'ЙцехноХниИбзБЧ', 'чВомЗОфУроС', 'дбРхХЗрзоДДШщЕДжиФаЙ', 'еЛзТцЩДиДГрдМОНЧУнеТуДЩЧЦпГЕщПОРсйпЧ', 'ФчнпМРЧцПЙЩЩвфДХПнУхцЩСИ', 'цлШеУкМБнжЧлУцСуСЙуотшМфйс', 'лугГлкщКщкзЛйпбдсишргДДшОувр', 'ЗРИаФЛЗФрСзм', 'аЗвжВгхЩоЦ', 'чГКлеБНДнИЖЧеШЧДнИвсГДЖЖфБМНсУЦосВс', 'щЦнПУзЧщнЩЕ', 'рВУв']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8('\0', CAST([], 'Array(String)'));
select 0 = multiSearchFirstIndexUTF8(materialize('гопвмрутфпфбхмидшлуб'), ['цнхшдойгщн', 'дкаежщрапщпщеа', 'фмогимдничрфтхмсцмчпдфтиофнтйц', 'фчмсщисхщуп', 'ощмвдчефозйжбеесбмещочевцчд', 'апкбцйщжщабвппофм', 'мтйоддлфцгдуммптднпщшрн', 'икхнсмжчбхнфхнссгл', 'ущмунинлбпрман', 'ллкнечрезп', 'ажтнвбиччджсзтйешйффдгдрувер', 'йрщ', 'чигдкйшфщжужзлвщулквдфщхубги', 'иккшсмаеодейнкмгхбдлоижххдан']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8(materialize('жжмзмащйфжщлрффбпврзнидииейщ'), ['ржфзнлйщсздйткаоцруйцгцт', 'илинксщмгщшещееифвпданмйлж', 'кг', 'гпааймцщпмсочтеиффосицхйпруйшнццвс', 'кнзфгжйирблщлл', 'ищуушфчорзлкбцппидчннцвхщщжййнкфтлрдчм', 'тбтдчлвцилргоргжсфбоо', 'ехаех', 'нехщмдлйджждмрцпйкбрнщсифхфщ', 'тцжпснйофцжфивзфбхзузщтмдкцжплавозмше']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8(materialize('иматеччдфлггшпучумджпфпзмвх'), ['дахахпчлцлаачгцгтфпнжлшчйуцбшсг', 'атжйувхец', 'грдсбвиднницдвшпйршгмегцаоопнжгй', 'чзлхречмктфащмтеечуиагоуб', 'савбхлпилийщтихутйчдгфсойй', 'вбгочбзистзщшденусцофит', 'мар', 'дфшажхдсри', 'тжлмщшж', 'птсрсщгшммв', 'ре', 'зратамкткфкинййй', 'гуцмсизулвазужфдмхнелфнжббдтрудчтнфцр', 'нйчинеучкхнпчгнйвчвсвлгминуцахгщввжц', 'ечагчнуулфббгбел', 'йшжуговрйкащцофдокфчушжктнптйеззушфо']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8(materialize('мзчатйжщгтзлвефчшмлшт'), ['гхшфрунирйдзтеафщгк', 'ймхмфлц', 'звуумивмвштчтнтеобзщесакийгк', 'чщжетзнцишхрммтбцакиббчп', 'блмидикавущщдпгпчхйаатйанд', 'цмщшбклгцгмчредмущаофпткеф', 'бнетввйцзпдерхщ', 'ицйнцрввемсвтштчфрпжнатаихцклкц', 'дзлщсштофвздтмчвсефишс', 'пбзртдцвгкглцфесидлвваисщр', 'ммеилбзфнчищч', 'жш', 'лздиззтпемкх', 'байлужднфугмкшгвгулффмщзхомпав', 'рсзнббедсчзущафббзбйоелид', 'цфшйкцксйгуйо']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8(materialize('овччцнтчайомсйййоуйуучщххиффсб'), ['жжрддцпнехйр', 'шзбвуооинпаххесйкпкошжмцзгхе', 'ррсннилщлщжгцтйрпхабкехахззнтщемагдйшпсч', 'пуфугнказепщ', 'гддхтплвд', 'сщсчи', 'бйрсахедщфкхиевкетнс', 'йфжцжшпхлййхачзхнфоц', 'цтмтжлщдщофисзрвтбо', 'кщсевбоуйб', 'щгаапзкн', 'осймщовшчозцййизм', 'фкмаат', 'бкзцсдонфгттнфтаглпрцтбхбсок', 'жлмичлйнйсжбгсейбсиезщдмутационжгмзп', 'нбищижнлпмтморлхцхвеибщщлкйкндлтпбд']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8(materialize('рфгигуужжцфмоаешщечувщгонт'), ['слащченщлуоцргврбаб', 'тцизут', 'лйрсцолзклжбчрзгббммоищщ', 'уицмлоилзф', 'зпхмшвфйккфщщп', 'ймижрпдщмшв', 'пуощжлрмжлщхмкйгщшщивдпчпжчл', 'ойахшафнж', 'гксомбвцрсбжепхкхжхнсббци', 'панлраптщмцмйфебцщемйахенг', 'сохлгожштлднчсзпгтифсйгфмфп', 'аждчвзну', 'дхшуфд', 'борзизцхнийбщгхепрнзшй', 'фщшздруггрке', 'оевупрйщктнолшбкунзжху']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8(materialize('удехбкабиацхпгзнхжелшц'), ['фмнбтйезсфоахофофдблкжщжфмгхтзс', 'тщтамзафозхлз', 'цшжфсбл', 'йзгзилупшллвипучхавшнмщафзмнк', 'лу', 'гтебпднцчвмктщсзи', 'лпщлмцийгуеджекшд', 'пцдхфоецфрунзм', 'зис', 'хпж', 'цтцплхцжишфнплуеохн', 'впх', 'чцчдацлуецрчцжижфиквтйийкез', 'гчшмекотд', 'пйгкцчафеавзихзтххтсмкал', 'сжфхпцгдфицжслрдчлдхлсувчнрогнву']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8(materialize('црвтгмсрооацволепкщкпнгшкамщ'), ['гйцбсханрейщжнфбхтщбйала', 'дирдфнжпнччхаоцшрийнйнечллтгцбфедгсш', 'жфйндбффаилбндмлточиирасдзйлжбдзег', 'жвоуйфсйойфцвгзшцитсчпкч', 'ршонтбгщжооилчхрзшгсдцпзчесххцп', 'пйучихссгнхщлутвменлмм', 'хишгешегдефесо', 'знупгж', 'щчфу', 'знвтжифбнщсибеноожжметачаохфхсжосдзйуп', 'ггтоцйпгхчсбохлрчлваисивжбшбохдурввагш', 'щлийбчштбсч']) from system.numbers limit 10;
select 0 = multiSearchFirstIndexUTF8(materialize('щщвфчгамтжашнуошбзшуйчтшх'), ['дийу', 'жеомлсжщймемрсччошдфажцтдп', 'нгопнцквбф', 'хопб', 'ив', 'чвфвшфрдфелрдбтатшвейтг', 'вхкцадмупдчбаушшлдксйв', 'жтжбсвмшшсйеуфдпбдлкквдиовж', 'гтсдолснхесйцкйкмищгсзедх', 'ошплп', 'ифпуррикбопйгиччи', 'чдфймудаибвфчжтзглс', 'зпцмвпнлтунвйж', 'еждрйитхччещлцч', 'вмофсужхгрнзехкх', 'щжгквкрфжмжжсефпахст']) from system.numbers limit 10;
select 0 = multiSearchFirstPosition('\0', CAST([], 'Array(String)'));
select 0 = multiSearchFirstPosition(materialize('abcdefgh'), ['z', 'pq']) from system.numbers limit 10;
select 0 = multiSearchFirstPosition(materialize('Hello World'), materialize(['Hallo', 'Welt']));
select 0 = multiSearchFirstPositionCaseInsensitive('\0', CAST([], 'Array(String)'));
select 0 = multiSearchFirstPositionCaseInsensitive(materialize('abcdefgh'), ['z', 'pq']) from system.numbers limit 10;
select 0 = multiSearchFirstPositionCaseInsensitiveUTF8('\0', CAST([], 'Array(String)'));
select 0 = multiSearchFirstPositionCaseInsensitiveUTF8(materialize('аБвгДежз'), ['Л', 'Ъ']) from system.numbers limit 10;
select 0 = multiSearchFirstPositionUTF8('\0', CAST([], 'Array(String)'));
select 0 = multiSearchFirstPositionUTF8(materialize('абвгдежз'), ['л', 'ъ']) from system.numbers limit 10;
select 0 = position('', '', 2);
select 0 = position('', 'abc');
select 0 = position('', 'абв');
select 0 = position('a', '', 3);
select 0 = position('abc' in '');
select 0 = position('abc', materialize('abcd')) from system.numbers limit 10;
select 0 = position('abc', materialize('abcd'));
select 0 = position('abc', materialize('abcde')) from system.numbers limit 10;
select 0 = position('abc', materialize('abcde'));
select 0 = position('abc', materialize('abcdef')) from system.numbers limit 10;
select 0 = position('abc', materialize('abcdef'));
select 0 = position('abc', materialize('abcdefg')) from system.numbers limit 10;
select 0 = position('abc', materialize('abcdefg'));
select 0 = position('abc', materialize('bcde')) from system.numbers limit 10;
select 0 = position('abc', materialize('bcde'));
select 0 = position('abc', materialize('bcdef')) from system.numbers limit 10;
select 0 = position('abc', materialize('bcdef'));
select 0 = position('abc', materialize('bcdefg')) from system.numbers limit 10;
select 0 = position('abc', materialize('bcdefg'));
select 0 = position('abc', materialize('bcdefgh')) from system.numbers limit 10;
select 0 = position('abc', materialize('bcdefgh'));
select 0 = position('abc', materialize('d')) from system.numbers limit 10;
select 0 = position('abc', materialize('d'));
select 0 = position('abc', materialize('de')) from system.numbers limit 10;
select 0 = position('abc', materialize('de'));
select 0 = position('abc', materialize('def')) from system.numbers limit 10;
select 0 = position('abc', materialize('def'));
select 0 = position('abc', materialize('defg')) from system.numbers limit 10;
select 0 = position('abc', materialize('defg'));
select 0 = position('abc', materialize('defgh')) from system.numbers limit 10;
select 0 = position('abc', materialize('defgh'));
select 0 = position('abcabc', 'b', 6);
select 0 = position('abcabc', 'bca', 3);
select 0 = position('abcd', materialize('cde')) from system.numbers limit 10;
select 0 = position('abcd', materialize('cde'));
select 0 = position('abcd', materialize('cdef')) from system.numbers limit 10;
select 0 = position('abcd', materialize('cdef'));
select 0 = position('abcd', materialize('cdefg')) from system.numbers limit 10;
select 0 = position('abcd', materialize('cdefg'));
select 0 = position('abcd', materialize('cdefgh')) from system.numbers limit 10;
select 0 = position('abcd', materialize('cdefgh'));
select 0 = position('абв' in '');
select 0 = position('абвабв', 'бва', 4);
select 0 = position(materialize(''), 'abc') from system.numbers limit 10;
select 0 = position(materialize(''), 'abc');
select 0 = position(materialize(''), 'абв') from system.numbers limit 10;
select 0 = position(materialize(''), 'абв');
select 0 = positionCaseInsensitive('', 'aBc');
select 0 = positionCaseInsensitive('', 'аБв');
select 0 = positionCaseInsensitive('абв', 'аБв');
select 0 = positionCaseInsensitive('абв', 'Бв');
select 0 = positionCaseInsensitive('абв', 'В');
select 0 = positionCaseInsensitive(materialize(''), 'aBc') from system.numbers limit 10;
select 0 = positionCaseInsensitive(materialize(''), 'aBc');
select 0 = positionCaseInsensitive(materialize(''), 'аБв') from system.numbers limit 10;
select 0 = positionCaseInsensitive(materialize(''), 'аБв');
select 0 = positionCaseInsensitive(materialize('абв'), 'аБв') from system.numbers limit 10;
select 0 = positionCaseInsensitive(materialize('абв'), 'аБв');
select 0 = positionCaseInsensitive(materialize('абв'), 'Бв') from system.numbers limit 10;
select 0 = positionCaseInsensitive(materialize('абв'), 'Бв');
select 0 = positionCaseInsensitive(materialize('абв'), 'В') from system.numbers limit 10;
select 0 = positionCaseInsensitive(materialize('абв'), 'В');
select 0 = positionCaseInsensitiveUTF8('', 'аБв');
select 0 = positionCaseInsensitiveUTF8(materialize(''), 'аБв') from system.numbers limit 10;
select 0 = positionCaseInsensitiveUTF8(materialize(''), 'аБв');
select 0 = positionUTF8('', 'абв');
select 0 = positionUTF8('абвабв', 'б', 6);
select 0 = positionUTF8('абвабв', 'бва', 3);
select 0 = positionUTF8('абвабв', materialize('б'), 6) from system.numbers limit 10;
select 0 = positionUTF8('абвабв', materialize('бва'), 3) from system.numbers limit 10;
select 0 = positionUTF8(materialize(''), 'абв') from system.numbers limit 10;
select 0 = positionUTF8(materialize(''), 'абв');
select 0 = positionUTF8(materialize('абвабв'), 'б', 6) from system.numbers limit 10;
select 0 = positionUTF8(materialize('абвабв'), 'бва', 3) from system.numbers limit 10;
select 0 = positionUTF8(materialize('абвабв'), materialize('б'), 6) from system.numbers limit 10;
select 0 = positionUTF8(materialize('абвабв'), materialize('бва'), 3) from system.numbers limit 10;
select 0 = sequenceCount('(?1)(?1)(?1)(?1)(?1)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceCount('(?1)(?t<2)(?3)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceCount('(?1)(?t==2)(?2)')(time, data = 1, data = 2) from sequence_test;
select 0 = sequenceCount('(?1)(?t>11)(?2)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceCount('(?2)(?t>7)(?2)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceCount('(?4)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceMatch('(?1)(?1)(?1)(?1)(?1)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceMatch('(?1)(?t<2)(?3)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceMatch('(?1)(?t==2)(?2)')(time, data = 1, data = 2) from sequence_test;
select 0 = sequenceMatch('(?1)(?t>11)(?2)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceMatch('(?2)(?t>7)(?2)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 0 = sequenceMatch('(?4)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
SELECT 0 == COUNT(1) FROM 01504_test;
SELECT 0 == COUNT(1) FROM 02416_test;
SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('0.0.0.0')));
SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('128.0.0.0')));
SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('192.0.0.0')));
SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('224.0.0.0')));
SELECT 0 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('240.0.0.0')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('654f:3716::')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('654f:3716:ffff::')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv6StringToNum('::ffff:1:1')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('0.0.0.0')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('1.1.1.1')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('128.127.127.0')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('128.127.127.127')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('255.0.0.0')));
SELECT 0 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('255.127.127.0')));
SELECT 0 ? (number, toString(number)) : (number * 10, concat('! ', toString(number))) FROM system.numbers LIMIT 10;
SELECT 0 ? not_existing_column : 1 FROM system.numbers LIMIT 1;
SELECT 0 and 100000000;
SELECT 0 as nelems, [NULL,9,4,8,10,5,2,3,7,1,6] AS arr, arrayPartialSort(nelems, arr), arrayPartialReverseSort(nelems, arr), arrayPartialSort((x) -> -x, nelems, arr);
SELECT 0 FROM hits_layer AS hl PREWHERE WatchID IN ( SELECT 0 FROM visits_layer AS vl ) WHERE 0;
SELECT 0 FROM numbers(5) WHERE sleepEachRow(1) = 1;
select 0 from test_rows_compact_part limit 1 FORMAT JSONCompact settings exact_rows_before_limit = 0,output_format_write_statistics = 0;
select 0 from test_rows_compact_part limit 1 FORMAT JSONCompact settings exact_rows_before_limit = 1, output_format_write_statistics = 0;
select 0 from test_rows_wide_part limit 1 FORMAT JSONCompact settings exact_rows_before_limit = 0,output_format_write_statistics = 0;
select 0 from test_rows_wide_part limit 1 FORMAT JSONCompact settings exact_rows_before_limit = 1, output_format_write_statistics = 0;
SELECT 0 IN (0) AS x, count() GROUP BY x;
SELECT 0 IN (SELECT 0);
SELECT 0 IN (SELECT 1);
SELECT 0 IN 1;
SELECT 0 or 100000000;
SELECT 0, 'Hello',bin(bitShiftLeft('Hello', 0));
SELECT 0, 'Hello',bin(bitShiftRight('Hello', 0));
SELECT 0, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 0));
SELECT 0, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 0));
SELECT 0.1 :: Decimal(4, 4);
SELECT 0.1 AS level, quantile(level)(number) FROM numbers(1000);
SELECT 0.1000000000000000055511151231257827021181583404541015625::Decimal256(70) = 0.1;
SELECT 0.1::Decimal(38, 38) AS c;
SELECT 0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
SELECT 01856_test_function_0(2, 3, 4);
SELECT 02098_alias_function(2);
SELECT 02099_lambda_function([1,2,3]);
SELECT 02101_test_function(1);
SELECT 02102_test_function(1);
SELECT 02103_test_function_with_nested_function_arg(1);
SELECT 02103_test_function_with_nested_function_empty_args();
SELECT 02125_function(1);
SELECT 02125_function_1(1);
SELECT 02125_function_2(2);
SELECT 02126_function();
SELECT 02126_function(1);
SELECT 02148_test_function();
SELECT 02148_test_function(1);
SELECT 02148_test_function_nested(1);
SELECT 02337_db.test_table.id, 02337_db.test_table.value FROM 02337_db.test_table;
SELECT 02339_db.test_table.* FROM 02339_db.test_table;
SELECT 02339_db.test_table.COLUMNS('i'), 02339_db.test_table.COLUMNS('v') FROM 02339_db.test_table;
SELECT 02339_db.test_table.COLUMNS(id) FROM 02339_db.test_table;
SELECT 02339_db.test_table.COLUMNS(id), 02339_db.test_table.COLUMNS(value) FROM 02339_db.test_table;
SELECT 077, 078;
SELECT 0::Bool(Upyachka);
SELECT 0;
select 0;
SELECT 0b0001 as number, toTypeName(number);
SELECT 0b0010 as number, toTypeName(number);
select 0b0010_0100_0111;
SELECT 0b0100 as number, toTypeName(number);
SELECT 0b1000 as number, toTypeName(number);
SELECT 0b10000000 as number, toTypeName(number);
SELECT 0b1000000000000000 as number, toTypeName(number);
SELECT 0b10000000000000000000000000000000 as number, toTypeName(number);
SELECT 0b1000000000000000000000000000000000000000000000000000000000000000 as number, toTypeName(number);
SELECT 0b1111;
SELECT 0b1_1_1_1;
SELECT 0x0.e_e;
SELECT 0x0.ee;
select 0x1, byteSize(0x1), 0x100, byteSize(0x100), 0x10000, byteSize(0x10000), 0x100000000, byteSize(0x100000000), 0.5, byteSize(0.5), 1e-10, byteSize(1e-10);
SELECT 0x1.234;
SELECT 0x1.234p+01;
SELECT 0x1.234p-01;
SELECT 0x1.234p01;
SELECT 0x1.234p0_1;
SELECT 0x1.2_34p+01;
SELECT 0x1.2_34p+0_1;
SELECT 0x1.2_34p-01;
SELECT 0x1.2_34p-0_1;
SELECT 0x1234;
select 0x12_34_56_78;
select 0x12_34_56_78p1;
SELECT 0x1_2_3_4;
SELECT 0xe_e;
SELECT 0xee;
SELECT 1 WHERE 0=(SELECT number FROM numbers(2) ORDER BY number LIMIT 1) AND 1=(SELECT number FROM numbers(2) ORDER BY number DESC LIMIT 1);
SELECT 1 != '257';
select 1 != all (select 1 from numbers(10));
select 1 != all (select number from numbers(10));
select 1 != any (select 1 from numbers(10));
select 1 != any (select number from numbers(10));
SELECT 1 != NOT (1);
SELECT 1 != NOT 1;
SELECT 1 % ( CASE WHEN 1 THEN (1 IS NOT NULL + *) ELSE NULL END );
SELECT 1 % CAST(1, 'Nullable(Float32)');
SELECT 1 % CAST(1, 'Nullable(UInt32)');
SELECT 1 % CAST(materialize(1), 'Nullable(Float32)');
SELECT 1 % CAST(materialize(1), 'Nullable(UInt32)');
SELECT 1 % CAST(materialize(NULL), 'Nullable(Float32)');
SELECT 1 % CAST(materialize(NULL), 'Nullable(UInt32)');
SELECT 1 % CAST(NULL, 'Nullable(Float32)');
SELECT 1 % CAST(NULL, 'Nullable(UInt32)');
SELECT 1 % if(1, dummy, NULL);
select 1 % toLowCardinality(val) from (select arrayJoin([1]) as val);
SELECT 1 + (2 AS x) y FROM system.one;
SELECT 1 + 1;
SELECT 1 + arrayJoin(a) AS m FROM (SELECT [1, 2, 3] AS a) GROUP BY 1 + arrayJoin(a);
SELECT 1 + arrayJoin(a) AS m FROM (SELECT [1, 2, 3] AS a) GROUP BY m;
SELECT 1 + NULL;
SELECT 1 + sum(number) / sum(sum(number)) OVER (PARTITION BY (number % 10)) FROM numbers(10000) GROUP BY number % 10;
SELECT 1 + toDateTime(1) = toDateTime(2);
SELECT 1 + x FROM tab where plus(1, x) <= 2 order by x;
SELECT 1 + x FROM tab where plus(1, x) <= toDateTime('2022-02-02') + 2 order by x;
SELECT 1 + x FROM tab where plus(1::LowCardinality(Nullable(UInt8)), x) <= 2 order by x;
SELECT 1 + x FROM tab where plus(1::LowCardinality(Nullable(UInt8)), x) <= toDateTime('2022-02-02') + 2 order by x;
SELECT 1 + x FROM tab where plus(1::LowCardinality(UInt8), x) <= 2 order by x;
SELECT 1 + x FROM tab where plus(1::LowCardinality(UInt8), x) <= toDateTime('2022-02-02') + 2 order by x;
SELECT 1 + x FROM tab where plus(1::Nullable(UInt8), x) <= 2 order by x;
SELECT 1 + x FROM tab where plus(1::Nullable(UInt8), x) <= toDateTime('2022-02-02') + 2 order by x;
SELECT 1 + yesterday() = today();
SELECT 1 / 10;
SELECT 1 / CAST(1, 'Nullable(Decimal(7, 2))');
SELECT 1 / CAST(materialize(1), 'Nullable(Decimal(7, 2))');
SELECT 1 / CAST(materialize(NULL), 'Nullable(Decimal(7, 2))');
SELECT 1 / CAST(NULL, 'Nullable(Decimal(7, 2))');
SELECT 1 / toDecimal32(0, 0);
SELECT 1 /* QUERY_GROUP_ID:main_dashboard_bottom_query */;
SELECT 1 /* QUERY_GROUP_ID:main_dashboard_top_query */;
SELECT 1 < '257';
select 1 < any (select 1 from numbers(10));
select 1 < any (select number from numbers(10));
SELECT 1 <= '257';
select 1 <= any (select 1 from numbers(10));
SELECT 1 = '257';
select 1 = isValidUTF8('') from system.numbers limit 10;
select 1 = isValidUTF8('\x00') from system.numbers limit 10;
select 1 = isValidUTF8('\x00\x7F') from system.numbers limit 10;
select 1 = isValidUTF8('\x66') from system.numbers limit 10;
select 1 = isValidUTF8('\x7F') from system.numbers limit 10;
select 1 = isValidUTF8('\x7F\x00') from system.numbers limit 10;
select 1 = isValidUTF8('\xC2\x80') from system.numbers limit 10;
select 1 = isValidUTF8('\xf0\x90\x8c\xbc') from system.numbers limit 10;
select 1 = isValidUTF8('\xF0\x90\xBF\x80') from system.numbers limit 10;
select 1 = isValidUTF8('\xF2\x81\xBE\x99') from system.numbers limit 10;
select 1 = isValidUTF8('\xF4\x8F\x88\xAA') from system.numbers limit 10;
select 1 = isValidUTF8('a') from system.numbers limit 10;
select 1 = isValidUTF8('some text') from system.numbers limit 10;
select 1 = isValidUTF8('какой-то текст') from system.numbers limit 10;
select 1 = isValidUTF8('안녕하세요, 세상') from system.numbers limit 10;
select 1 = isValidUTF8(toFixedString('\x00', 1)) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('\xF4\x00\xBF\xBF')) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('\xF4\x8F\x88\xAA')) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('\xF4\x90\x88\xAA')) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('\xf5\xff\xff\xff')) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('\xf8\x90\x80\x80\x80')) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('a')) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('some text')) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('какой-то текст')) from system.numbers limit 10;
select 1 = isValidUTF8(toValidUTF8('안녕하세요, 세상')) from system.numbers limit 10;
SELECT 1 = multiMatchAny('фабрикант', ['f[ae]b[ei]rl', 'ф[иаэе]б[еэи][рпл]', 'афиукд', 'a[ft],th', '^ф[аиеэ]?б?[еэи]?$', 'берлик', 'fab', 'фа[беьв]+е?[рлко]']);
select 1 = multiMatchAny(materialize(''), ['']);
select 1 = multiMatchAny(materialize(''), materialize(['']));
select 1 = multiMatchAny(materialize('a\0bc'), ['a.bc']) from system.numbers limit 10;
select 1 = multiMatchAny(materialize('a\0bc'), ['a?bc']) from system.numbers limit 10;
select 1 = multiMatchAny(materialize('ruqmqrsxrbftvruvahonradau'), ['uqmqrsxrbft', 'ftv', 'tvruvahonrad', 'mqrsxrbftvruvahon', 'rbftvruvah', 'qrsxrbftvru', 'o', 'ahonradau', 'a', 'ft', '', 'u', 'rsxrbftvruvahonradau', 'ruvahon', 'bftvruvahonradau', 'qrsxrbftvru', 't', 'vahonrada', 'vruvahonradau', 'onra']) from system.numbers limit 10;
select 1 = multiMatchAny(materialize('ruqmqrsxrbftvruvahonradau'), materialize(['uqmqrsxrbft', 'ftv', 'tvruvahonrad', 'mqrsxrbftvruvahon', 'rbftvruvah', 'qrsxrbftvru', 'o', 'ahonradau', 'a', 'ft', '', 'u', 'rsxrbftvruvahonradau', 'ruvahon', 'bftvruvahonradau', 'qrsxrbftvru', 't', 'vahonrada', 'vruvahonradau', 'onra'])) from system.numbers limit 10;
select 1 = multiMatchAny(materialize('vbcsettndwuntnruiyclvvwoo'), ['dwuntnru', '', 'ttndwuntnruiyclvv', 'ntnr', 'nruiyclvvw', 'wo', '', 'bcsettndwuntnruiycl', 'yc', 'untnruiyclvvw', 'csettndwuntnr', 'ntnruiyclvvwo']) from system.numbers limit 10;
select 1 = multiMatchAny(materialize('vbcsettndwuntnruiyclvvwoo'), materialize(['dwuntnru', '', 'ttndwuntnruiyclvv', 'ntnr', 'nruiyclvvw', 'wo', '', 'bcsettndwuntnruiycl', 'yc', 'untnruiyclvvw', 'csettndwuntnr', 'ntnruiyclvvwo'])) from system.numbers limit 10;
SELECT 1 = multiMatchAny(materialize('фабрикант'), materialize(['f[ae]b[ei]rl', 'ф[иаэе]б[еэи][рпл]', 'афиукд', 'a[ft],th', '^ф[аиеэ]?б?[еэи]?$', 'берлик', 'fab', 'фа[беьв]+е?[рлко]']));
select 1 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), ['google', 'unian1']) from system.numbers limit 10;
select 1 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), materialize(['google', 'unian1'])) from system.numbers limit 10;
select 1 = multiSearchAny(materialize('abab'), ['ab']);
select 1 = multiSearchAny(materialize('abababababababababababab'), ['abab']);
select 1 = multiSearchAny(materialize('abababababababababababab'), ['abababababababababa']);
select 1 = multiSearchAny(materialize('abc'), ['']) from system.numbers limit 1000;
select 1 = multiSearchAny(materialize('abcdefgh'), ['h']);
select 1 = position('' in '');
select 1 = position('' in 'abc');
select 1 = position('' in 'абв');
select 1 = position('', '');
select 1 = position('', '', 0);
select 1 = position('', '', 1);
select 1 = position('a', '', 1);
select 1 = position('abab', materialize('ab'));
select 1 = position('abababababababababababab', materialize('abab'));
select 1 = position('abababababababababababab', materialize('abababababababababa'));
select 1 = position('abc' in 'abc');
select 1 = position('abcdefgh', materialize('abcdefgh')) from system.numbers limit 129;
select 1 = position('abcdefgh', materialize('abcdefgh'));
select 1 = position('абв' in 'абв');
select 1 = position(materialize('abc'), 'abc') from system.numbers limit 10;
select 1 = position(materialize('абв'), 'абв');
select 1 = positionCaseInsensitive('', '');
select 1 = positionCaseInsensitive('abc', '');
select 1 = positionCaseInsensitive('abc', 'aBc');
select 1 = sequenceMatch('(?3)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 1 = sequenceMatch('.')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 1 = sequenceMatch('.*')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 1 = windowFunnel(1)(timestamp, event = 1000) from funnel_test;
select 1 = windowFunnel(10000)(timestamp, event = 1000) from funnel_test;
select 1 = windowFunnel(10000)(timestamp, event = 1008, event = 1001) from funnel_test2;
select 1 = windowFunnel(10000)(timestamp, event = 1008, event = 1001) from funnel_test_u64;
select 1 = windowFunnel(10000, 'strict_increase')(timestamp, event = 1004, event = 1004, event = 1004) from funnel_test_strict_increase;
select 1 == all (select 1 from numbers(10));
select 1 == all (select number from numbers(10));
select 1 == any (1);
select 1 == any (select number from numbers(2, 10));
SELECT 1 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('128.0.0.0')));
SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ip_trie', tuple(IPv4StringToNum('127.0.0.1')));
SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.255.128.9')));
SELECT 1 == dictHas({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', tuple(IPv4StringToNum('127.255.255.128')));
SELECT 1 > '257';
select 1 > any (select number from numbers(10));
SELECT 1 >= '257';
select 1 >= any (select number from numbers(10));
SELECT 1 ? (0 ? not_existing_column : 2) : 0 FROM system.numbers LIMIT 1;
SELECT 1 ? (number, toString(number)) : (number * 10, concat('! ', toString(number))) FROM system.numbers LIMIT 10;
SELECT 1 ? 1 : 0;
SELECT 1 `array`, 2 "union";
SELECT 1 and 10;
select 1 and greatest(number % 2, number % 3) from numbers(10);
select 1 and least(number % 2, number % 3) from numbers(10);
SELECT 1 and sin(1);
SELECT 1 and true;
SELECT 1 AS $alias$name$ FORMAT TSVWithNames;
SELECT 1 AS 1alias1name1 FORMAT TSVWithNames;
SELECT 1 AS a UNION ALL SELECT 1 AS a;
SELECT 1 AS a UNION ALL SELECT 1 AS b;
SELECT 1 AS a, a + a AS b, b + b AS c, c + c AS d, d + d AS e, e + e AS f, f + f AS g, g + g AS h, h + h AS i, i + i AS j, j + j AS k, k + k AS l, l + l AS m, m + m AS n, n + n AS o, o + o AS p, p + p AS q, q + q AS r, r + r AS s, s + s AS t, t + t AS u, u + u AS v, v + v AS w, w + w AS x, x + x AS y, y + y AS z;
SELECT 1 as a, a;
SELECT 1 as a, count() FROM numbers(10) WHERE 0 GROUP BY a SETTINGS empty_result_for_aggregation_by_constant_keys_on_empty_set = 0, optimize_trivial_count_query = 0;
SELECT 1 as a, count() FROM numbers(10) WHERE 0 GROUP BY a SETTINGS empty_result_for_aggregation_by_constant_keys_on_empty_set = 0;
SELECT 1 as a, count() FROM numbers(10) WHERE 0 GROUP BY a;
SELECT 1 AS id WHERE id = 1;
SELECT 1 AS n WITH TOTALS;
select 1 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 1 as offset, -1 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 1 as offset, -1 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 1 as offset, 1 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 1 as offset, 1 as length, null as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length));
select 1 as offset, 1 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 1 as offset, null as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length));
select 1 as offset, null as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length));
select 1 as offset, null as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 1 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT 1 as one FROM remote('127.0.0.{2,3}', system.one) LIMIT 1 BY one;
SELECT 1 as one FROM system.one LIMIT 1 BY 1;
SELECT 1 as one FROM system.one LIMIT 1 BY one;
SELECT 1 as one FROM system.one LIMIT 1 BY rand();
SELECT 1 AS value FROM test_table ARRAY JOIN [1,2,3] AS value;
SELECT 1 AS value, 1 AS value;
SELECT 1 AS value, 2 AS value;
SELECT 1 AS x FROM remote('127.0.0.2', currentDatabase(), nested) ARRAY JOIN n.x;
select 1 as x from t_str where cast('1970-01-01' as date) <= cast((select max('1970-01-01') from numbers(1)) as date);
SELECT 1 AS x ORDER/* hello */BY x;
SELECT 1 AS x UNION/**/ALL SELECT 1;
select 1 as x where 1 as x;
select 1 as x, (1,2,3) as y, x in y;
SELECT 1 AS x, 2 AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
SELECT 1 AS x, 2000 AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
SELECT 1 AS x, 200000 AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
SELECT 1 AS x, 20000000000 AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
SELECT 1 as x, roundDown(x, [1.5]);
SELECT 1 as x, roundDown(x, [6, 5, 4]);
SELECT 1 as x, roundDown(x, []);
select 1 as x, x = 1 or x = 2 or x = 3 or x = -1;
select 1 as x, x = 1.0 or x = 2 or x = 3 or x = -1;
select 1 as x, x = 1.5 or x = 2 or x = 3 or x = -1;
SELECT 1 AS x, x, (SELECT 2 AS x, x) FROM remote('127.0.0.{2,3}', system.one) WHERE (3, 4) IN (SELECT 3 AS x, toUInt8(x + 1));
SELECT 1 AS x, x, x + 1;
SELECT 1 DIV `MOD` `DIV` FROM (SELECT 1 `MOD`) FORMAT TSVWithNames;
SELECT 1 div `mod` `div` FROM (SELECT 1 `mod`) FORMAT TSVWithNames;
select 1 except select 1;
SELECT 1 EXCEPT SELECT 1;
select 1 except select 2 intersect select 1;
select 1 except select 2 intersect select 2;
select 1 format Null;
SELECT 1 FORMAT PrettySpace;
select 1 format Template settings format_template_row='01070_nonexistent_file.txt';
SELECT 1 FROM (SELECT * FROM table1) T1 ALL INNER JOIN (SELECT * FROM table2) T2 ON T1.table = T2.name LIMIT 1;
SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON (arrayJoin([1]) = B.b);
SELECT 1 FROM (select 1 a) A JOIN (select 1 b, 1 c) B ON a = b OR a = c;
SELECT 1 FROM (select 1 a, 1 aa, 1 aaa, 1 aaaa) A JOIN (select 1 b, 1 bb, 1 bbb, 1 bbbb, 1 bbbbb) B ON a = b OR a = bb OR a = bbb OR a = bbbb OR aa = b OR aa = bb OR aa = bbb OR aa = bbbb OR aaa = b OR aaa = bb OR aaa = bbb OR aaa = bbbb OR aaaa = b OR aaaa = bb OR aaaa = bbb OR aaaa = bbbb OR a = bbbbb OR aa = bbbbb;
select 1 from (select 1) having count() > 0 as x;
SELECT 1 FROM (SELECT arrayJoin([sum(x), medianExact(x)]), arrayJoin([min(x), max(x)]) FROM (SELECT number AS x FROM numbers(10)));
SELECT 1 FROM (SELECT arrayJoin(if(empty(range(number)), [1], [2])) from numbers(1));
SELECT 1 FROM (SELECT DISTINCT sum(x), avg(x) FROM (SELECT number AS x FROM numbers(10)));
SELECT 1 FROM (SELECT sum(x) AS a, avg(x) AS b FROM (SELECT number AS x FROM numbers(10)));
SELECT 1 FROM (SELECT sum(x), avg(x) FROM (SELECT number AS x FROM numbers(10)));
SELECT 1 FROM cluster('test_shard_localhost', system.columns) T1 ALL INNER JOIN cluster('test_shard_localhost', system.tables) T2 ON T1.table = T2.name LIMIT 1;
SELECT 1 from const_in_const where 42 in (225);
SELECT 1 FROM database_for_range_dict.range_dictionary ORDER BY CountryID, StartDate, EndDate;
SELECT 1 FROM database_for_range_dict.range_dictionary_nullable ORDER BY CountryID, StartDate, EndDate;
SELECT 1 from defaults_on_defaults where ArrLen = 0;
SELECT 1 from defaults_on_defaults where length(`Arr.C2`) = 0;
SELECT 1 from defaults_on_defaults where length(`Arr.C3`) = 0;
SELECT 1 from defaults_on_defaults where length(`Arr.C4`) = 0;
SELECT 1 FROM distributed_table1 AS t1 GLOBAL JOIN distributed_table1 AS t2 ON t1.a = t2.a LIMIT 1;
SELECT 1 FROM distributed_table1 AS t1 GLOBAL JOIN distributed_table2 AS t2 ON t1.a = t2.c LIMIT 1;
SELECT 1 FROM distributed_table1 AS t1 GLOBAL JOIN distributed_table2 AS t2 ON t2.c = t1.a LIMIT 1;
SELECT 1 FROM distributed_table_merged;
select 1 from merge(currentDatabase(), '^data$') prewhere _table in (NULL);
SELECT 1 FROM merge(currentDatabase(), '^v$');
SELECT 1 FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100);
SELECT 1 FROM nested ARRAY JOIN nest.x AS nx, nest.y AS ny WHERE notEmpty(nest.y);
SELECT 1 FROM numbers(10) INTERSECT DISTINCT SELECT 1 FROM numbers(10);
SELECT 1 FROM range_dictionary ORDER BY CountryID, StartDate, EndDate;
SELECT 1 FROM range_dictionary_nullable ORDER BY CountryID, StartDate, EndDate;
SELECT 1 FROM remote('127.0.0.2', system.one) WHERE (1, 1) GLOBAL IN (SELECT 1 AS a, a);
SELECT 1 FROM remote('127.0.0.{1,2}', system.one) WHERE 1 GLOBAL IN (SELECT 1 FROM remote('127.0.0.{2,3}', system.one) WHERE 1 GLOBAL IN (SELECT 1 FROM remote('127.0.0.{2,3}', system.one) WHERE 1 GLOBAL IN (SELECT 1 FROM remote('127.0.0.{2,3}', system.one))));
select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1;
SELECT 1 FROM system.one LIMIT 1 BY 1 AS one;
SELECT 1 FROM system.one LIMIT 1 BY 1;
SELECT 1 FROM system.one WHERE (1, 1) IN (SELECT 1 AS x, x);
select 1 from t as l join t as r on l.id = r.id prewhere l.x;
select 1 from t group by 1;
SELECT 1 FROM t10 GROUP BY -sign(t10.c0);
SELECT 1 FROM t10 GROUP BY erf(-sign(t10.c0));
SELECT 1 FROM tab WHERE snowflakeToDateTime(42::Int64, tz) != now() SETTINGS allow_nonconst_timezone_arguments = 1;
SELECT 1 FROM tab WHERE snowflakeToDateTime64(42::Int64, tz) != now() SETTINGS allow_nonconst_timezone_arguments = 1;
SELECT 1 FROM table1 T1 ALL INNER JOIN table2 T2 ON T1.table = T2.name LIMIT 1;
SELECT 1 FROM test2 AS test2 ARRAY JOIN arrayFilter(t -> (t GLOBAL IN ( SELECT DISTINCT now() AS `ym:a` WHERE 1 )), test2.b) AS test2_b WHERE 1;
select 1 from test_index where date < toDateTime('2020-10-30 06:00:00');
select 1 from test_rows_compact_part__fuzz_11 where exists(select 1) settings allow_experimental_analyzer=1;
SELECT 1 FROM tztest WHERE '2019-05-06 12:00:00' = timeBerlin;
SELECT 1 FROM tztest WHERE timeBerlin = '2019-05-06 12:00:00';
SELECT 1 FROM tztest WHERE timeLA = '2019-05-06 12:00:00';
SELECT 1 FROM visits ARRAY JOIN arrayFilter(t -> 1, arrayMap(x -> tuple(x), [42])) AS i WHERE ((str, i.1) IN ('x', 0));
select 1 from wt order by a limit 3 with ties;
SELECT 1 GROUP BY emptyArrayToSingle(arrayFilter(x -> 1, []));
SELECT 1 HAVING 1;
SELECT 1 IN ( SELECT 1 ) FROM remote('127.0.0.{1,2}') GROUP BY dummy;
SELECT 1 IN ( SELECT 1 ) FROM remote('127.0.0.{1,2}', system.one) GROUP BY dummy;
SELECT 1 IN (((1), (2)));
SELECT 1 in (-1, 1) FROM set_crash WHERE (key1, id1) in (-1, 1);
select 1 in (0 + 1, 1, toInt8(sin(5)));
SELECT 1 IN (0) AS x, count() GROUP BY x;
SELECT 1 IN (0);
select 1 in (1 + 1, 1 - 1);
SELECT 1 IN (1);
SELECT 1 IN (1, 2);
SELECT 1 IN (1, 2, 3);
SELECT 1 IN (1, NULL);
SELECT 1 IN (1.23, '1', 2);
SELECT 1 IN (1.23, '2', 2);
SELECT 1 IN (SELECT 'a') SETTINGS transform_null_in = 1;
SELECT 1 IN (SELECT 1) SETTINGS transform_null_in = 1;
SELECT 1 IN (SELECT 1);
select 1 in (select 1);
SELECT 1 IN (SELECT dictGet('02843_dict', 'value', materialize('1')));
SELECT 1 in (SELECT file(materialize('a')));
SELECT 1 IN (SELECT joinGet(02843_join, 'value', materialize(1)));
SELECT 1 IN (SELECT joinGetOrNull(02843_join, 'value', materialize(1)));
SELECT 1 IN (SELECT materialize(1));
SELECT 1 IN (SELECT materialize(connectionId()));
SELECT 1 IN 0;
select 1 in 1;
SELECT 1 IN 1;
SELECT 1 IN [0];
select 1 in [1, 2];
SELECT 1 IN [1, 2];
SELECT 1 IN [1];
select 1 in array(1, 2, 3, 4, 5) settings max_temporary_columns = 3;
select 1 in Null;
SELECT 1 IN NULL;
select 1 in tuple(1);
select 1 in tuple(1, 2, 3, 4, 5) settings max_temporary_columns = 2;
SELECT 1 IN tuple(1, NULL);
select 1 in tuple(Null);
select 1 in tuple(Null, 1);
select 1 intersect (select 1 except select 2);
select 1 intersect select 1;
SELECT 1 INTERSECT SELECT 1;
select 1 intersect select count() from (select 1 except select 2 intersect select 2 union all select 1);
SELECT 1 LIMIT 0;
SELECT 1 or 10;
SELECT 1 or true;
SELECT 1 ORDER BY tuple(count() OVER ());
select 1 settings log_queries=1, log_queries_min_type='QUERY_FINISH' format Null;
SELECT 1 SETTINGS max_execution_time=-0.0;
select 1, * from rmt1 order by n;
select 1, arraySort(groupArray(n)) from rmt2;
SELECT 1, b FROM numbers(1) ARRAY JOIN [materialize(3) IN (SELECT 42)] AS b ;
SELECT 1, count() FROM t_source_part_is_intact;
SELECT 1, FROM numbers(1);
select 1, n, _part from rmt1 order by n;
SELECT 1, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 1));
SELECT 1, x, 2, s, 3, k, 4 FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;
SELECT 1,;
select 1.0 = boundingRatio(timestamp, event) from rate_test2;
select 1.0 = boundingRatio(timestamp, event) from rate_test;
SELECT 1.0 AS x, 2.0 AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
select 1.000_0001e2;
select 1.00_00_01;
SELECT 1.0::Decimal32(5) / 0.0;
SELECT 1.1 AS x, 2 AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
SELECT 1.123456789012345678901::Decimal256(20);
SELECT 1.123456789012345678901::Decimal256(22);
SELECT 1.1234567890::Decimal128(10);
select 11 = position('абвабв', 'в', 6);
SELECT 11 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.224.0.0')));
select 11 > all (select 11 from numbers(10));
select 11 > all (select number from numbers(10));
select 11 >= all (select 11 from numbers(10));
SELECT 11 AS n GROUP BY n WITH TOTALS;
select 11 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 11 as offset, -11 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 11 as offset, -11 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 11 as offset, 11 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 11 as offset, 11 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 11 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 11 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
select 11 AS z from (SELECT 1 UNION ALL SELECT 2) group by 42, 43, 44 WITH TOTALS;
select 11 AS z from (SELECT 2 UNION ALL SELECT 3) group by 42, 43, 44 WITH TOTALS;
select 11 AS z from (SELECT 2 UNION ALL SELECT 3) group by 42, 43, 44;
select 11, arraySort(groupArray(n)) from rmt2;
SELECT 11,'Hello',bin(bitShiftLeft('Hello', 11));
SELECT 11,'Hello',bin(bitShiftRight('Hello', 11));
SELECT 11,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 11));
SELECT 11,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 11));
select 111 from test54378 where part_date = '2018-04-19';
select 11111;
select 112 from test54378 where part_date in ('2018-04-19');
SELECT 11211 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('202.79.32.2')));
SELECT 11212 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('101.79.55.22')));
SELECT 11212 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv6StringToNum('::ffff:101.79.55.22')));
SELECT 11212 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv6StringToNum('::ffff:654f:3716')));
SELECT 11212 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(toIPv6('::ffff:101.79.55.22')));
select 113 from test54378 where pk_date in ('2018-04-19');
select 114 from test54378 where date in ('2018-04-19');
SELECT 11;
select 11;
select 12 = multiSearchFirstIndex(materialize('lebwdwxfdzwquhqhbvmte'), ['mwhruilzxvlyrgxivavxbbsq', 'ubuiizuasp', 'xpkzcsf', 'qpeqitoqqqeivohajzhmjbo', 'kbftixqmqgonemmbfpazcvf', 'iyhluioqs', 'hws', 'tupfdksgc', 'ows', 'pngzkoedabstewcdtdc', 'zdmyczldeftgdlwedcjfcoqycjcivf', '', 'xt', 'syuojejhbblohzwvjzzedzgmwc']) from system.numbers limit 10;
select 12 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('шйМЦУщвфщшбмлТНВохСЖНУ'), ['хшТАпТоШхКНсДпвДЕчДМНбАНччд', 'ХКуПСтфСйРжмБглОШЙлйДкСФВйВ', 'хпмНЦМУШеАД', 'чзмЧВвлбЧкАщПкзТгеуГущб', 'шзжрДд', 'еЗГОЙНйИБЗДщИИНицмсЙЗгФУл', 'кнщЙхооДТООе', 'всзЙнТшжФЗДБДрщВДлбвулДИаз', 'мп', 'уБОйцзнМпИсксхефбдЕЛйгИмГШГЗЩ', 'ОМпзШШщчФФнвУЧгжчиндЧч', 'щВФЩШбмЛТн', 'бм', 'БпфнкнйЗцПдЧЩбВ']) from system.numbers limit 10;
select 12 = multiSearchFirstIndexUTF8(materialize('срлцчуийдлрзтейоцгиз'), ['жщлнвбубжпф', 'оклвцедмиср', 'нлзхмчдзрззегщ', 'хоу', 'шайиуд', 'ерслщтзцфзвмйтжвфеблщдурстмйжо', 'жмгуйузнчгтт', 'стеглмрдмирйрумилвшнзззр', 'втедлчрчайвщнллнцдмурутш', 'цимхргмрвмщиогврнпиччубцйе', 'ктчтцбснзцйцймридвш', 'ейоц']) from system.numbers limit 10;
SELECT 12 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.240.0.0')));
SELECT 12 AS n GROUP BY n WITH ROLLUP;
select 12 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 12 as offset, -12 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 12 as offset, -12 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 12 as offset, 12 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 12 as offset, 12 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 12 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 12 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
select 12, arraySort(groupArray(n)) from rmt1;
SELECT 12,'Hello',bin(bitShiftLeft('Hello', 12));
SELECT 12,'Hello',bin(bitShiftRight('Hello', 12));
SELECT 12,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 12));
SELECT 12,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 12));
SELECT 12.34;
select 121 from test54378 where part_date = toDate('2018-04-19');
select 122 from test54378 where part_date in (toDate('2018-04-19'));
SELECT 123 AS x, 123 AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
select 123 from test54378 where pk_date in (toDate('2018-04-19'));
SELECT 12345.6789 AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5), floor(x, 1), floor(x, 2), floor(x, 3), floor(x, 4), floor(x, 5);
SELECT 1234567 % 123;
SELECT 123456789 AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5), floor(x, -6), floor(x, -7), floor(x, -8), floor(x, -9), floor(x, -10);
SELECT 1234;
SELECT 123::String AS c;
select 124 from test54378 where date in (toDate('2018-04-19'));
SELECT 124437993;
SELECT 124437994 SETTINGS use_query_cache = 1;
SELECT 124437995, throwIf(1) SETTINGS use_query_cache = 1;
SELECT 1270 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.0')));
SELECT 1270 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.1')));
SELECT 1270 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.255')));
SELECT 1270 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.3')));
SELECT 1272 == asn AND 'RU' == cca2 FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ipv4_trie_dict WHERE prefix == '127.0.0.2/32';
SELECT 1272 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('127.0.0.2')));
SELECT 12;
select 12;
select 13 = multiSearchFirstPositionUTF8(materialize('Hello World £'), materialize(['WORLD', '£']));
SELECT 13 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.248.0.0')));
SELECT 13 AS n GROUP BY n WITH CUBE;
select 13 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 13 as offset, -13 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 13 as offset, -13 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 13 as offset, 13 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 13 as offset, 13 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 13 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT 13,'Hello',bin(bitShiftLeft('Hello', 13));
SELECT 13,'Hello',bin(bitShiftRight('Hello', 13));
SELECT 13,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 13));
SELECT 13,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 13));
SELECT 1301146200 + 1800 * number AS ts, toString(toDateTime(ts), 'Australia/Sydney') AS time_in_sydney FROM system.numbers LIMIT 7;
select 131 from test54378 where part_date = (SELECT toDate('2018-04-19'));
select 132 from test54378 where part_date in (SELECT toDate('2018-04-19'));
select 133 from test54378 where pk_date in (SELECT toDate('2018-04-19'));
SELECT 134 == COUNT(*) FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ip_trie_dict;
select 134 from test54378 where date in (SELECT toDate('2018-04-19'));
select 13;
select 14 = multiSearchFirstIndexCaseInsensitive(materialize('pXFoUGwVTAItBqgbBaQwAqmeh'), ['LfBevBpGnaSlmGhbeZ', 'NtBYzEksiXvYI', 'jMeRw', 'omtaduY', 'BsWyvNdkfXsTBxf', 'CtoOIvaesuca', 'pgJcRIBVbyaPBgGsNKP', 'bAwdUMnwKvMXfFHQWrtfMeqcORIJH', 'GDxZblrqWSxUJFjEuXArPtfHPdwSNGGL', 'LLxcfp', 'NrLghkFpwCdvHJBfPBgiMatNRaDKjO', 'XCzr', 'cCojPpfLkGZnaWBGpaZvrGMwgHNF', 'BaQWAQmE', 'AQ', 'RtxxEZDfcEZAgURg']) from system.numbers limit 10;
SELECT 14 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.252.0.0')));
select 14 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 14 as offset, -14 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 14 as offset, -14 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 14 as offset, 14 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 14 as offset, 14 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 14 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT 14,'Hello',bin(bitShiftLeft('Hello', 14));
SELECT 14,'Hello',bin(bitShiftRight('Hello', 14));
SELECT 14,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 14));
SELECT 14,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 14));
SELECT 14776434768051644139306697240981192872314776434768051644139306697240981192872::Int256 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
SELECT 14776434768051644139306697240981192872314776434768051644139306697240981192872::UInt256 AS x, 0::Int128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
SELECT 14776434768051644139306697240981192872314776434768051644139306697240981192872::UInt256 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
select 14;
select 15 = multiSearchFirstIndexCaseInsensitive(materialize('lcXsRFUrGxroGIcpdeSJGiSseJldX'), ['pBYVjxNcQiyAFfzBvHYHhheAHZpeLcieaTu', 'SQSQp', 'OQePajOcTpkOhSKmoIKCAcUDRGsQFln', 'AYMDhpMbxWpBXytgWYXjq', 'gkUC', 'oWcNKfmSTwoWNxrfXjyMpst', 'fQSqkjRNiBGSfceVgJsxgZLSnUu', 'LRrhUjQstxBlmPWLGFMwbLCaBEkWdNJ', 'cZnaActZVoCZhffIMlkMbvbT', 'Uxg', 'vlKdriGMajSlGdmrwoAEBrdI', 'Fl', 'XzcNdlUJShjddbUQiRtR', 'AqowAuWqVQMppR', 'SRFUrGXrOgiCP', 'k']) from system.numbers limit 10;
SELECT 15 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.254.0.0')));
SELECT 15 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.127.127')));
SELECT 15 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:7f7f')));
select 15 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 15 as offset, -15 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 15 as offset, -15 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 15 as offset, 15 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 15 as offset, 15 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 15 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 15, 'fail: correlated subquery';
SELECT 15,'Hello',bin(bitShiftLeft('Hello', 15));
SELECT 15,'Hello',bin(bitShiftRight('Hello', 15));
SELECT 15,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 15));
SELECT 15,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 15));
SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.0.0')));
SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.128.127')));
SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.128.9')));
SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:8009')));
SELECT 16 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:807f')));
select 16 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 16 as offset, -16 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 16 as offset, -16 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 16 as offset, 16 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 16 as offset, 16 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 16 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT 16,'Hello',bin(bitShiftLeft('Hello', 16));
SELECT 16,'Hello',bin(bitShiftRight('Hello', 16));
SELECT 16,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 16));
SELECT 16,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 16));
select 1670853969::DateTime64(3, 'UTC');
select 16;
SELECT 17 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.128.0')));
select 17, 'fail: correlated subquery';
SELECT 17,'Hello',bin(bitShiftLeft('Hello', 17));
SELECT 17,'Hello',bin(bitShiftRight('Hello', 17));
SELECT 17,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 17));
SELECT 17,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 17));
SELECT 18 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.192.0')));
SELECT 18 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.128.10')));
SELECT 18 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:800a')));
SELECT 18,'Hello',bin(bitShiftLeft('Hello', 18));
SELECT 18,'Hello',bin(bitShiftRight('Hello', 18));
SELECT 18,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 18));
SELECT 18,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 18));
SELECT 19 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.224.0')));
SELECT 19 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.128.255')));
SELECT 19 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:80ff')));
SELECT 19,'Hello',bin(bitShiftLeft('Hello', 19));
SELECT 19,'Hello',bin(bitShiftRight('Hello', 19));
SELECT 19,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 19));
SELECT 19,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 19));
SELECT 199 % -10 as k, toTypeName(k);
SELECT 199 % -200 as k, toTypeName(k);
select 19;
SELECT 1::Decimal64(0);
SELECT 1::Decimal64(1);
SELECT 1::Decimal64(10);
SELECT 1::Int8 AS c;
SELECT 1;
select 1;
select 1_000;
SELECT 1_2.34;
SELECT 1_2.3_4;
SELECT 1_2_3_4;
SELECT 2 * (1, 2, NULL);
SELECT 2 / (1, 1);
SELECT 2 / [[[2, 3, 5, 5]]];
select 2 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), ['google1', 'unian']) from system.numbers limit 10;
select 2 = multiMatchAnyIndex(materialize('gogleuedeuniangoogle'), materialize(['google1', 'unian'])) from system.numbers limit 10;
select 2 = multiSearchFirstIndex(materialize('Hello World'), materialize(['Hallo', 'orld']));
select 2 = multiSearchFirstIndex(materialize('xrwjeznohtbdvijwsbdksf'), ['hwdfufmoemohatqafdrcvdk', 'tbdvijwsbdks', 'xzwjczbuteujfjifzkbxvezs', 'bdvijwsbd', 'eznohtbdvijwsbdks', 'xadezwhbbmlqz', 'b', 'socrdjxsibkb', 'dk', 'eznohtbdvijws', 'pavsosnncajr', 'jixlmxxmxnnbpebjhitvtsaiwzmtqq', 'yuxmmnrqz', 'mpzytweuycabvu', 'tbdvi', 'ip']) from system.numbers limit 10;
select 2 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('дфЧлзОжММФкЖгиЗЩлоШжФТкцк'), ['ЗРТцИрсФСбПрщГЗ', '', 'ЖГИЗщлОш', 'АДПН', '', 'чЛЗОЖмМфКжг', 'Мфкж', 'ндаовк', 'зГЛРГАНШмСмШМефазшеБкзДвЕШиЖСЗЧПИфо', 'ФЧЛзОЖммфКжгиЗЩ']) from system.numbers limit 10;
select 2 = multiSearchFirstIndexUTF8(materialize('Hello World £'), materialize(['WORLD', '£']));
select 2 = multiSearchFirstIndexUTF8(materialize('нвррммппогдйншбшнехнвлхм'), ['нфошцншблеооту', 'лх', 'цртд', 'огдйншбшн', 'уулддйдщицчпшбоиоцшй', '', 'дрдужзжпцкслетгвп', 'й', 'мппогдйншбшнех', 'дйншб', 'лжвофчзвдд', 'рммппогдйншб', 'ехнв', 'втущсщзбчсжцмаанчлнасп']) from system.numbers limit 10;
select 2 = multiSearchFirstPosition(materialize('abcdefgh'), ['something', 'bcd', 'bcd', 'c']) from system.numbers limit 10;
select 2 = multiSearchFirstPositionCaseInsensitive(materialize('ABCDEFGH'), ['something', 'bcd', 'bcd', 'c']) from system.numbers limit 10;
select 2 = multiSearchFirstPositionCaseInsensitiveUTF8(materialize('аБвгДежз'), ['что', 'в', 'гдз', 'бвг']) from system.numbers limit 10;
select 2 = multiSearchFirstPositionUTF8(materialize('абвгдежз'), ['что', 'в', 'гдз', 'бвг']) from system.numbers limit 10;
select 2 = position('a', '', 2);
select 2 = position('abc', 'bc');
select 2 = position('abc', materialize('b')) from system.numbers limit 10;
select 2 = position('abc', materialize('b'));
select 2 = position('abc', materialize('bc')) from system.numbers limit 10;
select 2 = position('abc', materialize('bc'));
select 2 = position('abcabc', 'b', 0);
select 2 = position('abcabc', 'b', 1);
select 2 = position('abcabc', 'b', 2);
select 2 = position('abcabc', 'bca', 0);
select 2 = position('abcdefgh', materialize('b')) from system.numbers limit 10;
select 2 = position('abcdefgh', materialize('b')) from system.numbers limit 129;
select 2 = position('abcdefgh', materialize('b'));
select 2 = position('abcdefgh', materialize('bc')) from system.numbers limit 10;
select 2 = position('abcdefgh', materialize('bc')) from system.numbers limit 129;
select 2 = position('abcdefgh', materialize('bc'));
select 2 = position('abcdefgh', materialize('bcd')) from system.numbers limit 10;
select 2 = position('abcdefgh', materialize('bcd'));
select 2 = position('abcdefgh', materialize('bcde')) from system.numbers limit 10;
select 2 = position('abcdefgh', materialize('bcde')) from system.numbers limit 129;
select 2 = position('abcdefgh', materialize('bcde'));
select 2 = position('abcdefgh', materialize('bcdef')) from system.numbers limit 10;
select 2 = position('abcdefgh', materialize('bcdef')) from system.numbers limit 129;
select 2 = position('abcdefgh', materialize('bcdef'));
select 2 = position('abcdefgh', materialize('bcdefg')) from system.numbers limit 10;
select 2 = position('abcdefgh', materialize('bcdefg')) from system.numbers limit 129;
select 2 = position('abcdefgh', materialize('bcdefg'));
select 2 = position('abcdefgh', materialize('bcdefgh')) from system.numbers limit 10;
select 2 = position('abcdefgh', materialize('bcdefgh')) from system.numbers limit 129;
select 2 = position('abcdefgh', materialize('bcdefgh'));
select 2 = position('bc' in 'abc');
select 2 = position(materialize('abc'), 'bc') from system.numbers limit 10;
select 2 = position(materialize('abc'), 'bc');
select 2 = positionCaseInsensitive('abc', 'Bc');
select 2 = positionCaseInsensitive(materialize('abc'), 'Bc') from system.numbers limit 10;
select 2 = positionCaseInsensitive(materialize('abc'), 'Bc');
select 2 = positionCaseInsensitiveUTF8('абв', 'Бв');
select 2 = positionCaseInsensitiveUTF8(materialize('абв'), 'Бв') from system.numbers limit 10;
select 2 = positionCaseInsensitiveUTF8(materialize('абв'), 'Бв');
select 2 = positionUTF8('абв', 'бв');
select 2 = positionUTF8('абвабв', 'б', 0);
select 2 = positionUTF8('абвабв', 'б', 1);
select 2 = positionUTF8('абвабв', 'б', 2);
select 2 = positionUTF8('абвабв', 'бва', 0);
select 2 = positionUTF8('абвабв', materialize('б'), 0) from system.numbers limit 10;
select 2 = positionUTF8('абвабв', materialize('б'), 1) from system.numbers limit 10;
select 2 = positionUTF8('абвабв', materialize('б'), 2) from system.numbers limit 10;
select 2 = positionUTF8('абвабв', materialize('бва'), 0) from system.numbers limit 10;
select 2 = positionUTF8(materialize('абв'), 'бв') from system.numbers limit 10;
select 2 = positionUTF8(materialize('абв'), 'бв');
select 2 = positionUTF8(materialize('абвабв'), 'б', 0) from system.numbers limit 10;
select 2 = positionUTF8(materialize('абвабв'), 'б', 1) from system.numbers limit 10;
select 2 = positionUTF8(materialize('абвабв'), 'б', 2) from system.numbers limit 10;
select 2 = positionUTF8(materialize('абвабв'), 'бва', 0) from system.numbers limit 10;
select 2 = positionUTF8(materialize('абвабв'), materialize('б'), 0) from system.numbers limit 10;
select 2 = positionUTF8(materialize('абвабв'), materialize('б'), 1) from system.numbers limit 10;
select 2 = positionUTF8(materialize('абвабв'), materialize('б'), 2) from system.numbers limit 10;
select 2 = positionUTF8(materialize('абвабв'), materialize('бва'), 0) from system.numbers limit 10;
select 2 = sequenceCount('(?1)(?1)(?1)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 2 = sequenceCount('(?1)(?1)(?1)(?1)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 2 = sequenceCount('(?1)(?1)(?1)(?1)(?2)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 2 = sequenceCount('(?1)(?t<11)(?2)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 2 = windowFunnel(10000)(timestamp, event = 1000, event = 1001) from funnel_test;
select 2 = windowFunnel(10000)(timestamp, event = 1001, event = 1008) from funnel_test2;
select 2 = windowFunnel(10000)(timestamp, event = 1001, event = 1008) from funnel_test_u64;
select 2 = windowFunnel(10000, 'strict_increase')(timestamp, event = 1000, event = 1001, event = 1002, event = 1003, event = 1004) from funnel_test_strict_increase;
SELECT 2 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('192.0.0.0')));
SELECT 2 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.0.255.127')));
SELECT 2 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7f00:ff7f')));
SELECT 2 as nelems, arrayResize(arrayPartialReverseSort(nelems, [NULL,'9','4','8','10','5','2','3','7','1','6']), nelems);
SELECT 2 as nelems, arrayResize(arrayPartialReverseSort(nelems, [NULL,9,4,8,10,5,2,3,7,1,6]), nelems);
SELECT 2 as nelems, arrayResize(arrayPartialSort(nelems, [NULL,'9','4','8','10','5','2','3','7','1','6']), nelems);
SELECT 2 as nelems, arrayResize(arrayPartialSort(nelems, [NULL,9,4,8,10,5,2,3,7,1,6]), nelems);
select 2 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 2 as offset, -2 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 2 as offset, -2 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 2 as offset, 2 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 2 as offset, 2 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 2 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 2 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
SELECT 2 BETWEEN 1 + 1 AND 3 - 1;
select 2 except select 1;
SELECT 2 FROM numbers(10) EXCEPT DISTINCT SELECT 1 FROM numbers(5);
SELECT 2 FROM system.one WHERE (1, 1) IN (SELECT 1 AS x, x) AND (1, 0) IN (SELECT 1 AS x, x);
SELECT 2 FROM system.one WHERE 1 IN (SELECT 1 FROM system.one WHERE 1 IN (SELECT 1 FROM system.one WHERE 1 IN (SELECT 1 FROM system.one)));
select 2 from t as l join t as r on l.id = r.id where r.x;
SELECT 2 IN (SELECT 1);
SELECT 2 IN (SELECT materialize(1));
select 2 intersect select 1;
SELECT 2 NOT BETWEEN 2 + 1 AND 4 - 1;
SELECT 2 UNION ALL SELECT 2 UNION ALL SELECT 2 WHERE 1 IN (SELECT 1 WHERE 1);
SELECT 2+1 FROM system.one X RIGHT JOIN system.one Y ON X.dummy+1 = toUInt16(Y.dummy) SETTINGS join_use_nulls = 1;
select 2, 'fail: correlated subquery';
SELECT 2, 'Hello',bin(bitShiftLeft('Hello', 2));
SELECT 2, 'Hello',bin(bitShiftRight('Hello', 2));
select 2, * from rmt2 order by n;
SELECT 2, -1 FROM projection_test PREWHERE domain_alias = 1. WHERE domain = NULL GROUP BY -9223372036854775808 ORDER BY countIf(first_time = 0) / count(-2147483649) DESC NULLS LAST, 1048576 DESC NULLS LAST;
select 2, n, _part from rmt2 order by n;
select 2, name, creation_csn, removal_tid, removal_csn from system.parts where database=currentDatabase() and table='txn_counters' order by system.parts.name;
SELECT 2, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 2));
SELECT 2, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 2));
SELECT 2., * FROM (SELECT 1024, 256 INTERSECT SELECT 100 AND inf, 256);
SELECT 20 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.240.0')));
SELECT 20 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.255.255.128')));
SELECT 20 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7fff:ff80')));
select 20, 'fail: correlated subquery';
SELECT 20,'Hello',bin(bitShiftLeft('Hello', 20));
SELECT 20,'Hello',bin(bitShiftRight('Hello', 20));
SELECT 20,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 20));
SELECT 20,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 20));
SELECT 21 + a, 21 - a, 84 - a, 21 * a, -21 * a, 21 / a, 84 / a, intDiv(21, a), intDivOrZero(84, a) FROM decimal WHERE a = 42;
SELECT 21 + b, 21 - b, 84 - b, 21 * b, -21 * b, 21 / b, 84 / b, intDiv(21, b), intDivOrZero(84, b) FROM decimal WHERE b = 42;
SELECT 21 + c, 21 - c, 84 - c, 21 * c, -21 * c, 21 / c, 84 / c, intDiv(21, c), intDivOrZero(84, c) FROM decimal WHERE c = 42;
SELECT 21 + e, 21 - e, 84 - e, 21 * e, -21 * e, 21 / e, 84 / e FROM decimal WHERE e > 0;
SELECT 21 + g, 21 - g, 84 - g, 21 * g, -21 * g, 21 / g, 84 / g, intDiv(21, g), intDivOrZero(84, g) FROM decimal WHERE g > 0;
SELECT 21 + h, 21 - h, 84 - h, 21 * h, -21 * h, 21 / h, 84 / h FROM decimal WHERE h > 0;
SELECT 21 + i, 21 - i, 84 - i, 21 * i, -21 * i, 21 / i, 84 / i, intDiv(21, i), intDivOrZero(84, i) FROM decimal WHERE i > 0;
SELECT 21 + j, 21 - j, 84 - j, 21 * j, -21 * j, 21 / j, 84 / j, intDiv(21, j), intDivOrZero(84, j) FROM decimal WHERE j > 0;
SELECT 21 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.248.0')));
SELECT 21,'Hello',bin(bitShiftLeft('Hello', 21));
SELECT 21,'Hello',bin(bitShiftRight('Hello', 21));
SELECT 21,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 21));
SELECT 21,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 21));
SELECT 21.99;
select 211 from test54378 prewhere part_date = '2018-04-19';
select 212 from test54378 prewhere part_date in ('2018-04-19');
select 213 from test54378 prewhere pk_date in ('2018-04-19');
select 214 from test54378 prewhere date in ('2018-04-19');
SELECT 2147483647 % 255;
SELECT 22 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.252.0')));
select 22, 'fail: not exists';
SELECT 22,'Hello',bin(bitShiftLeft('Hello', 22));
SELECT 22,'Hello',bin(bitShiftRight('Hello', 22));
SELECT 22,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 22));
SELECT 22,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 22));
select 221 from test54378 prewhere part_date = toDate('2018-04-19');
select 222 from test54378 prewhere part_date in (toDate('2018-04-19'));
select 223 from test54378 prewhere pk_date in (toDate('2018-04-19'));
select 224 from test54378 prewhere date in (toDate('2018-04-19'));
SELECT 23 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.254.0')));
SELECT 23,'Hello',bin(bitShiftLeft('Hello', 23));
SELECT 23,'Hello',bin(bitShiftRight('Hello', 23));
SELECT 23,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 23));
SELECT 23,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 23));
select 231 from test54378 prewhere part_date = (SELECT toDate('2018-04-19'));
SELECT 232 FROM test54378 PREWHERE (part_date = (SELECT toDate('2018-04-19'))) IN (SELECT toDate('2018-04-19')) GROUP BY toDate(toDate(-2147483649, NULL), NULL), -inf;
select 232 from test54378 prewhere part_date in (SELECT toDate('2018-04-19'));
select 233 from test54378 prewhere pk_date in (SELECT toDate('2018-04-19'));
select 234 from test54378 prewhere date in (SELECT toDate('2018-04-19'));
SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.0')));
SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.0')));
SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.128')));
SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.192')));
SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.224')));
SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.240')));
SELECT 24 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.248')));
SELECT 24,'Hello',bin(bitShiftLeft('Hello', 24));
SELECT 24,'Hello',bin(bitShiftRight('Hello', 24));
SELECT 24,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 24));
SELECT 24,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 24));
SELECT 25 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.128')));
SELECT 25,'Hello',bin(bitShiftLeft('Hello', 25));
SELECT 25,'Hello',bin(bitShiftRight('Hello', 25));
SELECT 25,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 25));
SELECT 25,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 25));
SELECT 255 % 1000000009;
SELECT 255 % 510;
SELECT 255 % 512;
SELECT 255 % 99;
SELECT 26 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.192')));
SELECT 26,'Hello',bin(bitShiftLeft('Hello', 26));
SELECT 26,'Hello',bin(bitShiftRight('Hello', 26));
SELECT 26,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 26));
SELECT 26,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 26));
SELECT 27 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.224')));
SELECT 27,'Hello',bin(bitShiftLeft('Hello', 27));
SELECT 27,'Hello',bin(bitShiftRight('Hello', 27));
SELECT 27,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 27));
SELECT 27,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 27));
SELECT 28 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.240')));
SELECT 28,'Hello',bin(bitShiftLeft('Hello', 28));
SELECT 28,'Hello',bin(bitShiftRight('Hello', 28));
SELECT 28,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 28));
SELECT 28,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 28));
SELECT 29 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.248')));
SELECT 29,'Hello',bin(bitShiftLeft('Hello', 29));
SELECT 29,'Hello',bin(bitShiftRight('Hello', 29));
SELECT 29,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 29));
SELECT 29,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 29));
SELECT 2;
select 3 = countEqual([0 as x, 1, x, x], materialize(x)) from system.numbers limit 10;
select 3 = countEqual([0 as x, 1, x, x], materialize(x));
select 3 = countEqual([0 as x, 1, x, x], x) from system.numbers limit 10;
select 3 = countEqual([0 as x, 1, x, x], x);
select 3 = countEqual(materialize([0 as x, 1, x, x]), materialize(x)) from system.numbers limit 10;
select 3 = countEqual(materialize([0 as x, 1, x, x]), materialize(x));
select 3 = countEqual(materialize([0 as x, 1, x, x]), x) from system.numbers limit 10;
select 3 = countEqual(materialize([0 as x, 1, x, x]), x);
select 3 = multiSearchFirstIndex(materialize('xtjxvytsseiqrpkbspwipjns'), ['bwmoghrdbaeybrmsnucbd', 'zoslqabihtlcqatlczbf', 'sseiqrpkbspwipjn', 'mdnbzcvtayycqfbycwum', 'npueimpsprhfdfnbtyzcogqsb', 'ytsseiqrpkbspwipj', 'fzvhcobygkwqohwutfyauwocwid', 'naacyhhkirpqlywrrpforhkcjrjsnz', 'vezbzderculzpmsehxqrkoihfoziaxhghh', 'mvvdfqzskcyomjbaxjfrtmbduvm', 'pwipjns', 'tsseiqrpkbspwipjn', 'sseiqrpkbspwip', 'qgrtbcdqcbybzevizw', 'isjouwql', 'rlbeidykltcyopzsfstukduxabothywwbq']) from system.numbers limit 10;
select 3 = multiSearchFirstIndexCaseInsensitive(materialize('aliAsDgMSDPISdriLduBFnuWaaRej'), ['gWOFTxMrQGQaLrpJamvRhgeHwk', 'iWsBLzLycWvbJXBNlBazmJqxNlaPX', 'Ri', 'FPLRURSsjvsySncekcxaWQFGKn', 'wgXSTVzddtSGJQWxucYorRjnQQlJcd', 'wOLJWZcjHEatZWYfIwGIqnuzdcHKSFqfARfNLky', 'eEECZMNmWcoEnVeSrDNJxcOKDz', 'duBF', 'EhfLOjeEOQ', 'dUbFNUWA']) from system.numbers limit 10;
select 3 = multiSearchFirstIndexUTF8(materialize('бхжвчашрощбмсбущлхевозожзуцгбе'), ['амидхмуеийхрнчйейтущлуегрртщрхвг', 'фнисцщггбщйа', 'хжвчашрощбмсбу', 'фщвщцнеспдддцчччекчвеещ', 'ущуджсшежчелмкдмщхашв', 'цкуфбиз', 'евозожз', 'ппт', 'лвцнелшхцш', 'ощбмсбущлхев', 'ефхсзишшвтмцжнвклцуо', 'цржсржмчвмфмнеещхмиркчмцойвйц', 'ашрощбмсбущлхевозожзу', 'гхщншфрщзтнтжкмлщанв', '', 'хевозо', 'ощбмсбущлхевозожзуц', 'возожзуц']) from system.numbers limit 10;
select 3 = position('abc', 'c');
select 3 = position('abcd', materialize('c')) from system.numbers limit 10;
select 3 = position('abcd', materialize('c'));
select 3 = position('abcd', materialize('cd')) from system.numbers limit 10;
select 3 = position('abcd', materialize('cd'));
select 3 = position('abcdefgh', materialize('c')) from system.numbers limit 10;
select 3 = position('abcdefgh', materialize('c')) from system.numbers limit 129;
select 3 = position('abcdefgh', materialize('c'));
select 3 = position('abcdefgh', materialize('cd')) from system.numbers limit 10;
select 3 = position('abcdefgh', materialize('cd')) from system.numbers limit 129;
select 3 = position('abcdefgh', materialize('cd'));
select 3 = position('abcdefgh', materialize('cde')) from system.numbers limit 10;
select 3 = position('abcdefgh', materialize('cde')) from system.numbers limit 129;
select 3 = position('abcdefgh', materialize('cde'));
select 3 = position('abcdefgh', materialize('cdef')) from system.numbers limit 10;
select 3 = position('abcdefgh', materialize('cdef')) from system.numbers limit 129;
select 3 = position('abcdefgh', materialize('cdef'));
select 3 = position('abcdefgh', materialize('cdefg')) from system.numbers limit 10;
select 3 = position('abcdefgh', materialize('cdefg')) from system.numbers limit 129;
select 3 = position('abcdefgh', materialize('cdefg'));
select 3 = position('abcdefgh', materialize('cdefgh')) from system.numbers limit 10;
select 3 = position('abcdefgh', materialize('cdefgh')) from system.numbers limit 129;
select 3 = position('abcdefgh', materialize('cdefgh'));
select 3 = position('c' in 'abc');
select 3 = position('абв', 'бв');
select 3 = position('абвабв', 'б', 2);
select 3 = position('абвабв', 'б', 3);
select 3 = position('абвабв', 'бва', 2);
select 3 = position('бв' in 'абв');
select 3 = position(materialize('abc'), 'c') from system.numbers limit 10;
select 3 = position(materialize('abc'), 'c');
select 3 = position(materialize('абв'), 'бв') from system.numbers limit 10;
select 3 = position(materialize('абв'), 'бв');
select 3 = positionCaseInsensitive('abc', 'C');
select 3 = positionCaseInsensitive(materialize('abc'), 'C') from system.numbers limit 10;
select 3 = positionCaseInsensitive(materialize('abc'), 'C');
select 3 = positionCaseInsensitiveUTF8('абв', 'в');
select 3 = positionCaseInsensitiveUTF8(materialize('абв'), 'В') from system.numbers limit 10;
select 3 = positionCaseInsensitiveUTF8(materialize('абв'), 'В');
select 3 = positionUTF8('абв', 'в');
select 3 = positionUTF8(materialize('абв'), 'в') from system.numbers limit 10;
select 3 = positionUTF8(materialize('абв'), 'в');
select 3 = sequenceCount('(?2)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 3 = windowFunnel(10000)(timestamp, event = 1000, event = 1001, event = 1002) from funnel_test;
select 3 = windowFunnel(10000)(timestamp, event = 1004, event = 1004, event = 1004) from funnel_test_strict_increase;
select 3 = windowFunnel(2)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test;
select 3 = windowFunnel(86400, 'strict_deduplication')(ts, event='a', event='b', event='c', event='d') from strict_BiteTheDDDD format JSONCompactEachRow;
SELECT 3 == count() FROM (SELECT toLowCardinality(toNullable(number)) AS l FROM system.numbers LIMIT 3) AS s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(number)) AS r FROM system.numbers LIMIT 4) AS s2 ON l = r ;
SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('224.0.0.0')));
SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.0.0.0')));
SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.0.0.127')));
SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7f00:0')));
SELECT 3 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7f00:7f')));
SELECT 3 as nelems, [[1,2],[-10,-20],[10,20],[0,0],[-1.5,1]] as arr, arrayResize(arrayPartialSort(nelems, arr), nelems), arrayResize(arrayPartialReverseSort(nelems, arr), nelems), arrayResize(arrayPartialSort((x) -> arraySum(x), nelems, arr), nelems);
select 3 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 3 as offset, -3 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 3 as offset, -3 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 3 as offset, 3 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 3 as offset, 3 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 3 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 3 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
SELECT 3 FROM system.one WHERE (1, 1) IN (SELECT 1 AS x, x) OR (1, 0) IN (SELECT 1 AS x, x);
select 3 from t as l join t as r on l.id = r.id prewhere l.x where r.x;
select 3 in 1;
select 3 in [1, 2];
SELECT 3, 'Hello',bin(bitShiftLeft('Hello', 3));
SELECT 3, 'Hello',bin(bitShiftRight('Hello', 3));
select 3, arraySort(groupArray(n)) from rmt2;
select 3, n, _part from rmt1 order by n;
select 3, system.parts.name, txn_counters.creation_tid = system.parts.creation_tid from txn_counters join system.parts on txn_counters._part = system.parts.name where database=currentDatabase() and table='txn_counters' order by system.parts.name;
SELECT 3, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 3));
SELECT 3, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 3));
SELECT 3.5 % 0;
SELECT 3.5 MOD 0;
SELECT 30 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.252')));
SELECT 30 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.252')));
SELECT 30 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.254')));
SELECT 30 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.255.255.255')));
SELECT 30,'Hello',bin(bitShiftLeft('Hello', 30));
SELECT 30,'Hello',bin(bitShiftRight('Hello', 30));
SELECT 30,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 30));
SELECT 30,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 30));
SELECT 30000 = h, 30000 = (h - g + 30000) FROM decimal WHERE a = 42;
SELECT 31 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.254')));
SELECT 31,'Hello',bin(bitShiftLeft('Hello', 31));
SELECT 31,'Hello',bin(bitShiftRight('Hello', 31));
SELECT 31,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 31));
SELECT 31,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 31));
select 311 from test54378 where part_date = '2018-04-19';
select 312 from test54378 where part_date in ('2018-04-19');
select 313 from test54378 where pk_date in ('2018-04-19');
select 314 from test54378 where date in ('2018-04-19');
SELECT 314776434768051644139306697240981192872::Int128 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
SELECT 314776434768051644139306697240981192872::Int128 AS x, 14776434768051644139306697240981192872314776434768051644139306697240981192872::UInt256 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
SELECT 314776434768051644139306697240981192872::UInt128 AS x, 0::Int128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
SELECT 314776434768051644139306697240981192872::UInt128 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
SELECT 314776434768051644139306697240981192872::UInt128 AS x, 14776434768051644139306697240981192872314776434768051644139306697240981192872::Int256 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
SELECT 314776434768051644139306697240981192872::UInt128 AS x, 14776434768051644139306697240981192872314776434768051644139306697240981192872::UInt256 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;
SELECT 32 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.255.255.255')));
SELECT 32,'Hello',bin(bitShiftLeft('Hello', 32));
SELECT 32,'Hello',bin(bitShiftRight('Hello', 32));
SELECT 32,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 32));
SELECT 32,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 32));
select 321 from test54378 where part_date = toDate('2018-04-19');
select 322 from test54378 where part_date in (toDate('2018-04-19'));
select 323 from test54378 where pk_date in (toDate('2018-04-19'));
select 324 from test54378 where date in (toDate('2018-04-19'));
SELECT 33,'Hello',bin(bitShiftLeft('Hello', 33));
SELECT 33,'Hello',bin(bitShiftRight('Hello', 33));
SELECT 33,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 33));
SELECT 33,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 33));
select 331 from test54378 where part_date = (SELECT toDate('2018-04-19'));
select 332 from test54378 where part_date in (SELECT toDate('2018-04-19'));
select 333 from test54378 where pk_date in (SELECT toDate('2018-04-19'));
select 334 from test54378 where date in (SELECT toDate('2018-04-19'));
SELECT 34,'Hello',bin(bitShiftLeft('Hello', 34));
SELECT 34,'Hello',bin(bitShiftRight('Hello', 34));
SELECT 34,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 34));
SELECT 34,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 34));
SELECT 34e+21;
SELECT 34e+2_1;
SELECT 34e-21;
SELECT 34e-2_1;
SELECT 34e21;
SELECT 34e2_1;
SELECT 35,'Hello',bin(bitShiftLeft('Hello', 35));
SELECT 35,'Hello',bin(bitShiftRight('Hello', 35));
SELECT 35,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 35));
SELECT 35,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 35));
select 36 as offset, 16 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 36 as offset, 8 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
SELECT 36,'Hello',bin(bitShiftLeft('Hello', 36));
SELECT 36,'Hello',bin(bitShiftRight('Hello', 36));
SELECT 36,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 36));
SELECT 36,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 36));
SELECT 37 == COUNT(*) FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ipv4_trie_dict;
SELECT 37 == COUNT(DISTINCT prefix) FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ipv4_trie_dict;
SELECT 37,'Hello',bin(bitShiftLeft('Hello', 37));
SELECT 37,'Hello',bin(bitShiftRight('Hello', 37));
SELECT 37,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 37));
SELECT 37,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 37));
SELECT 38,'Hello',bin(bitShiftLeft('Hello', 38));
SELECT 38,'Hello',bin(bitShiftRight('Hello', 38));
SELECT 38,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 38));
SELECT 38,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 38));
SELECT 39,'Hello',bin(bitShiftLeft('Hello', 39));
SELECT 39,'Hello',bin(bitShiftRight('Hello', 39));
SELECT 39,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 39));
SELECT 39,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 39));
SELECT 3;
SELECT 3_4e+2_1;
SELECT 3_4e-2_1;
SELECT 3_4e2_1;
select 4 = indexOf([0, 1, 2, 3 as x], materialize(x)) from system.numbers limit 10;
select 4 = indexOf([0, 1, 2, 3 as x], materialize(x));
select 4 = indexOf([0, 1, 2, 3 as x], x) from system.numbers limit 10;
select 4 = indexOf([0, 1, 2, 3 as x], x);
select 4 = indexOf(materialize([0, 1, 2, 3 as x]), materialize(x)) from system.numbers limit 10;
select 4 = indexOf(materialize([0, 1, 2, 3 as x]), materialize(x));
select 4 = indexOf(materialize([0, 1, 2, 3 as x]), x) from system.numbers limit 10;
select 4 = indexOf(materialize([0, 1, 2, 3 as x]), x);
select 4 = multiSearchFirstIndexCaseInsensitive(materialize('mDFzyOuNsuOCSzyjWXxePRRIAHi'), ['TfejIlXcxqqoVmNHsOocEogH', 'clyblaTFmyY', 'JQfxMAWVnQDucIQ', 'jw', 'fGetlRA', 'uWwCOCd', 'rInhyxSIFiogdCCdTPqJNrqVaKIPWvLFI', 'mimSJjfCWI', 'jqnJvNZXMEPorpIxpWkhCoiGzlcfqRGyWxQL', 'bxCJeVlWhqGHoakarZcK', 'unsUOcSZyjwxxe', 'E', 'PR', 'nsUoCSZyjwxXEPr', 'sfotzRPMmalUSjHkZDDOzjens', 'zYJwxx', 'DFzyouNsUocsZ', 'QBaQfeznthSEMIPFwuvtolRzrXjjhpUY', 'sQPVBaoeYlUyZRHtapfGM', 'lPiZLi']) from system.numbers limit 10;
select 4 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('ЕКаЖСЗЗЕЗгПдШкфцЙТцл'), ['ЙКМИХРОХ', 'НвМУХзфчДбАРЙДу', 'чмщжФшшжсЗТв', 'жСЗзеЗг', 'ЛФсКзВСдЦД', 'АЖсЗЗЕЗГ', 'Пдшкфц', 'усйсКщшрДрвнФЛедуГХ', '', 'цйтЦ', 'Ощс', 'ЕЗГпдшКф', 'ззеЗгп', 'УгЛйхШТтшрЛ', 'ЗзЕЗгП', 'КЛмТЩРтрзБбЩРгФбиОБазУнтУЦ']) from system.numbers limit 10;
select 4 = position('abcdefgh', materialize('d')) from system.numbers limit 10;
select 4 = position('abcdefgh', materialize('d')) from system.numbers limit 129;
select 4 = position('abcdefgh', materialize('d'));
select 4 = position('abcdefgh', materialize('de')) from system.numbers limit 10;
select 4 = position('abcdefgh', materialize('de')) from system.numbers limit 129;
select 4 = position('abcdefgh', materialize('de'));
select 4 = position('abcdefgh', materialize('def')) from system.numbers limit 10;
select 4 = position('abcdefgh', materialize('def')) from system.numbers limit 129;
select 4 = position('abcdefgh', materialize('def'));
select 4 = position('abcdefgh', materialize('defg')) from system.numbers limit 10;
select 4 = position('abcdefgh', materialize('defg')) from system.numbers limit 129;
select 4 = position('abcdefgh', materialize('defg'));
select 4 = position('abcdefgh', materialize('defgh')) from system.numbers limit 10;
select 4 = position('abcdefgh', materialize('defgh')) from system.numbers limit 129;
select 4 = position('abcdefgh', materialize('defgh'));
select 4 = sequenceCount('(?1)(?1)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select 4 = windowFunnel(10000)(timestamp, event = 1000, event = 1001, event = 1002, event = 1008) from funnel_test;
select 4 = windowFunnel(3)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test;
select 4 = windowFunnel(4)(timestamp, event <= 1007, event >= 1002, event <= 1006, event >= 1004) from funnel_test2;
select 4 = windowFunnel(4)(timestamp, event <= 1007, event >= 1002, event <= 1006, event >= 1004) from funnel_test_u64;
SELECT 4 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('240.0.0.0')));
SELECT 4 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('127.0.0.1')));
SELECT 4 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv6StringToNum('::ffff:7f00:1')));
SELECT 4 as nelems, arrayResize(arrayPartialSort((x) -> -x, nelems, [1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]), nelems);
SELECT 4 as nelems, arrayResize(arrayPartialSort(nelems, [1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]), nelems);
select 4 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 4 as offset, -4 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 4 as offset, -4 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 4 as offset, 4 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 4 as offset, 4 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 4 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 4 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
SELECT 4 FROM system.one WHERE (1, 1) IN (SELECT 1 AS x, x) AND (1, 0) IN (SELECT 1 AS x, toUInt8(x - 1));
select 4 from t as l join t as r using id prewhere l.x where r.x;
select 4 in plus(2, 2);
select 4, 'fail: exists';
SELECT 4, 'Hello',bin(bitShiftLeft('Hello', 4));
SELECT 4, 'Hello',bin(bitShiftRight('Hello', 4));
SELECT 4, * FROM merge_tree ORDER BY d;
select 4, arraySort(groupArray(n)) from rmt1;
select 4, n from rmt2 order by n;
select 4, name, creation_csn, removal_tid, removal_csn from system.parts where database=currentDatabase() and table='txn_counters' order by system.parts.name;
SELECT 4, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 4));
SELECT 4, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 4));
select 40 as z from (select * from system.numbers limit 3) group by z WITH TOTALS;
select 40 as z from (select * from system.numbers limit 3) group by z;
SELECT 40,'Hello',bin(bitShiftLeft('Hello', 40));
SELECT 40,'Hello',bin(bitShiftRight('Hello', 40));
SELECT 40,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 40));
SELECT 40,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 40));
select 41 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 41 as offset, 1 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 41 as z from remote('127.0.0.{2,3}', system.one) group by z WITH TOTALS;
select 41 as z from remote('127.0.0.{2,3}', system.one) group by z;
SELECT 41,'Hello',bin(bitShiftLeft('Hello', 41));
SELECT 41,'Hello',bin(bitShiftRight('Hello', 41));
SELECT 41,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 41));
SELECT 41,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 41));
select 411 from test54378 where part_date = '2018-04-19';
select 412 from test54378 where part_date in ('2018-04-19');
select 413 from test54378 where pk_date in ('2018-04-19');
select 414 from test54378 where date in ('2018-04-19');
SELECT 42 % 13;
SELECT 42 % 22;
SELECT 42 FROM ( select 1 AS a UNION ALL select 1 as a ) AS t1, ( select 2 AS b, 3 AS c UNION ALL select 2 as b, 3 as c) AS t2;
SELECT 42,'Hello',bin(bitShiftLeft('Hello', 42));
SELECT 42,'Hello',bin(bitShiftRight('Hello', 42));
SELECT 42,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 42));
SELECT 42,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 42));
select 421 from test54378 where part_date = toDate('2018-04-19');
select 422 from test54378 where part_date in (toDate('2018-04-19'));
select 423 from test54378 where pk_date in (toDate('2018-04-19'));
select 424 from test54378 where date in (toDate('2018-04-19'));
select 42424.4242424242::Float64 as x, [42.42::Float64, 42.42::Float64] as arr, tuple(42.42::Float64) as tuple format JSONEachRow settings output_format_json_quote_64bit_floats=0;
select 42424.4242424242::Float64 as x, [42.42::Float64, 42.42::Float64] as arr, tuple(42.42::Float64) as tuple format JSONEachRow settings output_format_json_quote_64bit_floats=1;
select 43 AS z from remote('127.0.0.{2,3}', system.one) group by 42, 43, 44 WITH TOTALS;
select 43 AS z from remote('127.0.0.{2,3}', system.one) group by 42, 43, 44;
select 431 from test54378 where part_date = (SELECT toDate('2018-04-19'));
select 432 from test54378 where part_date in (SELECT toDate('2018-04-19'));
select 433 from test54378 where pk_date in (SELECT toDate('2018-04-19'));
select 434 from test54378 where date in (SELECT toDate('2018-04-19'));
select 49 as offset, 1 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 49 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT 4;
select 5 = multiMatchAnyIndex(materialize('vladizlvav dabe don\'t heart me no more'), ['what', 'is', 'love', 'baby', 'no mo??', 'dont', 'h.rt me']) from system.numbers limit 10;
select 5 = multiMatchAnyIndex(materialize('vladizlvav dabe don\'t heart me no more'), materialize(['what', 'is', 'love', 'baby', 'no mo??', 'dont', 'h.rt me'])) from system.numbers limit 10;
select 5 = multiSearchFirstIndexCaseInsensitive(materialize('KoLaGGWMRbPbKNChdKPGuNCDKZtWRX'), ['FBmf', 'QJxevrlVWhTDAJetlGoEBZWYz', 'tKoWKKXBOATZukMuBEaYYBPHuyncskOZYD', 'kgjgTpaHXji', '', 'xOJWVRvQoAYNVSN', 'YApQjWJCFuusXpTLfmLPinKNEuqfYAz', 'GXGfZJxhHcChCaoLwNNocnCjtIuw', 'ZLBHIwyivzQDbGsmVNBFDpVaWkIDRqsl', 'Kp', 'EyrNtIFdsoUWqLcVOpuqJBdMQ', 'AggwmRBpbknCHdKPgun', 'xNlnPtyQsdqH', 'hDk']) from system.numbers limit 10;
select 5 = multiSearchFirstIndexCaseInsensitive(materialize('oQLuuhKsqjdTaZmMiThIJrtwSrFv'), ['MsfVCGMIlgwomkNhkKn', 'fBzcso', 'meOeEdkEbFjgyAaeQeuqZXFFXqIxBkLbYiPk', 'tNV', 'i', 'EwuTkQnYCWktMAIdZEeJkgl', '', 'hUo', 'dtAzmMITHijRtwsrFV', 'vhnipYCl', 'puor', 'TazMmiTh', 'ITHIJRTWSrf', 'luuHksqJDTaz', 'uHkSQjDtazMMiThIjrtwSRFV', 'gpWugfu', 'QjdtazmmIthIjRTWSRFV', 'ZdJpc']) from system.numbers limit 10;
select 5 = multiSearchFirstIndexUTF8(materialize('опднхссгртрхтотлпагхжипхпитраб'), ['шфршсцешушклудефцугщцмйщлошечедзг', 'нйумйхфщцгщклдожхвосочжжислцрц', 'згтпвзцбхйптцбагсвцгтнф', 'пшичси', 'ссгртрхтотлпа', 'апзазогвсбежзрйгщоитмдкн', 'непгайтзкгштглхифмзданоихц', 'пднхссгртрхтотлпагхжипхпитр', 'ждднфлрзалшптсбтущвошрйтхкцнегшхрсв', 'брп', 'сгртрхтотлпагхжипх', 'нхссгртрхтотлпагхжипхп', 'пагхж', 'мфкжм']) from system.numbers limit 10;
select 5 = position('abcabc', 'b', 3);
select 5 = position('abcabc', 'b', 4);
select 5 = position('abcabc', 'b', 5);
select 5 = position('abcdefgh', materialize('e')) from system.numbers limit 10;
select 5 = position('abcdefgh', materialize('e')) from system.numbers limit 129;
select 5 = position('abcdefgh', materialize('e'));
select 5 = position('abcdefgh', materialize('ef')) from system.numbers limit 10;
select 5 = position('abcdefgh', materialize('ef')) from system.numbers limit 129;
select 5 = position('abcdefgh', materialize('ef'));
select 5 = position('abcdefgh', materialize('efg')) from system.numbers limit 10;
select 5 = position('abcdefgh', materialize('efg')) from system.numbers limit 129;
select 5 = position('abcdefgh', materialize('efg'));
select 5 = position('abcdefgh', materialize('efgh')) from system.numbers limit 10;
select 5 = position('abcdefgh', materialize('efgh')) from system.numbers limit 129;
select 5 = position('abcdefgh', materialize('efgh'));
select 5 = position('абв', 'в');
select 5 = position('абвабв', 'в', 0);
select 5 = position('в' in 'абв');
select 5 = position(materialize('абв'), 'в') from system.numbers limit 10;
select 5 = position(materialize('абв'), 'в');
select 5 = positionUTF8('абвабв', 'б', 3);
select 5 = positionUTF8('абвабв', 'б', 4);
select 5 = positionUTF8('абвабв', 'б', 5);
select 5 = positionUTF8('абвабв', materialize('б'), 3) from system.numbers limit 10;
select 5 = positionUTF8('абвабв', materialize('б'), 4) from system.numbers limit 10;
select 5 = positionUTF8('абвабв', materialize('б'), 5) from system.numbers limit 10;
select 5 = positionUTF8(materialize('абвабв'), 'б', 3) from system.numbers limit 10;
select 5 = positionUTF8(materialize('абвабв'), 'б', 4) from system.numbers limit 10;
select 5 = positionUTF8(materialize('абвабв'), 'б', 5) from system.numbers limit 10;
select 5 = positionUTF8(materialize('абвабв'), materialize('б'), 3) from system.numbers limit 10;
select 5 = positionUTF8(materialize('абвабв'), materialize('б'), 4) from system.numbers limit 10;
select 5 = positionUTF8(materialize('абвабв'), materialize('б'), 5) from system.numbers limit 10;
select 5 = windowFunnel(10000)(timestamp, event = 1000, event = 1001, event = 1002, event = 1003, event = 1004) from funnel_test_strict_increase;
select 5 = windowFunnel(4)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test2;
select 5 = windowFunnel(4)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test;
select 5 = windowFunnel(4)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test_u64;
SELECT 5 == count() FROM (SELECT number as a from numbers(5) WHERE number > 100) as t1 RIGHT JOIN (SELECT number as b from numbers(5)) as t2 ON t1.a = t2.b ORDER BY 1;
SELECT 5 == count() FROM (SELECT number as a from numbers(5)) as t1 LEFT JOIN (SELECT number as b from numbers(5) WHERE number > 100) as t2 ON t1.a = t2.b ORDER BY 1;
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('248.0.0.0')));
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('248.0.0.0')));
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('252.0.0.0')));
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('254.0.0.0')));
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.0.0.0')));
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.128.0.0')));
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.192.0.0')));
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.224.0.0')));
SELECT 5 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'val', tuple(IPv4StringToNum('255.240.0.0')));
SELECT 5 AS constant, arrayMap(x -> x + arrayMap(x -> constant, [1])[1], [1,2,3]) FROM test_table;
SELECT 5 AS constant, arrayMap(x -> x + arrayMap(x -> constant, [1])[1], [1,2,3]);
SELECT 5 AS constant, arrayMap(x -> x + arrayMap(x -> x + constant, [1])[1], [1,2,3]) FROM test_table;
SELECT 5 AS constant, arrayMap(x -> x + arrayMap(x -> x + id + constant, [1])[1], [1,2,3]) FROM test_table;
SELECT 5 AS constant, arrayMap(x -> x + arrayMap(y -> x + y + id + constant, [1])[1], [1,2,3]) FROM test_table;
select 5 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 5 as offset, -5 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 5 as offset, -5 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 5 as offset, 5 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 5 as offset, 5 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 5 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 5 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
select 5 from numbers(20) intersect select number from numbers(5, 5);
SELECT 5 FROM system.one WHERE (1, 1) IN (SELECT 1 AS x, x) OR (1, 0) IN (SELECT 1 AS x, toUInt8(x - 1));
select 5 from t as l join t as r on l.id = r.id where l.x and r.x;
SELECT 5, 'Hello',bin(bitShiftLeft('Hello', 5));
SELECT 5, 'Hello',bin(bitShiftRight('Hello', 5));
SELECT 5, * FROM merge_tree ORDER BY d;
select 5, n, _part from rmt1 order by n;
SELECT 5, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 5));
SELECT 5, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 5));
select 5, transactionID().3 == serverUUID();
SELECT 5.5 * (2, 4);
select 50 = length(format((select arrayStringConcat(arrayMap(x ->'{', range(100)))), ''));
SELECT 5;
select 5;
select 6 = multiSearchFirstIndexCaseInsensitive(materialize('OlyNppgrtlubvhpJfxeWsRHpr'), ['slbiGvzIFnqPgKZbzuh', 'fakuDHZWkYbXycUwNWC', 'HnVViUypZxAsLJocdwFFPgTDIkI', 'bLx', 'fmXVYOINsdIMmTJAQYWbBAuX', 'pjFXews', 'BG', 'vrSQLb', 'ub', 'pREPyIjRhXGKZovTqlDyYIuoYHewBH', 'hnNQpJmOKnGMlVbkSOyJxoQMdbGhTAsQU', 'UwaNyOQuYpkE', 'yHNlFVnuOLUxqHyzAtNgNohLT', 'YJRazuUZkP', 'z', 'lUbVhpjFxEWsRhP']) from system.numbers limit 10;
select 6 = multiSearchFirstIndexCaseInsensitive(materialize('ryHzepjmzFdLkCcYqoFCgnJh'), ['cLwBRJmuspkoOgKwtLXLbKFsj', 'YSgEdzTdYTZAEtaoJpjyfwymbERCVvveR', 'RzdDRzKjPXQzberVJRry', 'HUitVdjGjxYwIaLozmnKcCpFOjotfpAy', 'LWqtEkIiSvufymDiYjwt', 'FDlKCCYqoFCGNj', 'jmZfdlKCcyQOFcGnJ', 'OZCPsxgxYHdhqlnPnfRVGOJRL', 'JfhoyhbUhmDrKtYjZDCDFDcdNs', 'KCCYqo', 'EPJMzFDLKcCYQ', 'zLQb', 'qsqFDGqVnDX', 'MzfdLkCCyQOFc']) from system.numbers limit 10;
select 6 = multiSearchFirstPosition(materialize('abcdefgh'), ['something', 'bcdz', 'fgh', 'f']) from system.numbers limit 10;
select 6 = multiSearchFirstPositionCaseInsensitive(materialize('abcdefgh'), ['sOmEthIng', 'bcdZ', 'fGh', 'F']) from system.numbers limit 10;
select 6 = multiSearchFirstPositionCaseInsensitiveUTF8(materialize('аБвгДежЗ'), ['З', 'бвгЯ', 'ЕЖз', 'з']) from system.numbers limit 10;
select 6 = multiSearchFirstPositionUTF8(materialize('абвгдежз'), ['з', 'бвгя', 'ежз', 'з']) from system.numbers limit 10;
select 6 = position('/' IN s) FROM (SELECT 'Hello/World' AS s);
select 6 = position('abcdefgh', materialize('f')) from system.numbers limit 10;
select 6 = position('abcdefgh', materialize('f')) from system.numbers limit 129;
select 6 = position('abcdefgh', materialize('f'));
select 6 = position('abcdefgh', materialize('fg')) from system.numbers limit 10;
select 6 = position('abcdefgh', materialize('fg')) from system.numbers limit 129;
select 6 = position('abcdefgh', materialize('fg'));
select 6 = position('abcdefgh', materialize('fgh')) from system.numbers limit 10;
select 6 = position('abcdefgh', materialize('fgh')) from system.numbers limit 129;
select 6 = position('abcdefgh', materialize('fgh'));
select 6 = positionCaseInsensitive(materialize('abcabc'), 'C', 4) from system.numbers limit 10;
select 6 = positionCaseInsensitive(materialize('abcabc'), 'C', 4);
select 6 = positionCaseInsensitive(materialize('abcabc'), 'C', materialize(4)) from system.numbers limit 10;
select 6 = positionCaseInsensitiveUTF8(materialize('абвабв'), 'В', 4) from system.numbers limit 10;
select 6 = positionCaseInsensitiveUTF8(materialize('абвабв'), 'В', 4);
select 6 = positionCaseInsensitiveUTF8(materialize('абвабв'), 'В', materialize(4)) from system.numbers limit 10;
select 6 = windowFunnel(10000, 'strict_deduplication')(timestamp, event = 1000, event = 1001, event = 1002, event = 1003, event = 1004, event = 1005, event = 1006) from funnel_test_strict;
SELECT 6 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('252.0.0.0')));
select 6 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 6 as offset, -6 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 6 as offset, -6 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 6 as offset, 6 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 6 as offset, 6 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 6 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 6 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
select 6 from t as l join t as r using id where l.x and r.x;
SELECT 6, 'Hello',bin(bitShiftLeft('Hello', 6));
SELECT 6, 'Hello',bin(bitShiftRight('Hello', 6));
select 6, arraySort(groupArray(n)) from rmt2;
select 6, n, _part from rmt2 order by n;
select 6, system.parts.name, txn_counters.creation_tid = system.parts.creation_tid from txn_counters join system.parts on txn_counters._part = system.parts.name where database=currentDatabase() and table='txn_counters' order by system.parts.name;
SELECT 6, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 6));
SELECT 6, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 6));
SELECT 65536 AND 2147483647, throwIf((((1048575 AND throwIf((0. AND NULL) AND (((65536 AND 257) AND (1.1754943508222875e-38 AND 1024) AND -2147483649) AND NULL) AND (10 AND NULL)) AND (((65536 AND 257) AND (1.1754943508222875e-38 AND 1024) AND -1) AND NULL) AND 65535) AND -1) AND NULL) AND (NULL AND NULL), NULL < number) FROM numbers(10);
SELECT 693962 AS u, toInt32(u) AS s, fromDaysSinceYearZero32(u), fromDaysSinceYearZero32(materialize(u)), fromDaysSinceYearZero32(s), fromDaysSinceYearZero32(materialize(s));
SELECT 6;
select 6;
SELECT 7 % 3;
SELECT 7 * [[[2, 3, 5, 5]]];
SELECT 7 * materialize([2, 3, 5]);
select 7 = multiSearchFirstIndex(materialize('wcrqaoecjwkhnskrbahqxfqgf'), ['qegldkdmyaznlmlhzvxfgoukngzbatnuq', 'khgcvgrifwtc', 'hkwcpogbbdqulizrycmneqmqynvj', 'zkqjf', 'xfduxyy', 'ructdekcoywfxsvpumfefoglljptsuwd', 'wkhnskrbahq', 'crqaoecjwkh', 'ikmpbunpguleinptzfelysiqc', 'lhldcci', 'nooepfypkoxxbriztycqam', 'uxeroptbiqrjartlnxzhhnlvjp']) from system.numbers limit 10;
select 7 = multiSearchFirstIndex(materialize('zqwvlarwmhhtjjgwrivwfpsjkvx'), ['zcwhagxehtswbdkey', 'okezglmrjoim', 'ilwdviqimijzgoopmxdswouh', 'aqztpsntwjqpluygrvwdyz', 'uzxhjuhiwpz', 'akgc', 'larwmhhtjjgwrivwfpsj', 'isqghxsmcrwlgyloslmlyeboywtttgejdyma', 'arwmhhtjjgwri', 'rwmhhtjj']) from system.numbers limit 10;
select 7 = multiSearchFirstIndexCaseInsensitive(materialize('fsoSePRpplvNyBVQYjRFHHIh'), ['ZqGBzyQJYuhTupkOLLqgXdtIkhZx', 'pouH', 'mzCauXdgBdEpuzzFkfJ', 'uOrjMmsHkPpGAhjJwVOFw', 'KbKrrCJrTtiuu', 'jxbLtHIrwYXDERFHfMzVJxgUAofwUrB', 'PLvNyBVQYjRfhhi', 'wTPkeRGqqYiIxwExFu', 'PplvNybvqyJ', 'qOWuzwzvWrvzamVTPUZPMmZkIESq', 'ZDGM', 'nLyiGwqGIcr', 'GdaWtNcVvIYClQBiomWUrBNNKWV', 'QQxsPMoliytEtQ', 'TVarlkYnCsDWm', 'BvqYJr', 'YJr', 'sePrPPLVNYbvqYJRFhh', 'ybvq', 'VQYjrFHh']) from system.numbers limit 10;
select 7 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('ихзКЖЩсЧРСЖсЖжЛАшкТхИйТгМБпск'), ['ДРОБм', 'нз', 'тОЛ', 'щРзуЖрТ', 'Мдд', 'АЦГРК', 'Чрсжсжжл', 'чРсжсЖжл', 'ктхИйтГмБ', 'аАзЙддМДЦЩФкРТЧзЧПУойоТхБиЧПлХДв', 'иЙтгМбп', 'РицлПн', 'йДГнЧкЕв', 'ВМЩцАш', 'хКЩнДшуБЕЛТФГВгцБПРихШЙХгГД', 'иЙТГМ']) from system.numbers limit 10;
select 7 = multiSearchFirstPositionCaseInsensitive(materialize('Hello World'), materialize(['WORLD']));
select 7 = multiSearchFirstPositionCaseInsensitiveUTF8(materialize('Hello World £'), materialize(['WORLD']));
select 7 = position('abcdefgh', materialize('g')) from system.numbers limit 10;
select 7 = position('abcdefgh', materialize('g')) from system.numbers limit 129;
select 7 = position('abcdefgh', materialize('g'));
select 7 = position('abcdefgh', materialize('gh')) from system.numbers limit 10;
select 7 = position('abcdefgh', materialize('gh')) from system.numbers limit 129;
select 7 = position('abcdefgh', materialize('gh'));
select 7 = windowFunnel(10000)(timestamp, event = 1000, event = 1001, event = 1002, event = 1003, event = 1004, event = 1005, event = 1006) from funnel_test_strict;
SELECT 7 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('254.0.0.0')));
select 7 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 7 as offset, -7 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 7 as offset, -7 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 7 as offset, 7 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 7 as offset, 7 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 7 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 7 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
SELECT 7 as shift_right_bit,fixedStr as arg,bin(bitShiftLeft(fixedStr, 7)) as fixed_string_res FROM test_bit_shift_left_string_integer;
SELECT 7 as shift_right_bit,fixedStr as arg,bin(bitShiftRight(fixedStr, 7)) as fixed_string_res FROM test_bit_shift_right_string_integer;
SELECT 7 as shift_right_bit,str as arg,bin(bitShiftLeft(str, 7)) as string_res FROM test_bit_shift_left_string_integer;
SELECT 7 as shift_right_bit,str as arg,bin(bitShiftRight(str, 7)) as string_res FROM test_bit_shift_right_string_integer;
select 7 from t as l join t as r on l.id = r.id where l.x and r.x;
SELECT 7, 'Hello',bin(bitShiftLeft('Hello', 7));
SELECT 7, 'Hello',bin(bitShiftRight('Hello', 7));
select 7, arraySort(groupArray(n)) from rmt2;
SELECT 7, count(1000.0001), -9223372036854775807 FROM foo_merge INNER JOIN t2 USING (Val) WHERE (((NULL AND -2 AND (Val = NULL)) AND (Id = NULL) AND (Val = NULL) AND (Id = NULL)) AND (Id = NULL) AND Val AND NULL) AND ((3 AND NULL AND -2147483648 AND (Val = NULL)) AND (Id = NULL) AND (Val = NULL)) AND ((NULL AND -2 AND (Val = NULL)) AND (Id = NULL) AND (Val = NULL)) AND 2147483647 WITH TOTALS;
select 7, name, removal_tid, removal_csn from system.parts where database=currentDatabase() and table='txn_counters' and active order by system.parts.name;
SELECT 7, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 7));
SELECT 7, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 7));
SELECT 70 = 10 * sum(t1.id) + sum(t2.id) AND count() == 4 FROM t1 JOIN t2 ON 1 = 1;
SELECT 70 = 10 * sum(t1.id) + sum(t2.id) AND count() == 4 FROM t1 JOIN t2 ON 1;
SELECT 70 = 10 * sum(t1.id) + sum(t2.id) AND count() == 4 FROM t1 JOIN t2 ON 2 = 2 AND 3 = 3;
SELECT 70 = 10 * sum(t1.id) + sum(t2.id) AND count() == 4 FROM t1 JOIN t2 ON toLowCardinality(1);
SELECT 70 = 10 * sum(t1.id) + sum(t2.id) AND count() == 4 FROM t1 JOIN t2 ON toLowCardinality(toNullable(1));
SELECT 70 = 10 * sum(t1.id) + sum(t2.id) AND count() == 4 FROM t1 JOIN t2 ON toNullable(1);
SELECT 70 = 10 * sum(t1.id) + sum(t2.id) AND count() == 4 FROM t1 JOIN t2 ON toNullable(toLowCardinality(1));
SELECT 719527 AS u, toInt32(u) AS s, fromDaysSinceYearZero(u), fromDaysSinceYearZero(materialize(u)), fromDaysSinceYearZero(s), fromDaysSinceYearZero(materialize(s));
SELECT 719529 AS u, toInt32(u) AS s, fromDaysSinceYearZero(u), fromDaysSinceYearZero(materialize(u)), fromDaysSinceYearZero(s), fromDaysSinceYearZero(materialize(s));
SELECT 77,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 77));
SELECT 77,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 77));
SELECT 78,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 78));
SELECT 78,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 78));
SELECT 785062 AS u, toInt32(u) AS s, fromDaysSinceYearZero(u), fromDaysSinceYearZero(materialize(u)), fromDaysSinceYearZero(s), fromDaysSinceYearZero(materialize(s));
SELECT 785063 AS u, toInt32(u) AS s, fromDaysSinceYearZero(u), fromDaysSinceYearZero(materialize(u)), fromDaysSinceYearZero(s), fromDaysSinceYearZero(materialize(s));
SELECT 785064 AS u, toInt32(u) AS s, fromDaysSinceYearZero(u), fromDaysSinceYearZero(materialize(u)), fromDaysSinceYearZero(s), fromDaysSinceYearZero(materialize(s));
SELECT 79,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 79));
SELECT 79,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 79));
SELECT 7;
select 7;
select 8 = multiSearchFirstIndexCaseInsensitiveUTF8(materialize('ПоДУЗАтХншЦатИшХвмИЖчГнжчНцух'), ['жЛЧХзкжлиЛцЩбЧСнЛУжЖпКРвиСРН', 'шадмЩеУШБврУдЕБЗИгмЗЕФШчЦБСзПидтАлб', 'йпГмШСз', 'хЖФЙиПГЗЩавиЗЩйПнБЗЦЩмАЧ', 'ХесщтлбСИуЦ', 'вар', 'ЙкМаСхаЩаЗнФЩфКжПщб', 'ОдУзАТХншЦатИШхвМиЖчгнЖч', 'ЗВЗДБпФфцвжУКвНсбухссбЙКЙйккЛиим', 'гХхсГЛшдфЖЛбгчоЕмоЧр']) from system.numbers limit 10;
select 8 = multiSearchFirstIndexUTF8(materialize('кщзпапйднучлктхжслмищ'), ['апмдйлсафхугшдезксш', 'кйрм', 'цйивайчшуалгащсхйш', 'злорнмхекг', 'сгщврурфопжнлхкбилдч', 'бнлпщшнвубддрлижпайм', 'нукдонццнрмовфнбгзщсшщшдичежффе', 'йднучлктхжс', 'зпапйднучлктхж', 'затйотдсмпбевлжаиутсуг']) from system.numbers limit 10;
select 8 = multiSearchFirstIndexUTF8(materialize('мчслвбжвманджййсикнврцдчмш'), ['рлбмй', 'иб', 'жажлцсзхйфдцудппефвжфк', 'огггхзгтцфслхацбщ', 'дзтцкогаибевсйещпг', 'зпцтйзфмвгщшуоилл', 'етщзгцпдйчзмфнхпфцен', 'нджййсик', 'сикнврцдчмш', 'жййсикн', 'икнврцдч', 'паокаочввеулщв', '', '', 'кечзсшип', 'вбжвманджййсикнвр']) from system.numbers limit 10;
select 8 = multiSearchFirstPosition(materialize('Hello World'), materialize(['Hallo', 'orld']));
select 8 = multiSearchFirstPosition(materialize('Hello World'), materialize(['orld']));
select 8 = position('abcdefgh', materialize('h')) from system.numbers limit 10;
select 8 = position('abcdefgh', materialize('h')) from system.numbers limit 129;
select 8 = position('abcdefgh', materialize('h'));
select 8 = sequenceCount('(?1)')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
SELECT 8 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.0.0.0')));
select 8 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 8 as offset, -8 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 8 as offset, -8 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 8 as offset, 8 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 8 as offset, 8 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 8 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 8 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
SELECT 8 as shift_right_bit,fixedStr as arg,bin(bitShiftLeft(fixedStr, 8)) as fixed_string_res FROM test_bit_shift_left_string_integer;
SELECT 8 as shift_right_bit,fixedStr as arg,bin(bitShiftRight(fixedStr, 8)) as fixed_string_res FROM test_bit_shift_right_string_integer;
SELECT 8 as shift_right_bit,str as arg,bin(bitShiftLeft(str, 8)) as string_res FROM test_bit_shift_left_string_integer;
SELECT 8 as shift_right_bit,str as arg,bin(bitShiftRight(str, 8)) as string_res FROM test_bit_shift_right_string_integer;
select 8 from t as l join t as r using id where l.x and r.x;
SELECT 8, 'Hello',bin(bitShiftLeft('Hello', 8));
SELECT 8, 'Hello',bin(bitShiftRight('Hello', 8));
SELECT 8, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 8));
SELECT 8, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 8));
select 8, transactionID().3 == serverUUID();
SELECT 80,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 80));
SELECT 80,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 80));
SELECT 81,toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 81));
SELECT 81,toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 81));
SELECT 840056 AS u, toInt32(u) AS s, fromDaysSinceYearZero32(u), fromDaysSinceYearZero32(materialize(u)), fromDaysSinceYearZero32(s), fromDaysSinceYearZero32(materialize(s));
SELECT 840057 AS u, toInt32(u) AS s, fromDaysSinceYearZero32(u), fromDaysSinceYearZero32(materialize(u)), fromDaysSinceYearZero32(s), fromDaysSinceYearZero32(materialize(s));
SELECT 840058 AS u, toInt32(u) AS s, fromDaysSinceYearZero32(u), fromDaysSinceYearZero32(materialize(u)), fromDaysSinceYearZero32(s), fromDaysSinceYearZero32(materialize(s));
SELECT 8;
select 8;
select 9 = multiSearchFirstIndex(materialize('bwhfigqufrbwsrnnkjdzjhplfck'), ['v', 'ovusuizkdn', 'ttnsliwvxbvck', 'uh', 'lfourtjqblwdtvbgtbejkygkdurerqqdwm', 'snmtctvqmyyqiz', 'ckpixecvternrg', 'gluetlfyforxcygqnj', 'igqufrbwsr', 'om', 'huwazltjsnohsrcbfttzwyvcrobdixsuerkle', 'gqufrbwsrnnkjdzj', 'hfigqufrbwsrn', 'lhhyosbtznyeqzsddnqkfxayiyyajggxb', 'igqufrbwsrnnkjdzjhplf', 'pl', 'jtbqaqakbkesnazbvlaaojppxlbxccs', 'gqufrbwsrnnkjdz']) from system.numbers limit 10;
select 9 = multiSearchFirstIndex(materialize('fuddujwwcewlhthgwsrn'), ['shtzrrtukxmdovtixf', 'rkcnzzzojqvvysm', 'jlamctgphjqcxlvmpzyxtghnoaq', 'pthrwvbheydmrot', 'kpniaqbcrgtxdyxxdxonbbltbdo', 'igulngxgtauumhckvbdt', 'khgrmskijoxruzzzaigjxonsc', 'rxzeykfxwssltw', 'hthg', '']) from system.numbers limit 10;
select 9 = position('абвабв', 'б', 4);
SELECT 9 == dictGetUInt32({CLICKHOUSE_DATABASE:String} || '.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('255.128.0.0')));
select 9 as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 9 as offset, -9 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 9 as offset, -9 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 9 as offset, 9 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 9 as offset, 9 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select 9 as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select 9 as p, geohashEncode(longitude, latitude, p) as actual, if(actual = encoded, 'Ok', concat('expected: ', encoded)) from geohash_test_data WHERE length(encoded) = p;
SELECT 9, 'Hello',bin(bitShiftLeft('Hello', 9));
SELECT 9, 'Hello',bin(bitShiftRight('Hello', 9));
select 9, arraySort(groupArray(n)) from rmt2;
SELECT 9, toFixedString('Hello', 10), bin(bitShiftLeft(toFixedString('Hello', 10), 9));
SELECT 9, toFixedString('Hello', 10), bin(bitShiftRight(toFixedString('Hello', 10), 9));
SELECT 9;
select 9;
SELECT @@max_allowed_packet FORMAT CSVWithNames;
SELECT @@MAX_ALLOWED_PACKET FORMAT CSVWithNames;
SELECT @@max_allowed_packet, number FROM system.numbers LIMIT 3 FORMAT CSVWithNames;
SELECT @@session.auto_increment_increment AS auto_increment_increment FORMAT CSVWithNames;
SELECT @@session.auto_increment_increment FORMAT CSVWithNames;
SELECT @@Version FORMAT CSVWithNames;
SELECT [ 0 ];
SELECT [ 0 ];
SELECT [ 0];
SELECT ['2010-10-10', '2010-10-10']::Array(Date) AS c;
SELECT ['a','b',NULL];
SELECT ['a',NULL,'c'];
SELECT ['a'] AS arr1, ['a', 'aa', 'aaa'] AS arr2, round(arrayJaccardIndex(arr1, arr2), 2);
SELECT ['Hello', 'Goodbye'];
SELECT ['Hello', 'world'];
SELECT ['Hello', concat('wor', 'ld')];
SELECT ['Hello'], ['Goodbye'];
SELECT ['q', 'w', 'ert', 'y'];
SELECT [('1',2)] AS t, t[1].1, t[1].2;
SELECT [('1',materialize(2))] AS t, t[1].1, t[1].2;
SELECT [((1, materialize('2')), [(3, [4])])] AS thing, thing[1], thing[1].1, thing[1].2, thing[1].1.1, thing[1].1.2, (thing[1].2)[1], (thing[1].2)[1].1, (thing[1].2)[1].2, ((thing[1].2)[1].2)[1];
SELECT [(1, 'a'), (3, 'b')]::Nested(u UInt8, s String) AS t, toTypeName(t);
SELECT [(1, 'Hello'), (2, 'World')] AS nested, nested.1, nested.2;
SELECT [(1, 1)];
SELECT [(1, 2), (2, 2)] * 7;
SELECT [(1., 100000000000000000000.), (NULL, 1048577)] * 7;
SELECT [(255, 1048575)], sipHash128ReferenceKeyed((toUInt64(2147483646), toUInt64(9223372036854775807)), ([(NULL, 100), (NULL, NULL), (1024, 10)], toUInt64(2), toUInt64(1024)), ''), hex(sipHash128ReferenceKeyed((-9223372036854775807, 1.), '-1', NULL)), ('', toUInt64(65535), [(9223372036854775807, 9223372036854775806)], toUInt64(65536)), arrayJoin((NULL, 65537, 255), [(NULL, NULL)]) GROUP BY tupleElement((NULL, NULL, NULL, -1), toUInt64(2), 2) = NULL;
SELECT [(arrayJoin([x]), x)] AS row FROM tab;
SELECT [(materialize('1'),2)] AS t, t[1].1, t[1].2;
SELECT [(materialize('1'),materialize(2))] AS t, t[1].1, t[1].2;
SELECT [(NULL, 2), (2, NULL)] * 7;
SELECT [(NULL, 2), (2, NULL)] / 1;
SELECT [(NULL, 256), (NULL, 256)] + [(1., 100000000000000000000.), (NULL, 1048577)];
select [(toUInt8(3), toUInt8(3))] = [(toInt16(3), toInt16(3))];
SELECT [-1, -2.5, 15, 699];
SELECT [-1, 1 + 1];
SELECT [-1, 1000000];
SELECT [-1, 1000];
SELECT [-1, 2, -3]::Array(Int32);
SELECT [-1, 2];
SELECT [-1, toUInt16(1000)];
SELECT [-1, toUInt32(1000000)];
SELECT [-1.1, 2, -3]::Array(Float64);
SELECT [-1000, 1 + 1];
SELECT [-1000, 2];
SELECT [-1000000, 1 + 1];
SELECT [-1000000, 2];
select [-4741124612489978151, -3236599669630092879, 5607475129431807682];
SELECT [0 ];
select [0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 15, 0, 1, 7, 0] = multiSearchAllPositionsCaseInsensitive(materialize('nxwotjpplUAXvoQaHgQzr'), ['ABiEhaADbBLzPwhSfhu', 'TbIqtlkCnFdPgvXAYpUuLjqnnDjDD', 'oPszWpzxuhcyuWxiOyfMBi', 'fLkacEEeHXCYuGYQXbDHKTBntqCQOnD', 'GHGZkWVqyooxtKtFTh', 'CvHcLTbMOQBKNCizyEXIZSgFxJY', 'PlUAxVoQah', 'zrhYwNUzoYjUSswEFEQKvkI', 'c', 'NXWOt', '', 'qAhG', 'JNqCpsMJfOcDxWLVhSSqyNauaRxC', '', 'PpLuaxV', 'DLITYGE']) from system.numbers limit 10;
select [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 3, 0, 5] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('чЖажцВбшЛттзДааАугШщАйПгщП'), ['ШгУТсчГОВЦЦеЛАСфдЗоЗЦВЛйлТДзчвЛва', 'УшЕшищЖткрвРСйиФЗйТФТЛЗаЗ', 'ВдикЙббщузоФХщХХГтЗоДпхбЕкМщц', 'срйеХ', 'рАшуПсЙоДнхчВкПЖ', '', 'гНЗбКРНСБВрАВФлнДШг', 'фХЧгмКнлПШлЩР', 'мкйЗбИФрЗахжгАдвЕ', 'чжаЖцВБШлТ', 'лХЕСрлПрОс', '', 'ЗЧПтчЙОцвОФУФО', 'ажцвБшЛТт', 'уНчЖШчМЕА', 'ц']) from system.numbers limit 10;
select [0, 9, 6, 0, 4, 0, 3, 0, 0, 0, 0, 0] = multiSearchAllPositionsCaseInsensitive(materialize('NytxaLUvmiojEepjuCzwUYPoWL'), ['LcOnnmjbZSifx', 'm', 'lUvMIOjeE', 'vuZsNMSsutiLCDbClPUSsrziohmoZaQeXtKG', 'XaLuvm', 'hlUevDfTSEGOjvLNdRTYjJQvMvwrMpwy', 'TXALuVmioJeePjUczw', 'pKaQKZg', 'PAdX', 'FKLMfNAwNqeZeWplTLjd', 'DODpbzUmMCzfGZwfkjH', 'HMcEGRHLspYdJIiJXqwjDUBp']) from system.numbers limit 10;
select [0] = multiSearchAllPositions(materialize('abc'), ['abcd']) from system.numbers limit 10;
select [0] = multiSearchAllPositions(materialize('abc'), ['abcd']);
select [0] = multiSearchAllPositions(materialize('abcd'), ['cdefgh']);
SELECT [0];
select [1, 0, 0, 0, 0, 0, 4, 0, 0, 19, 0, 7] = multiSearchAllPositionsCaseInsensitive(materialize('yNnYRQfcyemQdxUEPOiwRn'), ['', 'SJteoGNeIAMPWWBltkNKMrWDiVfR', 'kKnnKQhIPiekpnqTXJuyHfvWL', 'GPDUQEMWKzEEpvjLaIRYiuNfpzxsnSBX', 'oPrngRKwruyH', 'ukTSzFePSeVoeZeLQlAaOUe', 'yRqfcyemQDXUepo', 'CwmxidvpPHIbkJnVfSpbiZY', 'FUxmQdFVISApa', 'iwr', 'ciGHzDpMGNQbytsKpRP', 'Fcy']) from system.numbers limit 10;
select [1, 0, 0, 0, 0, 1, 2, 22, 8, 17, 1, 13, 0, 0, 0, 0, 0, 5] = multiSearchAllPositions(materialize('wphcobonpgaqwgfenotzadgqezx'), ['', 'qeuycfhkfjwokxgrkaodqioaotkepzlhnrv', 'taehtytq', 'gejlcipocalc', 'poyvvvntrvqazixkwigtairjvxkgouiuva', '', 'phc', 'dg', 'npgaqwg', 'notzadgqe', '', 'wgfe', 'smipuxgvntys', 'qhrfdytbfeujzievelffzrv', 'cfmzw', 'hcywnyguzjredwjbqtwyuhtewuhzkc', 'tssfeinoykdauderpjyxtmb', 'obonpgaqwgfen']) from system.numbers limit 10;
select [1, 0, 0, 0, 8, 0, 2, 0, 0, 7] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('чТХЙНщФфцИНБаеЖкОвлиУДР'), ['', 'рВХмжКцНцИЙраштМппсодЛнЧАКуЩ', 'ИХфХЖЧХВкзЩВЙхчфМрчдтКздиОфЙжУ', 'Гзлр', 'фЦи', 'абПф', 'тХЙНщффЦИн', 'нссГбВеЖх', 'амлЗщрсУ', 'фФ']) from system.numbers limit 10;
select [1, 0, 0, 3, 2, 1, 0, 0, 1, 10, 7, 0, 5, 0, 8, 4, 1, 0, 8, 1] = multiSearchAllPositionsUTF8(materialize('кйхпукаеуддтйччхлнпсуклрф'), ['кйхпукаеуддтйччхл', 'йатлрйкстлхфхз', 'фгихслшкж', 'хпу', 'йхпукаеу', '', 'сруакбфоа', 'оажуз', 'кйхпукаеуддтйччх', 'ддтйччхлн', 'аеуддтйччхл', 'тмажиойщтпуцглхфишеиф', 'укаеуддтйччхлнпс', 'ретифе', 'еуддтйччхлнпсуклр', 'пукаеуд', 'кйхпу', 'таппфггвджлцпжшпишбпциуохсцх', 'еуд', '']) from system.numbers limit 10;
select [1, 0, 0, 7, 0, 6, 0, 11, 0, 0, 0, 2, 0, 0, 0, 0] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('ЗЕГЛЩПцГНтзЕЦШЧхНКГТХЙЙФШ'), ['', 'шзкиЗсаИщАБмаз', 'Ж', 'ц', 'гШуЕжЛСПодРнхе', 'пцГНтЗЕЦ', 'щРкЩАеНржЙПМАизшщКвЗщглТкКИф', 'ЗеЦшчхнКГтхЙЙ', 'пелгЩКкцвтфнжЖУуКосЙлкЛ', 'рф', 'хНШчНрАХМШщфЧкЩБНзХУкилЙмП', 'ЕгЛЩПЦгнтзецШЧ', 'ЩУчБчРнЖугабУоиХоИККтО', 'СГмЦШтФШЛмЙЩ', 'ауТПЛШВадоХМПиБу', 'ЩЩйр']) from system.numbers limit 10;
select [1, 0, 0, 8, 6, 0, 7, 1, 3, 0, 0, 0, 0, 12] = multiSearchAllPositions(materialize('arbphzbbecypbzsqsljurtddve'), ['arbphzb', 'mnrboimjfijnti', 'cikcrd', 'becypbz', 'z', 'uocmqgnczhdcrvtqrnaxdxjjlhakoszuwc', 'bbe', '', 'bp', 'yhltnexlpdijkdzt', 'jkwjmrckvgmccmmrolqvy', 'vdxmicjmfbtsbqqmqcgtnrvdgaucsgspwg', 'witlfqwvhmmyjrnrzttrikhhsrd', 'pbzsqsljurt']) from system.numbers limit 10;
select [1, 0, 1, 2, 15, 0, 0, 0, 1, 0] = multiSearchAllPositionsCaseInsensitive(materialize('zFWmqRMtsDjSeWBSFoqvWsrV'), ['', 'GItrPyYRBwNUqwSaUBpbHJ', '', 'f', 'BsfOQvWsR', 'JgvsMUZzWaddD', 'wxRECkgoCBPjSMRorZpBwuOQL', 'xHKLLxUoWexAM', '', 'YlckoSedfStmFOumjm']) from system.numbers limit 10;
select [1, 0, 7, 1, 0, 24, 17, 0, 0, 0, 2, 0, 1, 7, 4, 1, 12, 8] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('гГБаДнФбпнЩврЩшЩЩМщЕБшЩПЖПчдт'), ['', 'таОХхрзИДжЛСдЖКЧжБВЩжЛкКХУКждАКРеаЗТгч', 'Ф', '', 'ЙЩИФМфАГщХзКЩЧТЙжмуГшСЛ', 'ПЖпчдТ', 'ЩМщЕбшЩПжПч', 'ФгА', 'гУД', 'зУцкжРоППЖчиШйЗЕшаНаЧаЦх', 'гбаДНФбПНЩВРЩШЩщМЩеБшЩпжПЧд', 'РДЧЖАбрФЦ', 'гГ', 'ФбпНщвр', 'адНфБПнщвРщШщщМщЕбШщ', 'ггб', 'ВРЩ', 'бПНщврЩш']) from system.numbers limit 10;
SELECT [1, 1 + 1, 1 + 2]::Array(UInt32) AS c;
SELECT [1, 1 + 1];
select [1, 1, 0, 0, 0, 1, 1, 1, 4, 0, 6, 6, 0, 10, 1, 5] = multiSearchAllPositions(materialize('mpswgtljbbrmivkcglamemayfn'), ['', 'm', 'saejhpnfgfq', 'rzanrkdssmmkanqjpfi', 'oputeneprgoowg', 'mp', '', '', 'wgtljbbrmivkcglamemay', 'cbpthtrgrmgfypizi', 'tl', 'tlj', 'xuhs', 'brmivkcglamemayfn', '', 'gtljb']) from system.numbers limit 10;
select [1, 1, 0, 0, 1, 0, 0, 0, 0, 0] = multiSearchAllPositionsCaseInsensitive(materialize('wZyCLyiWnNNdNAPWeGSQZcdqk'), ['w', '', 'vlgiXgFTplwqRbnwBumAjHvQuM', 'QoIRVKDHMlapLNiIZXvwYxluUivjY', 'WZY', 'gAFpUfPDAwgzARCIMrtbZUsNcR', 'egkLWqqdNiETeETsMG', 'dzSlJaoHKlQmENIboow', 'vPNBhcaIfsgLH', 'mlWPTCBDVTdKHxlvIUVcJXBrmTcJokAls']) from system.numbers limit 10;
select [1, 1, 0, 0, 1, 0, 0, 3, 3, 3, 1, 0, 8, 0, 8, 1, 0, 1] = multiSearchAllPositionsCaseInsensitive(materialize('OTMMDcziXMLglehgkklbcGeAZkkdh'), ['', 'OTmmDCZiX', 'SfwUmhcGTvdYgxlzsBJpikOxVrg', 'ngqLQNIkqwguAHyqA', '', 'VVZPhzGizPnKJAkRPbosoNGJTeO', 'YHpLYTVkHnhTxMODfABor', 'mMdcZi', 'MmdCZI', 'MMdCZixmlg', '', 'hgaQHHHkIQRpPjv', 'ixMLgLeHgkkL', 'uKozJxZBorYWjrx', 'i', '', 'WSOYdEKatHkWiCtlwsCbKRnXuKcLggbkBxoq', '']) from system.numbers limit 10;
select [1, 1, 0, 0, 1, 7, 0, 0, 0, 2] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('йЛПЛшмЦШНЖРрЧрМцкЖзЕНжЧДелФжАн'), ['', 'йЛПлшМЦшНЖррч', 'ПНКдфтДейуиШзЗХАРУХизВ', 'ПценмщЧОФУСЙЖв', '', 'ЦшнжрРчрМЦКЖЗе', 'МрПзЕАгжРбТЧ', 'ЕДФмаФНвТЦгКТЧЦжцЛбещЛ', 'УтПУвЛкТасдЦкеИмОещНИАоИжЖдЛРгБЩнвЖКЛЕП', 'Л']) from system.numbers limit 10;
select [1, 1, 0, 6, 6, 0, 0, 0, 8, 0, 8, 14, 1, 5, 6, 0, 0, 1] = multiSearchAllPositions(materialize('epudevopgooprmhqzjdvjvqm'), ['ep', 'epudevopg', 'tlyinfnhputxggivtyxgtupzs', 'vopgoop', 'v', 'hjfcoemfk', 'zjyhmybeuzxkuwaxtcut', 'txrxzndoxyzgnzepjzagc', 'pgooprmhqzj', 'wmtqcbsofbe', 'pgo', 'm', '', 'evopgooprmhqzjdv', 'vopgooprmhqzjdv', 'gmvqubpsnvrabixk', 'wjevqrrywloomnpsjbuybhkhzdeamj', '']) from system.numbers limit 10;
select [1, 1, 1, 1, 22, 0, 0, 8, 18, 15] = multiSearchAllPositions(materialize('vpscxxibyhvtmrdzrocvdngpb'), ['', '', '', '', 'n', 'agrahemfuhmftacvpnaxkx', 'dqqwvfsrqv', 'byhvtmrdzrocv', 'ocvdn', 'dzrocvdngpb']) from system.numbers limit 10;
select [1, 1, 1, 15, 10, 0, 0, 0, 0, 2] = multiSearchAllPositions(materialize('nfoievsrpvheprosjdsoiz'), ['', 'nfo', '', 'osjd', 'vheprosjdsoiz', 'az', 'blhvdycvjnxaipvxybs', 'umgxmpkvuvuvdaczkz', 'gfspmnzidixcjgjw', 'f']) from system.numbers limit 10;
select [1, 1, 2, 3, 4, 0, 0, 0, 0, 0] = groupArray(position('aaaa', 'a', number)) from numbers(10);
select [1, 1, 2, 3, 4, 0, 0, 0, 0, 0] = groupArray(position('aaaa', materialize('a'), number)) from numbers(10);
select [1, 1, 2, 3, 4, 0, 0, 0, 0, 0] = groupArray(position(materialize('aaaa'), 'a', number)) from numbers(10);
select [1, 1, 2, 3, 4, 0, 0, 0, 0, 0] = groupArray(position(materialize('aaaa'), materialize('a'), number)) from numbers(10);
select [1, 1, 2, 3, 4, 5, 0, 0, 0, 0] = groupArray(position('aaaa', '', number)) from numbers(10);
select [1, 1, 2, 3, 4, 5, 0, 0, 0, 0] = groupArray(position('aaaa', materialize(''), number)) from numbers(10);
select [1, 1, 2, 3, 4, 5, 0, 0, 0, 0] = groupArray(position(materialize('aaaa'), '', number)) from numbers(10);
select [1, 1, 2, 3, 4, 5, 0, 0, 0, 0] = groupArray(position(materialize('aaaa'), materialize(''), number)) from numbers(10);
select [1, 1, 3, 1, 10, 0, 9, 2, 2, 0, 0, 0, 0, 0, 8, 0, 1, 11, 8, 0] = multiSearchAllPositionsCaseInsensitive(materialize('lStPVtsQypFlZQoQhCuP'), ['', '', 'tpV', 'L', 'PF', 'pGPggwbkQMZandXugTpUorlPOubk', 'yPFlz', 'sTPVTsQyPfLzQOqhCU', 'StPVtSq', 'cbCxBjAfJXYgueqMFNIoSguFm', 'AosIZKMPduRfumDZ', 'AGcNTHObH', 'oPaGpsQ', 'kwQCczyY', 'q', 'HHUYdzGAzVJyn', '', 'fLZQoqHcUp', 'q', 'SSonzfqLVwIGzdHtj']) from system.numbers limit 10;
select [1, 1, 9, 2, 0, 3, 7, 0, 0, 19, 2, 2, 0, 8] = multiSearchAllPositionsUTF8(materialize('мвкзккупнокченйнзкшбдрай'), ['м', '', 'н', 'вкз', 'гдпертшйбртотунур', 'к', 'упнокченйнзкшбдр', 'нфшрг', 'нмждрйббдцлйемжпулдвкещхтжч', 'ш', 'вкзккупнокченйнзкшбдр', 'вкзккупнокченйнзкшбдрай', 'адииксвеавогтйторчтцвемвойшпгбнз', 'пнокченй']) from system.numbers limit 10;
SELECT [1, 1.1, 2.2] AS arr1, [2.2, 3.3, 444] AS arr2, round(arrayJaccardIndex(arr1, arr2), 2);
select [1, 12, 0, 8, 1, 1, 0, 1, 5, 0, 1, 0, 0, 0, 0, 3, 1, 0, 4, 5] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('ПмКСйСКЖККмШеоигЙчПфжТ'), ['', 'Шео', 'РчвлдЙЙлПщуКмтН', 'жкКмшЕоИГЙЧ', '', '', 'йРмМЖнПиЙ', '', 'йс', 'тфФРСцл', '', 'щлЩХиКсС', 'кпнТЖпФЩиЙЛ', 'абкКптбИВгмЧкцфЦртЛДЦФФВоУхЗБн', 'чНшоВСГДМйДлтвфмхХВВуеЩЦВтЖтв', 'кС', '', 'фидБлйеЙЧШРЗЗОулщеЕЩщЙсЙшА', 'СЙс', 'йсКжкКМшЕо']) from system.numbers limit 10;
select [1, 12, 9, 5, 1, 0, 6, 3, 0, 1] = multiSearchAllPositionsUTF8(materialize('кжнщсашдзитдмщцхуоебтфжл'), ['', 'дмщцхуоебт', 'зитдмщцхуоебт', 'сашдзитдмщцхуое', 'кжнщ', 'тхкйтшебчигбтмглшеужззоббдилмдм', 'ашдзитдмщцхуоебтф', 'нщсашдз', 'аузщшр', 'кжнщсашдз']) from system.numbers limit 10;
select [1, 17, 1, 20, 0, 0, 5, 0, 0, 0, 24, 0] = multiSearchAllPositionsCaseInsensitive(materialize('BLNRADHLMQstZkAlKJVylmBUDHqEVa'), ['bLnRaDhLm', 'kJVYlmbuD', 'bLnr', 'yLMbU', 'eAZtcqAMoqPEgwtcrHTgooQcOOCmn', 'jPmVwqZfp', 'aDHlmqS', 'fmaauDbUAQsTeijxJFhpRFjkbYPX', 'aqIXStybzbcMjyDKRUFBrhfRcNjauljlqolfDX', 'WPIuzORuNbTGTNb', 'uDhqeVa', 'fQRglSARIviYABcjGeLK']) from system.numbers limit 10;
select [1, 18, 12, 0, 0, 1, 1, 3, 7, 0, 0, 0] = multiSearchAllPositionsUTF8(materialize('гсщнфийтфзжцйпфбйалущ'), ['', 'алущ', 'цйпфбйал', 'цвбфцйвсвлицсчнргпцнр', 'х', 'гс', '', 'щн', 'й', 'дгйрвцщтп', 'уитвквоффвцхфишрлерйцувф', 'кфтййлпнзжчижвглзкижн']) from system.numbers limit 10;
SELECT [1, 2, 3, 11] = arraySort(multiMatchAllIndices('фабрикант', ['', 'рикан', 'а', 'f[ae]b[ei]rl', 'ф[иаэе]б[еэи][рпл]', 'афиукд', 'a[ft],th', '^ф[аиеэ]?б?[еэи]?$', 'берлик', 'fab', 'фа[беьв]+е?[рлко]']));
SELECT [1, 2, 3, 11] = arraySort(multiMatchAllIndices(materialize('фабрикант'), materialize(['', 'рикан', 'а', 'f[ae]b[ei]rl', 'ф[иаэе]б[еэи][рпл]', 'афиукд', 'a[ft],th', '^ф[аиеэ]?б?[еэи]?$', 'берлик', 'fab', 'фа[беьв]+е?[рлко]'])));
SELECT [1, 2, 3] :: Array(Int32);
select [1, 2, 3] as arr, arr[id] from array_element_test;
SELECT [1, 2, 3]::Array(UInt32) AS c;
SELECT [1, 2, 3][toInt8(1)];
SELECT [1, 255];
SELECT [1, 256];
SELECT [1, 2] = arraySort(multiMatchAllIndices(materialize('gogleuedeuniangoogle'), ['.*goo.*', '.*yan.*'])) from system.numbers limit 5;
SELECT [1, 2] = arraySort(multiMatchAllIndices(materialize('gogleuedeuniangoogle'), materialize(['.*goo.*', '.*yan.*']))) from system.numbers limit 5;
select [1, 2] in [1, 2];
SELECT [1, 2];
SELECT [1, 2][3], [1, NULL, 2][4], [('1', 1), ('2', 2)][-3];
SELECT [1, 3] = arraySort(multiMatchAllIndices(materialize('gogleuedeuniangoogle'), ['.*goo.*', 'neverexisted', '.*yan.*'])) from system.numbers limit 5;
SELECT [1, 3] = arraySort(multiMatchAllIndices(materialize('gogleuedeuniangoogle'), materialize(['.*goo.*', 'neverexisted', '.*yan.*']))) from system.numbers limit 5;
select [1, 4, 1, 0, 4, 1, 0, 1, 16, 1, 0, 0, 0, 8, 12, 14, 0, 2] = multiSearchAllPositionsCaseInsensitive(materialize('lrDgweYHmpzOASVeiFcrDQUsv'), ['', 'gwEYhMP', 'LrDGwEyHmPzOaSVEifC', 'oMN', 'gwEYhMpZO', 'lrdGWEy', 'pOKrxN', 'lrDgwEyhmpZoaSv', 'eifcrdqU', 'LrDgw', 'dUvarZ', 'giYIvswNbNaBWprMd', 'pPPqKPhVaBhNdmZqrBmb', 'hmPzoASVEiF', 'O', 'SVEi', 'gIGLmHnctIkFsDFfeJWahtjDzjPXwY', 'rDGweyHmP']) from system.numbers limit 10;
select [1, 5, 0, 0, 3, 0, 2, 0, 14, 14, 1, 0, 17, 13, 3, 25] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('айлзсЗБоГйтГжЙРККФхКшлНРОрЦкфо'), ['', 'с', 'Д', 'шиБраНИЦЧуИжп', 'Лз', 'ДРБСУфКСшцГДц', 'йЛЗСЗбОгЙтГЖйРК', 'ЕЙЦсвРЕШшщЕЗб', 'ЙркКфхкшЛнРОР', 'ЙРкКФхкШ', 'а', 'ГдоДКшСудНл', 'КФхКшлНРоР', 'ж', 'лзСзБогйТГЖйрККф', 'оР']) from system.numbers limit 10;
select [1, 5, 1, 1, 0, 0, 1, 1, 0, 2, 19, 0, 2, 0] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('сйДпмжнДРщКБгфцЖОчтГНБ'), ['', 'МЖнДРщ', 'Сй', '', 'пУщ', 'йгВИАЦнозаемТиХВвожКАПТдкПИаж', 'Сйд', 'СЙДпмжНдРщ', 'ФПщБцАпетаЙФГ', 'ЙдпМжНдрЩКбГфЦжОЧТГНб', 'т', 'гллрБВМнвУБгНаЙцМцТйЙФпзЧОЙЛвчЙ', 'йДПМжндРЩкБ', 'ЗмфОмГСНПщшЧкиССдГБУсчМ']) from system.numbers limit 10;
select [1, 6, 0, 1, 0, 0, 3, 1, 2, 0] = multiSearchAllPositionsCaseInsensitiveUTF8(materialize('МФННЧйОнцЛИЧЕПШПЧйоГФО'), ['', 'йОн', 'шУлгИЛЛРЙАсфЗоИЙЗРхуПбОЙсшдхо', 'МФННчЙоНц', 'лзВжбЦзфкзтуОйзуЗ', 'ЖГДщшЦзсжщцЦЖеЧвРфНИНОСАОщг', 'ННчйОНЦлИчЕПШ', '', 'Ф', 'ЩрИдНСлЙуАНЗвЕчмчАКмФУипндиП']) from system.numbers limit 10;
select [1, 7, 6, 4, 0, 1, 0, 0, 0, 9, 7, 1, 1, 0, 0, 0] = multiSearchAllPositions(materialize('aapdygjzrhskntrphianzjob'), ['', 'jz', 'gjzrh', 'dygjzrhskntrphia', 'qcnahphlxmdru', '', 'rnwvzdn', 'isbekwuivytqggsxniqojrvpwjdr', 'sstwvgyavbwxvjojrpg', 'rhskn', 'jzrhskntrp', '', '', 'toilvppgjizaxtidizgbgygubmob', 'vjwzwpvsklkxqgeqqmtssnhlmw', 'znvpjjlydvzhkt']) from system.numbers limit 10;
SELECT [1, NULL][toNullable(1)];
SELECT [1,2,3]::Array(UInt64)[[number, number]::Array(UInt8)[number]::UInt64]::UInt8 from numbers(3);
SELECT [1,2,NULL];
SELECT [1,2] AS arr1, [1,2,3,4] AS arr2, round(arrayJaccardIndex(arr1, arr2), 2);
SELECT [1,2] AS other, arr, round(arrayJaccardIndex(other, arr), 2) FROM array_jaccard_index ORDER BY arr;
SELECT [1,NULL,3];
SELECT [1.0, 1 + 1];
SELECT [1.0, 2];
select [100, -100, 5607475129431807682, 5607475129431807683];
SELECT [1::UInt32, 2::UInt32]::Array(UInt64);
SELECT [1] / 'a';
SELECT [1] = multiMatchAllIndices(materialize('/odezhda-dlya-bega/'), ['/odezhda-dlya-bega/', 'kurtki-i-vetrovki-dlya-bega', 'futbolki-i-mayki-dlya-bega']);
SELECT [1] = multiMatchAllIndices(materialize('/odezhda-dlya-bega/'), materialize(['/odezhda-dlya-bega/', 'kurtki-i-vetrovki-dlya-bega', 'futbolki-i-mayki-dlya-bega']));
select [1] = multiSearchAllPositions(materialize('abab'), ['ab']);
select [1] = multiSearchAllPositions(materialize('abab'), materialize(['ab']));
select [1] = multiSearchAllPositions(materialize('abababababababababababab'), ['abab']);
select [1] = multiSearchAllPositions(materialize('abababababababababababab'), ['abababababababababa']);
select [1] in [[1], [2, 3]];
select [1] in array([1], [2, 3]);
SELECT [1], 0::UInt16;
SELECT [1];
SELECT [[1]][1], materialize([[1]])[1], [[1]][materialize(1)], materialize([[1]])[materialize(1)];
SELECT [[[2, 3, 5, 5]]] * 7;
SELECT [[[2, 3, 5, 5]]] / 2;
SELECT [[[[],['']]]];
SELECT [[[[],[]]]];
SELECT [[], []]::Array(Array(UInt32));
SELECT [] = multiMatchAllIndices(materialize('aaaa'), ['.*aa.*aaa.*', 'aaaaaa{2}', '\(aa\){3}']);
SELECT [] = multiMatchAllIndices(materialize('aaaa'), materialize(['.*aa.*aaa.*', 'aaaaaa{2}', '\(aa\){3}']));
SELECT [] = multiMatchAllIndices(materialize('gogleuedeuniangoogle'), ['neverexisted', 'anotherone', 'andanotherone']) from system.numbers limit 5;
SELECT [] = multiMatchAllIndices(materialize('gogleuedeuniangoogle'), materialize(['neverexisted', 'anotherone', 'andanotherone'])) from system.numbers limit 5;
select [] = multiSearchAllPositions('\0', CAST([], 'Array(String)'));
select [] = multiSearchAllPositionsCaseInsensitive('\0', CAST([], 'Array(String)'));
select [] = multiSearchAllPositionsCaseInsensitiveUTF8('\0', CAST([], 'Array(String)'));
select [] = multiSearchAllPositionsUTF8('\0', CAST([], 'Array(String)'));
select [] as arr, if(empty(arr), 0, arr[-1]);
select [] as arr, multiIf(empty(arr), 0, length(arr) > 1, arr[-1], 0);
SELECT [] AS other, arr, round(arrayJaccardIndex(other, arr), 2) FROM array_jaccard_index ORDER BY arr;
SELECT [];
SELECT [CAST('2', 'UInt64'), number] * 7 FROM numbers(5);
SELECT [CAST('abc' AS LowCardinality(String)), CAST('def' AS FixedString(3))];
SELECT [CAST('abc' AS LowCardinality(String)), CAST('def' AS LowCardinality(FixedString(3)))];
SELECT [CAST('abc' AS LowCardinality(String)), CAST('def' AS Nullable(String))];
select [map(-4741124612489978151, 1, -3236599669630092879, 2, 5607475129431807682, 3), map(-1, 1)];
select [map(1, -4741124612489978151, 2, -3236599669630092879, 3, 5607475129431807682), map(-1, 1)];
SELECT [materialize(('1',2))] AS t, t[1].1, t[1].2;
SELECT [materialize(1)][-0x8000000000000000];
SELECT [materialize(1)][0xFFFFFFFFFFFFFFFF];
SELECT [materialize(1)][materialize(18446744073709551615)];
SELECT [min(a), max(a)], [min(b), max(b)], [min(c), max(c)] FROM decimal;
SELECT [NULL,'b','c'];
SELECT [NULL,2,3];
SELECT [NULL,NULL,NULL];
SELECT [NULL], sumMapWithOverflow(events, [NULL], [[(NULL)]], counts) FROM sum_map_overflow;
SELECT [NULL];
SELECT [NULL][toNullable(1)];
SELECT [number number number] FROM numbers(1);
SELECT [number][-0x8000000000000000] FROM numbers(1);
SELECT [number][-10000000000] FROM numbers(1);
SELECT [number][0xFFFFFFFFFFFFFFFF] FROM numbers(1);
SELECT [number][10000000000] FROM numbers(1);
SELECT [number][arrayJoin([-0x8000000000000000, -10000000000, 0, -1])] FROM numbers(2);
SELECT [number][arrayJoin([0xFFFFFFFFFFFFFFFF, 10000000000, 0, 1])] FROM numbers(2);
SELECT [toDateTime64('2000-01-01 01:01:01.123', 3), toDateTime64('2000-01-01 01:01:01.123456', 6)];
SELECT [toNullable(1)] AS x, x[materialize(toNullable(1))] AS y;
SELECT [toNullable(1)] AS x, x[toNullable(1)] AS y;
SELECT [toNullable(1)][toNullable(1)];
SELECT [toNullable(NULL)];
SELECT [toUInt16(1)] AS arr1, [toUInt32(1)] AS arr2, round(arrayJaccardIndex(arr1, arr2), 2);
select [toUInt8(0)] in [-1];
select [toUInt8(1)] in [-1];
select [toUInt8(255)] in [-1];
SELECT [toUInt8(number), number] FROM system.numbers LIMIT 3;
select [tuple(-4741124612489978151, 1), tuple(-3236599669630092879, 2), tuple(560747512943180768, 3)];
SELECT _database, _table, n FROM 01902_db.t_merge ORDER BY _database, _table, n;
SELECT _database, _table, n FROM 01902_db.t_merge WHERE _database = '01902_db1' ORDER BY _database, _table, n;
SELECT _database, _table, n FROM 01902_db.t_merge WHERE _table = 't1' ORDER BY _database, _table, n;
SELECT _database, _table, n FROM 01902_db.t_merge1 ORDER BY _database, _table, n;
SELECT _database, _table, n FROM 01902_db.t_merge_1 ORDER BY _database, _table, n;
SELECT _database, _table, n FROM merge('01902_db', '^t$') ORDER BY _database, _table, n;
SELECT _database, _table, n FROM merge(currentDatabase(), '^t') ORDER BY _database, _table, n;
SELECT _database, _table, n FROM merge(REGEXP('^01902_db'), '^t') ORDER BY _database, _table, n;
select _file from url('http://127.0.0.1:8123/?query=select+1&user=default', LineAsString, 's String');
select _file, * from file('02884_{1,2}.csv') order by _file settings max_threads=1;
select _file, * from test_02302 where _file like '%1';
select _file, count() from url('http://127.0.0.1:8123/?query=select+1&user=default', LineAsString, 's String') group by _file;
SELECT _id FROM TESTTABLE4 PREWHERE l IN (select '1') ORDER BY _id DESC LIMIT 10;
SELECT _part FROM test_not_found_column_nothing PREWHERE col001 = 0;
SELECT _part, * FROM restore_01640;
SELECT _part, * FROM t1;
SELECT _part, count() FROM test_not_found_column_nothing PREWHERE col001 % 3 != 0 GROUP BY _part ORDER BY _part;
SELECT _part_offset FROM t_1 ORDER BY order_0 LIMIT 3;
SELECT _partition_id, min(d), max(d), min(d1), max(d1), count() FROM weird_partitions_02245 GROUP BY _partition_id ORDER BY _partition_id ASC;
select _partition_value from tbl2;
select _path from test_02245;
select _path from test_02245_2;
SELECT _path FROM url('http://127.0.0.1:8123?query=select+{1,2}+as+x+format+TSV', 'TSV') WHERE 0;
select _path, _file from test_02377 format Null;
select _path, _file, s from url('http://127.0.0.1:8123/?query=select+1&user=default&password=wrong', LineAsString, 's String');
select _path, _file, s from url('http://127.0.0.1:8123/?query=select+1&user=default', LineAsString, 's String');
SELECT _sample_factor FROM merge(currentDatabase(), '^sample_00579_\\d$');
SELECT _shard_num + 1 s, count() FROM remote('127.0.0.{1,2}', system.one) GROUP BY _shard_num + 1 ORDER BY _shard_num + 1;
SELECT _shard_num + 1, count() FROM remote('127.0.0.{1,2}', system.one) GROUP BY _shard_num + 1 ORDER BY _shard_num + 1;
SELECT _shard_num + dummy s, count() FROM remote('127.0.0.{1,2}', system.one) GROUP BY _shard_num + dummy ORDER BY _shard_num + dummy;
SELECT _shard_num + dummy, count() FROM remote('127.0.0.{1,2}', system.one) GROUP BY _shard_num + dummy ORDER BY _shard_num + dummy;
SELECT _shard_num AS shard_num, sum(1) as rows FROM remote('127.{1,2}', system, one) GROUP BY _shard_num ORDER BY _shard_num;
SELECT _shard_num AS shard_num, sum(1) as rows FROM remote('127.{1,2}', system, one) GROUP BY shard_num ORDER BY shard_num;
SELECT _shard_num FROM cluster("{default_cluster_macro}");
SELECT _shard_num FROM cluster("{default_cluster_macro}", system.one);
SELECT _shard_num, * FROM remote('127.0.0.{1,2}', system.one) order by _shard_num;
SELECT _shard_num, * FROM remote('127.0.0.{1,2}', system.one) WHERE _shard_num = 1;
SELECT _shard_num, count() FROM remote('127.0.0.{1,2}', system.one) GROUP BY _shard_num order by _shard_num;
SELECT _shard_num, key FROM dist_1 order by _shard_num, key;
SELECT _shard_num, key FROM dist_1 order by _shard_num;
SELECT _shard_num, key FROM dist_2 order by _shard_num, key;
SELECT _shard_num, key FROM remote('127.0.0.1', currentDatabase(), dist_2) order by _shard_num, key;
SELECT _shard_num, key, b.host_name, b.host_address IN ('::1', '127.0.0.1'), b.port FROM dist_1 a JOIN system.clusters b ON _shard_num = b.shard_num WHERE b.cluster = 'test_cluster_two_shards_localhost';
SELECT _state FROM system.parts FORMAT Null;
SELECT _state FROM system.parts WHERE database = currentDatabase() AND table = 'data_01660';
select _table, count() from x group by _table order by _table;
SELECT _uniq, _uniq IN (0, 99) FROM join_with_index ARRAY JOIN [key, data] AS _uniq ORDER BY _uniq;
SELECT `APPLICATION`.`Name` AS `App`, CAST(CAST(`DATABASE_IO`.`Date` AS DATE) AS DATE) AS `date` FROM `DATABASE_IO` INNER JOIN `APPLICATION` ON (`DATABASE_IO`.`Base` = `APPLICATION`.`Base`) WHERE ( CAST(CAST(`DATABASE_IO`.`Date` AS DATE) AS TIMESTAMP) >= toDateTime('2020-01-01 00:00:00') );
select `concat(str, \'_abc\')` from (with 'string' as str select str || '_abc');
SELECT `dummy` FROM `one`;
SELECT `n.i8` FROM alter_00394 ORDER BY k;
SELECT `n.i8`, `n.ui8`, `n.s` FROM alter_00394 ORDER BY k;
SELECT `null` FROM remote('127.0.0.2', view(SELECT 1 AS `null`));
SELECT `NULL` FROM remote('127.0.0.2', view(SELECT 1 AS `NULL`));
SELECT `nULl`, null FROM remote('127.0.0.2', view(SELECT 1 AS `nULl`));
SELECT `one`.dummy FROM system.one;
select `pow(four, 2)`, `pow(two, 2)` from (with (select pow(2,2)) as four select pow(four, 2), 2 as two, pow(two, 2));
select `pow(four, 2)`, `pow(two, 2)` from (with pow(2,2) as four select pow(four, 2), 2 as two, pow(two, 2));
select `SomeIntExcluded`, `SomeMap.ID`, `SomeMap.Num` from nested_map_explicit;
select `SomeMap.ID`, `SomeMap.Num` from nested_map;
SELECT `system`.`one`.* FROM system.one;
SELECT `t`.`1`.`1`, `t`.`1`.`2`, `t`.`2` FROM t_tuple_numeric;
SELECT `t`.`1`.`2`, `t`.`1`.`3`, `t`.`4` FROM t_tuple_numeric;
SELECT `t`.dummy FROM system.one AS t;
SELECT `time`, groupArray((sensor_id, volume)) AS groupArr FROM ( SELECT (intDiv(toUInt32(received_at), 900) * 900) AS `time`, sensor_id, avg(value) AS volume FROM sensor_value WHERE received_at BETWEEN '2018-12-12 00:00:00' AND '2018-12-30 00:00:00' GROUP BY `time`,sensor_id ORDER BY `time` ) GROUP BY `time` ORDER BY `time`;
SELECT `привет` FROM non_ascii;
select a + 1 as a, a + 1 as b from (select 10 as a);
select a + 1 as b, b + 1 as a from (select 10 as a);
SELECT a + 1, x + 1, toTypeName(a), toTypeName(x) FROM (SELECT 1 as x) as t1 RIGHT JOIN ( SELECT sum(number) as a from numbers(3) GROUP BY NULL) AS t2 ON TRUE SETTINGS allow_experimental_analyzer=1, join_use_nulls=1;
SELECT a + 21, a - 21, a - 84, a * 21, a * -21, a / 21, a / 84, intDiv(a, 21), intDivOrZero(a, 84) FROM decimal WHERE a = 42;
SELECT a + a, a - a, a * a, a / a, intDiv(a, a), intDivOrZero(a, a) FROM decimal WHERE a = 42;
SELECT a / (SELECT sum(number) FROM numbers(10)) FROM data_distributed;
SELECT a < (SELECT 1) FROM data_distributed;
SELECT a = '1' FROM tab WHERE a = '1' and b='a';
SELECT a > '0.0' FROM decimal ORDER BY a;
SELECT a > 0 FROM optimize_sorting WHERE a > 0;
SELECT a > 0, b > 0, g > 0 FROM decimal ORDER BY a DESC;
SELECT a > toFloat64(0) FROM decimal ORDER BY a;
SELECT a as b FROM t1_00826 cross join t2_00826 where t1_00826.b = t2_00826.a AND b > 0;
SELECT a AS b, b AS a;
select a from ( with a+1 as aa, sumIf(aa, b > 0) as aaif select a, aaif FROM (select 1 as a, 2 as b) GROUP BY a ) as V;
SELECT a FROM ( select * from ( select 1 AS a UNION ALL select 1 as a) ) AS t1, ( select * from ( select 2 AS b, 3 AS c UNION ALL select 2 as b, 3 as c )) AS t2;
SELECT a, b FROM (SELECT 1 AS a, 2000 AS b) js1 ANY RIGHT JOIN (SELECT 2 AS a, 3000 AS b) js2 USING a, b ORDER BY a, b;
SELECT a, b FROM (SELECT 1 AS a, 2000 AS b) js1 ANY RIGHT JOIN (SELECT 2 AS a, 3000 AS b) js2 USING b, a ORDER BY a, b;
SELECT a, b FROM (SELECT a, * FROM (SELECT 1 AS a, 2 AS b, 3 AS c));
SELECT a, b FROM (SELECT a, *, arrayJoin(c) FROM (SELECT 1 AS a, 2 AS b, [3, 4] AS c));
SELECT a, b FROM (SELECT sum(x) AS a, avg(x) AS b FROM (SELECT number AS x FROM numbers(10)));
SELECT a, b FROM a1 LEFT JOIN (SELECT a, b FROM a2) js2 USING a ORDER BY b SETTINGS join_default_strictness='ANY';
SELECT a, b FROM a1 LEFT JOIN (SELECT a, b FROM a2) js2 USING a ORDER BY b;
SELECT a, b FROM bad_arrays ARRAY JOIN b;
SELECT a, b FROM buffer_00126 ORDER BY a, b, c;
SELECT a, b FROM default_join1 JOIN (SELECT a, b FROM default_join2) js2 USING a ORDER BY b SETTINGS join_default_strictness='ANY';
SELECT a, b FROM insert_fewer_columns;
SELECT a, b FROM insert_fewer_columns_2;
SELECT a, b FROM order_by_all ORDER BY ALL ASC;
SELECT a, b FROM order_by_all ORDER BY ALL DESC;
SELECT a, b FROM order_by_all ORDER BY ALL;
select a, b from order_by_another order by a asc nulls first, b asc limit 4;
select a, b from order_by_another order by a asc nulls first, b desc limit 4;
select a, b from order_by_another order by a asc nulls last, b asc limit 4;
select a, b from order_by_another order by a asc nulls last, b desc limit 4;
select a, b from order_by_another order by a desc nulls first, b asc limit 4;
select a, b from order_by_another order by a desc nulls first, b desc limit 4;
select a, b from order_by_another order by a desc nulls last, b asc limit 4;
select a, b from order_by_another order by a desc nulls last, b desc limit 4;
SELECT a, b FROM pk_order ORDER BY a DESC, b DESC;
SELECT a, b FROM pk_order ORDER BY a DESC, b;
SELECT a, b FROM pk_order ORDER BY a, b DESC;
SELECT a, b FROM pk_order ORDER BY a, b;
select a, b from ttl_00933_1;
select a, b from ttl_00933_2 order by a;
SELECT a, b, a = b, a < b, a > b, a != b, a <= b, a >= b FROM decimal ORDER BY a;
SELECT a, b, all FROM order_by_all ORDER BY all, a;
SELECT a, b, all FROM order_by_all ORDER BY all;
SELECT a, b, and(a, b), or(a, b), xor(a, b) FROM test_table;
SELECT a, b, and(a, b), or(a, b), xor(a, b) FROM test_table_nullable;
select a, b, c from (select 42 as a, 1 as b, 2 as c, 1 as b, 2 as c) any left join (select 42 as a, 3 as d) using a order by d;
select a, b, c from (select 42 as a, 1 as b, 2 as c, 1 as b, 2 as c) any left join (select 42 as a, 3 as d) using a;
SELECT a, b, c FROM buffer_00126 ORDER BY a, b, c;
SELECT a, b, c FROM decimal WHERE a = toFloat32(42);
SELECT a, b, c FROM decimal WHERE a = toFloat64(42);
SELECT a, b, c FROM decimal WHERE a = toInt16(42) AND b = toInt16(42) AND c = toInt16(42);
SELECT a, b, c FROM decimal WHERE a = toInt32(42) AND b = toInt32(42) AND c = toInt32(42);
SELECT a, b, c FROM decimal WHERE a = toInt64(42) AND b = toInt64(42) AND c = toInt64(42);
SELECT a, b, c FROM decimal WHERE a = toInt8(42) AND b = toInt8(42) AND c = toInt8(42);
SELECT a, b, c FROM null_00117 ORDER BY a, b, c;
SELECT a, b, c FROM pk_order ORDER BY a DESC, b DESC, c DESC;
SELECT a, b, c FROM pk_order ORDER BY a DESC, b DESC, c;
SELECT a, b, c FROM pk_order ORDER BY a DESC, b, c DESC;
SELECT a, b, c FROM pk_order ORDER BY a DESC, b, c;
SELECT a, b, c FROM pk_order ORDER BY a, b DESC, c DESC;
SELECT a, b, c FROM pk_order ORDER BY a, b DESC, c;
SELECT a, b, c FROM pk_order ORDER BY a, b, c DESC;
SELECT a, b, c FROM pk_order ORDER BY a, b, c;
SELECT a, b, c FROM t_vertical_merges;
SELECT a, b, c, d FROM (SELECT 3 AS a, 2147483647 AS b, 1048575 AS c UNION ALL SELECT -2, NULL, -2) AS js1 ALL LEFT JOIN (SELECT 100 AS a, -9223372036854775808 AS b, NULL AS d UNION ALL SELECT 256, 256, NULL) AS js2 USING (a, b) ORDER BY a DESC NULLS FIRST, '-0.02' ASC, b ASC NULLS FIRST, c DESC NULLS FIRST, 1048575 ASC NULLS LAST, d DESC SETTINGS enable_positional_arguments=0;
select a, b, c, d, e, f from (select 44 a, 88 b, 13 c, 14 d, 15 e, 16 f) t group by 1,2,3,4,5,6 order by a;
SELECT a, b, c, d, e, f FROM decimal;
SELECT a, b, c, d, e, f, g, hex(h) FROM test_table_2 ORDER BY a, b, c, d, e, f, g, h;
SELECT a, b, count(*) as count FROM rollup_having GROUP BY a, b WITH ROLLUP HAVING a IS NOT NULL and b IS NOT NULL ORDER BY a, b, count;
SELECT a, b, count(*) as count FROM rollup_having GROUP BY a, b WITH ROLLUP HAVING a IS NOT NULL ORDER BY a, b, count;
SELECT a, b, count(*) FROM rollup_having GROUP BY a, b WITH ROLLUP WITH TOTALS HAVING a IS NOT NULL;
SELECT a, b, count(a) FROM lc GROUP BY a, b WITH CUBE ORDER BY a, b;
SELECT a, b, count(a) FROM lc GROUP BY a, b WITH ROLLUP ORDER BY a, b;
SELECT a, b, g FROM decimal WHERE a > 0 AND a <= 42 AND b <= 42 AND g <= 42;
SELECT a, b, g FROM decimal WHERE a IN(42) AND b IN(42) AND g IN(42) SETTINGS allow_experimental_analyzer = 1;
SELECT a, b, g FROM decimal WHERE a IN(42) AND b IN(42) AND g IN(42);
select a, b, length(b) as l from tab_00717 group by a, b, l, l + 1 order by a, b;
select a, b, ntile(1) over (partition by a order by b) from(select intDiv(number,10) as a, number%10 as b from numbers(20));
select a, b, ntile(100) over (partition by a order by b) from(select intDiv(number,10) as a, number%10 as b from numbers(20));
select a, b, ntile(2) over (partition by a order by b) from(select intDiv(number,10) as a, number%10 as b from numbers(20));
select a, b, ntile(3) over (partition by a order by b) from(select intDiv(number,10) as a, number%10 as b from numbers(20));
select a, b, ntile(65535) over (partition by a order by b) from (select 1 as a, number as b from numbers(65535)) limit 100;
select a, b, s_a, s_b from t_00725_2 all left join (select a,b,a s_a, b s_b from s_00725_2) using (a,b);
SELECT a, b, sum(c), avg(d) FROM pk_order GROUP BY a, b ORDER BY a, b;
SELECT a, b, sum(s), count() from cube GROUP BY a, b WITH CUBE ORDER BY a, b;
SELECT a, b, sum(s), count() from cube GROUP BY a, b WITH CUBE WITH TOTALS ORDER BY a, b;
SELECT a, b, sum(s), count() from cube GROUP BY CUBE(a, b) ORDER BY a, b;
SELECT a, b, sum(s), count() from cube GROUP BY CUBE(a, b) WITH TOTALS ORDER BY a, b;
SELECT a, b, sum(s), count() from rollup GROUP BY a, b WITH ROLLUP ORDER BY a, b;
SELECT a, b, sum(s), count() from rollup GROUP BY ROLLUP(a, b) ORDER BY a, b;
SELECT a, b, sum(s), count() from rollup GROUP BY ROLLUP(a, b) WITH TOTALS ORDER BY a, b;
select a, b, x, y from(select distinct a, b, 1 as x, 2 as y from distinct_in_order order by a) order by a, b;
select a, b.a, b.b from s3(s3_conn, filename='test_02245_s3_nested_arrow1_*', format='Arrow');
select a, b.a, b.b from s3(s3_conn, filename='test_02245_s3_nested_orc1_*', format='ORC');
select a, b.a, b.b from s3(s3_conn, filename='test_02245_s3_nested_parquet1_*', format='Parquet');
select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='test_02245_s3_nested_arrow2_*', format='Arrow', structure='a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))');
select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='test_02245_s3_nested_orc2_*', format='ORC', structure='a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))');
select a, b.a, b.b.c, b.b.d from s3(s3_conn, filename='test_02245_s3_nested_parquet2_*', format='Parquet', structure='a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))');
SELECT A, B_str, toString(cc) FROM (SELECT A, toString(B) AS B_str, SUM(C) AS cc FROM decimal GROUP BY A, B_str);
select a, c + toInt32(1), (c + toInt32(1)) * 2 from prewhere_alias prewhere (c + toInt32(1)) * 2 = 6;
SELECT a, c FROM buffer_00126 ORDER BY a, b, c;
select a, c from t1 join t2 on a = c;
select a, c from t1 join t2 on c = a;
SELECT a, c FROM test_rlp PREWHERE b < 5;
SELECT a, c FROM test_rlp WHERE b < 5 SETTINGS optimize_move_to_prewhere = 0;
SELECT a, c, b FROM buffer_00126 ORDER BY a, b, c;
SELECT a, count() FROM dist_00717 GROUP BY a ORDER BY a ASC, count() ASC LIMIT 10;
select a, count() from dist_t_different_dbs group by a order by a limit 5 offset 500;
select a, count() from dist_t_different_dbs group by a, b order by a limit 5 offset 500;
SELECT a, count() FROM low_null_float GROUP BY a ORDER BY count() desc, a LIMIT 10;
select a, count() from pr_t group by a order by a limit 5 offset 500;
select a, count() from pr_t group by a, b order by a limit 5 offset 500;
SELECT a, count() FROM tt_01373 FINAL GROUP BY a ORDER BY a;
SELECT a, count() FROM tt_01373 GROUP BY a ORDER BY a;
SELECT a, count(a) FROM lc GROUP BY a WITH CUBE ORDER BY a;
SELECT a, count(a) FROM lc GROUP BY a WITH ROLLUP ORDER BY a;
select a, count(b) from group_by_all group by all order by a;
select a, e from t order by e;
SELECT a, g > toInt8(0), g > toInt16(0), g > toInt32(0), g > toInt64(0) FROM decimal ORDER BY a;
SELECT a, g > toUInt8(0), g > toUInt16(0), g > toUInt32(0), g > toUInt64(0) FROM decimal ORDER BY a;
SELECT a, g, a = g, a < g, a > g, a != g, a <= g, a >= g FROM decimal ORDER BY a;
SELECT a, i from t ORDER BY a, i;
select a, length(b) as l from tab_00717 group by a, l, l + 1 order by a;
SELECT a, min(b), max(b) FROM data_02295 GROUP BY a ORDER BY a, count() SETTINGS optimize_aggregation_in_order = 1, max_threads = 1;
SELECT a, min(b), max(b) FROM data_02295 GROUP BY a WITH TOTALS ORDER BY a, count() SETTINGS optimize_aggregation_in_order = 1, max_threads = 1;
SELECT a, min(b), max(b) FROM data_02295 GROUP BY a WITH TOTALS ORDER BY a, count() SETTINGS optimize_aggregation_in_order = 1;
SELECT a, sipHash64(a,'a') from optimize_sorting order by sipHash64(a,'a');
SELECT a, sum(c), avg(d) FROM pk_order GROUP BY a ORDER BY a;
SELECT a, sum(s), count() from rollup GROUP BY a WITH ROLLUP ORDER BY a;
SELECT a, sum(s), count() from rollup GROUP BY a WITH ROLLUP WITH TOTALS ORDER BY a;
SELECT a, sum(s), count() from rollup GROUP BY ROLLUP(a) ORDER BY a;
SELECT a, sumMap(statusMap) FROM map_comb GROUP BY a ORDER BY a;
SELECT A, toString(B) AS B_str, toString(SUM(C)) AS c_str FROM decimal GROUP BY A, B_str;
SELECT a, toTypeName(a), b, toTypeName(b), c, toTypeName(c), d, toTypeName(d), e, toTypeName(e), f, toTypeName(f), g, toTypeName(g), h, toTypeName(h) FROM test;
SELECT a, toTypeName(x = 2), toTypeName(x) FROM test_prewhere_column_type where (x = 2) AS y;
select a, x from (select distinct a, 1 as x from distinct_in_order order by x) order by a;
SELECT a, y FROM test_prewhere_column_type prewhere (x = 2) AS y;
SELECT a,b,c,d FROM (SELECT 1 AS a,2 AS b, 3 AS c UNION ALL SELECT 2,3,4 ) js1 ALL LEFT JOIN (SELECT 1 AS a,2 AS b,4 AS d UNION ALL SELECT 2,3,5) js2 USING (a) ORDER BY a,b,c,d ASC;
SELECT a,b,c,d FROM (SELECT 1 AS a,2 AS b, 3 AS c UNION ALL SELECT 2,3,4 ) js1 ALL LEFT JOIN (SELECT 1 AS a,2 AS b,4 AS d UNION ALL SELECT 2,3,5) js2 USING a,b ORDER BY a,b,c,d ASC;
SELECT a,b,c,d FROM (SELECT 1 AS a,2 AS b, 3 AS c UNION ALL SELECT 2,3,4 ) js1 ANY INNER JOIN (SELECT 1 AS a,2 AS b,4 AS d UNION ALL SELECT 2,3,5) js2 USING (a) ORDER BY a,b,c,d ASC;
select a,b,s_a,s_b from t_00725_2 all left join (select a, b, a s_a, b s_b from s_00725_2) s_00725_2 on (s_00725_2.a = t_00725_2.a and s_00725_2.b = t_00725_2.b);
select a,b,s_a,s_b from t_00725_2 all left join (select a,b, a s_a, b s_b from s_00725_2) on (s_a = t_00725_2.a and s_b = t_00725_2.b);
SELECT a.* APPLY(toDate) APPLY(any) from columns_transformers a;
SELECT a.* APPLY(toDate) REPLACE STRICT(i + 1 AS i) APPLY(any) from columns_transformers a;
SELECT a.*, b.* FROM ( SELECT number AS k FROM system.numbers LIMIT 10 ) AS a ALL INNER JOIN ( SELECT intDiv(number, 2) AS k, number AS joined FROM system.numbers LIMIT 10 ) AS b USING k ORDER BY k, joined;
SELECT a.*, b.* FROM ( SELECT number AS k FROM system.numbers LIMIT 10 ) AS a ANY INNER JOIN ( SELECT number * 2 AS k, number AS joined FROM system.numbers LIMIT 10 ) AS b USING k;
SELECT a.*, b.* FROM ( SELECT number AS k FROM system.numbers LIMIT 10 ) AS a ANY LEFT JOIN ( SELECT number * 2 AS k, number AS joined FROM system.numbers LIMIT 10 ) AS b USING k ORDER BY k;
select a.1-1 FROM (SELECT (1, 2) AS a);
select a.1-1,a.1+1 FROM (SELECT (1, 2) AS a);
SELECT A._appointment_id, A._id, A._status, A._set_by_id, A._company_id, A._client_id, A._type, A._at, A._vacancy_id, A._set_at, A._job_requisition_id FROM appointment_events A ANY LEFT JOIN (SELECT _appointment_id, MAX(_set_at) AS max_set_at FROM appointment_events WHERE _status in ('Created', 'Transferred') GROUP BY _appointment_id ) B USING _appointment_id WHERE A._set_at = B.max_set_at;
SELECT a._shard_num AS shard_num, sum(1) as rows FROM remote('127.{1,2}', system, one) a GROUP BY shard_num ORDER BY shard_num;
SELECT a._shard_num, a.key, b.host_name, b.host_address IN ('::1', '127.0.0.1'), b.port FROM (SELECT *, _shard_num FROM dist_1) a JOIN system.clusters b ON a._shard_num = b.shard_num WHERE b.cluster = 'test_cluster_two_shards_localhost';
SELECT a._shard_num, key FROM dist_1 a;
SELECT A.a, A.t, B.b, B.t FROM A ASOF INNER JOIN B ON B.t <= A.t AND A.a == B.b ORDER BY (A.a, A.t);
SELECT A.a, A.t, B.b, B.t FROM A ASOF JOIN B ON A.a == B.b AND A.t < B.t ORDER BY (A.a, A.t);
SELECT A.a, A.t, B.b, B.t FROM A ASOF JOIN B ON A.a == B.b AND A.t <= B.t ORDER BY (A.a, A.t);
SELECT A.a, A.t, B.b, B.t FROM A ASOF JOIN B ON A.a == B.b AND A.t > B.t ORDER BY (A.a, A.t);
SELECT A.a, A.t, B.b, B.t FROM A ASOF JOIN B ON A.a == B.b AND B.t >= A.t ORDER BY (A.a, A.t);
SELECT A.a, A.t, B.b, B.t FROM A ASOF LEFT JOIN B ON A.a == B.b AND A.t >= B.t ORDER BY (A.a, A.t);
SELECT A.k, A.t, A.a, B.b, B.t, B.k FROM A ASOF LEFT JOIN B USING(k,t) ORDER BY (A.k, A.t);
SELECT A.k, toString(A.t, 'UTC'), A.a, B.b, toString(B.t, 'UTC'), B.k FROM A ASOF INNER JOIN B ON A.k == B.k AND A.t >= B.t ORDER BY (A.k, A.t);
SELECT A.k, toString(A.t, 'UTC'), A.a, B.b, toString(B.t, 'UTC'), B.k FROM A ASOF JOIN B USING(k,t) ORDER BY (A.k, A.t);
SELECT A.k, toString(A.t, 'UTC'), A.a, B.b, toString(B.t, 'UTC'), B.k FROM A ASOF LEFT JOIN B USING(k,t) ORDER BY (A.k, A.t);
select a.key, b.key from (SELECT toInt32(number) key from numbers(2)) a left join (select distinct * from dist_01223) b using key order by b.key;
select a.key, b.key from (SELECT toInt32(number) key from numbers(2)) a right join (select distinct * from dist_01223) b using key order by b.key;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, 2 as dt) b ON a.pk = b.pk AND a.dt >= b.dt ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, 2 as dt) b USING(pk, dt) ORDER BY a.dt SETTINGS allow_experimental_analyzer = 0;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, 2 as dt) b USING(pk, dt) ORDER BY a.dt SETTINGS allow_experimental_analyzer = 1;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, toNullable(0) as dt) b ON a.dt >= b.dt AND a.pk = b.pk ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, toNullable(0) as dt) b ON a.pk = b.pk AND a.dt >= b.dt ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, toNullable(0) as dt) b USING(pk, dt) ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, 2 as dt) b ON a.pk = b.pk AND a.dt >= b.dt ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, 2 as dt) b USING(pk, dt) ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, toNullable(0) as dt) b ON a.dt >= b.dt AND a.pk = b.pk ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toNullable(toUInt8(number)) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, toNullable(0) as dt) b USING(pk, dt) ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, 2 as dt) b ON a.pk = b.pk AND a.dt >= b.dt ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, 2 as dt) b USING(pk, dt) ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, toNullable(0) as dt) b ON a.pk = b.pk AND a.dt >= b.dt ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, toNullable(0) as dt) b USING(pk, dt) ORDER BY a.dt SETTINGS allow_experimental_analyzer = 0;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF JOIN (SELECT 1 as pk, toNullable(0) as dt) b USING(pk, dt) ORDER BY a.dt SETTINGS allow_experimental_analyzer = 1;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, 2 as dt) b ON a.pk = b.pk AND a.dt >= b.dt ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, 2 as dt) b USING(pk, dt) ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, toNullable(0) as dt) b ON a.pk = b.pk AND a.dt >= b.dt ORDER BY a.dt;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, toNullable(0) as dt) b USING(pk, dt) ORDER BY a.dt SETTINGS allow_experimental_analyzer = 0;
SELECT a.pk, b.pk, a.dt, b.dt, toTypeName(a.pk), toTypeName(b.pk), toTypeName(materialize(a.dt)), toTypeName(materialize(b.dt)) FROM (SELECT toUInt8(number) > 0 as pk, toUInt8(number) as dt FROM numbers(3)) a ASOF LEFT JOIN (SELECT 1 as pk, toNullable(0) as dt) b USING(pk, dt) ORDER BY a.dt SETTINGS allow_experimental_analyzer = 1;
SELECT a.size0 FROM t_arr;
SELECT a.x AS x FROM a LEFT JOIN b ON a.x = b.x LEFT JOIN c ON a.x = c.x;
SELECT a.x AS x FROM a LEFT JOIN b ON a.x = b.x LEFT JOIN c ON b.x = c.x;
SELECT a1 FROM ( SELECT x AS a1, x AS a2 FROM test_00681 UNION ALL SELECT x, x FROM test_00681 );
select a1 from tab1 all left join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1;
select a1 from tab1 all right join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1;
select a1 from tab1 any left join (select * from tab2) on b1 = a2 or b2 = a1;
select a1 from tab1 any left join (select * from tab2) on b1 = a2;
select a1 from tab1 any left join (select a2 from tab2) on b1 = a2;
select a1 from tab1 any left join (select a2, b2 from tab2) on b1 = a2 or b2 = a1;
select a1 from tab1 any left join tab2 on b1 + 1 = a2 + 1 and a1 + 4 = b2 + 2;
select a1 from tab1 any left join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1;
select a1 from tab1 any left join tab2 on b1 + 1 = a2 + 1;
select a1 from tab1 any left join tab2 on b1 = a2;
select a1 from tab1 any right join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1;
select a1 from tab1 full join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1;
select a1, a2 from tab1 any left join (select a2 from tab2) on b1 = a2;
select a1, a2 from tab1 any left join tab2 on b1 = a2;
select a1, a2, b1, b2 from tab1 first any left join (select * from tab2) second_ on first.b1 = second_.a2;
select a1, a2, b1, b2 from tab1 first any left join (select *, a2 + 1 as z from tab2) second_ on first.b1 + 1 = second_.z;
select a1, a2, b1, b2 from tab1 first any left join (select *, a2 as z from tab2) second_ on first.b1 = second_.z;
select a1, a2, b1, b2 from tab1 first any left join tab2 second_ on first.b1 = second_.a2;
select a1, a2, b1, b2 from tab1 first any left join tab2 second_ on first.b1 = tab2.a2;
select a1, a2, b1, b2 from tab1 first any left join tab2 second_ on second_.a2 = first.b1;
select a1, a2, b1, b2 from tab1 first any left join tab2 second_ on second_.a2 = tab1.b1;
select a1, a2, b1, b2 from tab1 first any left join tab2 second_ on tab1.b1 = second_.a2;
select a1, a2, b1, b2 from tab1 first any left join tab2 second_ on tab1.b1 = tab2.a2;
select a1, a2, b1, b2 from tab1 first any left join tab2 second_ on tab2.a2 = first.b1;
select a1, a2, b1, b2 from tab1 first any left join tab2 second_ on tab2.a2 = tab1.b1;
select a1, a2, b2 from tab1 any left join tab2 on b1 = a2;
select a1, a2, first.b1, second_.b2 from tab1 first any left join tab2 second_ on b1 = a2;
select a1, a2, tab1.b1, tab2.b2 from tab1 first any left join tab2 second_ on b1 = a2;
select a1, b1 from tab1 any left join (select * from tab2) on b1 = a2 or b2 = a1;
select a1, b1 from tab1 any left join (select * from tab2) on b1 = a2;
select a1, b1 from tab1 any left join tab2 on b1 = a2;
select a1, b1, a2 from tab1 any left join (select * from tab2) on b1 + 1 = a2 + 1;
select a1, b1, a2, b2 from tab1 all left join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b1, a2, b2;
select a1, b1, a2, b2 from tab1 all right join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b1, a2, b2;
select a1, b1, a2, b2 from tab1 any left join (select * from tab2) on b1 + 1 = a2 + 1;
select a1, b1, a2, b2 from tab1 any left join (select * from tab2) on b1 = a2;
select a1, b1, a2, b2 from tab1 any left join (select *, a2 + 1 as z from tab2) on b1 + 1 = z or b1 = z * 2;
select a1, b1, a2, b2 from tab1 any left join (select *, a2 + 1 as z from tab2) on b1 + 1 = z;
select a1, b1, a2, b2 from tab1 any left join (select *, a2 + 1 as z from tab2) on b1 + 2 = z + 1 format TSV;
select a1, b1, a2, b2 from tab1 any left join (select *, a2 as z from tab2) on b1 + 1 = z + 1 or b1 = z * 2;
select a1, b1, a2, b2 from tab1 any left join (select *, a2 as z from tab2) on b1 + 1 = z + 1;
select a1, b1, a2, b2 from tab1 any left join tab2 on a1 + 4 = b2 + 2;
select a1, b1, a2, b2 from tab1 any left join tab2 on b1 + 1 = a2 + 1 and a1 + 4 = b2 + 2;
select a1, b1, a2, b2 from tab1 any left join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b1, a2, b2;
select a1, b1, a2, b2 from tab1 any left join tab2 on b1 + 1 = a2 + 1;
select a1, b1, a2, b2 from tab1 any right join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b1, a2, b2;
select a1, b1, a2, b2 from tab1 full join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b1, a2, b2;
select a1, b1, a2, b2, a2 + 1 from tab1 any left join tab2 on b1 + 1 = a2 + 1;
select a1, b2 from tab1 all left join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b2;
select a1, b2 from tab1 all right join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b2;
select a1, b2 from tab1 any left join tab2 on b1 + 1 = a2 + 1 and a1 + 4 = b2 + 2;
select a1, b2 from tab1 any left join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b2;
select a1, b2 from tab1 any left join tab2 on b1 = a2;
select a1, b2 from tab1 any right join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b2;
select a1, b2 from tab1 full join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a1, b2;
select a1, copy.a1 from tab1 any left join tab1_copy copy on tab1.b1 + 3 = tab1_copy.b1 + 2 FORMAT JSONEachRow;
select a1, s.a1 from tab1 any left join (select * from tab1_copy) s on tab1.b1 + 3 = s.b1 + 2 FORMAT JSONEachRow;
select a1, tab1_copy.a1 from tab1 any left join tab1_copy copy on tab1.b1 + 3 = tab1_copy.b1 + 2 FORMAT JSONEachRow;
select a1, tab1_copy.a1 from tab1 any left join tab1_copy on tab1.b1 + 3 = tab1_copy.b1 + 2 FORMAT JSONEachRow;
SELECT a1.*, a2.* FROM a1 ANY LEFT JOIN a2 USING a ORDER BY b;
select a2 from tab1 any left join tab2 on b1 + 1 = a2 + 1;
select a2, b2 + 1 from tab1 all left join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a2, b2 + 1;
select a2, b2 + 1 from tab1 all right join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a2, b2 + 1;
select a2, b2 + 1 from tab1 any left join tab2 on b1 + 1 = a2 + 1 and a1 + 4 = b2 + 2;
select a2, b2 + 1 from tab1 any left join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a2, b2 + 1;
select a2, b2 + 1 from tab1 any right join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a2, b2 + 1;
select a2, b2 + 1 from tab1 full join tab2 on b1 + 1 = a2 + 1 or a1 + 4 = b2 + 2 ORDER BY a2, b2 + 1;
select a2, b2 from tab2 all left join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2;
select a2, b2 from tab2 all right join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2;
select a2, b2 from tab2 any left join tab3 on a2 + b2 = a3 + b3;
select a2, b2 from tab2 any left join tab3 on a2 = a3 and b2 = b3;
select a2, b2 from tab2 any left join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2;
select a2, b2 from tab2 any left join tab3 on a3 + tab3.b3 = a2 + b2;
select a2, b2 from tab2 any right join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2;
select a2, b2 from tab2 full join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2;
select a2, b2 from tab2 second_ any left join tab3 on a3 + b3 = a2 + second_.b2;
select a2, b2 from tab2 second_ any left join tab3 third on third.a3 + tab3.b3 = tab2.a2 + second_.b2;
select a2, b2, a3 == 5 OR a3 == 100, b3 from tab2 any left join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2, b3;
select a2, b2, a3, b3 from tab2 all left join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2, a3, b3;
select a2, b2, a3, b3 from tab2 all right join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2, a3, b3;
select a2, b2, a3, b3 from tab2 any left join tab3 on a2 = a3 and b2 = b3;
select a2, b2, a3, b3 from tab2 any left join tab3 on a2=a3 and a2 +1 = b3 + 0 or b2=b3 and a2 +1 = b3 + 0 ;
select a2, b2, a3, b3 from tab2 any right join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2, a3, b3;
select a2, b2, a3, b3 from tab2 full join tab3 on a2 = a3 or b2 = b3 ORDER BY a2, b2, a3, b3;
select a3 == 5 OR a3 == 100, b3 from tab2 any left join tab3 on a2 = a3 or b2 = b3 ORDER BY a3, b3;
select a3, b3 from tab2 all left join tab3 on a2 = a3 or b2 = b3 ORDER BY a3, b3;
select a3, b3 from tab2 all right join tab3 on a2 = a3 or b2 = b3 ORDER BY a3, b3;
select a3, b3 from tab2 any left join tab3 on a2 = a3 and b2 = b3;
select a3, b3 from tab2 any right join tab3 on a2 = a3 or b2 = b3 ORDER BY a3, b3;
select a3, b3 from tab2 full join tab3 on a2 = a3 or b2 = b3 ORDER BY a3, b3;
select a['k1'] as col1 from table_map order by col1;
select a['key1'], a['key2'] from table_map;
select a['name'] from table_map;
select a[1] from wups;
select a[b] from table_map;
SELECT aaa FROM ( SELECT first.table1_id as aaa FROM (SELECT number+1 as table1_id FROM numbers(1)) as first JOIN (SELECT number+1 as table2_id FROM numbers(1)) as second ON first.table1_id = second.table2_id JOIN (SELECT number+1 as table3_id FROM numbers(1)) as third ON first.table1_id = third.table3_id ) SETTINGS multiple_joins_try_to_keep_original_names = 1;
select abc.*;
select abs(-1.0) = 1.0;
select abs(-128) = 128;
select abs(0) = 0;
select abs(0.0) = 0;
select abs(1) = 1;
select abs(1.0) = 1.0;
select abs(127) = 127;
SELECT abs(a), abs(b), abs(c), abs(d), abs(e), abs(f), abs(g), abs(h), abs(j) from decimal ORDER BY a;
select abs(acosh(2) - ln(2 + sqrt(3))) < 1e-9;
select abs(acosh(cosh(2)) - 2) < 1e-9;
select abs(acosh(cosh(3)) - 3) < 1e-9;
select abs(asinh(1) - ln(1 + sqrt(2))) < 1e-9;
select abs(asinh(sinh(1)) - 1) < 1e-9;
select abs(atanh(0.9) - 0.5 * ln(19)) < 1e-5;
select abs(atanh(tanh(1)) - 1) < 1e-5;
select abs(cos(pi() / 4) - 1 / sqrt(2)) < 1.0e-9;
select abs(cosh(1) - 0.5 * (e() + exp(-1))) < 1e-6;
select abs(e() - arraySum(arrayMap(x -> 1 / tgamma(x + 1), range(13)))) < 1.0e-9;
SELECT abs(entropy(number) - 8) < 0.000001, abs(entropy(number % 64, number % 32) - 6) < 0.000001 FROM numbers(256);
select abs(greatCircleDistance(37.531014, 55.703050, 37.617780, 55.755830) - 8015.52288508) / 8015.52288508 < 0.004;
select abs(greatCircleDistance(37.588144, 55.733842, 37.617780, 55.755830) - 3075.27332275) / 3075.27332275 < 0.004;
select abs(greatCircleDistance(37.617780, 55.755830, 158.756175, 53.006373) - 6802821.68814) / 6802821.68814 < 0.004;
select abs(greatCircleDistance(83.089598, 54.842461, 158.756175, 53.006373) - 4727216.39539) / 4727216.39539 < 0.004;
select abs(greatCircleDistance(83.089598, 54.842461, 37.617780, 55.755830) - 2837839.72863) / 2837839.72863 < 0.004;
select abs(log(e()) - 1) < 1e-8;
select abs(log(exp(1)) - 1) < 1e-8;
select abs(log(exp(2)) - 2) < 1e-8;
select abs(log1p(exp(2) - 1) - 2) < 1e8;
select abs(log1p(exp(3) - 1) - 3) < 1e8;
SELECT abs(NULL);
select abs(pow(cosh(1), 2) - pow(sinh(1), 2) - 1) < 1e-6;
select abs(sinh(1) - 0.5 * (e() - exp(-1))) < 1e-6;
select abs(sinh(2) - 0.5 * (exp(2) - exp(-2))) < 1e-6;
SELECT abs(sum(1e100) - 1e100 * 1000) > 1 FROM (SELECT * FROM system.numbers LIMIT 1000);
SELECT abs(sum(_sample_factor) - 3000000) / 3000000 < 0.001 FROM merge(currentDatabase(), '^sample_00314_\\d$') SAMPLE 100000;
SELECT abs(sum(_sample_factor) - 3000000) / 3000000 < 0.001 FROM sample_merge_00314 SAMPLE 100000;
select abs(tan(pi() / 4) - 1) < 1.0e-9;
SELECT AccountID FROM ( SELECT AccountID, Currency FROM Accounts LIMIT 2 BY Currency );
select accurateCast('0', 'Bool');
select accurateCast('1', 'Bool');
select accurateCast('192.0.2.1x', 'IPv4');
select accurateCast('2001:db8::1', 'IPv6');
select accurateCast('2001:db8::1x', 'IPv6');
select accurateCast('false', 'Bool');
SELECT accurateCastOrDefault(nan, 'UInt256'), accurateCastOrDefault(nan, 'UInt256', toUInt256(5));
SELECT accurateCastOrDefault(nan, 'UInt64'), accurateCastOrDefault(nan, 'UInt64', toUInt64(5));
SELECT accurateCastOrDefault(number + 127, 'Int8') AS x, accurateCastOrDefault(number + 127, 'Int8', toInt8(5)) AS x_with_default FROM numbers (2) ORDER BY number;
select accurateCastOrNull('0', 'Bool');
SELECT accurateCastOrNull(nan, 'Int64');
SELECT accurateCastOrNull(nan, 'UInt256');
SELECT accurateCastOrNull(nan, 'UInt64');
SELECT accurateCastOrNull(number + 127, 'Int8') AS x FROM numbers (2) ORDER BY x;
select acos(-1) = pi();
select acos(0) = pi() / 2;
select acos(1) = 0;
select acosh(1) = 0;
SELECT action, user FROM null_lc_set_index WHERE user = 'alice';
SELECT addDate('2022-05-07', INTERVAL 5 MINUTE);
SELECT addDate('2022-05-07'::Date);
SELECT addDate('2022-05-07'::Date, INTERVAL 5 MINUTE);
SELECT addDate('2022-05-07'::Date32, INTERVAL 5 MINUTE);
SELECT addDate('2022-05-07'::DateTime, INTERVAL 5 MINUTE);
SELECT addDate('2022-05-07'::DateTime64, INTERVAL 5 MINUTE);
SELECT ADDDATE(materialize('2022-05-07'::Date), INTERVAL 5 MINUTE);
SELECT addDays('2023-10-22', 1), addDays('2023-10-22 12:34:56.123', 1);
SELECT addDays('2023-10-22', materialize(1)), addDays('2023-10-22 12:34:56.123', materialize(1));
SELECT addDays(materialize('2023-10-22'), 1), addDays(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addDays(materialize('2023-10-22'), materialize(1)), addDays(materialize('2023-10-22 12:34:56.123'), materialize(1));
SELECT addDays(toDateTime('2020-01-01 00:00:00', 'GMT'), 9223372036854775807);
select addDays(x1, 7) from t1;
SELECT addHours('2023-10-22', 1), addHours('2023-10-22 12:34:56.123', 1);
SELECT addHours('2023-10-22', materialize(1)), addHours('2023-10-22 12:34:56.123', materialize(1));
SELECT addHours(materialize('2023-10-22'), 1), addHours(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addHours(materialize('2023-10-22'), materialize(1)), addHours(materialize('2023-10-22 12:34:56.123'), materialize(1));
SELECT addHours(toDateTime('2020-01-01 00:00:00', 'GMT'), 9223372036854775807);
SELECT addHours(toDateTime64('1984-03-31 23:00:00', 0, 'Asia/Novosibirsk'), 8);
SELECT addHours(toDateTime64('1985-03-31 00:00:00', 0, 'Asia/Novosibirsk'), 8);
select addHours(x1, 1) from t1;
SELECT addInterval((INTERVAL 1 DAY, INTERVAL 1 SECOND), INTERVAL 1 SECOND);
SELECT addInterval(tuple(INTERVAL 1 SECOND), INTERVAL 1 SECOND);
SELECT addMicroseconds('2023-10-22', 1), addMicroseconds('2023-10-22 12:34:56.123', 1);
SELECT addMicroseconds('2023-10-22', materialize(1)), addMicroseconds('2023-10-22 12:34:56.123', materialize(1));
SELECT addMicroseconds(materialize('2023-10-22'), 1), addMicroseconds(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addMicroseconds(materialize('2023-10-22'), materialize(1)), addMicroseconds(materialize('2023-10-22 12:34:56.123'), materialize(1));
select addMicroseconds(toDateTime64('1980-12-12 12:12:12.123456', 6), 1);
SELECT addMilliseconds('2023-10-22', 1), addMilliseconds('2023-10-22 12:34:56.123', 1);
SELECT addMilliseconds('2023-10-22', materialize(1)), addMilliseconds('2023-10-22 12:34:56.123', materialize(1));
SELECT addMilliseconds(materialize('2023-10-22'), 1), addMilliseconds(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addMilliseconds(materialize('2023-10-22'), materialize(1)), addMilliseconds(materialize('2023-10-22 12:34:56.123'), materialize(1));
select addMilliseconds(toDateTime64('1980-12-12 12:12:12.123', 3), 1);
SELECT addMinutes('2023-10-22', 1), addMinutes('2023-10-22 12:34:56.123', 1);
SELECT addMinutes('2023-10-22', materialize(1)), addMinutes('2023-10-22 12:34:56.123', materialize(1));
SELECT addMinutes(materialize('2023-10-22'), 1), addMinutes(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addMinutes(materialize('2023-10-22'), materialize(1)), addMinutes(materialize('2023-10-22 12:34:56.123'), materialize(1));
select addMinutes(x1, 60) from t1;
SELECT addMonths('2023-10-22', 1), addMonths('2023-10-22 12:34:56.123', 1);
SELECT addMonths('2023-10-22', materialize(1)), addMonths('2023-10-22 12:34:56.123', materialize(1));
SELECT addMonths(materialize('2023-10-22'), 1), addMonths(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addMonths(materialize('2023-10-22'), materialize(1)), addMonths(materialize('2023-10-22 12:34:56.123'), materialize(1));
SELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), -1);
SELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), 1);
SELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), 1.);
SELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), materialize(-1));
SELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), materialize(1));
SELECT addMonths(toDateTime('2017-11-05 08:07:47'), -1);
SELECT addMonths(toDateTime('2017-11-05 08:07:47'), 1);
SELECT addMonths(toDateTime('2017-11-05 08:07:47'), materialize(-1));
SELECT addMonths(toDateTime('2017-11-05 08:07:47'), materialize(1));
SELECT addMonths(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 1, 'Asia/Kolkata');
SELECT addMonths(toDateTime('2017-11-05 10:37:47', 'Asia/Kolkata'), 1);
SELECT addMonths(toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata'), 1);
select addMonths(x1, 1) from t1;
SELECT addNanoseconds('2023-10-22', 1), addNanoseconds('2023-10-22 12:34:56.123', 1);
SELECT addNanoseconds('2023-10-22', materialize(1)), addNanoseconds('2023-10-22 12:34:56.123', materialize(1));
SELECT addNanoseconds(materialize('2023-10-22'), 1), addNanoseconds(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addNanoseconds(materialize('2023-10-22'), materialize(1)), addNanoseconds(materialize('2023-10-22 12:34:56.123'), materialize(1));
select addNanoseconds(toDateTime64('1980-12-12 12:12:12.123456789', 9), 1);
SELECT addQuarters('2023-10-22', 1), addQuarters('2023-10-22 12:34:56.123', 1);
SELECT addQuarters('2023-10-22', materialize(1)), addQuarters('2023-10-22 12:34:56.123', materialize(1));
SELECT addQuarters(materialize('2023-10-22'), 1), addQuarters(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addQuarters(materialize('2023-10-22'), materialize(1)), addQuarters(materialize('2023-10-22 12:34:56.123'), materialize(1));
select addQuarters(x1, 1) from t1;
select address, type, has_watch, op_num, path, is_ephemeral, is_sequential, version, requests_size, request_idx, error, watch_type, watch_state, path_created, stat_version, stat_cversion, stat_dataLength, stat_numChildren from system.zookeeper_log where path like '/test/01158/' || currentDatabase() || '/rmt/log%' and op_num not in (3, 4, 12, 500) order by xid, type, request_idx;
SELECT addressToLineWithInlines(1);
SELECT addSeconds('2023-10-22', 1), addSeconds('2023-10-22 12:34:56.123', 1);
SELECT addSeconds('2023-10-22', materialize(1)), addSeconds('2023-10-22 12:34:56.123', materialize(1));
SELECT addSeconds(materialize('2023-10-22'), 1), addSeconds(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addSeconds(materialize('2023-10-22'), materialize(1)), addSeconds(materialize('2023-10-22 12:34:56.123'), materialize(1));
select addSeconds(x1, 3600) from t1;
SELECT addTupleOfIntervals('2022-10-11'::Date, (INTERVAL 1 DAY, INTERVAL 1 MONTH));
SELECT addTupleOfIntervals('2022-10-11'::Date, tuple(INTERVAL 1 DAY));
SELECT addWeeks('2023-10-22', 1), addWeeks('2023-10-22 12:34:56.123', 1);
SELECT addWeeks('2023-10-22', materialize(1)), addWeeks('2023-10-22 12:34:56.123', materialize(1));
SELECT addWeeks(materialize('2023-10-22'), 1), addWeeks(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addWeeks(materialize('2023-10-22'), materialize(1)), addWeeks(materialize('2023-10-22 12:34:56.123'), materialize(1));
SELECT addWeeks(toDateTime('2020-01-01 00:00:00', 'GMT'), 9223372036854775807);
select addWeeks(x1, 1) from t1;
SELECT addYears('2023-10-22', 1), addYears('2023-10-22 12:34:56.123', 1);
SELECT addYears('2023-10-22', materialize(1)), addYears('2023-10-22 12:34:56.123', materialize(1));
SELECT addYears(materialize('2023-10-22'), 1), addYears(materialize('2023-10-22 12:34:56.123'), 1);
SELECT addYears(materialize('2023-10-22'), materialize(1)), addYears(materialize('2023-10-22 12:34:56.123'), materialize(1));
SELECT addYears(toDateTime('2020-01-01 00:00:00', 'GMT'), 9223372036854775807);
select addYears(x1, 1) from t1;
SELECT aes_decrypt_mysql('aes-256-ecb', CAST(null as Nullable(String)), 'test_key________________________');
SELECT aes_encrypt_mysql('aes-256-ecb', CAST(null as Nullable(String)), 'test_key________________________');
SELECT age('day', materialize(toDate('2015-08-18', 'UTC')), materialize(toDate32('2015-08-19', 'UTC')), 'UTC');
SELECT age('day', toDate32('2015-08-18', 'UTC'), toDate('2015-08-19', 'UTC'), 'UTC');
SELECT age('day', toDate32('2015-08-18', 'UTC'), toDateTime('2015-08-19 00:00:00', 'UTC'), 'UTC');
SELECT age('day', toDateTime('2014-10-26 00:00:00', 'Asia/Istanbul'), toDateTime('2014-10-27 00:00:00', 'Asia/Istanbul'));
SELECT age('month', toDateTime64('2015-01-02 20:30:36.200101', 6, 'UTC'), toDateTime64('2016-05-02 20:30:36.200100', 6, 'UTC'));
SELECT age('quarter', toDate('2015-08-18', 'UTC'), toDate32('2015-11-18', 'UTC'), 'UTC');
SELECT age('quarter', toDateTime64('2015-01-02 20:30:36.200', 3, 'UTC'), toDateTime64('2016-04-02 20:30:36.200', 3, 'UTC'));
SELECT age('quarter', toDateTime64('2015-01-02 20:30:36.200101', 6, 'UTC'), toDateTime64('2016-04-02 20:30:36.200100', 6, 'UTC'));
SELECT age('second', materialize(toDateTime('2015-08-18 00:00:00', 'UTC')), materialize(toDateTime64('2015-08-18 00:00:10', 3, 'UTC')));
SELECT age('second', materialize(toDateTime('2015-08-18 00:00:00', 'UTC')), toDateTime64('2015-08-18 00:00:10', 3, 'UTC'));
SELECT age('week', toDateTime64('2015-01-01 20:30:36.200', 3, 'UTC'), toDateTime64('2015-01-15 20:30:35.200', 3, 'UTC'));
SELECT age('week', toDateTime64('2015-01-01 20:30:36.200', 3, 'UTC'), toDateTime64('2015-01-15 20:30:36.100', 3, 'UTC'));
SELECT age('week', toDateTime64('2015-01-01 20:30:36.200', 3, 'UTC'), toDateTime64('2015-01-15 20:30:36.200', 3, 'UTC'));
SELECT age('week', toDateTime64('2015-01-01 20:30:36.200101', 6, 'UTC'), toDateTime64('2015-01-15 20:30:36.200100', 6, 'UTC'));
SELECT age('year', toDate('2015-08-18', 'UTC'), toDate32('2016-08-18', 'UTC'), 'UTC');
SELECT age('year', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT age('YeAr', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT age('year', toDate('2017-12-31'), toDate('2017-01-01'));
SELECT age('year', toDate('2017-12-31'), toDate('2018-01-01'));
SELECT age('year', toDate32('1927-01-01', 'UTC'), toDate32('1928-01-01', 'UTC'), 'UTC');
select alias1 from (select id1, id1 as alias1 from mt) as l all inner join (select id2 as alias1 from mt) as t using (alias1) order by l.id1 settings optimize_use_projections = 1;
SELECT alias2 AS alias3 FROM table ARRAY JOIN arr_alias AS alias2, arrayEnumerateUniq(arr_alias) AS _uniq_Event WHERE (date = toDate('2010-10-10')) AND (a IN (2, 3)) AND (str NOT IN ('z', 'x')) AND (d != -1) LIMIT 1;
select alias_col from t_00712_2 sample 1 / 2 where date = '2018-01-01' and counter = 1 and sampler = 1;
SELECT ALL 'a';
SELECT ALL * FROM (SELECT 1 UNION ALL SELECT 1);
SELECT analysisOfVariance(1, 18446744073709551615);
SELECT analysisOfVariance(1.11, -20);
SELECT analysisOfVariance(number :: Decimal256(5), number % 2) FROM numbers(10) FORMAT Null;
SELECT analysisOfVariance(number :: Decimal32(5), number % 2) FROM numbers(10) FORMAT Null;
SELECT analysisOfVariance(number, number % 2) FROM numbers(10) FORMAT Null;
SELECT and(b, b), or(b, b), xor(b, b) FROM test_table_nullable;
select ans < -61.374 and ans > -61.375 from (with (select state from remote('127.0.0.1', currentDatabase(), model)) as model select evalMLMethod(model, predict1, predict2) as ans from remote('127.0.0.1', currentDatabase(), defaults));
select ans < 1.1 and ans > 0.9 from (with (select state from model) as model select evalMLMethod(model, predict1, predict2) as ans from defaults limit 2);
select ans > -0.1 and ans < 0.1 from (with (select state from model) as model select evalMLMethod(model, predict1, predict2) as ans from defaults limit 2);
select ans > -2.01 and ans < -1.99 from (select stochasticLinearRegression(0.03, 0.00001, 2, 'Nesterov')(target, param1, param2)[2] as ans from defaults);
select ans > -67.0 and ans < -66.9 from (with (select state + state + state from model) as model select evalMLMethod(model, predict1, predict2) as ans from defaults limit 1);
select ans > -67.01 and ans < -66.9 from (with (select state from model) as model select evalMLMethod(model, predict1, predict2) as ans from defaults limit 1);
select ans > 2.99 and ans < 3.01 from (select stochasticLinearRegression(0.03, 0.00001, 2, 'Nesterov')(target, param1, param2)[3] as ans from defaults);
SELECT ANS[1] > -1.1 AND ANS[1] < -0.9 AND ANS[2] > 5.9 AND ANS[2] < 6.1 AND ANS[3] > 9.9 AND ANS[3] < 10.1 FROM (SELECT stochasticLinearRegression(0.05, 0, 1, 'SGD')(target, p1, p2) AS ANS FROM grouptest GROUP BY user_id ORDER BY user_id LIMIT 1, 1);
SELECT ANS[1] > 1.9 AND ANS[1] < 2.1 AND ANS[2] > 2.9 AND ANS[2] < 3.1 AND ANS[3] > -3.1 AND ANS[3] < -2.9 FROM (SELECT stochasticLinearRegression(0.05, 0, 1, 'SGD')(target, p1, p2) AS ANS FROM grouptest GROUP BY user_id ORDER BY user_id LIMIT 0, 1);
SELECT any( toDateTime('2020-01-01T00:00:00', 'UTC')) FROM e JOIN ( SELECT 1 joinKey) AS da ON joinKey = a PREWHERE t >= toDateTime('2021-07-19T13:00:00', 'UTC');
SELECT any('1') FROM e JOIN ( SELECT 1 joinKey) AS da ON joinKey = a PREWHERE toString(a) = '1';
SELECT any('2020-01-01 00:00:00') FROM e JOIN ( SELECT 1 joinKey) AS da ON joinKey = a PREWHERE t = '2020-01-01 00:00:00';
SELECT any(uuid) AS id, max(end_ts) - any(start_ts) AS time_delta, any(start_ts) AS start_ts, max(end_ts) AS end_ts FROM mytable GROUP BY uuid HAVING max(end_ts) < 1620141001 ORDER BY any(start_ts) DESC;
SELECT any(value > 0) from system.events WHERE event = 'PartsLockHoldMicroseconds' or event = 'PartsLockWaitMicroseconds';
SELECT any(value) OVER (ORDER BY time ASC) FROM test2;
SELECT any(value) RESPECT NULLS FROM data_sparse_column;
select any_value(number) from numbers(10);
select aNy_VaLue(number) from numbers(10);
SELECT anyHeavy('1') FROM (SELECT anyHeavy(1));
SELECT anyHeavy(1) FROM remote('127.0.0.{2,3}', system.one);
SELECT anyIf (number, isNull(number)) RESPECT NULLS from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));
SELECT anyIf('Hello', arrayJoin([1, NULL]) = 0) FROM remote('127.0.0.{1,2}', system.one);
SELECT anyIf('Hello', arrayJoin([1, NULL]) = 0);
SELECT anyIf('Hello', arrayJoin([1, NULL]) = 1) FROM remote('127.0.0.{1,2}', system.one);
SELECT anyIf('Hello', arrayJoin([1, NULL]) = 1);
SELECT anyIf('Hello', arrayJoin([1, NULL]) IS NULL) FROM remote('127.0.0.{1,2}', system.one);
SELECT anyIf('Hello', arrayJoin([1, NULL]) IS NULL);
SELECT anyIf(toNullable('Hello'), arrayJoin([0, 0]) = 0) FROM remote('127.0.0.{1,2}', system.one);
SELECT anyIf(toNullable('Hello'), arrayJoin([0, 0]) = 0);
SELECT anyIf(toNullable('Hello'), arrayJoin([0, 1]) = 0) FROM remote('127.0.0.{1,2}', system.one);
SELECT anyIf(toNullable('Hello'), arrayJoin([0, 1]) = 0);
SELECT anyOrNull(number) RESPECT NULLS from (Select NULL::Nullable(UInt8) as number FROM numbers(10));
SELECT anyOrNull(number) RESPECT NULLS from numbers(0);
select appendTrailingCharIfAbsent('', 'a') = '';
select appendTrailingCharIfAbsent('a', 'a') = 'a';
SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 3 = 0, NULL, number) AS n from numbers(10));
SELECT argMax((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 3 = 0, NULL, number::Int32) AS n from numbers(10));
Select argMax((n, n), n) t, toTypeName(t) FROM (Select if(number % 3 == 0, NULL, number) as n from numbers(10));
SELECT argMaxIfOrNull(id, timestamp, id IS NOT NULL) FROM ( SELECT CAST(NULL, 'Nullable(UInt32)') AS id, 2 AS timestamp UNION ALL SELECT 1 AS id, 1 AS timestamp );
SELECT argMaxMerge(amax) FROM test FORMAT Null;
SELECT argMaxOrNull(id, timestamp) FROM ( SELECT CAST(NULL, 'Nullable(UInt32)') AS id, 2 AS timestamp );
Select argMin((n, n), n) t, toTypeName(t) FROM (Select if(number % 3 == 0, NULL, number) as n from numbers(10));
SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 5 == 0, NULL, number) as n from numbers(5, 10));
SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number % 5 == 0, NULL, number::Int32) as n from numbers(5, 10));
SELECT argMin((n, n), n) t, toTypeName(t) FROM (SELECT if(number <= 100, NULL, number) AS n from numbers(5, 10));
SELECT argMinIf(number, now() + number, number % 10 > 20) FROM (Select number as number from numbers(10, 10000)) settings max_threads=1, max_block_size=20000;
SELECT argMinIf(number, number::Float64, number > 2030) from numbers(2029);
SELECT argMinIf(number, number::Float64, number > 2030) from numbers(2032);
SELECT arr FROM t_json_array ARRAY JOIN arr ORDER BY arr.k1 FORMAT JSONEachRow;
SELECT arr, [1,2] AS other, round(arrayJaccardIndex(arr, other), 2) FROM array_jaccard_index ORDER BY arr;
SELECT arr, [] AS other, round(arrayJaccardIndex(arr, other), 2) FROM array_jaccard_index ORDER BY arr;
SELECT arr, arr, round(arrayJaccardIndex(arr, arr), 2) FROM array_jaccard_index ORDER BY arr;
SELECT arr, count() AS c FROM (SELECT arrayMap(x -> x % 2, groupArray(number)) AS arr FROM (SELECT number FROM system.numbers LIMIT 10000) GROUP BY number % ((number * 0xABCDEF0123456789 % 1234) + 1)) GROUP BY arr ORDER BY c DESC, arr ASC;
SELECT arr, element FROM (SELECT [1] AS arr) LEFT ARRAY JOIN arr AS element;
SELECT arr, element FROM (SELECT arrayJoin([emptyArrayUInt8(), [1], [2, 3]]) AS arr) LEFT ARRAY JOIN arr AS element;
SELECT arr, element FROM (SELECT arrayMap(x -> nullIf(x, 2), arrayJoin([emptyArrayUInt8(), [1], [2, 3]])) AS arr) LEFT ARRAY JOIN arr AS element;
SELECT arr, element FROM (SELECT emptyArrayUInt8() AS arr) LEFT ARRAY JOIN arr AS element;
SELECT arr, has(`arr`, 'str1') FROM has_function;
SELECT arr.size0, n.null, t.s1, t.s2 FROM t_subcolumns_dist;
select arr1, 2, 4, arraySlice(arr1, -4, -1) from array_functions;
select arr1, 2, nl, arraySlice(arr1, 2, nl) from array_functions;
SELECT arr1, arr2, count() AS c FROM (SELECT arrayMap(x -> toString(x), range(number)) AS arr1, arrayMap(x -> toString(x), range(toUInt64(10 - number))) AS arr2 FROM system.numbers LIMIT 11) GROUP BY arr1, arr2 ORDER BY c DESC, arr1, arr2;
SELECT arr1, arr2, count() AS c FROM (SELECT range(number) AS arr1, range(toUInt64(10 - number)) AS arr2 FROM system.numbers LIMIT 11) GROUP BY arr1, arr2 ORDER BY c DESC, arr1, arr2;
select arr1, arrayPopBack(arr1) from array_functions;
select arr1, arrayPopFront(arr1) from array_functions;
select arr1, arrayPushBack(arr1, '1') from array_functions;
select arr1, arrayPushBack(arr1, 0.1) from array_functions;
select arr1, arrayPushFront(arr1, val2) from array_functions;
select arr1, no, 2, arraySlice(arr1, no, -2) from array_functions;
select arr1, no, 2, arraySlice(arr1, no, 2) from array_functions;
select arr1, no, nl, arraySlice(arr1, no, nl) from array_functions;
select arr1, o, 2, arraySlice(arr1, o, -2) from array_functions;
select arr1, o, 2, arraySlice(arr1, o, 2) from array_functions;
select arr1, o, l, arraySlice(arr1, o, l) from array_functions;
SELECT arr2, arr2.size0, arr2.size1, arr2.null FROM subcolumns;
select arr[id] from array_element_test;
select array from aliases_test array join d1 as d2, a1 as a1;
select array from aliases_test array join d1, a1;
select array from aliases_test array join struct as class;
select array from aliases_test array join struct as struct;
select array from aliases_test array join struct;
select array from aliases_test;
select array(-4741124612489978151, 1, -3236599669630092879, 2, 560747512943180768, 3);
select array, class.d1, class.a1, class.a2, class.a3, class.a4, class.a5, class.a6 from aliases_test array join struct as class;
select array, d1, a1, a2, a3, a4, a5, a6 from aliases_test array join a1 as a1;
select array, d1, a1, a2, a3, a4, a5, a6 from aliases_test array join a1;
SELECT arrayAll(x -> 1, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayAll(x -> 1, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayAll(x -> 1, emptyArrayString());
SELECT arrayAll(x -> 1, emptyArrayUInt8());
SELECT arrayAll(x -> 1, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayAll(x -> materialize(0), [1, 2, 3]);
SELECT arrayAll(x -> materialize(0), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayAll(x -> materialize(0), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayAll(x -> materialize(0), emptyArrayString());
SELECT arrayAll(x -> materialize(0), emptyArrayUInt8());
SELECT arrayAll(x -> materialize(0), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayAll(x -> materialize(1), [1, 2, 3]);
SELECT arrayAll(x -> materialize(1), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayAll(x -> materialize(1), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayAll(x -> materialize(1), emptyArrayString());
SELECT arrayAll(x -> materialize(1), emptyArrayUInt8());
SELECT arrayAll(x -> materialize(1), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayAll(x -> number % 2, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayAll(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayAUC([0, 0, 1], [0, 1, 1]);
SELECT arrayAUC([0, 1, 1], [0, 0, 1]);
SELECT arrayAUC([0, 1, 1], [0, 1, 1]);
SELECT arrayAUC([0, 1], [0, 1]);
select arrayAUC([0.1, 0.4, 0.35, 0.8], cast(['false', 'false', 'true', 'true'] as Array(Enum8('false' = 0, 'true' = 1))));
select arrayAUC([0.1, 0.4, 0.35, 0.8], cast([-1, -1, 1, 1] as Array(Int8)));
select arrayAUC([0.1, 0.4, 0.35, 0.8], cast([0, 0, 1, 1] as Array(Int8)));
SELECT arrayAUC([1, 0], [0, 1]);
SELECT arrayAUC([1, 1], [0, 0]);
SELECT arrayAUC([1, 1], [0, 1]);
SELECT arrayAUC([1], []);
SELECT arrayAUC([], []);
select arrayAUC(cast([-0.1, -0.4, -0.35, -0.8] as Array(Float32)) , [0, 0, 1, 1]);
SELECT arrayAvg([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
SELECT arrayAvg(x) FROM test_aggregation;
SELECT arrayCompact(['hello', '', '', '', 'world', 'world']);
select arrayCompact([0]);
SELECT arrayCompact([1, 1, nan, nan, -nan, 2, 2, 2]);
SELECT arrayCompact([1, 1, nan, nan, 2, 2, 2]);
SELECT arrayCompact([1, 1, NULL, NULL, 2, 2, 2]);
SELECT arrayCompact([1, 1, NULL, NULL, nan, nan, 2, 2, 2]);
select arrayCompact([1,1,2]);
select arrayCompact([1,1]);
select arrayCompact([1,2,1]);
select arrayCompact([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]);
select arrayCompact([1,2]);
SELECT arrayCompact([1.2::Decimal(60, 30) AS x, x, x, x, 3.45::Decimal(3, 2) AS y, y, x, x]);
select arrayCompact([1]);
select arrayCompact([2,1,1]);
select arrayCompact([2]);
SELECT arrayCompact([[[]], [[], []], [[], []], [[]]]);
SELECT arrayCompact([]);
SELECT arrayCompact([toDecimal128(1.0,8), toDecimal128(1.0,8)]) x, toTypeName(x);
SELECT arrayConcat(c, nest.b) AS x, toTypeName(x) FROM decimal;
SELECT arrayConcat(c, nest.c) AS x, toTypeName(x) FROM decimal;
select arrayConcat(emptyArrayUInt8());
select arrayConcat(emptyArrayUInt8(), emptyArrayUInt8());
select arrayConcat(emptyArrayUInt8(), emptyArrayUInt8(), emptyArrayUInt8());
select arrayConcat(Null, emptyArrayUInt8());
SELECT arrayCount(x -> 0, [1, 2, 3]);
SELECT arrayCount(x -> 0, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayCount(x -> 0, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayCount(x -> 0, emptyArrayString());
SELECT arrayCumSum(x -> materialize(10), emptyArrayUInt8());
SELECT arrayCumSum(x -> materialize(10), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayCumSum(x -> number % 2, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayCumSum(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayCumSumNonNegative([1, -5, 5, -2]);
SELECT arrayCumSumNonNegative([1, 2, 3, 4]);
SELECT arrayCumSumNonNegative([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
SELECT arrayCumSumNonNegative([toUInt256(1), 2]), toTypeName(arrayCumSumNonNegative([toUInt256(1), 2]));
SELECT arrayCumSumNonNegative(a) FROM test;
SELECT arrayCumSumNonNegative(b) FROM test;
SELECT arrayCumSumNonNegative(c) FROM test;
SELECT arrayDifference( cast([10, 1], 'Array(UInt16)'));
SELECT arrayDifference( cast([10, 1], 'Array(UInt32)'));
SELECT arrayDifference(c) FROM test;
SELECT arrayDistinct(['1212', 'sef', '343r4', '1212']);
SELECT arrayDistinct(['1212', 'sef', '343r4', NULL, NULL, '232']);
SELECT arrayDistinct(groupArray(dictGetUInt64('db_01501.cache_dict', 'UInt64_', toUInt64(number)))) from numbers(10);
SELECT arrayDistinct(groupArray(dictGetUInt8('db_01501.cache_dict', 'UInt8_', toUInt64(number)))) from numbers(10);
SELECT arrayDistinct(materialize(['', '', ''])) FROM numbers(2);
SELECT arrayDistinct(materialize([[0], [0]])) FROM numbers(2);
SELECT arrayDotProduct([12, 2.22, 302], [1.32, 231.2, 11.1]);
SELECT arrayElement(['a',NULL,'c','d'], 1);
SELECT arrayElement(['a',NULL,'c','d'], 2);
SELECT arrayEnumerateUniqRanked([[[1,2,3],[1,2,3],[1,2,3]],[[1,2,3],[1,2,3],[1,2,3]],[[1,2]]]);
SELECT arrayEnumerateUniqRanked([[], [1], [], [1], [], [1], [], [1], [], [1], [], [1], [], [1], [], [1]]);
SELECT arrayEnumerateUniqRanked(x, 2) FROM VALUES('x Array(Array(String))', ([[]]), ([['a'], ['a'], ['b']]), ([['a'], ['a'], ['b']]));
SELECT arrayExists(date -> (date = '2022-07-31'), [toDate('2022-07-31')]) AS date_exists;
SELECT arrayExists(x -> ((x.1) = 'pattern'), cast([tuple('a', 1)] as Array(Tuple(LowCardinality(String), UInt8))));
SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}') GROUP BY 'A';
SELECT arrayExists(x -> 1, emptyArrayString());
SELECT arrayExists(x -> 1, emptyArrayUInt8());
SELECT arrayExists(x -> 1, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayExists(x -> materialize(0), [1, 2, 3]);
SELECT arrayExists(x -> materialize(0), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayExists(x -> materialize(0), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayExists(x -> materialize(0), emptyArrayString());
SELECT arrayExists(x -> materialize(0), emptyArrayUInt8());
SELECT arrayExists(x -> materialize(0), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayExists(x -> materialize(1), [1, 2, 3]);
SELECT arrayExists(x -> materialize(1), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayExists(x -> materialize(1), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayExists(x -> materialize(1), emptyArrayString());
SELECT arrayExists(x -> materialize(1), emptyArrayUInt8());
SELECT arrayExists(x -> materialize(1), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayExists(x -> number % 2, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayExists(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFill((x, y) -> y, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0]);
SELECT arrayFill(x -> (x < 10), []);
SELECT arrayFill(x -> (x < 10), emptyArrayUInt8());
SELECT arrayFill(x -> 0, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16]);
SELECT arrayFill(x -> 0, []);
SELECT arrayFill(x -> 1, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16]);
SELECT arrayFill(x -> 1, []);
SELECT arrayFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]);
SELECT arrayFill(x -> x < 10, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16]);
SELECT arrayFilter((a) -> ((a, arrayJoin([[]])) IN (Null, [Null])), []);
SELECT arrayFilter((a) -> ((a, arrayJoin([])) IN (Null, [Null])), []);
SELECT arrayFilter(x -> 0, [1, 2, 3]);
SELECT arrayFilter(x -> 0, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFilter(x -> 0, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFilter(x -> 0, emptyArrayString());
SELECT arrayFilter(x -> 0, emptyArrayUInt8());
SELECT arrayFilter(x -> 0, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFilter(x -> 1, [1, 2, 3]);
select arrayFilter(x -> 1, arr) from test;
SELECT arrayFilter(x -> 1, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFilter(x -> 1, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFilter(x -> 1, emptyArrayString());
SELECT arrayFilter(x -> 1, emptyArrayUInt8());
SELECT arrayFilter(x -> 1, range(number)) FROM system.numbers LIMIT 10;
select arrayFilter(x -> 2 * x < 0, []);
select arrayFilter(x -> 2 * x > 0, []);
select arrayFilter(x -> 2 * x > 0, [NULL]);
SELECT arrayFilter(x -> materialize(0), [1, 2, 3]);
SELECT arrayFilter(x -> materialize(0), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFilter(x -> materialize(0), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFilter(x -> materialize(0), emptyArrayString());
SELECT arrayFilter(x -> materialize(0), emptyArrayUInt8());
SELECT arrayFilter(x -> materialize(0), materialize([''])) AS p, arrayAll(y -> arrayExists(x -> y != x, p), p) AS test;
SELECT arrayFilter(x -> materialize(0), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFilter(x -> materialize(1), [1, 2, 3]);
SELECT arrayFilter(x -> materialize(1), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFilter(x -> materialize(1), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFilter(x -> materialize(1), emptyArrayString());
SELECT arrayFilter(x -> materialize(1), emptyArrayUInt8());
SELECT arrayFilter(x -> materialize(1), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem, arrayMap(x -> splitByChar(x, elem), ['']) AS unused;
SELECT arrayFilter(x -> notEmpty(concat(x, 'hello')), ['']) FROM system.one ARRAY JOIN [0] AS elem, arrayMap(x -> concat(x, 'hello'), ['']) AS unused WHERE NOT ignore(elem);
select arrayFilter(x -> NULL::Nullable(UInt8), range(number)) from numbers(3);
SELECT arrayFilter(x -> number % 2, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFilter(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
select arrayFilter(x -> toNullable(0), range(number)) from numbers(3);
select arrayFilter(x -> toNullable(1), range(number)) from numbers(3);
SELECT arrayFilter(x -> x % 2 = 1, arr2) FROM t_sparse WHERE arr2 != [] LIMIT 5;
select arrayFilter(x -> x % 2 == 0, arr) from lc_lambda;
select arrayFilter(x -> x % 2 ? NULL : 1, [1, 2, 3, 4]);
select arrayFilter(x -> x % 2, [1, NULL, 3, NULL]);
SELECT arrayFilter(x -> x = 'hello', ['']) FROM system.one ARRAY JOIN [0] AS elem WHERE NOT ignore(elem) AND arrayExists(x -> x = 'hello', ['']);
select arrayFilter(x -> x = (toInt16(3), toInt16(3)), arrayZip([toUInt8(3)], [toUInt8(3)]));
SELECT arrayFirst(x -> 0, [1, 2, 3]);
SELECT arrayFirst(x -> 0, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirst(x -> 0, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> 0, emptyArrayString());
SELECT arrayFirst(x -> 0, emptyArrayUInt8());
SELECT arrayFirst(x -> 0, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> 1, [1, 2, 3]);
SELECT arrayFirst(x -> 1, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirst(x -> 1, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> 1, emptyArrayString());
SELECT arrayFirst(x -> 1, emptyArrayUInt8());
SELECT arrayFirst(x -> 1, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> materialize(0), [1, 2, 3]);
SELECT arrayFirst(x -> materialize(0), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirst(x -> materialize(0), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> materialize(0), emptyArrayString());
SELECT arrayFirst(x -> materialize(0), emptyArrayUInt8());
SELECT arrayFirst(x -> materialize(0), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> materialize(1), [1, 2, 3]);
SELECT arrayFirst(x -> materialize(1), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirst(x -> materialize(1), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> materialize(1), emptyArrayString());
SELECT arrayFirst(x -> materialize(1), emptyArrayUInt8());
SELECT arrayFirst(x -> materialize(1), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> number % 2, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirst(x -> x >= 2, [1, 2, 3]);
SELECT arrayFirst(x -> x >= 2, emptyArrayUInt8());
SELECT arrayFirst(x -> x >= 2, materialize([1, 2, 3]));
SELECT arrayFirstIndex(x -> 0, [1, 2, 3]);
SELECT arrayFirstIndex(x -> 0, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirstIndex(x -> 0, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> 0, emptyArrayString());
SELECT arrayFirstIndex(x -> 0, emptyArrayUInt8());
SELECT arrayFirstIndex(x -> 0, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> 1, [1, 2, 3]);
SELECT arrayFirstIndex(x -> 1, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirstIndex(x -> 1, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> 1, emptyArrayString());
SELECT arrayFirstIndex(x -> 1, emptyArrayUInt8());
SELECT arrayFirstIndex(x -> 1, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> materialize(0), [1, 2, 3]);
SELECT arrayFirstIndex(x -> materialize(0), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirstIndex(x -> materialize(0), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> materialize(0), emptyArrayString());
SELECT arrayFirstIndex(x -> materialize(0), emptyArrayUInt8());
SELECT arrayFirstIndex(x -> materialize(0), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> materialize(1), [1, 2, 3]);
SELECT arrayFirstIndex(x -> materialize(1), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayFirstIndex(x -> materialize(1), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> materialize(1), emptyArrayString());
SELECT arrayFirstIndex(x -> materialize(1), emptyArrayUInt8());
SELECT arrayFirstIndex(x -> materialize(1), range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> number % 2, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayFirstIndex(x -> x >= 2, [1, 2, 3]);
SELECT arrayFirstIndex(x -> x >= 2, emptyArrayUInt8());
SELECT arrayFirstOrNull((x,f) -> f, [1,2,3,NULL], [0,0,0,1]);
SELECT arrayFirstOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,0]);
SELECT arrayFirstOrNull(x -> 0, [1, 2, 3]);
SELECT arrayFirstOrNull(x -> 0, emptyArrayUInt8());
SELECT arrayFirstOrNull(x -> 1, [1, 2, 3]);
SELECT arrayFirstOrNull(x -> 1, emptyArrayUInt8());
SELECT arrayFirstOrNull(x -> x >= 2, [1, 2, 3]);
SELECT arrayFirstOrNull(x -> x >= 2, emptyArrayUInt8());
SELECT arrayFirstOrNull(x -> x >= 2, materialize([1, 2, 3]));
SELECT arrayFlatten([[[1, 2, 3], [4, 5]], [[6], [7, 8]]]);
SELECT arrayFlatten([]);
SELECT arrayFlatten(arrayJoin([[[[]], [[1], [], [2, 3]]], [[[4]]]]));
SELECT arrayFold( acc,x -> (arrayPushFront(acc.1, x),arrayPushBack(acc.2, x)), [1, 2, 3, 4], (emptyArrayInt64(), emptyArrayInt64()));
SELECT arrayFold( acc,x -> acc+x*2, [1, 2, 3, 4], toInt64(3));
SELECT arrayFold( acc,x -> acc+x*2, emptyArrayInt64(), toInt64(3));
SELECT arrayFold( acc,x -> acc+x, range(number), number) FROM system.numbers LIMIT 5;
SELECT arrayFold( acc,x -> arrayPushBack(acc, x), [1, 2, 3, 4], emptyArrayInt64());
SELECT arrayFold( acc,x -> arrayPushFront(acc, x), [1, 2, 3, 4], emptyArrayInt64());
SELECT arrayFold( acc,x -> arrayPushFront(acc,x), range(number), emptyArrayUInt64()) FROM system.numbers LIMIT 5;
SELECT arrayFold( acc,x -> x%2 ? (arrayPushBack(acc.1, x), acc.2): (acc.1, arrayPushBack(acc.2, x)), [1, 2, 3, 4, 5, 6], (emptyArrayInt64(), emptyArrayInt64()));
SELECT arrayFold( acc,x -> x%2 ? arrayPushFront(acc,x) : arrayPushBack(acc,x), range(number), emptyArrayUInt64()) FROM system.numbers LIMIT 5;
SELECT arrayFold( acc,x,y -> acc+x*2+y*3, [1, 2, 3, 4], [5, 6, 7, 8], toInt64(3));
SELECT arrayFold();
SELECT arrayFold(acc, x -> arrayIntersect(acc, x), [['qwe', 'asd'], ['qwe','asde']], []);
select arrayIntersect([(1, ['a', 'b']), (Null, ['c'])], [(2, ['c', Null]), (1, ['a', 'b'])]);
select arrayIntersect([1, -1, Null], [Null, 1]);
select arrayIntersect([1, -1], [1]);
select arrayIntersect([1, -1], [Null, 1]);
select arrayIntersect([1, 2], [1, 3], [1, 4]);
select arrayIntersect([1, 2], [1, 3], [2, 3]);
select arrayIntersect([1], [1]);
select arrayIntersect([1], []);
select arrayIntersect([[1, 2, Null], [1, 1]], [[-2, 1], [1, 1]]);
select arrayIntersect([[1, 2], [1, 1]], [[2, 1], [1, 1]]);
select arrayIntersect([], []);
select arrayIntersect(CAST([1, -1] AS Array(Nullable(Int8))), [NULL, 1]);
select arrayIntersect(cast([1, 2] as Array(Nullable(Int8))), [1, 3]);
SELECT arrayJoin(['1.1.1.1', '255.255.255.255']) AS x, toIPv4(x) AS y, toUInt32(y) AS z FORMAT PrettyCompactNoEscapes;
SELECT arrayJoin(['A', 'c', 'Z', 'Q', 'e']) AS x ORDER BY x COLLATE 'en';
SELECT arrayJoin(['A', 'c', 'Z', 'Q', 'e']) AS x ORDER BY x COLLATE 'en_US';
SELECT arrayJoin(['A', 'c', 'Z', 'Q', 'e']) AS x ORDER BY x;
SELECT arrayJoin(['F', 'z', 'J', 'Ñ']) as x ORDER BY x COLLATE 'es';
SELECT arrayJoin(['F', 'z', 'J', 'Ñ']) as x ORDER BY x;
SELECT arrayJoin(['Hello', 'test', 'World', 'world', 'abc', 'xyz']) AS s WHERE s IN set2;
SELECT arrayJoin(['Hello', 'test', 'World', 'world', 'abc', 'xyz']) AS s WHERE s IN set;
SELECT arrayJoin(['Hello', 'test', 'World', 'world', 'abc', 'xyz']) AS s WHERE s NOT IN set;
SELECT arrayJoin(['hello', 'world']) LIKE '%elloworl%';
SELECT arrayJoin(['hello', 'world']) LIKE '%he%o%';
SELECT arrayJoin(['hello', 'world']) LIKE '%he__o%';
SELECT arrayJoin(['hello', 'world']) LIKE '%hell%';
SELECT arrayJoin(['hello', 'world']) LIKE '%hell';
SELECT arrayJoin(['hello', 'world']) LIKE '%hell_';
SELECT arrayJoin(['hello', 'world']) LIKE '%hello%';
SELECT arrayJoin(['hello', 'world']) LIKE '%hello';
SELECT arrayJoin(['hello', 'world']) LIKE '%helloworld%';
SELECT arrayJoin(['hello', 'world']) LIKE '%l%';
SELECT arrayJoin(['hello', 'world']) LIKE '%l%o%';
SELECT arrayJoin(['hello', 'world']) LIKE '%o%';
SELECT arrayJoin(['hello', 'world']) LIKE '%o%l%';
SELECT arrayJoin(['hello', 'world']) LIKE '%o%w%';
SELECT arrayJoin(['hello', 'world']) LIKE '%orld%';
SELECT arrayJoin(['hello', 'world']) LIKE '%orld';
SELECT arrayJoin(['hello', 'world']) LIKE '%ow%';
SELECT arrayJoin(['hello', 'world']) LIKE '%w%ld%';
SELECT arrayJoin(['hello', 'world']) LIKE '%w__ld%';
SELECT arrayJoin(['hello', 'world']) LIKE '%world%';
SELECT arrayJoin(['hello', 'world']) LIKE '%world';
SELECT arrayJoin(['hello', 'world']) LIKE '%x%z%';
SELECT arrayJoin(['hello', 'world']) LIKE '%xyz%';
SELECT arrayJoin(['hello', 'world']) LIKE '%xyz';
SELECT arrayJoin(['hello', 'world']) LIKE '_orld%';
SELECT arrayJoin(['hello', 'world']) LIKE '_orld';
SELECT arrayJoin(['hello', 'world']) LIKE 'hell%';
SELECT arrayJoin(['hello', 'world']) LIKE 'hell';
SELECT arrayJoin(['hello', 'world']) LIKE 'hell_';
SELECT arrayJoin(['hello', 'world']) LIKE 'hello%';
SELECT arrayJoin(['hello', 'world']) LIKE 'hello';
SELECT arrayJoin(['hello', 'world']) LIKE 'helloworld';
SELECT arrayJoin(['hello', 'world']) LIKE 'orld%';
SELECT arrayJoin(['hello', 'world']) LIKE 'orld';
SELECT arrayJoin(['hello', 'world']) LIKE 'world%';
SELECT arrayJoin(['hello', 'world']) LIKE 'world';
SELECT arrayJoin(['hello', 'world']) LIKE 'xyz%';
SELECT arrayJoin(['hello', 'world']) LIKE 'xyz';
SELECT arrayJoin(['а', 'я', 'ё', 'А', 'Я', 'Ё']) AS x FROM remote('127.0.0.{2,3}', system, one) ORDER BY x COLLATE 'ru';
SELECT arrayJoin(['а', 'я', 'ё', 'А', 'Я', 'Ё']) AS x ORDER BY x COLLATE 'ru';
SELECT arrayJoin(['а', 'я', 'ё', 'А', 'Я', 'Ё']) AS x ORDER BY x;
SELECT arrayJoin(['ґ', 'ї', 'І', 'Б']) as x ORDER BY x COLLATE 'uk';
SELECT arrayJoin(['ґ', 'ї', 'І', 'Б']) as x ORDER BY x;
SELECT arrayJoin([(k1, v), (k2, v)]) AS row, row.1 as k FROM t FINAL WHERE k1 != 3 AND k = 1 ORDER BY row SETTINGS enable_vertical_final = 1;
SELECT arrayJoin([(k1, v), (k2, v)]) AS row, row.1 as k FROM t FINAL WHERE k1 != 3 AND k = 2 ORDER BY row SETTINGS enable_vertical_final = 0;
SELECT arrayJoin([(k1, v), (k2, v)]) AS row, row.1 as k FROM t FINAL WHERE k1 != 3 AND k = 2 ORDER BY row SETTINGS enable_vertical_final = 1;
SELECT arrayJoin([(k1, v), (k2, v)]) AS row, row.1 as k FROM t FINAL WHERE k1 != 3 AND k = 3 ORDER BY row SETTINGS enable_vertical_final = 0;
SELECT arrayJoin([(k1, v), (k2, v)]) AS row, row.1 as k FROM t FINAL WHERE k1 != 3 AND k = 3 ORDER BY row SETTINGS enable_vertical_final = 1;
SELECT arrayJoin([0, 1, 3, NULL]) AS x, x = 0, if(x = 0, 'x=0', 'x<>0') ORDER BY x;
SELECT arrayJoin([0, 1, 3, NULL]) AS x, x = 0, if(x = 0, 'Definitely x = 0', 'We cannot say that x = 0');
SELECT arrayJoin([0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,4,12,NULL]) AS x ORDER BY x DESC;
SELECT arrayJoin([0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,4,12,NULL]) AS x ORDER BY x;
SELECT arrayJoin([0]), replicate('hello', [1]) WHERE NOT ignore(replicate('hello', [1]));
SELECT arrayJoin([0]), replicate('hello', emptyArrayString()) FROM system.one ARRAY JOIN emptyArrayString() AS unused WHERE NOT ignore(replicate('hello', emptyArrayString()));
SELECT arrayJoin([0]), replicate('hello', emptyArrayString()) WHERE NOT ignore(replicate('hello', emptyArrayString()));
SELECT arrayJoin([1, 2, 3]) AS a, a;
SELECT arrayJoin([1, 2, 3]) AS a, arrayJoin([1, 2, 3, 4]) AS b;
SELECT arrayJoin([1, 2, 3]) AS a, arrayJoin([1, 2, 3]);
SELECT arrayJoin([1, 2, 3]) AS arr, 'hello' AS s1, 'world' AS s2 FORMAT TabSeparated;
SELECT arrayJoin([1, 2, 3]) AS arr, 'hello' AS s1, 'world' AS s2 FORMAT TabSeparatedRaw;
SELECT arrayJoin([1, 2, 3]) AS arr, 'hello' AS s1, 'world' AS s2 FORMAT TabSeparatedWithNames;
SELECT arrayJoin([1, 2, 3]) AS arr, 'hello' AS s1, 'world' AS s2 FORMAT TabSeparatedWithNamesAndTypes;
SELECT arrayJoin([1, 2, 3]) AS arr, 'hello' AS s1, 'world' AS s2 FORMAT TSV;
SELECT arrayJoin([1, 2, 3]) AS arr, 'hello' AS s1, 'world' AS s2 FORMAT TSVRaw;
SELECT arrayJoin([1, 2, 3]) AS arr, 'hello' AS s1, 'world' AS s2 FORMAT TSVWithNames;
SELECT arrayJoin([1, 2, 3]) AS arr, 'hello' AS s1, 'world' AS s2 FORMAT TSVWithNamesAndTypes;
SELECT arrayJoin([1, 2, 3]);
SELECT arrayJoin([1,2,3]) AS id WHERE id = 1;
SELECT arrayJoin([3, 1, 2]) SETTINGS extremes = 1;
SELECT arrayJoin([3, 1, nan]) SETTINGS extremes = 1;
SELECT arrayJoin([3, nan, 2]) SETTINGS extremes = 1;
SELECT arrayJoin([3, nan, nan]) SETTINGS extremes = 1;
SELECT arrayJoin([5, 25]) IN (SELECT DISTINCT toUInt8(intDiv(number, 10)) FROM numbers(190));
SELECT arrayJoin([5, 25]) IN (SELECT DISTINCT toUInt8(intDiv(number, 10)) FROM numbers(200));
SELECT arrayJoin([5, 25]) IN (SELECT DISTINCT toUInt8(intDiv(number, 10)) FROM numbers(210));
SELECT arrayJoin([5, 25]) IN (SELECT DISTINCT toUInt8(intDiv(number, 10)) FROM numbers(300));
SELECT arrayJoin([[1, 2, 3]]) AS a, arrayJoin(a) AS b;
SELECT arrayJoin([[[1], [2]], [[1]]]) AS x WHERE length(x) = 2;
SELECT arrayJoin([count(), count() + 1]) AS x FROM count LIMIT 1 BY x;
SELECT arrayJoin([count(), count()]) AS x FROM count LIMIT 1 BY x;
SELECT arrayJoin([count(), count()]) FROM count LIMIT 1, 1;
SELECT arrayJoin([count(), count()]) FROM count LIMIT 1;
SELECT arrayJoin([count(), count()]) FROM count;
SELECT arrayJoin([CounterID NOT IN (2)]) AS counter FROM testmt WHERE CounterID IN (2) GROUP BY counter;
SELECT arrayJoin([light]) != 0 AS cond, length(heavy) FROM prewhere WHERE light != 0 AND cond != 0;
SELECT arrayJoin([nan, 1, 2]) SETTINGS extremes = 1;
SELECT arrayJoin([nan, 1, nan]) SETTINGS extremes = 1;
SELECT arrayJoin([nan, nan, 2]) SETTINGS extremes = 1;
SELECT arrayJoin([nan, nan, nan]) SETTINGS extremes = 1;
SELECT arrayJoin([NULL]) AND 1;
SELECT arrayJoin([NULL]) OR 1;
SELECT arrayJoin(a) FROM decimal;
SELECT arrayJoin(arrayJoin(arr.k1)) AS k1 FROM t_json_array ORDER BY k1 FORMAT JSONEachRow;
SELECT arrayJoin(arrayMap(i -> (i + 1), range(2))) AS index, number FROM numbers(2) GROUP BY number ORDER BY index, number;
SELECT arrayJoin(arrayMap(x -> x, arraySort(groupArray((ts, n))))) AS k FROM ( SELECT ts, n, z FROM system.one ARRAY JOIN [1, 3, 4, 5, 6] AS ts, [1, 2, 2, 2, 1] AS n, ['a', 'a', 'b', 'a', 'b'] AS z ORDER BY n ASC, ts DESC ) WHERE z = 'a' GROUP BY z;
SELECT arrayJoin(b) FROM decimal;
SELECT arrayJoin(c) FROM decimal;
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%elloworl%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%he%o%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%he__o%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%hell%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%hell';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%hell_';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%hello%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%hello';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%helloworld%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%l%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%l%o%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%o%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%o%l%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%o%w%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%orld%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%orld';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%ow%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%w%ld%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%w__ld%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%world%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%world';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%x%z%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%xyz%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '%xyz';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '_orld%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE '_orld';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'hell%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'hell';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'hell_';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'hello%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'hello';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'helloworld';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'orld%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'orld';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'world%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'world';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'xyz%';
SELECT arrayJoin(CAST(['hello', 'world'] AS Array(FixedString(5)))) LIKE 'xyz';
SELECT arrayJoin(range(100)) AS x FROM remote('127.0.0.2', system.one) WHERE x GLOBAL IN (SELECT toUInt8(arrayJoin(range(100)) + 50)) GROUP BY x ORDER BY x LIMIT 10 FORMAT JSONCompact;
SELECT arrayJoin(range(100)) AS x FROM remote('127.0.0.{2,3}', system.one) WHERE x GLOBAL IN (SELECT toUInt8(arrayJoin(range(100)) + 50)) GROUP BY x ORDER BY x LIMIT 10 FORMAT JSONCompact;
SELECT arrayJoin(splitByChar(',', toLowCardinality('a,b,c')));
SELECT arrayJoin(sumMap(x)) FROM (SELECT [('Hello', 1.2::Decimal256(30)), ('World', 3.4::Decimal256(30))]::Map(String, Decimal256(30)) AS x UNION ALL SELECT [('World', 5.6::Decimal256(30)), ('GoodBye', -111.222::Decimal256(30))]::Map(String, Decimal256(30))) ORDER BY 1;
select arrayJoin(val) as nameGroup6 from t1_00729 prewhere notEmpty(toString(nameGroup6)) group by nameGroup6 order by nameGroup6;
select arrayJoin(val) as nameGroup6, countDistinct(nid) as rowids from t1_00729 prewhere notEmpty(toString(nameGroup6)) group by nameGroup6 order by nameGroup6;
SELECT arrayLast(x -> 0, [1, 2, 3]);
SELECT arrayLast(x -> 0, emptyArrayUInt8());
SELECT arrayLast(x -> 1, [1, 2, 3]);
SELECT arrayLast(x -> 1, emptyArrayUInt8());
SELECT arrayLast(x -> x >= 2, [1, 2, 3]);
SELECT arrayLast(x -> x >= 2, emptyArrayUInt8());
SELECT arrayLast(x -> x >= 2, materialize([1, 2, 3]));
SELECT arrayLastIndex(x -> 0, emptyArrayUInt8());
SELECT arrayLastIndex(x -> 0, materialize([1, 2, 3]));
SELECT arrayLastIndex(x -> 1, [1, 2, 3]);
SELECT arrayLastIndex(x -> 1, emptyArrayUInt8());
SELECT arrayLastIndex(x -> x >= 2, [1, 2, 3]);
SELECT arrayLastIndex(x -> x >= 2, emptyArrayUInt8());
SELECT arrayLastIndex(x -> x >= 2, materialize([1, 2, 3]));
SELECT arrayLastOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,0]);
SELECT arrayLastOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,1]);
SELECT arrayLastOrNull(x -> 0, [1, 2, 3]);
SELECT arrayLastOrNull(x -> 0, emptyArrayUInt8());
SELECT arrayLastOrNull(x -> 1, [1, 2, 3]);
SELECT arrayLastOrNull(x -> 1, emptyArrayUInt8());
SELECT arrayLastOrNull(x -> x >= 2, [1, 2, 3]);
SELECT arrayLastOrNull(x -> x >= 2, emptyArrayUInt8());
SELECT arrayLastOrNull(x -> x >= 2, materialize([1, 2, 3]));
SELECT arrayMap((x -> concat(concat(toString(x), '_'), toString(id))) as lambda, [1,2,3]) FROM test_table;
SELECT arrayMap((x -> toString(x)) as lambda, [1,2,3]), arrayMap(lambda, ['1','2','3']);
SELECT arrayMap((x) -> x, [tuple(1)]);
SELECT arrayMap((x) -> x.1 + x.2, [tuple(1, 2)]);
SELECT arrayMap((x) -> x.1, [tuple(1)]);
SELECT arrayMap((x, y) -> (x, y), [1, 2, 3], [4, 5, 6]) FROM remote('127.0.0.{2,3}') ORDER BY rand();
select arrayMap((x, y) -> x + y, [], []);
select arrayMap((x, y) -> x + y, [], CAST([], 'Array(Int32)'));
SELECT arrayMap((x, y) -> x + y, [tuple(1, 2)]);
select arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsIntersectionSpherical([[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]], [[[(25.0010, 136.9987), (17.7500, 142.5000), (11.3733, 142.5917)]]]));
SELECT arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsUnionCartesian([[[(2., 100.0000991821289), (0., 3.), (1., 2.9), (2., 2.6), (2.6, 2.), (2.9, 1), (3., 0.), (100.0000991821289, 2.)]]], [[[(1., 1.), (1000.0001220703125, nan), (4., 4.), (4., 1.), (1., 1.)]]]));
select arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a),polygonsIntersectionSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]));
SELECT arrayMap(i -> [resources_host[i]], arrayEnumerate(resources_host)) FROM test_array;
SELECT arrayMap(p -> (round(p.1, 2), round(p.2, 2)), h3ToGeoBoundary(arrayJoin([579205133326352383,589753847883235327,594082350283882495])));
SELECT arrayMap(p -> (round(p.1, 2), round(p.2, 2)), h3ToGeoBoundary(h3_index)) FROM h3_indexes ORDER BY h3_index;
select arrayMap(t->tuple(t.1, t.2*2), [('1',2)]);
select arrayMap(t->tuple(t.1, t.2*2), [('1',materialize(2))]);
select arrayMap(t->tuple(t.1, t.2*2), [(materialize('1'),2)]);
select arrayMap(t->tuple(t.1, t.2*2), [(materialize('1'),materialize(2))]);
select arrayMap(t->tuple(t.1, t.2*2), [materialize(('1',2))]);
select arrayMap(t->tuple(t.1, t.2*2), materialize([('1',2)]));
SELECT arrayMap(x -> (toLowCardinality(1) + 1::Nullable(UInt8)), [1]);
SELECT arrayMap(x -> (x + (arrayMap(y -> ((x + y) + toLowCardinality(1)), [])[1])), []);
select arrayMap(x -> (x <= key), [1]) from test;
SELECT arrayMap(x -> 1, [2, 3]), 123 AS y;
SELECT arrayMap(x -> 1, [2]), 123 AS x, x + 1;
SELECT arrayMap(x -> 1, [2]), 123 AS y;
SELECT arrayMap(x -> 123, [1, 2, 3]);
SELECT arrayMap(x -> 123, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayMap(x -> 123, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> 123, emptyArrayString());
SELECT arrayMap(x -> 123, emptyArrayUInt8());
SELECT arrayMap(x -> 123, range(number)) FROM system.numbers LIMIT 10;
select arrayMap(x -> 2 * x, []);
SELECT arrayMap(x -> arrayJoin([1, 2, 3]), [1, 2, 3]);
SELECT arrayMap(x -> arrayJoin([1]), [1, 2]);
SELECT arrayMap(x -> arrayJoin([x, 1]), [1, 2]);
SELECT arrayMap(x -> arrayJoin(x), [[1, 2, 3]]);
select arrayMap(x -> arrayMap(x -> finalizeAggregation(x), x), x) from test;
select arrayMap(x -> arrayMap(x -> mapApply(k, v -> (k, finalizeAggregation(v)), x), x), x) from test;
SELECT arrayMap(x -> arrayMap(y -> round(y, 5), x), corrMatrix(a_value, b_value, c_value, d_value)) FROM fh;
SELECT arrayMap(x -> arrayMap(y -> round(y, 5), x), covarPopMatrix(a_value, b_value, c_value, d_value)) FROM fh;
SELECT arrayMap(x -> arrayMap(y -> round(y, 5), x), covarSampMatrix(a_value, b_value, c_value, d_value)) FROM fh;
SELECT arrayMap(x -> concat(x, concat(arrayJoin([1]), x, NULL), ''), [1]);
SELECT arrayMap(x -> dictGet('one_cell_cache_ints_overflow', 'i8', toUInt64(x)), array) FROM ( SELECT [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] AS array );
SELECT arrayMap(x -> finalizeAggregation(x), finalizeAggregation(uniqStateForEachState([1, NULL]))) WITH TOTALS;
SELECT arrayMap(x -> finalizeAggregation(x), finalizeAggregation(uniqStateForEachState([1, NULL])));
select arrayMap(x -> finalizeAggregation(x), state) from ( select sumStateResample(0, 20, 1)(number, number % 20) as state from remote('127.0.0.{1,2}', numbers(200)) );
select arrayMap(x -> finalizeAggregation(x), state) from ( select sumStateResample(0,20,1)(number, number%20) as state from numbers(200) group by number % 3 order by number % 3 );
SELECT arrayMap(x -> finalizeAggregation(x), state) FROM (SELECT groupArrayResample(9223372036854775806, 1048575, 65537)(number, number % 3), groupArrayStateResample(10, 2147483648, 65535)(number, number % 9223372036854775806) AS state FROM numbers(100));
select arrayMap(x -> finalizeAggregation(x), state) from (select groupArrayStateResample(0, 20, 1)(number, number % 20) state from numbers(50));
select arrayMap(x -> finalizeAggregation(x), state) from (select sumStateResample(0, 20, 1)(number, number % 20) as state from numbers(200));
SELECT arrayMap(x -> hex(toString(x)), finalizeAggregation(uniqStateForEachState([1, NULL]))) WITH TOTALS;
SELECT arrayMap(x -> hex(toString(x)), finalizeAggregation(uniqStateForEachState([1, NULL])));
SELECT arrayMap(x -> id + arrayMap(x -> id + (SELECT id FROM test_table UNION DISTINCT SELECT id FROM test_table), [1])[1], [1,2,3]) FROM test_table;
SELECT arrayMap(x -> id + arrayMap(x -> id + (SELECT id FROM test_table), [1])[1], [1,2,3]) FROM test_table;
SELECT arrayMap(x -> id, [1,2,3]) FROM test_table;
SELECT arrayMap(x -> materialize(123), [1, 2, 3]);
SELECT arrayMap(x -> materialize(123), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arrayMap(x -> materialize(123), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> materialize(123), emptyArrayString());
SELECT arrayMap(x -> materialize(123), emptyArrayUInt8());
SELECT arrayMap(x -> materialize(123), range(number)) FROM system.numbers LIMIT 10;
select arrayMap(x -> NULL::Nullable(UInt8), range(number)) from numbers(3);
SELECT arrayMap(x -> number != -1 ? x : 0, arr) FROM (SELECT number, range(number) AS arr FROM system.numbers LIMIT 10) WHERE number % 2 = 1 AND arrayExists(x -> number != -1, arr);
SELECT arrayMap(x -> number % 2, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> range(x), [2, 1, 3]) AS arr, arraySort(arr), arrayReverseSort(arr), arraySort(x -> -length(x), arr);
SELECT arrayMap(x -> range(x), [4,1,2,3]) AS arr, 2 AS lim, arrayResize(arrayPartialSort(lim, arr), lim), arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> -length(x), lim, arr), lim);
SELECT arrayMap(x -> range(x), materialize([2, 1, 3])) AS arr, arraySort(arr), arrayReverseSort(arr), arraySort(x -> -length(x), arr);
SELECT arrayMap(x -> range(x), materialize([4,1,2,3])) AS arr, 2 AS lim, arrayResize(arrayPartialSort(lim, arr), lim), arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> -length(x), lim, arr), lim);
SELECT arrayMap(x -> range(x), range(number))[-1] FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> range(x), range(number))[2 - number] FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> range(x), range(number))[2] FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> range(x), range(number))[number] FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> round(x), quantileArrayResampleOrDefaultIfMerge(0.10, 1, 2, 42)((*,).1)) FROM t9;
SELECT arrayMap(x -> round(x), quantileForEachMerge(0.10)((*,).1)) FROM t2;
SELECT arrayMap(x -> round(x), quantileResampleMerge(0.10, 1, 2, 42)((*,).1)) FROM t7;
SELECT arrayMap(x -> round(x, 4), groupArrayMovingAvg(256)(1)) FROM numbers(300);
SELECT arrayMap(x -> splitByChar(toString(id), arrayMap(x -> toString(1), [NULL])), [NULL]) FROM test_table;
SELECT arrayMap(x -> substring('abc', x), [1, 2, 3]);
select arrayMap(x -> toNullable(0), range(number)) from numbers(3);
select arrayMap(x -> toNullable(1), range(number)) from numbers(3);
SELECT arrayMap(x -> toString(x), [2, 1, 3]) AS arr, arraySort(arr), arrayReverseSort(arr), arraySort(x -> reverse(x), arr);
SELECT arrayMap(x -> toString(x), [9,4,8,10,5,2,3,7,1,6]) AS arr, 4 AS lim, arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> reverse(x), lim, arr), lim);
SELECT arrayMap(x -> toString(x), materialize([2, 1, 3])) AS arr, arraySort(arr), arrayReverseSort(arr), arraySort(x -> reverse(x), arr);
SELECT arrayMap(x -> toString(x), materialize([9,4,8,10,5,2,3,7,1,6])) AS arr, 4 AS lim, arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> reverse(x), lim, arr), lim);
SELECT arrayMap(x -> toString(x), range(number))[-1] FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> toString(x), range(number))[2 - number] FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> toString(x), range(number))[2] FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> toString(x), range(number))[number] FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> x % 2 = 0 ? NULL : x, range(number)) FROM system.numbers LIMIT 10;
SELECT arrayMap(x -> x * Sign, Arr) FROM visits1;
SELECT arrayMap(x -> x * sum(x), range(10));
SELECT arrayMap(x -> x + 1, [1,2,3]);
SELECT arrayMap(x -> x + 1, [2, 3]), 123 AS y;
SELECT arrayMap(x -> x + 1, [2]), 123 AS y;
SELECT arrayMap(x -> x + a, [1, 2, 3]), arrayJoin([1,2,3]) as a;
SELECT arrayMap(x -> x + arrayMap(x -> (SELECT 5 UNION DISTINCT SELECT 5), [1])[1], [1,2,3]);
SELECT arrayMap(x -> x + arrayMap(x -> (SELECT 5), [1])[1], [1,2,3]);
SELECT arrayMap(x -> x + arrayMap(x -> 5, [1])[1], [1,2,3]) FROM test_table;
SELECT arrayMap(x -> x + arrayMap(x -> 5, [1])[1], [1,2,3]);
SELECT arrayMap(x -> x + arrayMap(x -> id + (SELECT id FROM test_table), [1])[1], [1,2,3]) FROM test_table;
SELECT arrayMap(x -> x + arrayMap(x -> id, [1])[1], [1,2,3]) FROM test_table;
SELECT arrayMap(x -> x + arrayMap(x -> x + id, [1])[1], [1,2,3]) FROM test_table;
SELECT arrayMap(x -> x + arrayMap(x -> x, [1])[1], [1,2,3]);
SELECT arrayMap(x -> x + arrayMap(y -> x + y + id, [1])[1], [1,2,3]) FROM test_table;
SELECT arrayMap(x -> x + arrayMap(y -> x + y, [1])[1], [1,2,3]);
SELECT arrayMap(x -> x + id, [1,2,3]) FROM test_table;
SELECT arrayMax([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
SELECT arrayMax(x) FROM test_aggregation;
SELECT arrayMin([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
SELECT arrayMin(x) FROM test_aggregation;
SELECT arrayPartialShuffle(['storage','tiger','imposter','terminal','uniform','sensation'], 0, 0xbad_cafe);
SELECT arrayPartialShuffle(['storage','tiger','imposter','terminal','uniform','sensation'], 3, 0xbad_cafe);
SELECT arrayPartialShuffle(['storage','tiger',NULL,'terminal','uniform','sensation'], 0, 0xbad_cafe);
SELECT arrayPartialShuffle(['storage','tiger',NULL,'terminal','uniform','sensation'], 3, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10.1], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10.1], 4, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10], 10, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10], 100, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10], 2, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10], 4, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10], 8, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,10], 9, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,9223372036854775808], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,9223372036854775808], 4, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,NULL], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([1,2,3,4,5,6,7,8,9,NULL], 4, 0xbad_cafe);
SELECT arrayPartialShuffle([9223372036854775808]);
SELECT arrayPartialShuffle([9223372036854775808], 0);
SELECT arrayPartialShuffle([9223372036854775808], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([[1,2,3,4],[-1,-2,-3,-4],[10,20,30,40],[100,200,300,400,500,600,700,800,900],[2,4,8,16,32,64]], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([[1,2,3,4],[-1,-2,-3,-4],[10,20,30,40],[100,200,300,400,500,600,700,800,900],[2,4,8,16,32,64]], 2, 0xbad_cafe);
SELECT arrayPartialShuffle([[1,2,3,4],[NULL,-2,-3,-4],[10,20,30,40],[100,200,300,400,500,600,700,800,900],[2,4,8,16,32,64]], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([[1,2,3,4],[NULL,-2,-3,-4],[10,20,30,40],[100,200,300,400,500,600,700,800,900],[2,4,8,16,32,64]], 2, 0xbad_cafe);
SELECT arrayPartialShuffle([]);
SELECT arrayPartialShuffle([], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([NULL,NULL,NULL], 2);
SELECT arrayPartialShuffle([NULL,NULL]);
SELECT arrayPartialShuffle([NULL]);
SELECT arrayPartialShuffle([toFixedString('123', 3), toFixedString('456', 3), toFixedString('789', 3), toFixedString('ABC', 3), NULL], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([toFixedString('123', 3), toFixedString('456', 3), toFixedString('789', 3), toFixedString('ABC', 3), NULL], 3, 0xbad_cafe);
SELECT arrayPartialShuffle([toFixedString('123', 3), toFixedString('456', 3), toFixedString('789', 3), toFixedString('ABC', 3), toFixedString('000', 3)], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([toFixedString('123', 3), toFixedString('456', 3), toFixedString('789', 3), toFixedString('ABC', 3), toFixedString('000', 3)], 3, 0xbad_cafe);
SELECT arrayPartialShuffle([tuple(1, -1), tuple(99999999, -99999999), tuple(3, -3)], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([tuple(1, -1), tuple(99999999, -99999999), tuple(3, -3)], 2, 0xbad_cafe);
SELECT arrayPartialShuffle([tuple(1, NULL), tuple(2, 'a'), tuple(3, 'A')], 0, 0xbad_cafe);
SELECT arrayPartialShuffle([tuple(1, NULL), tuple(2, 'a'), tuple(3, 'A')], 2, 0xbad_cafe);
SELECT arrayPartialShuffle(groupArray(toUInt64(x)),0,0xbad_cafe) FROM (SELECT number as x from system.numbers LIMIT 100);
SELECT arrayPartialShuffle(groupArray(toUInt64(x)),20,0xbad_cafe) FROM (SELECT number as x from system.numbers LIMIT 100);
SELECT arrayPartialShuffle(groupArray(x),0,0xbad_cafe) FROM (SELECT number as x from system.numbers LIMIT 100);
SELECT arrayPartialShuffle(groupArray(x),20,0xbad_cafe) FROM (SELECT number as x from system.numbers LIMIT 100);
SELECT arrayPartialSort([1,2,3]);
select arrayPopBack(['a', 'b', 'c']);
select arrayPopBack([0.1, 0.2, 0.3]);
select arrayPopBack([1, 2, 3]);
select arrayPopBack([1]);
select arrayPopBack(emptyArrayUInt8());
select arrayPopBack(Null);
select arrayPopFront(['a', 'b', 'c']);
select arrayPopFront([0.1, 0.2, 0.3]);
select arrayPopFront([1, 2, 3]);
select arrayPopFront([1]);
select arrayPopFront(emptyArrayUInt8());
select arrayPopFront(Null);
SELECT arrayProduct([1,2,3,4,5,6]) as a, toTypeName(a);
SELECT arrayProduct([toDecimal64(1,8), toDecimal64(2,8), toDecimal64(3,8)]) as a, toTypeName(a);
SELECT arrayProduct(array(1,3.5)) as a, toTypeName(a);
SELECT arrayProduct(array(1.0,2.0,3.0,4.0)) as a, toTypeName(a);
SELECT arrayProduct(x) FROM test_aggregation;
select arrayPushBack(['a', 'b', 'c'], val) from array_functions;
select arrayPushBack(['a', 'b', 'c'], val2) from array_functions;
select arrayPushBack(['a', 'b'], 'cd');
select arrayPushBack([0.5, 0.7], 1);
select arrayPushBack([1, 2, 3], l) from array_functions;
select arrayPushBack([1, 2, 3], nl) from array_functions;
select arrayPushBack([1], -1);
select arrayPushBack([1], 1);
SELECT arrayPushBack([], 1), arrayPushFront([[]], []);
select arrayPushBack([Null], 1);
SELECT arrayPushBack(a, toDecimal32(0, 2)) AS x, toTypeName(x) FROM decimal;
SELECT arrayPushBack(a, toDecimal32(0, 3)), arrayPushFront(a, toDecimal32(0, 3)) FROM decimal;
SELECT arrayPushBack(b, toDecimal64(0, 2)) AS x, toTypeName(x) FROM decimal;
SELECT arrayPushBack(b, toDecimal64(0, 3)), arrayPushFront(b, toDecimal64(0, 3)) FROM decimal;
SELECT arrayPushBack(c, toDecimal128(0, 2)) AS x, toTypeName(x) FROM decimal;
SELECT arrayPushBack(c, toDecimal128(0, 3)), arrayPushFront(c, toDecimal128(0, 3)) FROM decimal;
select arrayPushBack(emptyArrayUInt8(), -1);
select arrayPushBack(emptyArrayUInt8(), 1);
select arrayPushBack(Null, 1);
select arrayPushFront(['a', 'b', 'c'], val) from array_functions;
select arrayPushFront(['a', 'b', 'c'], val2) from array_functions;
select arrayPushFront(['a', 'b'], 'cd');
select arrayPushFront([0.5, 0.7], 1);
select arrayPushFront([1, 2, 3], l) from array_functions;
select arrayPushFront([1, 2, 3], nl) from array_functions;
select arrayPushFront([1], -1);
select arrayPushFront([1], 1);
select arrayPushFront([Null], 1);
SELECT arrayPushFront(a, toDecimal32(0, 4)) AS x, toTypeName(x) FROM decimal;
SELECT arrayPushFront(b, toDecimal64(0, 4)) AS x, toTypeName(x) FROM decimal;
SELECT arrayPushFront(c, toDecimal128(0, 4)) AS x, toTypeName(x) FROM decimal;
select arrayPushFront(emptyArrayUInt8(), -1);
select arrayPushFront(emptyArrayUInt8(), 1);
select arrayPushFront(Null, 1);
SELECT arrayReduce('aggThrow(0.0001)', range(number % 10)) FROM system.numbers FORMAT Null;
SELECT arrayReduce('avgOrDefault', [1]);
SELECT arrayReduce('avgOrDefault', [toDecimal128(-123.45, 2)]);
SELECT arrayReduce('avgOrDefault', arrayPopBack([1]));
SELECT arrayReduce('avgOrDefault', arrayPopBack([toDecimal128(-123.45, 2)]));
SELECT arrayReduce('avgOrNull', [1]);
SELECT arrayReduce('avgOrNull', [toDecimal128(-123.45, 2)]);
SELECT arrayReduce('avgOrNull', arrayPopBack([1]));
SELECT arrayReduce('avgOrNull', arrayPopBack([toDecimal128(-123.45, 2)]));
SELECT arrayReduce('avgState', [0]) IN (arrayReduce('avgState', [0, 1]), arrayReduce('avgState', [0]));
SELECT arrayReduce('avgState', [0]) IN (arrayReduce('avgState', [0, 1]), arrayReduce('avgState', [1]));
select arrayReduce('groupArrayResample(1, 7, 1)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('groupArrayResample(2, 9, 3)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [-0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('groupArrayResample(2, 9, 3)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('groupArrayResample(3, 8, 2)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
SELECT arrayReduce('maxOrDefault', ['hello']);
SELECT arrayReduce('maxOrDefault', [1]);
SELECT arrayReduce('maxOrDefault', [toDateTime('2011-04-05 14:19:19'), null]);
SELECT arrayReduce('maxOrDefault', [toDecimal128(-123.45, 2)]);
SELECT arrayReduce('maxOrDefault', arrayPopBack(['hello']));
SELECT arrayReduce('maxOrDefault', arrayPopBack([1]));
SELECT arrayReduce('maxOrDefault', arrayPopBack([toDecimal128(-123.45, 2)]));
SELECT arrayReduce('maxOrDefault', arrayPopBack(arrayPopBack([toDateTime('2011-04-05 14:19:19'), null])));
SELECT arrayReduce('maxOrNull', ['hello']);
SELECT arrayReduce('maxOrNull', [1]);
SELECT arrayReduce('maxOrNull', [toDateTime('2011-04-05 14:19:19'), null]);
SELECT arrayReduce('maxOrNull', [toDecimal128(-123.45, 2)]);
SELECT arrayReduce('maxOrNull', arrayPopBack(['hello']));
SELECT arrayReduce('maxOrNull', arrayPopBack([1]));
SELECT arrayReduce('maxOrNull', arrayPopBack([toDecimal128(-123.45, 2)]));
SELECT arrayReduce('maxOrNull', arrayPopBack(arrayPopBack([toDateTime('2011-04-05 14:19:19'), null])));
select arrayReduce('median', [toDecimal128OrNull('1', 2)]);
select arrayReduce('median', [toDecimal128OrZero('1', 2)]);
select arrayReduce('median', [toDecimal32OrNull('1', 2)]);
select arrayReduce('median', [toDecimal64OrNull('1', 2)]);
select arrayReduce('medianExact', [toDecimal128OrNull('1', 2)]);
select arrayReduce('quantile(0.2)', [toDecimal128OrNull('1', 2)]);
SELECT arrayReduce('quantile(0.5)', []::Array(DateTime('UTC')));
SELECT arrayReduce('quantiles(0.5)', []::Array(DateTime('UTC')));
SELECT arrayReduce('quantiles(0.5, 0.9)', range(number) AS r), r FROM system.numbers LIMIT 12;
select arrayReduce('simpleLinearRegression', [-1, -2, -3, -4], [-100, -110, -120, -130]);
select arrayReduce('simpleLinearRegression', [0], [0]);
select arrayReduce('simpleLinearRegression', [1, 2, 3, 4], [100, 110, 120, 130]);
select arrayReduce('simpleLinearRegression', [1, 2, 3, 4], [100, 110, 120, 131]);
select arrayReduce('simpleLinearRegression', [1, 2, 3, 4], [1000000000, 1100000000, 1200000000, 1300000000]);
select arrayReduce('simpleLinearRegression', [3, 3], [3, 4]);
select arrayReduce('simpleLinearRegression', [3, 4], [3, 3]);
select arrayReduce('simpleLinearRegression', [5, 5.1], [6, 6.1]);
select arrayReduce('simpleLinearRegression', emptyArrayUInt8(), emptyArrayUInt8());
select arrayReduce('stddevPopResample(1, 7, 1)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('stddevPopResample(2, 9, 3)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [-0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('stddevPopResample(2, 9, 3)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('stddevPopResample(3, 8, 2)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
SELECT arrayReduce('stddevSampOrDefault', [1]);
SELECT arrayReduce('stddevSampOrDefault', [toDecimal128(-123.45, 2)]);
SELECT arrayReduce('stddevSampOrDefault', arrayPopBack([1]));
SELECT arrayReduce('stddevSampOrDefault', arrayPopBack([toDecimal128(-123.45, 2)]));
SELECT arrayReduce('stddevSampOrNull', [1]);
SELECT arrayReduce('stddevSampOrNull', [toDecimal128(-123.45, 2)]);
SELECT arrayReduce('stddevSampOrNull', arrayPopBack([1]));
SELECT arrayReduce('stddevSampOrNull', arrayPopBack([toDecimal128(-123.45, 2)]));
select arrayReduce('sum', [toDecimal128OrNull('1', 2)]);
select arrayReduce('sumMerge', [sumState(y)]), finalizeAggregation(sumState(y)) from (select toNullable(42) as y);
select arrayReduce('sumResample(1, 7, 1)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('sumResample(2, 9, 3)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [-0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('sumResample(2, 9, 3)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('sumResample(3, 8, 2)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
SELECT arrayReduce('uniqExactMerge', [arrayReduce('uniqExactMergeState', [ arrayReduce('uniqExactState', [12345678901]), arrayReduce('uniqExactState', [12345678901]) ]) ]);
SELECT arrayReduce('uniqExactMerge', [arrayReduce('uniqExactMergeState', [ arrayReduce('uniqExactState', [12345678901]), arrayReduce('uniqExactState', [12345678902]) ]) ]);
select arrayReduce('uniqResample(1, 7, 1)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('uniqResample(2, 9, 3)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [-0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('uniqResample(2, 9, 3)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('uniqResample(3, 8, 2)', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
select arrayReduce('uniqStateForEach', [[1], [2]]);
select arrayReduce('uniqStateForEachMapForEach', [[map(1, [2])]]);
select arrayReduce('uniqStateMap', [map(1, 2)]);
select arrayReduceInRanges('uniqStateForEach', [(1, 3), (2, 3), (3, 3)], [['a'], ['b'], ['c'],['d'], ['e']]);
select arrayReduceInRanges('uniqStateForEachMapForEach', [(1, 3), (2, 3), (3, 3)], [[map(1, ['a'])], [map(1, ['b'])], [map(1, ['c'])], [map(1, ['d'])], [map(1, ['e'])]]);
select arrayReduceInRanges('uniqStateMap', [(1, 3), (2, 3), (3, 3)], [map(1, 'a'), map(1, 'b'), map(1, 'c'), map(1, 'd'), map(1, 'e')]);
select arrayResize(['a', 'b', 'c'], 5);
select arrayResize([1, 2, 3, 4, 5, 6], -3);
select arrayResize([1, 2, 3, 4, 5, 6], 3);
select arrayResize([1, 2, 3], -10);
select arrayResize([1, 2, 3], -5, 42);
SELECT arrayResize([1, 2, 3], -9223372036854775808);
select arrayResize([1, 2, 3], 10);
select arrayResize([1, 2, 3], 5, 42);
select arrayResize([1, Null, 3], -10);
select arrayResize([1, Null, 3], 10);
select arrayResize([[1, 2], [3, 4]], -4);
select arrayResize([[1, 2], [3, 4]], -4, [5, 6]);
select arrayResize([[1, 2], [3, 4]], 4);
select arrayResize([[1, 2], [3, 4]], 4, [5, 6]);
SELECT arrayResize(arrayPartialSort((x, y) -> y, 3, ['directly','ignore','wrongly','relocate','upright'], [4,2,1,3,5]), 3);
SELECT arrayReverseFill((x, y) -> y, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0]);
SELECT arrayReverseFill(x -> 0, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16]);
SELECT arrayReverseFill(x -> 1, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16]);
SELECT arrayReverseFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]);
SELECT arrayReverseFill(x -> x < 10, [1, 2, 3, 11, 12, 13, 4, 5, 6, 14, 15, 16]);
SELECT arrayReverseSort(number % 2 ? emptyArrayUInt64() : range(number)) FROM system.numbers LIMIT 10;
SELECT arrayReverseSplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]);
SELECT arrayReverseSplit(x -> 0, [1, 2, 3, 4, 5]);
SELECT arrayReverseSplit(x -> 0, []);
SELECT arrayReverseSplit(x -> 1, [1, 2, 3, 4, 5]);
SELECT arrayReverseSplit(x -> 1, []);
SELECT arrayReverseSplit(x -> x % 2 = 1, [1, 2, 3, 4, 5]);
SELECT arrayReverseSplit(x -> x % 2 = 1, [1]);
SELECT arrayReverseSplit(x -> x % 2 = 1, [2]);
SELECT arrayReverseSplit(x -> x, emptyArrayUInt8());
select arrayRotateLeft(['H', 'e', 'l', 'l', 'o'], 2);
select arrayRotateLeft([1,2,3,4,5], -2);
select arrayRotateLeft([1,2,3,4,5], 2);
select arrayRotateLeft([1,2,3,4,5], 8);
select arrayRotateLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1);
select arrayRotateLeft(a, 2) from t02845;
select arrayRotateLeft(a, s) from t02845;
select arrayRotateRight(['H', 'e', 'l', 'l', 'o'], 2);
select arrayRotateRight([1,2,3,4,5], -2);
select arrayRotateRight([1,2,3,4,5], 2);
select arrayRotateRight([1,2,3,4,5], 8);
select arrayRotateRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1);
select arrayRotateRight(a, 2) from t02845;
select arrayRotateRight(a, s) from t02845;
select arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3);
select arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3, 'foo');
select arrayShiftLeft(['foo'], 3, 3);
select arrayShiftLeft([1, 2, 3, 4, 5], -3);
select arrayShiftLeft([1, 2, 3, 4, 5], 3);
select arrayShiftLeft([1, 2, 3, 4, 5], 3, 7);
select arrayShiftLeft([1, 2, 3, 4, 5], 8);
select arrayShiftLeft([30000], 3, 5);
select arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2);
select arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2, [7, 8]);
select arrayShiftLeft([[1]], 3, []);
select arrayShiftLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1);
select arrayShiftLeft(a, 3) from t02845;
select arrayShiftLeft(a, 3, 7) from t02845;
select arrayShiftLeft(a, s, d) from t02845;
select arrayShiftLeft(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000);
select arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3);
select arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3, 'foo');
select arrayShiftRight([1, 2, 3, 4, 5], -3);
select arrayShiftRight([1, 2, 3, 4, 5], 3);
select arrayShiftRight([1, 2, 3, 4, 5], 3, 7);
select arrayShiftRight([1, 2, 3, 4, 5], 8);
select arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2);
select arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2, [7, 8]);
select arrayShiftRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1);
select arrayShiftRight(a, 3) from t02845;
select arrayShiftRight(a, 3, 7) from t02845;
select arrayShiftRight(a, s, d) from t02845;
select arrayShiftRight(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000);
SELECT arrayShuffle(1);
SELECT arrayShuffle(['storage','tiger','imposter','terminal','uniform','sensation'], 0xbad_cafe);
SELECT arrayShuffle(['storage','tiger',NULL,'terminal','uniform','sensation'], 0xbad_cafe);
SELECT arrayShuffle([1, 2, 3], 42) FROM numbers(10);
SELECT arrayShuffle([1,2,3,4,5,6,7,8,9,10.1], 0xbad_cafe);
SELECT arrayShuffle([1,2,3,4,5,6,7,8,9,10], 0xbad_cafe);
SELECT arrayShuffle([1,2,3,4,5,6,7,8,9,9223372036854775808], 0xbad_cafe);
SELECT arrayShuffle([1,2,3,4,5,6,7,8,9,NULL], 0xbad_cafe);
SELECT arrayShuffle([9223372036854775808]);
SELECT arrayShuffle([9223372036854775808], 0xbad_cafe);
SELECT arrayShuffle([[1,2,3,4],[-1,-2,-3,-4],[10,20,30,40],[100,200,300,400,500,600,700,800,900],[2,4,8,16,32,64]], 0xbad_cafe);
SELECT arrayShuffle([[1,2,3,4],[NULL,-2,-3,-4],[10,20,30,40],[100,200,300,400,500,600,700,800,900],[2,4,8,16,32,64]], 0xbad_cafe);
SELECT arrayShuffle([]);
SELECT arrayShuffle([], 0xbad_cafe);
SELECT arrayShuffle([NULL,NULL]);
SELECT arrayShuffle([NULL]);
SELECT arrayShuffle([toFixedString('123', 3), toFixedString('456', 3), toFixedString('789', 3), toFixedString('ABC', 3), NULL], 0xbad_cafe);
SELECT arrayShuffle([toFixedString('123', 3), toFixedString('456', 3), toFixedString('789', 3), toFixedString('ABC', 3), toFixedString('000', 3)], 0xbad_cafe);
SELECT arrayShuffle([tuple(1, -1), tuple(99999999, -99999999), tuple(3, -3)], 0xbad_cafe);
SELECT arrayShuffle([tuple(1, NULL), tuple(2, 'a'), tuple(3, 'A')], 0xbad_cafe);
SELECT arrayShuffle(groupArray(toUInt64(x)),0xbad_cafe) FROM (SELECT number as x from system.numbers LIMIT 100);
SELECT arrayShuffle(groupArray(x),0xbad_cafe) FROM (SELECT number as x from system.numbers LIMIT 100);
SELECT arrayShuffle(materialize([1,2,3,4,5,6,7,8,9,10]), 0xbad_cafe);
SELECT arrayShuffle(materialize([[1,2,3,4],[-1,-2,-3,-4],[10,20,30,40],[100,200,300,400,500,600,700,800,900],[2,4,8,16,32,64]]), 0xbad_cafe);
select arraySlice(['a', 'b', 'c', 'd', 'e'], 2, 3);
select arraySlice([1, 2, 3, 4, 5, 6, 7, 8], -2, -1);
select arraySlice([1, 2, 3, 4, 5, 6, 7, 8], -2, -2);
select arraySlice([1, 2, 3, 4, 5, 6], -10, 15);
select arraySlice([1, 2, 3, 4, 5, 6], -15, 10);
select arraySlice([1, 2, 3, 4, 5, 6], -15, 9);
select arraySlice([1, 2, 3, 4, 5, 6], -3, Null);
select arraySlice([1, 2, 3, 4, 5, 6], -4, -2);
select arraySlice([1, 2, 3, 4, 5, 6], -4, 2);
select arraySlice([1, 2, 3, 4, 5, 6], 10, -1);
select arraySlice([1, 2, 3, 4, 5, 6], 10, 0);
select arraySlice([1, 2, 3, 4, 5, 6], 10, 1);
select arraySlice([1, 2, 3, 4, 5, 6], 2, -2);
select arraySlice([1, 2, 3, 4, 5, 6], 2, 0);
select arraySlice([1, 2, 3, 4, 5, 6], 2, 3);
select arraySlice([1, 2, 3, 4, 5, 6], 2, Null);
select arraySlice([1, 2, 3, 4, 5, 6], Null, -2);
select arraySlice([1, 2, 3, 4, 5, 6], Null, 4);
select arraySlice([1, 2, 3, 4, 5, 6], Null, Null);
select arraySlice([1, 2, Null, 4, 5, 6], 2, 4);
select arraySlice([], materialize(NULL), NULL), 1 from numbers(2);
select arraySlice([Null, 'b', Null, 'd', 'e'], 2, 3);
SELECT arraySlice(groupArray(x), -9223372036854775808, NULL) AS y FROM (SELECT '6553.5', uniqState(NULL) AS x FROM numbers(3) GROUP BY number);
select arraySlice(groupArray(x), 1, 1) as y from (select uniqState(number) as x from numbers(10) group by number order by number);
select arraySlice(materialize([1, 2, 3, 4, 5, 6, 7, 8]), -2, -1);
select arraySlice(materialize([1, 2, 3, 4, 5, 6, 7, 8]), -2, -2);
select arraySlice(materialize([1, 2, 3, 4, 5, 6, 7, 8]), materialize(-2), materialize(-1));
select arraySlice(materialize([1, 2, 3, 4, 5, 6, 7, 8]), materialize(-2), materialize(-2));
select arraySlice(Null, 1, 2);
select arraySlice(s, -2, -2) from t;
select arraySlice(s, -2, r) from t;
select arraySlice(s, l, -2) from t;
select arraySlice(s, l, r) from t;
SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]);
SELECT arraySort(arrayIntersect(['a', 'b', 'c'], ['a', 'a']));
select arraySort(arrayIntersect([-100], [156]));
SELECT arraySort(arrayIntersect([1, 1, 1], [3], [2, 2, 2]));
SELECT arraySort(arrayIntersect([1, 1], [1, 2]));
SELECT arraySort(arrayIntersect([1, 1], [2, 1], [2, 2], [1]));
SELECT arraySort(arrayIntersect([1, 1], [2, 1], [2, 2], [2, 2, 2]));
SELECT arraySort(arrayIntersect([1, 1], [2, 2]));
SELECT arraySort(arrayIntersect([1, 2, 3]));
SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int128)));
SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int8)));
SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(UInt256)));
SELECT arraySort(arrayIntersect([1, 2], [1, 2], [2]));
select arraySort(arrayIntersect([1,2], [1,2,3,4])) from array_intersect order by arr;
select arraySort(arrayIntersect([1,2], arr)) from array_intersect order by arr;
SELECT arraySort(arrayIntersect([1.1::Decimal128(1)], [1.12::Decimal128(2)]));
SELECT arraySort(arrayIntersect([1.1::Decimal256(1)], [1.12::Decimal256(2)]));
SELECT arraySort(arrayIntersect([1.1::Decimal256(70), 2.34::Decimal256(60), 3.456::Decimal256(50)], [2.34::Decimal256(65), 3.456::Decimal256(55), 4.5678::Decimal256(45)]));
select arraySort(arrayIntersect([1], [257]));
SELECT arraySort(arrayIntersect([]));
select arraySort(arrayIntersect([], [])) from array_intersect order by arr;
select arraySort(arrayIntersect([], arr)) from array_intersect order by arr;
select arraySort(arrayIntersect(arr, [1,2])) from array_intersect order by arr;
select arraySort(arrayIntersect(arr, [])) from array_intersect order by arr;
SELECT arraySort(arraySort(groupArray(x))), groupArray(s) FROM tmp;
SELECT arraySort(bitmapToArray(groupBitmapAndState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');
SELECT arraySort(bitmapToArray(groupBitmapMergeState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');
SELECT arraySort(bitmapToArray(groupBitmapOrState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');
SELECT arraySort(bitmapToArray(groupBitmapXorState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');
SELECT arraySort(geohashesInBox(-0.01, -0.01, 0.01, 0.01, 5));
SELECT arraySort(geohashesInBox(-0.1, -0.1, 0.1, 0.1, 5));
SELECT arraySort(geohashesInBox(-1., -1., 1., inf, 3));
SELECT arraySort(geohashesInBox(-1.0, -90.0, 0.0, -89.0, 3));
SELECT arraySort(geohashesInBox(-1.0, 89.0, 0.0, 90.0, 3));
SELECT arraySort(geohashesInBox(-1.0, -1.0, 1.0, 1.0, 3));
SELECT arraySort(geohashesInBox(-180.0, -1.0, -179.0, 0.0, 3));
SELECT arraySort(geohashesInBox(-180.0, -90.0, -179.0, -89.0, 3));
SELECT arraySort(geohashesInBox(-180.0, 0.0, -179.0, 1.0, 3));
SELECT arraySort(geohashesInBox(-180.0, 89.0, -179.0, 90.0, 3));
SELECT arraySort(geohashesInBox(-49.26, -25.38, -49.25, -25.37, 6));
SELECT arraySort(geohashesInBox(0.0, -90.0, 1.0, -89.0, 3));
SELECT arraySort(geohashesInBox(0.0, 89.0, 1.0, 90.0, 3));
SELECT arraySort(geohashesInBox(179.0, -1.0, 180.0, 0.0, 3));
SELECT arraySort(geohashesInBox(179.0, -90.0, 180.0, -89.0, 3));
SELECT arraySort(geohashesInBox(179.0, 0.0, 180.0, 1.0, 3));
SELECT arraySort(geohashesInBox(179.0, 89.0, 180.0, 90.0, 3));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.000001, 20.000001, 11));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.000001, 20.000001, 12));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.000001, 20.000001, 14));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.00001, 20.00001, 10));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.0001, 20.0001, 9));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.001, 20.001, 8));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.01, 20.01, 7));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.0625, 20.0625, 6));
SELECT arraySort(geohashesInBox(20.0, 20.0, 20.25, 20.25, 5));
SELECT arraySort(geohashesInBox(20.0, 20.0, 21.0, 21.0, 2));
SELECT arraySort(geohashesInBox(20.0, 20.0, 21.0, 21.0, 3));
SELECT arraySort(geohashesInBox(20.0, 20.0, 21.0, 21.0, 4));
SELECT arraySort(geohashesInBox(23.11, -82.37, 23.12, -82.36, 6));
SELECT arraySort(geohashesInBox(53.8, 27.6, 53.9, 27.7, 5));
SELECT arraySort(geohashesInBox(98.36, 7.88, 98.37, 7.89, 6));
SELECT arraySort(groupArray(DISTINCT number % 13)) FROM numbers_mt(100000);
SELECT arraySort(groupArray(DISTINCT number % 13)) FROM remote('127.0.0.{1,2}', numbers_mt(100000));
SELECT arraySort(groupArray(x)) FROM (SELECT CAST(arrayJoin([1, 2, 3, 2, 3, 3]) AS Enum('Hello' = 1, 'World' = 2, 'Упячка' = 3)) AS x);
SELECT arraySort(groupArray(x)), groupArray(s) FROM tmp;
SELECT arraySort(groupArrayArrayMerge(grp_aggreg)) gra , arraySort(groupArrayArray(grp_simple)) grs FROM data_02293 group by a SETTINGS optimize_aggregation_in_order=1;
SELECT arraySort(groupArrayArrayMerge(grp_aggreg)) gra , arraySort(groupArrayArray(grp_simple)) grs FROM data_02294 group by a, b SETTINGS optimize_aggregation_in_order=1;
SELECT arraySort(groupArrayMerge(x + y)) FROM (SELECT groupArrayState(a) AS x, groupArrayState(b) as y FROM add_aggregate);
SELECT arraySort(groupUniqArray(description)) FROM agg_over_nullable;
SELECT arraySort(groupUniqArray(x)) FROM (SELECT CAST(arrayJoin([1, 2, 3, 2, 3, 3]) AS Enum('Hello' = 1, 'World' = 2, 'Упячка' = 3)) AS x);
SELECT arraySort(groupUniqArrayArrayMerge(grp_aggreg)) gra , arraySort(groupUniqArrayArray(grp_simple)) grs FROM simple_agf_summing_mt group by a;
SELECT arraySort(groupUniqArrayMerge(x + y)) FROM (SELECT groupUniqArrayState(a) AS x, groupUniqArrayState(b) as y FROM add_aggregate);
SELECT arraySort(h3GetFaces(h3_index)) FROM h3_indexes ORDER BY h3_index;
SELECT arraySort(h3HexRing(h3_index, k)) FROM h3_indexes ORDER BY h3_index;
SELECT arraySort(h3kRing(h3_index, k)) FROM h3_indexes ORDER BY h3_index;
SELECT arraySort(h3ToChildren(h3_index,res)) FROM h3_indexes ORDER BY res;
select arraySort(multiFuzzyMatchAllIndices(materialize('halo some wrld'), 2, materialize(['some random string', '^halo.*world$', '^halo.*world$', '^halo.*world$', '^hallllo.*world$'])));
SELECT arraySort(multiMatchAllIndices(arrayJoin(['aaaa', 'aaaaaa', 'bbbb', 'aaaaaaaaaaaaaa']), ['.*aa.*aaa.*', 'aaaaaa{2}', '(aa){3}']));
SELECT arraySort(topK(10)(val1)) FROM topk;
SELECT arraySort(topK(3)(description)) FROM agg_over_nullable;
SELECT arraySort(topKWeighted(10)(val1, val2)) FROM topk;
SELECT arraySort(used_aggregate_function_combinators) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\'2000-12-05\')%') ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;
SELECT arraySort(used_aggregate_functions) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\'2000-12-05\')%') ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;
SELECT arraySort(used_data_type_families) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\'2000-12-05\')%') ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;
SELECT arraySort(used_data_type_families), used_storages FROM system.query_log WHERE current_database = currentDatabase() AND type == 'QueryFinish' AND (query LIKE '%TABLE test%') ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;
SELECT arraySort(used_functions) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\'2000-12-05\')%') ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;
SELECT arraySort(used_table_functions) FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND (query LIKE '%toDate(\'2000-12-05\')%') ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1'), (2, NULL), (NULL, '3'), (NULL, NULL)] FROM null_in_tuple WHERE t in ((1, '1'), (1, NULL), (2, NULL), (NULL, '3'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1'), (2, NULL)] FROM null_in_tuple WHERE t in ((1, '1'), (NULL, '1'), (2, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1'), (NULL, '3')] FROM null_in_tuple WHERE t in ((1, '1'), (1, NULL), (NULL, '3'));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1'), (NULL, NULL)] FROM null_in_tuple WHERE t global in ((1, '1'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1'), (NULL, NULL)] FROM null_in_tuple WHERE t in ((1, '1'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1')] FROM null_in_tuple WHERE t global in ((1, '1'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1')] FROM null_in_tuple WHERE t in ((1, '1'), (1, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1')] FROM null_in_tuple WHERE t in ((1, '1'), (NULL, '1'));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(1, '1')] FROM null_in_tuple WHERE t in ((1, '1'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(2, NULL), (NULL, '3'), (NULL, NULL)] FROM null_in_tuple WHERE t global not in ((1, '1'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(2, NULL), (NULL, '3'), (NULL, NULL)] FROM null_in_tuple WHERE t not in ((1, '1'), (1, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(2, NULL), (NULL, '3'), (NULL, NULL)] FROM null_in_tuple WHERE t not in ((1, '1'), (NULL, '1'));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(2, NULL), (NULL, '3'), (NULL, NULL)] FROM null_in_tuple WHERE t not in ((1, '1'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(2, NULL), (NULL, '3')] FROM null_in_tuple WHERE t global not in ((1, '1'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(2, NULL), (NULL, '3')] FROM null_in_tuple WHERE t not in ((1, '1'), (NULL, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(2, NULL), (NULL, NULL)] FROM null_in_tuple WHERE t not in ((1, '1'), (1, NULL), (NULL, '3'));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [(NULL, '3'), (NULL, NULL)] FROM null_in_tuple WHERE t not in ((1, '1'), (NULL, '1'), (2, NULL));
SELECT arraySort(x -> (x.1, x.2), groupArray(t)) == [] FROM null_in_tuple WHERE t not in ((1, '1'), (1, NULL), (2, NULL), (NULL, '3'), (NULL, NULL));
SELECT arraySort(x -> x.2, [tuple('a', 10)]) AS X FROM ttt01746 PREWHERE d >= toDate('2021-03-03') - 2 ORDER BY n LIMIT 1;
SELECT arraySort(x -> x.2, [tuple('a', 10)]) AS X FROM ttt01746 WHERE d >= toDate('2021-03-03') - 2 ORDER BY n LIMIT 1;
SELECT arraySplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]);
SELECT arraySplit(x -> 0, [1, 2, 3, 4, 5]);
SELECT arraySplit(x -> 0, []);
SELECT arraySplit(x -> 1, [1, 2, 3, 4, 5]);
SELECT arraySplit(x -> 1, []);
SELECT arraySplit(x -> x % 2 = 1, [1, 2, 3, 4, 5]);
SELECT arraySplit(x -> x % 2 = 1, [1]);
SELECT arraySplit(x -> x % 2 = 1, [2]);
SELECT arraySplit(x -> x, emptyArrayUInt8());
SELECT arrayStringConcat(['Hello', 'World']);
SELECT arrayStringConcat(['Hello', 'World'], ', ');
SELECT arrayStringConcat([Null, 'hello', Null, 'world', Null, 'xyz', 'def', Null], ';');
SELECT arrayStringConcat([Null::Nullable(String), Null::Nullable(String)], ';');
SELECT arrayStringConcat(arr, ';') FROM (SELECT [1, 23, 456] AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT [Null, 1, Null, 23, Null, 456, Null] AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT [toDate('2021-10-01'), Null, toDate('2021-10-02')] AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT [toDate('2021-10-01'), toDate('2021-10-02')] AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT [toIPv4('127.0.0.1'), Null, toIPv4('1.0.0.1')] AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT [toIPv4('127.0.0.1'), toIPv4('1.0.0.1')] AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT materialize([1, 23, 456]) AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT materialize([Null, 1, Null, 23, Null, 456, Null]) AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT materialize([toDate('2021-10-01'), Null, toDate('2021-10-02')]) AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT materialize([toDate('2021-10-01'), toDate('2021-10-02')]) AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT materialize([toIPv4('127.0.0.1'), Null, toIPv4('1.0.0.1')]) AS arr);
SELECT arrayStringConcat(arr, ';') FROM (SELECT materialize([toIPv4('127.0.0.1'), toIPv4('1.0.0.1')]) AS arr);
SELECT arrayStringConcat(arrayMap(x -> toString(x), range(number % 4))) FROM system.numbers LIMIT 10;
SELECT arrayStringConcat(arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arrayStringConcat(arrayMap(x -> toString(x), range(number)), '') FROM system.numbers LIMIT 10;
SELECT arrayStringConcat(arrayMap(x -> toString(x), range(number)), ',') FROM system.numbers LIMIT 10;
SELECT arrayStringConcat(arrayMap(x -> transform(x, [0, 1, 2, 3, 4, 5, 6, 7, 8], ['meta.ua', 'google', 'test', '123', '', 'hello', 'world', 'goodbye', 'xyz'], ''), arrayMap(x -> x % 9, range(number))), ' ') FROM system.numbers LIMIT 20;
SELECT arrayStringConcat(arrayMap(x -> transform(x, [1025, -9223372036854775808, 65537, 257, 1048576, 10, 7, 1048575, 65536], ['censor.net', 'googlegooglegooglegoogle', 'test', '', '', 'hello', 'world', '', 'xyz'], ''), arrayMap(x -> (x % -inf), range(number))), '') FROM system.numbers LIMIT 1025 FORMAT Null;
SELECT arrayStringConcat(emptyArrayString());
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), ngramMinHash(s) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), ngramMinHashCaseInsensitive(s) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), ngramMinHashCaseInsensitiveUTF8(s) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), ngramMinHashUTF8(s) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), ngramSimHash(s) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), ngramSimHashCaseInsensitive(s) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), ngramSimHashCaseInsensitiveUTF8(s) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), ngramSimHashUTF8(s) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), wordShingleMinHash(s, 2, 3) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), wordShingleMinHashCaseInsensitive(s, 2, 3) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), wordShingleMinHashCaseInsensitiveUTF8(s, 2, 3) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), wordShingleMinHashUTF8(s, 2, 3) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), wordShingleSimHash(s, 2) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), wordShingleSimHashCaseInsensitive(s, 2) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), wordShingleSimHashCaseInsensitiveUTF8(s, 2) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(groupArray(s), '\n:::::::\n'), count(), wordShingleSimHashUTF8(s, 2) as h FROM defaults GROUP BY h ORDER BY h;
SELECT arrayStringConcat(materialize(['Hello', 'World']));
SELECT arrayStringConcat(materialize(['Hello', 'World']), ', ');
SELECT arrayStringConcat(materialize([Null, 'hello', Null, 'world', Null, 'xyz', 'def', Null]), ';');
SELECT arrayStringConcat(materialize([Null::Nullable(String), Null::Nullable(String)]), ';');
SELECT arraySum([-9000000000000000000, -9000000000000000000]);
SELECT arraySum([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]);
SELECT arraySum([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
SELECT arraySum([toDecimal128(0.0,8), toDecimal128(1.0,8)]) x, toTypeName(x);
SELECT arraySum([toDecimal32(0.0,4), toDecimal32(1.0,4)]) x, toTypeName(x);
SELECT arraySum([toDecimal64(0.0,8), toDecimal64(1.0,8)]) x, toTypeName(x);
SELECT arraySum(col1.a), arrayMap(x -> x * x * 2, col1.a) FROM nested ORDER BY id LIMIT 5;
SELECT arraySum(x -> 0, [1, 2, 3]);
SELECT arraySum(x -> 0, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arraySum(x -> 0, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> 0, emptyArrayString());
SELECT arraySum(x -> 0, emptyArrayUInt8());
SELECT arraySum(x -> 0, range(number)) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> 10, [1, 2, 3]);
SELECT arraySum(x -> 10, arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arraySum(x -> 10, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> 10, emptyArrayString());
SELECT arraySum(x -> 10, emptyArrayUInt8());
SELECT arraySum(x -> 10, range(number)) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> materialize(0), [1, 2, 3]);
SELECT arraySum(x -> materialize(0), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arraySum(x -> materialize(0), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> materialize(0), emptyArrayString());
SELECT arraySum(x -> materialize(0), emptyArrayUInt8());
SELECT arraySum(x -> materialize(0), range(number)) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> materialize(10), [1, 2, 3]);
SELECT arraySum(x -> materialize(10), arrayMap(x -> toString(x), [1, 2, 3]));
SELECT arraySum(x -> materialize(10), arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> materialize(10), emptyArrayString());
SELECT arraySum(x -> materialize(10), emptyArrayUInt8());
SELECT arraySum(x -> materialize(10), range(number)) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> number % 2, arrayMap(x -> toString(x), range(number))) FROM system.numbers LIMIT 10;
SELECT arraySum(x -> number % 2, range(number)) FROM system.numbers LIMIT 10;
SELECT arraySum(x) FROM test_aggregation;
SELECT arrayUniq(a), arrayUniq(b), arrayUniq(c) FROM decimal;
SELECT arrayUniq(nest.a), arrayUniq(nest.b), arrayUniq(nest.c) FROM decimal;
select arrayUniq(thread_ids) <= 36 from system.query_log where current_database = currentDatabase() AND event_date >= today() - 1 and query ilike '%select x from table_01323_many_parts order by x%' and query not like '%system.query_log%' and type = 'QueryFinish' order by query_start_time desc limit 1;
select arrayUniq(thread_ids) <= 4 from system.query_log where current_database = currentDatabase() AND event_date >= today() - 1 and query ilike '%select x from table_01323_many_parts%' and query not like '%system.query_log%' and type = 'QueryFinish' order by query_start_time desc limit 1;
select arrayUniq(thread_ids)>=16 from system.query_log where event_date >= yesterday() and current_database = currentDatabase() and type = 'QueryFinish' and startsWith(query, 'insert');
SELECT arrayWithConstant(-231.37104, -138);
SELECT arrayWithConstant(3, number) FROM numbers(10);
SELECT arrayWithConstant(number % 3, number % 2 ? 'Hello' : NULL) FROM numbers(10);
SELECT arrayWithConstant(number, 'Hello') FROM numbers(10);
SELECT arrayWithConstant(number, []) FROM numbers(10);
SELECT arrayZip();
SELECT arrayZip(['a', 'b', 'c'], ['d', 'e', 'f']);
SELECT arrayZip(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']);
SELECT arrayZip([0, 1], ['hello', 'world']);
SELECT arrayZip([0, 1], materialize(['hello', 'world']));
SELECT arrayZip([0, number], [toString(number), 'world']) FROM numbers(10);
SELECT arrayZip([1, number, number * number], [[], [], []]) FROM numbers(10);
SELECT arrayZip(materialize([0, 1]), ['hello', 'world']);
SELECT arrayZip(materialize([0, 1]), materialize(['hello', 'world']));
SELECT ascii('');
SELECT ascii('234');
SELECT ascii(materialize(''));
SELECT ascii(materialize('234'));
SELECT ascii(toString(number) || 'abc') from numbers(10);
select asin(-1) = -pi() / 2;
select asin(0) = 0;
select asin(1) = pi() / 2;
select asinh(0) = 0;
select asinh(1) = -asinh(-1);
SELECT assumeNotNull(argMax(dummy, 1)) FROM remote('127.1', system.one) SETTINGS distributed_group_by_no_merge=2;
select atan(0) = 0;
select atan(1) = pi() / 4;
select atan2(-1, -1) = -3 * pi() / 4;
select atan2(0, 1) = 0;
select atan2(0, 2) = 0;
select atan2(1, 0) = pi() / 2;
select atan2(1, 1) = pi() / 4;
select atanh(0) = 0;
select atanh(0.5) = -atanh(-0.5);
SELECT attr, _id, arrayFilter(x -> (x IN (select '1')), attr_list) z FROM TESTTABLE ARRAY JOIN z AS attr ORDER BY _id LIMIT 3 BY attr;
SELECT avg(a), sum(a) FROM (SELECT a FROM fuse_tbl WHERE isNotNull(a));
SELECT avg(a), sum(a) FROM (SELECT a FROM fuse_tbl WHERE isNull(a));
SELECT avg(a), sum(a) FROM (SELECT a FROM fuse_tbl);
SELECT avg(arrayJoin([NULL, 1, 2]));
SELECT avg(arrayJoin([NULL, 1]));
SELECT avg(b) * 3, sum(b) + 1 + count(b), count(b) * count(b), count() FROM (SELECT b FROM fuse_tbl);
SELECT avg(b), sum(b) FROM (SELECT b FROM fuse_tbl);
SELECT avg(bitCount(number)) FROM numbers(256);
SELECT avg(blockSize()) <= 10 FROM system.tables LIMIT 10 SETTINGS max_block_size = 10;
SELECT avg(blockSize()) <= 10000 FROM system.columns LIMIT 10 SETTINGS max_block_size = 10;
SELECT avg(blockSize()) <= 10000 FROM system.columns SETTINGS max_block_size = 10;
SELECT avg(d128 - d64) FROM test_01035_avg;
select avg(eventcnt) eventcnt, d1 from tp group by d1;
SELECT avg(f32 + f64) FROM test_01035_avg;
SELECT avg(i8 * i16) FROM test_01035_avg;
SELECT avg(i8), avg(i16), avg(i32), avg(i64), avg(i128), avg(i256), avg(u8), avg(u16), avg(u32), avg(u64), avg(u128), avg(u256), avg(f32), avg(f64), avg(d32), avg(d64), avg(d128), avg(d256) FROM test_01035_avg;
SELECT avg(NULL);
SELECT avg(number) AS number, max(number) FROM numbers(10);
SELECT avg(number) FROM numbers1;
SELECT avgArray(keys) FROM test;
SELECT avgMerge(x * 10) FROM (SELECT avgState(b) AS x FROM mult_aggregation);
SELECT avgOrDefaultIf(x, x > 0) FROM (SELECT 1 AS x);
SELECT avgOrDefaultIf(x, x > 1) FROM (SELECT 1 AS x);
SELECT avgOrDefaultIfMerge(state) FROM (SELECT avgOrDefaultIfState(x, x > 0) AS state FROM (SELECT 1 AS x));
SELECT avgOrDefaultIfMerge(state) FROM (SELECT avgOrDefaultIfState(x, x > 1) AS state FROM (SELECT 1 AS x));
SELECT avgOrNullIf(x, x > 0) FROM (SELECT 1 AS x);
SELECT avgOrNullIf(x, x > 1) FROM (SELECT 1 AS x);
SELECT avgOrNullIfMerge(state) FROM (SELECT avgOrNullIfState(x, x > 0) AS state FROM (SELECT 1 AS x));
SELECT avgOrNullIfMerge(state) FROM (SELECT avgOrNullIfState(x, x > 1) AS state FROM (SELECT 1 AS x));
SELECT avgWeighted(0, 1) FROM remote('127.0.0.{2,3}', currentDatabase(), dummy);
SELECT avgWeighted(0., 0.) FROM remote('127.0.0.{2,3}', currentDatabase(), dummy);
SELECT avgWeighted(1., 0.) FROM remote('127.0.0.{2,3}', currentDatabase(), dummy);
SELECT avgWeighted(10, 100) FROM remote('127.0.0.{2,3}', currentDatabase(), dummy);
SELECT avgWeighted(100., .1) FROM remote('127.0.0.{2,3}', currentDatabase(), dummy);
SELECT avgWeighted(if(number < 10000, NULL, number), if(number < 10000, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(if(number < 10000, NULL, number), if(number < 50, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(if(number < 10000, NULL, number), if(number < 500, NULL, number)) t, toTypeName(t) FROM numbers(1000);
SELECT avgWeighted(if(number < 10000, NULL, number), number) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(if(number < 10000, NULL, number), toNullable(number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(if(number < 50, NULL, number), if(number < 10000, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(if(number < 50, NULL, number), if(number < 50, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(if(number < 50, NULL, number), number) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(if(number < 50, NULL, number), toNullable(number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(number, if(number < 10000, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(number, if(number < 50, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(number, number + 1) t, toTypeName(t) FROM numbers(0);
SELECT avgWeighted(toInt8(100), -1) FROM remote('127.0.0.{2,3}', currentDatabase(), dummy);
SELECT avgWeighted(toNullable(number), if(number < 10000, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(toNullable(number), if(number < 50, NULL, number)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeighted(toNullable(number), if(number < 500, NULL, number)) t, toTypeName(t) FROM numbers(1000);
SELECT avgWeighted(toNullable(number), number) t, toTypeName(t) FROM numbers(1);
SELECT avgWeighted(x, y) FROM (SELECT NULL, 255 AS x, 1 AS y UNION ALL SELECT y, NULL AS x, 1 AS y);
SELECT avgWeightedIf(if(number < 10000, NULL, number), if(number < 10000, NULL, number), if(number < 0, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 10000, NULL, number), if(number < 10000, NULL, number), if(number < 10000, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 10000, NULL, number), if(number < 10000, NULL, number), if(number < 50, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 10000, NULL, number), if(number < 50, NULL, number), if(number < 0, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 10000, NULL, number), if(number < 50, NULL, number), if(number < 10000, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 10000, NULL, number), if(number < 50, NULL, number), if(number < 50, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 50, NULL, number), if(number < 10000, NULL, number), if(number < 0, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 50, NULL, number), if(number < 10000, NULL, number), if(number < 10000, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 50, NULL, number), if(number < 10000, NULL, number), if(number < 50, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 50, NULL, number), if(number < 50, NULL, number), if(number < 0, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 50, NULL, number), if(number < 50, NULL, number), if(number < 10000, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(if(number < 50, NULL, number), if(number < 50, NULL, number), if(number < 50, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(number, number, if(number < 0, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(number, number, if(number < 10000, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(number, number, if(number < 50, NULL, number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(number, number, number % 10) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(number, number, toNullable(number % 10)) t, toTypeName(t) FROM numbers(100);
SELECT avgWeightedIf(number, number, toNullable(number % 10)) t, toTypeName(t) FROM numbers(1000);
SELECT ax, c FROM (SELECT [1,2] ax, 0 c) ARRAY JOIN ax JOIN (SELECT 0 c) USING (c);
SELECT ax, c FROM (SELECT [101,102] ax, 0 c) s1 JOIN system.one s2 ON s1.c = s2.dummy JOIN system.one s3 ON s1.c = s3.dummy ARRAY JOIN ax;
SELECT ax, c FROM (SELECT [3,4] ax, 0 c) JOIN (SELECT 0 c) USING (c) ARRAY JOIN ax;
SELECT ax, c FROM (SELECT [5,6] ax, 0 c) s1 JOIN system.one s2 ON s1.c = s2.dummy ARRAY JOIN ax;
SELECT ax, c, d FROM (SELECT [7,8] ax, 1 c, 0 d) s1 JOIN system.one s2 ON s1.c = s2.dummy OR s1.d = s2.dummy ARRAY JOIN ax;
select b + 1 as c from (select a + 1 as b from (select x + 1 as a from table_1)) settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};
SELECT b + 21, b - 21, b - 84, b * 21, b * -21, b / 21, b / 84, intDiv(b, 21), intDivOrZero(b, 84) FROM decimal WHERE b = 42;
SELECT b + b, b - b, b * b, b / b, intDiv(b, b), intDivOrZero(b, b) FROM decimal WHERE b = 42;
select b as a, d as c from t1 join t2 on a = c;
select b as a, d as c from t1 join t2 on c = a;
select b as c, d as a from t1 join t2 on a = c;
select b as c, d as a from t1 join t2 on c = a;
SELECT b AS c, dummy AS b, dummy AS dummy FROM system.one;
SELECT b FROM ( select 1 AS a UNION ALL select 1 as a ) AS t1, ( select 2 AS b, 3 AS c UNION ALL select 2 as b, 3 as c) AS t2;
select b from (select 1 as a, 42 as c) js1 any left join (select 2 as b, 2 as b, 41 as c) js2 using c;
select b from (select 1 as a, 42 as c) js1 any left join (select 2 as b, 2 as b, 42 as c) js2 using c;
select b from (select 5 as a, 'Hello' as b group by a);
select b from (select 5 as a, 'Hello' as b order by 1);
select b from (select 5 as a, 'Hello' as b order by a);
select b from (select b from wt order by a limit 3 with ties) order by b;
SELECT b FROM (SELECT sum(x) AS a, avg(x) AS b FROM (SELECT number AS x FROM numbers(10)));
SELECT b FROM buffer_00126 ORDER BY a, b, c;
SELECT b FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) WHERE c != 'twee' ORDER BY b;
SELECT b FROM pk_order ORDER BY a, b;
select b from prewhere_alias prewhere a = 1;
select b from prewhere_alias prewhere a;
select b from prewhere_alias prewhere b = 1;
select b from prewhere_alias prewhere c = 1;
select b from prewhere_alias prewhere c;
select b from prewhere_alias prewhere d = 2;
select b from set_index where a = 1 and a = 1 and b = 1 settings force_data_skipping_indices = 'b_set', optimize_move_to_prewhere=0;
SELECT b FROM set_index__fuzz_41 WHERE and(b = 256) SETTINGS force_data_skipping_indices = 'b_set', optimize_move_to_prewhere = 0, max_parallel_replicas=2, parallel_replicas_for_non_replicated_merge_tree=1, allow_experimental_parallel_reading_from_replicas=2;
SELECT b FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT b FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
select b from t_00712_1 prewhere a < 1000;
select b from tab_00717 group by b order by b;
select b from table_map where a = map('name','lisi', 'gender', 'female');
SELECT b FROM test ARRAY JOIN p WHERE b = 1 AND c IN ( SELECT c FROM test );
SELECT b FROM test PREWHERE c = 1;
select b from trepl FINAL prewhere a < 1000;
SELECT b FROM tt_m order by b LIMIT 1 BY b;
SELECT b FROM tt_m ORDER BY b, a;
SELECT b FROM tt_m WHERE b == 12;
SELECT b FROM tt_m WHERE b >= 0 order by b, a;
select b'';
select B'';
select b'0' == '\0';
select B'0' == '\0';
select b'00110000';
select B'00110000';
SELECT b, a FROM buffer_00126 ORDER BY a, b, c;
SELECT b, a FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) ORDER BY a;
SELECT b, a FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) ORDER BY c;
SELECT b, a FROM order_by_all ORDER BY ALL NULLS FIRST;
SELECT b, a FROM order_by_all ORDER BY ALL NULLS LAST;
SELECT b, a FROM order_by_all ORDER BY ALL;
SELECT b, a, c FROM buffer_00126 ORDER BY a, b, c;
SELECT b, a, JSONLength(grp_aggreg, 100, NULL) FROM test_table SETTINGS optimize_aggregation_in_order = 1;
SELECT b, arrayPopBack(b), arrayPopFront(b), arrayResize(b, 1), arraySlice(b, 2, 1) FROM decimal;
select b, c from (select 1 as a, 1 as b, 1 as c, 1 as b, 1 as c) any left join (select 1 as a) using a;
select b, c from (select 1 as a, 1 as b, 1 as c, b, c) any left join (select 1 as a) using a;
select b, c from (select 1 as a, 1 as b, 1 as c, b, c);
SELECT b, c FROM buffer_00126 ORDER BY a, b, c;
SELECT b, c, a FROM buffer_00126 ORDER BY a, b, c;
SELECT b, c, d FROM crash_02919;
SELECT b, count() FROM tt_m GROUP BY b order by b;
select b, d from t1 join t2 on a = c;
select b, d from t1 join t2 on c = a;
select b, length(b) as l from tab_00717 group by b, l, l + 1 order by b;
SELECT B, neighbor(B, 1) AS next_B FROM (SELECT * FROM test ORDER BY B) WHERE A == 1;
SELECT B, neighbor(B, 1) AS next_B FROM (SELECT * FROM test ORDER BY B);
SELECT B, next_B FROM (SELECT A, B, neighbor(B, 1) AS next_B FROM (SELECT * FROM test ORDER BY B)) WHERE A == 1;
SELECT b, sum(a) FROM attach_partition_t6 GROUP BY b ORDER BY b;
select b, sum(c) from ( select a, b, sum(c) as c from union1 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from union1 where b>1 group by a, b order by a, b) as a group by b order by b;
select b, sum(c) from ( select a, b, sum(c) as c from union1 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from union2 where b>1 group by a, b order by a, b) as a group by b order by b;
select b, sum(c) from ( select a, b, sum(c) as c from union2 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from union2 where b>1 group by a, b order by a, b) as a group by b order by b;
select b, sum(c) from ( select a, b, sum(c) as c from union2 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from union3 where b>1 group by a, b order by a, b) as a group by b order by b;
SELECT b.a FROM (SELECT 1 AS a) AS b;
SELECT b.dt FROM (SELECT NULL > NULL AS pk, 1 AS dt FROM numbers(5)) AS a ASOF LEFT JOIN (SELECT NULL AS pk, 1 AS dt) AS b ON (a.pk = b.pk) AND 1 != 1 AND (a.dt >= b.dt);
SELECT b.id FROM ( SELECT toLowCardinality(0 :: UInt32) AS id GROUP BY [] ) AS a SEMI LEFT JOIN ( SELECT toLowCardinality(1 :: UInt64) AS id ) AS b USING (id);
SELECT b.value FROM (SELECT toInt8(1) AS id) ANY LEFT JOIN test_00597 AS b USING id WHERE value = 1;
SELECT b.x AS x FROM a LEFT JOIN b ON a.x = b.x LEFT JOIN c ON b.x = c.x;
select b1 from tab1 any left join (select * from tab2) on toInt32(a1 + 1) = a2;
select b1 from tab1 any left join tab2 on toInt32(a1 + 1) = a2;
select b1, a2 from tab1 any left join tab2 on toInt32(a1 + 1) = a2;
select b1, b2 from tab1 any left join tab2 on toInt32(a1 + 1) = a2;
SELECT b_num, isNull(b_num), toTypeName(b_num), b_num = 0, if(b_num = 0, 'fail', 'ok') FROM (SELECT 1 k, toInt8(1) a_num) AS x LEFT JOIN (SELECT 2 k, toInt8(1) b_num) AS y USING (k);
SELECT bar((greatCircleAngle(0, 0, number, number) - number) * 100, 0, 2000, 100) FROM numbers(90);
SELECT bar((greatCircleAngle(100, -1, number, number) - number) * 2, -9223372036854775808, 1023, 100) FROM numbers(1048575) FORMAT Null;
SELECT bar((greatCircleAngle(65537, 2, 1, 1) - 1) * 65535, 1048576, 1048577, nan);
SELECT bar(-1, -9223372036854775808, nan);
SELECT bar.a FROM (SELECT 1 AS a, 2 AS b) AS foo FULL JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.a = bar.b) AND (foo.b = bar.b) ORDER BY bar.a;
SELECT bar.a FROM (SELECT 1 AS a, 2 AS b) AS foo FULL JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.b = bar.a) AND (foo.b = bar.b) ORDER BY bar.a;
SELECT bar.a FROM (SELECT 1 AS a, 2 AS b) AS foo RIGHT JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.a = bar.b) AND (foo.b = bar.b) ORDER BY bar.a;
SELECT bar.a FROM (SELECT 1 AS a, 2 AS b) AS foo RIGHT JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.b = bar.a) AND (foo.b = bar.b) ORDER BY bar.a;
SELECT base58Decode(val) FROM (select arrayJoin(['', '2m', '8o8', 'bQbp', '3csAg9', 'CZJRhmz', 't1Zv2yaZ', '']) val);
select base58Encode('\x00\x0b\xe3\xe1\xeb\xa1\x7a\x47\x3f\x89\xb0\xf7\xe8\xe2\x49\x40\xf2\x0a\xeb\x8e\xbc\xa7\x1a\x88\xfd\xe9\x5d\x4b\x83\xb7\x1a\x09') == '1BWutmTvYPwDtmw9abTkS4Ssr8no61spGAvW1X6NDix';
SELECT base58Encode('Hold my beer...', 'Second arg');
SELECT base58Encode(base58Decode('1BWutmTvYPwDtmw9abTkS4Ssr8no61spGAvW1X6NDix')) == '1BWutmTvYPwDtmw9abTkS4Ssr8no61spGAvW1X6NDix';
SELECT base58Encode(val) FROM (select arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar']) val);
SELECT base64Decode('aoeo054640eu=');
SELECT base64Decode('foo');
SELECT base64Decode(base64Encode('foo')) = 'foo', base64Encode(base64Decode('Zm9v')) == 'Zm9v';
SELECT base64Decode(base64Encode(normalizeQuery(query))) FROM system.query_log WHERE type = 'QueryFinish' AND log_comment = 'ad15a651' AND current_database = currentDatabase() GROUP BY normalizeQuery(query) ORDER BY normalizeQuery(query);
select base64Decode(toFixedString('Zm9v', 4));
SELECT base64Decode(val) FROM (select arrayJoin(['', 'Zg==', 'Zm8=', 'Zm9v', 'Zm9vYg==', 'Zm9vYmE=', 'Zm9vYmFy']) val);
SELECT base64Encode();
SELECT basename('/usr/bin/bash');
SELECT basename('/usr/bin/bash/');
SELECT basename('bash');
SELECT basename('C:\\\\Users\\Documents\\test_file');
select bin('');
select bin('0');
select bin('10');
select bin('12332424');
SELECT bin('Hello') == bin(bitShiftLeft('Hello', 0));
SELECT bin('Hello') == bin(bitShiftRight('Hello', 0));
select bin('测试');
select bin(0);
select bin(1);
SELECT bin(1.234567890123456789012345678901::Decimal(60, 30));
select bin(10);
select bin(127);
select bin(255);
select bin(256);
select bin(511);
select bin(512);
select bin(avgState(number)) from numbers(10);
SELECT bin(bitShiftLeft('Hello', 42));
SELECT bin(bitShiftRight('Hello', 42));
select bin(materialize('12332424'));
select bin(toDecimal32(1.2, 8));
select bin(toDecimal64(1.2, 17));
SELECT bin(toFixedString('Hello', 10)) == bin(bitShiftLeft(toFixedString('Hello', 10), 0));
SELECT bin(toFixedString('Hello', 10)) == bin(bitShiftRight(toFixedString('Hello', 10), 0));
select bin(toFixedString('测试', 10));
select bin(toFloat32(1.2));
select bin(toFloat64(1.2));
SELECT bin(toInt128(-100000000000)) AS res;
SELECT bin(toInt128(100000000000)) AS res;
SELECT bin(toInt16(-100)) AS res;
SELECT bin(toInt16(100)) AS res;
SELECT bin(toInt256(-100000000000)) AS res;
SELECT bin(toInt256(100000000000)) AS res;
SELECT bin(toInt32(-100)) AS res;
SELECT bin(toInt32(100)) AS res;
SELECT bin(toInt64(-100)) AS res;
SELECT bin(toInt64(100)) AS res;
SELECT bin(toInt8(-100)) AS res;
SELECT bin(toInt8(100)) AS res;
select bin(toLowCardinality(materialize('12332424')));
select bin(toNullable(materialize('12332424')));
SELECT bin(toUInt128(100000000000)) AS res;
SELECT bin(toUInt256(100000000000)) AS res;
select bin(unbin('')) == '';
select bin(unbin('0')) == '00000000';
SELECT bitAnd(0, inf);
SELECT bitAnd(1.0, 1.0);
SELECT bitAnd(number, toUInt64(pow(2, 20) - 1)) as k, argMaxIf(k, number % 2 = 0 ? number : Null, number > 42), uniq(number) AS u FROM numbers(1000000) GROUP BY k format Null;
SELECT bitCount('clickhouse cloud');
SELECT bitCount(-1);
SELECT bitCount(-inf), bitCount(inf), bitCount(3.40282e+38), bitCount(nan);
SELECT bitCount(0);
SELECT bitCount(1);
SELECT bitCount(CAST(-1 AS Int128) - 3);
SELECT bitCount(CAST(-1 AS Int128));
SELECT bitCount(CAST(-1 AS Int256) - 4);
SELECT bitCount(CAST(-1 AS Int256));
SELECT bitCount(CAST(-1 AS UInt128) - 1);
SELECT bitCount(CAST(-1 AS UInt128));
SELECT bitCount(CAST(-1 AS UInt256) - 2);
SELECT bitCount(CAST(-1 AS UInt256));
SELECT bitCount(CAST(0xFFFFFFFFFFFFFFFF AS Int256));
SELECT bitCount(number) FROM numbers(10);
SELECT bitCount(toInt16(-1));
SELECT bitCount(toInt32(-1));
SELECT bitCount(toInt64(-1));
SELECT bitCount(toInt8(-1));
SELECT bitHammingDistance('hello', 'hello');
SELECT bitHammingDistance('hello', 'hellow');
SELECT bitHammingDistance('hello', s2) FROM test_string;
SELECT bitHammingDistance(-1, 1);
SELECT bitHammingDistance(1, 5);
SELECT bitHammingDistance(100, 100000);
SELECT bitHammingDistance(4, n1) FROM defaults;
SELECT bitHammingDistance(n2, 100) FROM defaults;
SELECT bitHammingDistance(n3, n4) FROM defaults;
SELECT bitHammingDistance(s1, s2) FROM test_string;
SELECT bitHammingDistance(s3, s4) FROM test_string;
SELECT bitHammingDistance(s4, toFixedString('hello', 10)) FROM test_string;
SELECT bitHammingDistance(toFixedString('hello', 6), toFixedString('hellow', 6));
SELECT bitmapAndCardinality( bitmapBuild(cast([19,7] AS Array(UInt32))), z) FROM bitmap_column_expr_test;
SELECT bitmapAndCardinality( z, bitmapBuild(cast([19,7] AS Array(UInt32))) ) FROM bitmap_column_expr_test;
SELECT bitmapAndCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]));
SELECT bitmapAndCardinality(bitmapBuild([100, 200, 500]), bitmapBuild(CAST([100, 200], 'Array(UInt16)')));
SELECT bitmapAndnotCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]));
SELECT bitmapCardinality(bitmapAnd(bitmapBuild(cast([19,7] AS Array(UInt32))), z )) FROM bitmap_column_expr_test;
SELECT bitmapCardinality(bitmapAnd(z, bitmapBuild(cast([19,7] AS Array(UInt32))))) FROM bitmap_column_expr_test;
SELECT bitmapCardinality(bitmapBuild([1, 2, 3, 4, 5]));
select bitmapContains(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]),toUInt32(101));
select bitmapContains(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]),toUInt32(500));
select bitmapContains(bitmapBuild([1,5,7,9]),toUInt64(9));
SELECT bitmapContains(bitmapBuild(emptyArrayUInt16()), toUInt16(5));
select bitmapHasAll(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]),bitmapBuild([ 100, 200, 501, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]));
select bitmapHasAll(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]),bitmapBuild([ 99, 100, 500]));
select bitmapHasAll(bitmapBuild([1,5,7,9]),bitmapBuild([5,7,2]));
select bitmapHasAll(bitmapBuild([1,5,7,9]),bitmapXor(bitmapBuild([1,5,7]), bitmapBuild([2,5,7])));
select bitmapHasAll(bitmapBuild([100,200,500]),bitmapBuild([ 99, 101, 600, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]));
SELECT bitmapHasAll(bitmapBuild(emptyArrayUInt16()), bitmapBuild([1, 2, 3, 500]));
SELECT bitmapHasAll(bitmapBuild(emptyArrayUInt32()), bitmapBuild(emptyArrayUInt32()));
select bitmapHasAll(bitmapXor(bitmapBuild([1,7]), bitmapBuild([5,7,9])), bitmapBuild([1,5,7]));
select bitmapHasAny(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]),bitmapBuild([ 99, 101, 600]));
select bitmapHasAny(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 40,50,60]),bitmapBuild([ 41, 49, 51, 61, 99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65]));
SELECT bitmapHasAny(bitmapBuild([1, 2, 3, 5]),bitmapBuild([0, 4, 7]));
select bitmapHasAny(bitmapBuild([100,200,500]),bitmapBuild([ 99, 101, 600, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]));
SELECT bitmapHasAny(bitmapBuild(emptyArrayUInt16()), bitmapBuild([1, 2, 3, 500]));
SELECT bitmapHasAny(bitmapBuild(emptyArrayUInt32()), bitmapBuild(emptyArrayUInt32()));
SELECT bitmapMax(argMax(x, y)) FROM remote('127.0.0.{2,3}', view( SELECT groupBitmapState(toUInt32(number)) AS x, number AS y FROM numbers(10) GROUP BY number ));
SELECT bitmapMax(bitmapBuild(emptyArrayUInt16()));
SELECT bitmapMax(bitmapBuild(emptyArrayUInt32()));
SELECT bitmapMin(bitmapBuild(emptyArrayUInt16()));
SELECT bitmapMin(bitmapBuild(emptyArrayUInt32()));
SELECT bitmapOrCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]));
SELECT bitmapToArray(bitmapAnd(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])));
SELECT bitmapToArray(bitmapAnd(bitmapBuild([100, 200, 500]), bitmapBuild(CAST([100, 200], 'Array(UInt16)'))));
SELECT bitmapToArray(bitmapAnd(groupBitmapState(uid), bitmapBuild(CAST([4294967296, 4294967297, 4294967298], 'Array(UInt64)')))) FROM bitmap_test GROUP BY city_id ORDER BY city_id;
SELECT bitmapToArray(bitmapAndnot(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])));
SELECT bitmapToArray(bitmapBuild([1, 2, 3, 4, 5]));
SELECT bitmapToArray(bitmapOr(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])));
select bitmapToArray(bitmapSubsetInRange(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]), toUInt32(100), toUInt64(200)));
select bitmapToArray(bitmapSubsetInRange(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]), toUInt64(30), toUInt32(200)));
select bitmapToArray(bitmapSubsetInRange(bitmapBuild([1,5,7,9]), toUInt32(10), toUInt64(10)));
select bitmapToArray(bitmapSubsetInRange(bitmapBuild([1,5,7,9]), toUInt64(3), toUInt32(7)));
SELECT bitmapToArray(bitmapSubsetInRange(bitmapBuild(emptyArrayUInt16()), toUInt32(0), toUInt64(10)));
select bitmapToArray(bitmapSubsetLimit(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]), toUInt32(100), toUInt16(200)));
select bitmapToArray(bitmapSubsetLimit(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]), toUInt32(30), toUInt32(200)));
select bitmapToArray(bitmapSubsetLimit(bitmapBuild([1,5,7,9]), toUInt16(3), toUInt32(7)));
select bitmapToArray(bitmapSubsetLimit(bitmapBuild([1,5,7,9]), toUInt32(10), toUInt64(10)));
SELECT bitmapToArray(bitmapSubsetLimit(bitmapBuild(emptyArrayUInt16()), toUInt32(0), toUInt64(10)));
SELECT bitmapToArray(bitmapXor(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])));
select bitmapToArray(subBitmap(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]), toUInt32(30), toUInt32(200)));
select bitmapToArray(subBitmap(bitmapBuild([ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33, 100,200,500]), toUInt32(34), toUInt16(3)));
select bitmapToArray(subBitmap(bitmapBuild([1,5,7,9]), toUInt16(1), toUInt32(2)));
select bitmapToArray(subBitmap(bitmapBuild([1,5,7,9]), toUInt32(1), toUInt64(4)));
SELECT bitmapToArray(subBitmap(bitmapBuild(emptyArrayUInt16()), toUInt32(0), toUInt64(10)));
SELECT bitmapTransform(arrayReduce('groupBitmapState', [1]), [1, 2], [1, 2, 3]);
SELECT bitmapXorCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]));
SELECT bitmaskToArray(-1);
SELECT bitmaskToArray(-128);
SELECT bitmaskToArray(0);
SELECT bitmaskToArray(7);
SELECT bitmaskToArray(toInt64(-1));
SELECT bitmaskToArray(toInt64(-128));
SELECT bitmaskToArray(toInt64(0));
SELECT bitmaskToArray(toInt64(7));
SELECT bitmaskToList(-1);
SELECT bitmaskToList(-128);
SELECT bitmaskToList(0);
SELECT bitmaskToList(7);
SELECT bitmaskToList(toInt64(-1));
SELECT bitmaskToList(toInt64(-128));
SELECT bitmaskToList(toInt64(0));
SELECT bitmaskToList(toInt64(7));
SELECT bitNot(-inf) != 0, bitNot(inf) != 0, bitNot(3.40282e+38) != 0, bitNot(nan) != 0;
SELECT bitShiftLeft(if(materialize(1), '123', '123'), 1) from numbers(1);
SELECT bitShiftLeft(if(materialize(NULL), '14342', '4242348'), 1) FROM numbers(1);
SELECT bitShiftLeft(if(number = NULL, '14342', '4242348'), 1) FROM numbers(1);
SELECT bitShiftLeft(if(number = NULL, '14342', '4242348'), 1) FROM numbers(3);
SELECT bitShiftLeft(toInt128(1), number) x, bitShiftRight(x, number) y, toTypeName(x), toTypeName(y) FROM numbers(127) ORDER BY number;
SELECT bitShiftLeft(toInt256(-2), 1);
SELECT bitShiftLeft(toInt256(1), number) x, bitShiftRight(x, number) y, toTypeName(x), toTypeName(y) FROM numbers(255) ORDER BY number;
SELECT bitShiftLeft(toInt64(-2), 1);
SELECT bitShiftLeft(toUInt256(1), number) x, bitShiftRight(x, number) y, toTypeName(x), toTypeName(y) FROM numbers(256) ORDER BY number;
SELECT blockSize() AS b, count() / b AS c FROM numbers_squashed GROUP BY blockSize() ORDER BY c DESC, b ASC;
SELECT blockSize() AS b, count() / b AS c FROM numbers_squashed GROUP BY blockSize() ORDER BY c DESC;
SELECT blockSize() bs FROM (SELECT 1 s) js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3]) s) js2 USING (s) GROUP BY bs ORDER BY bs;
select blockSize(), * from `table_00483` prewhere `Struct.Key1`[1] = 19 and `Struct.Key2`[1] >= 0 format Null;
select blockSize(), * from `table_00483` prewhere x = 7 format Null;
SELECT blockSize(), * from tab_00481 format Null;
select blockSize(), * from tab_00484 where x = 1 or x > 36 format Null;
SELECT boundingRatio(1000 + number, number * 1.5 - 111) FROM numbers(1) WHERE 0;
SELECT boundingRatio(1000 + number, number * 1.5 - 111) FROM numbers(1);
SELECT boundingRatio(1000 + number, number * 1.5 - 111) FROM numbers(10);
SELECT boundingRatio(1000 + number, number * 1.5 - 111) FROM numbers(2);
SELECT boundingRatio(1000 + number, number * 1.5) FROM numbers(10);
SELECT boundingRatio(number, exp(number)) = exp(1) - 1 FROM numbers(2);
SELECT boundingRatio(number, number * 1.5) FROM numbers(10);
SELECT byteSize();
SELECT byteSize(123, 456.7) AS x, isConstant(x);
SELECT byteSize(number, number + 1) AS x, isConstant(x) FROM numbers(2);
SELECT byteSwap(-0::Int8);
SELECT byteSwap(-1242525266376::Int64);
SELECT byteSwap(-128::Int8);
SELECT byteSwap(-129::Int16);
SELECT byteSwap(-170141183460469231731687303715884105729::Int256);
SELECT byteSwap(-1::Int8);
SELECT byteSwap(-2147483648::Int32);
SELECT byteSwap(-2147483649::Int64);
SELECT byteSwap(-32768::Int16);
SELECT byteSwap(-32769::Int32);
SELECT byteSwap(-3351772109::Int32);
SELECT byteSwap(-4135::Int16);
SELECT byteSwap(-9223372036854775808::Int64);
SELECT byteSwap(-9223372036854775809::Int128);
SELECT byteSwap(0::UInt8);
SELECT byteSwap(10000::UInt16);
SELECT byteSwap(123294967295::UInt64);
SELECT byteSwap(18439412204227788800::UInt64);
SELECT byteSwap(18446744073709551615::UInt64);
SELECT byteSwap(18446744073709551616::UInt128);
SELECT byteSwap(1::UInt8);
SELECT byteSwap(255::UInt8);
SELECT byteSwap(256::UInt16);
SELECT byteSwap(3351772109::UInt32);
SELECT byteSwap(340282366920938463463374607431768211456::UInt256);
SELECT byteSwap(3455829959::UInt32);
SELECT byteSwap(4135::UInt16);
SELECT byteSwap(4294967295::UInt32);
SELECT byteSwap(4294967296::UInt64);
SELECT byteSwap(65535::UInt16);
SELECT byteSwap(65536::UInt32);
SELECT byteSwap(true);
SELECT c + 21, c - 21, c - 84, c * 21, c * -21, c / 21, c / 84, intDiv(c, 21), intDivOrZero(c, 84) FROM decimal WHERE c = 42;
SELECT c + c, c - c, c * c, c / c, intDiv(c, c), intDivOrZero(c, c) FROM decimal WHERE c = 42;
select c >= 0 from (SELECT randConstant() as c FROM remote('127.0.0.1', numbers_mt(1)));
select c >= 0 from (SELECT randConstant() as c FROM remote('127.0.0.{1,2}', numbers_mt(1)));
select c >= 0 from (SELECT randConstant() as c FROM remote('127.0.0.{3,2}', numbers_mt(1)));
SELECT c AS x FROM tab FORMAT Vertical SETTINGS use_query_cache = 1;
SELECT c FROM ( select 1 AS a UNION ALL select 1 as a ) AS t1, ( select 2 AS b, 3 AS c UNION ALL select 2 as b, 3 as c) AS t2;
SELECT c FROM buffer_00126 ORDER BY a, b, c;
SELECT c from optimize_sorting order by c;
select c from prewhere_alias prewhere a = 1;
select c from prewhere_alias prewhere a;
select c from prewhere_alias prewhere b = 1;
select c from prewhere_alias prewhere c = 1;
select c from prewhere_alias prewhere c;
select c from prewhere_alias prewhere d = 2;
select c from t_00712_1 prewhere a < 1000;
select c from t_00712_1 where a < 1000;
SELECT c FROM tab FORMAT Vertical SETTINGS use_query_cache = 1;
SELECT c FROM testing ORDER BY d;
SELECT c FROM testing ORDER BY e, d;
SELECT c, a FROM buffer_00126 ORDER BY a, b, c;
SELECT c, a, b FROM buffer_00126 ORDER BY a, b, c;
SELECT c, arrayPopBack(c), arrayPopFront(c), arrayResize(c, 1), arraySlice(c, 2, 1) FROM decimal;
SELECT c, b FROM buffer_00126 ORDER BY a, b, c;
SELECT c, b, a FROM buffer_00126 ORDER BY a, b, c;
select c,a,a,b,b from (select 1 as a, 1 as a, 42 as c group by c order by a,c) js1 any left join (select 2 as b, 2 as b, 41 as c group by c order by b,c) js2 using c order by b;
SELECT c.x AS x FROM a LEFT JOIN b ON a.x = b.x LEFT JOIN c ON b.x = c.x;
SELECT c0 + -1, sum(intDivOrZero(intDivOrZero(NULL, NULL), '2'), intDivOrZero(10000000000., intDivOrZero(intDivOrZero(intDivOrZero(NULL, NULL), 10), NULL))) FROM t_having GROUP BY c0 = 2, c0 = 10, intDivOrZero(intDivOrZero(intDivOrZero(NULL, NULL), NULL), NULL), c0 HAVING c0 = 2 SETTINGS enable_optimize_predicate_expression = 0;
SELECT c0 + -2, c0 + -9223372036854775807, c0 = NULL FROM t_having GROUP BY c0 = 0.9998999834060669, 1023, c0 HAVING c0 = 0.9998999834060669 SETTINGS enable_optimize_predicate_expression = 0;
select c0 from t1 order by sin(-c0) settings optimize_read_in_order=0;
select c0 from t1 order by sin(-c0) settings optimize_read_in_order=1;
SELECT c1, c2 FROM t_02784 WHERE c1 = 0 AND c2 = 0;
SELECT c1, c2 FROM t_02784 WHERE c2 = 0 AND c1 = 0;
SELECT c1, c2, c3 FROM test GROUP BY c1, c2, c3 ORDER BY c1, c2, c3;
SELECT c1, c2, c3, c4 FROM format('CSV', '1,2,"[1,2,3]","[[\'abc\'], [], [\'d\', \'e\']]"');
select c1, count(*) from group_by_null_key group by c1 WITH TOTALS;
select c1, count(*) from group_by_null_key group by ROLLUP(c1);
SELECT c1.key, c1.name, c1.ref_valueF64, c1.valueF64, c1.ref_valueF64 - c1.valueF64 AS dF64, '', c2.key, c2.ref_valueF64 FROM codecTest AS c1 , codecTest AS c2 WHERE (dF64 != 3) AND c1.valueF64 != 0 AND (c2.key = (c1.key - 1048576)) LIMIT 0;
select c18 from t where c1 < 0;
SELECT c2 = ('abc') FROM nullt;
SELECT c2 IN ('abc') FROM nullt;
SELECT c2 IN ('abc', NULL) FROM nullt;
SELECT c2, c1 FROM t_02784 WHERE c1 = 0 AND c2 = 0;
SELECT c2, c1 FROM t_02784 WHERE c2 = 0 AND c1 = 0;
select c2, count(*) from group_by_null_key group by c2 WITH TOTALS;
select c2, count(*) from group_by_null_key group by ROLLUP(c2);
SELECT CASE 1 WHEN 0 THEN 'ZERO' WHEN 1 THEN 'ONE' ELSE 'NONE' END AS result;
SELECT CASE 1 WHEN 0 THEN NULL WHEN 1 THEN 'ONE' ELSE 'NONE' END AS result;
SELECT CASE 1 WHEN 1 THEN 2 END;
SELECT CASE 1 WHEN FALSE THEN 1 ELSE CASE WHEN 1 THEN 1 - (CASE 1 WHEN 1 THEN 1 ELSE 1 END) END % 1 END;
select case 1.1 when 0.1 then 'a' when 1.1 then 'b' when 2.1 then 'c' else 'default' end as f;
select case 1::Nullable(Int32) when 1 then 123 else 0 end;
SELECT CASE col1 WHEN 0 THEN 1 WHEN 1 THEN 2 ELSE 3 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN 'foo' WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', 'bar'] WHEN 1 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN ['foo', col3] WHEN 1 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, 'bar'] WHEN 1 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN [col2, col3] WHEN 1 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN col2 WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN (col1 % 2) = 0 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat32(1), toFloat32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toFloat64(1), toFloat64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt16(1), toInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt32(1), toInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt64(1), toInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toInt8(1), toInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt16(1), toUInt16(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt32(1), toUInt32(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt64(1), toUInt64(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat32(2), toFloat32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toFloat64(2), toFloat64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt16(2), toInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt32(2), toInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt64(2), toInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toInt8(2), toInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt16(2), toUInt16(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt32(2), toUInt32(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt64(2), toUInt64(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat32(3), toFloat32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toFloat64(3), toFloat64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt16(3), toInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt32(3), toInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt64(3), toInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toInt8(3), toInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt16(3), toUInt16(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt32(3), toUInt32(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt64(3), toUInt64(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN [toUInt8(1), toUInt8(2)] WHEN (number % 3) = 0 THEN [toUInt8(2), toUInt8(3)] ELSE [toUInt8(3), toUInt8(3)] END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toFloat64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt16(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt32(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt64(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toFloat64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt16(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt32(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt64(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toFloat64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt16(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt32(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt64(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN (number % 2) = 0 THEN toUInt8(1) WHEN (number % 3) = 0 THEN toUInt8(2) ELSE toUInt8(3) END FROM system.numbers LIMIT 10;
SELECT CASE WHEN 1 THEN 'A' WHEN 2 THEN 'BC' ELSE 'DEF' END;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN 'foo' WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['A','B'] WHEN 2 THEN ['C','D'] ELSE ['E','F'] END;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', 'bar'] WHEN 1 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN ['foo', col3] WHEN 1 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [1,2] WHEN 2 THEN [3,4] ELSE [5,6] END;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, 'bar'] WHEN 1 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN (col1 % 3) = 0 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN ['foo', 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN ['foo', 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN ['foo', col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN ['foo', col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN ['foo', col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN ['foo', col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN [col4, 'bar'] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN [col4, 'bar'] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN [col4, 'bar'] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN [col4, col5] ELSE ['foo', 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN [col4, col5] ELSE ['foo', col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN [col4, col5] ELSE [col6, 'bar'] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN [col2, col3] WHEN 1 THEN [col4, col5] ELSE [col6, col7] END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN col2 WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('A', 16) WHEN 2 THEN toFixedString('BC', 16) ELSE toFixedString('DEF', 16) END;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString('foo', 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN (col1 % 3) = 0 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN 'bar' ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN 'bar' ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN 'bar' ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN 'bar' ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN col3 ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN col3 ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN col3 ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN col3 ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString('bar', 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString('bar', 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString('bar', 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString(col3, 16) ELSE 'baz' END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString(col3, 16) ELSE col4 END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString('baz', 16) END FROM multi_if_check;
SELECT CASE WHEN 1 THEN toFixedString(col2, 16) WHEN 1 THEN toFixedString(col3, 16) ELSE toFixedString(col4, 16) END FROM multi_if_check;
SELECT CASE WHEN a=1 THEN 0 END FROM test_00688;
SELECT CASE x WHEN 1 THEN 'hello' WHEN 2 THEN 'world' ELSE 'unknow' END FROM distributed_00609;
SELECT CASE x WHEN 1 THEN 'hello' WHEN 2 THEN 'world' ELSE 'unknow' END FROM mergetree_00609;
SELECT caseWithExpr(arrayReduce(NULL, []), []);
SELECT cast('' , 'IPv4');
SELECT cast('' , 'IPv6');
select CAST('', 'FixedString(1000)');
SELECT cast('0' as Nullable(DateTime64(3, 'UTC')));
SELECT CAST('0', 'Bool');
SELECT CAST('0.123456789', 'Decimal(9,8)');
SELECT CAST('0.12345678901234567890123456789012345678', 'Decimal(38,37)');
SELECT CAST('0.12345678901234567890123456789012345678', 'Decimal(38,38)');
SELECT CAST('0.123456789123456789', 'Decimal(18,17)');
SELECT CAST('1', 'Bool');
SELECT CAST('1.1' AS Decimal(10, 5));
SELECT CAST('1.123445' AS Decimal(10, 5));
SELECT CAST('1.12345' AS Decimal(10, 5));
SELECT CAST('1.123451' AS Decimal(10, 5));
SELECT CAST('1.1234511111' AS Decimal(10, 5));
SELECT CAST('1.12345111111' AS Decimal(10, 5));
SELECT CAST('1.12345111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111' AS Decimal(10, 5));
SELECT CAST('1.123456' AS Decimal(10, 5));
SELECT cast('1234' AS lhs AS UInt32), lhs;
SELECT cast('1234' AS lhs, 'UInt32' AS rhs), lhs, rhs;
SELECT cast('1234' AS lhs, 'UInt32'), lhs;
SELECT cast('1234' lhs AS UInt32), lhs;
SELECT cast('1234' lhs lhs, 'UInt32'), lhs;
SELECT cast('1234' lhs, 'UInt32' rhs), lhs, rhs;
SELECT cast('1234' lhs, 'UInt32'), lhs;
SELECT cast('1234', 'UInt32' AS rhs), rhs;
SELECT cast('1234', 'UInt32' rhs), rhs;
SELECT CAST('12345.1' AS Decimal(10, 5));
SELECT CAST('123456789', 'Decimal(9,0)'), CAST('123456789123456789', 'Decimal(18,0)');
SELECT CAST('123456789', 'Decimal(9,1)');
SELECT CAST('12345678901234567890123456789012345678', 'Decimal(38,0)');
SELECT CAST('1234567891234.1' AS Decimal(10, 5));
SELECT CAST('1234567891234.12345111' AS Decimal(10, 5));
SELECT CAST('127.0.0.1' as IPv4) as v, toTypeName(v);
SELECT CAST('2001:0db8:0000:85a3:0000:0000:ac1f:8001' as IPv6) as v, toTypeName(v);
SELECT CAST('2020-01-01 00:00:00', 'DateTime') AS a, toTypeName(a), CAST('2020-01-01 00:02:00.11', 'DateTime(2)') AS b, toTypeName(b), CAST('2020-01-01 00:03:00', 'DateTime(\'Asia/Istanbul\')') AS c, toTypeName(c), CAST('2020-01-01 00:04:00.22', 'DateTime(3, \'Asia/Istanbul\')') AS d, toTypeName(d), CAST('2020-01-01 00:05:00', 'DateTime(0)') AS e, toTypeName(e);
SELECT CAST('2020-01-01 00:00:00.3' AS DateTime64(0, 'Asia/Istanbul'));
select cast('2023-01-01' as Float64);
SELECT CAST('42' AS DOUBLE PRECISION), CAST(42, 'NATIONAL CHARACTER VARYING'), CAST(-1 AS tinyint UnSiGnEd), CAST(65535, ' sMaLlInT signed ');
SELECT CAST('42.42', 'Decimal(9,2)') AS a, CAST(a, 'Decimal(9,7)'), CAST(a, 'Decimal(18, 16)'), CAST(a, 'Decimal(38, 36)');
SELECT CAST('42.4200', 'Decimal(9,2)') AS a, CAST(a, 'Decimal(9,2)'), CAST(a, 'Decimal(18, 2)'), CAST(a, 'Decimal(38, 2)');
SELECT CAST('[1, 2, 3]' AS Array(UInt8));
SELECT CAST('\x01\x00' AS AggregateFunction(nothingArrayIf, Array(Nullable(Nothing)), Nullable(Nothing)));
SELECT CAST('a string', 'Nullable(String)') AS str WHERE str LIKE '%' format Null;
SELECT CAST('a', 'Nullable(FixedString(1))') as s, toTypeName(s), toString(s);
SELECT CAST('disable', 'Bool');
SELECT CAST('disabled', 'Bool');
SELECT CAST('enable', 'Bool');
SELECT CAST('enabled', 'Bool');
SELECT CAST('F', 'Bool');
SELECT CAST('f', 'Bool');
SELECT CAST('False', 'Bool');
SELECT CAST('FaLse', 'Bool');
SELECT CAST('false', 'Bool');
SELECT CAST('hello' AS FixedString(5)) ILIKE '%he%o%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%elloworl%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%he%o%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%he__o%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%hell%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%hell';
SELECT CAST('hello' AS FixedString(5)) LIKE '%hell_';
SELECT CAST('hello' AS FixedString(5)) LIKE '%hello%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%hello';
SELECT CAST('hello' AS FixedString(5)) LIKE '%helloworld%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%l%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%l%o%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%o%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%o%l%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%o%w%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%orld%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%orld';
SELECT CAST('hello' AS FixedString(5)) LIKE '%ow%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%w%ld%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%w__ld%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%world%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%world';
SELECT CAST('hello' AS FixedString(5)) LIKE '%x%z%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%xyz%';
SELECT CAST('hello' AS FixedString(5)) LIKE '%xyz';
SELECT CAST('hello' AS FixedString(5)) LIKE '_orld%';
SELECT CAST('hello' AS FixedString(5)) LIKE '_orld';
SELECT CAST('hello' AS FixedString(5)) LIKE 'hell%';
SELECT CAST('hello' AS FixedString(5)) LIKE 'hell';
SELECT CAST('hello' AS FixedString(5)) LIKE 'hell_';
SELECT CAST('hello' AS FixedString(5)) LIKE 'hello%';
SELECT CAST('hello' AS FixedString(5)) LIKE 'hello';
SELECT CAST('hello' AS FixedString(5)) LIKE 'helloworld';
SELECT CAST('hello' AS FixedString(5)) LIKE 'orld%';
SELECT CAST('hello' AS FixedString(5)) LIKE 'orld';
SELECT CAST('hello' AS FixedString(5)) LIKE 'world%';
SELECT CAST('hello' AS FixedString(5)) LIKE 'world';
SELECT CAST('hello' AS FixedString(5)) LIKE 'xyz%';
SELECT CAST('hello' AS FixedString(5)) LIKE 'xyz';
SELECT CAST('hello' as IPv4) as v, toTypeName(v);
SELECT CAST('Hello' AS LowCardinality(Nullable(String)));
SELECT CAST('N', 'Bool');
SELECT CAST('n', 'Bool');
SELECT CAST('No', 'Bool');
SELECT CAST('no', 'Bool');
SELECT CAST('Off', 'Bool');
SELECT CAST('off', 'Bool');
SELECT CAST('On', 'Bool');
SELECT CAST('on', 'Bool');
SELECT CAST('T', 'Bool');
SELECT CAST('t', 'Bool');
SELECT cast('test' , 'IPv4');
SELECT cast('test' , 'IPv6');
SELECT CAST('true', 'Bool') format CSV;
SELECT CAST('true', 'Bool') format JSONEachRow;
SELECT CAST('true', 'Bool') format Pretty;
SELECT CAST('true', 'Bool') format TSV;
SELECT CAST('true', 'Bool') format Values;
SELECT CAST('true', 'Bool') format Vertical;
SELECT CAST('True', 'Bool');
SELECT CAST('TrUe', 'Bool');
SELECT CAST('true', 'Bool');
SELECT CAST('Y', 'Bool');
SELECT CAST('y', 'Bool');
SELECT CAST('Yes', 'Bool');
SELECT CAST('yes', 'Bool');
select CAST('{"x" : 1}', 'JSON');
SELECT CAST('{"x" : [ 1 , [ 1 , 2] ]}', 'Object(\'json\')');
SELECT CAST('{"x" : [ {} , [ 1 , 2] ]}', 'Object(\'json\')');
SELECT CAST('{"x" : [ {} , [ 1 , [2]] ]}', 'Object(\'json\')');
SELECT CAST('{"x" : [ {} , [ {} , [2]] ]}', 'Object(\'json\')');
SELECT cast(('1234' AS lhs) AS rhs AS UInt32), rhs;
SELECT cast(('1234' AS lhs) AS UInt32), lhs;
SELECT cast(('1234' AS lhs) rhs AS UInt32), rhs;
SELECT CAST((('a', 1), ('b', 2)), 'Map(String, UInt8)');
SELECT CAST((1, 'Hello') AS Tuple(x UInt64, s String)) AS t, toTypeName(t), t.1, t.2, tupleElement(t, 'x'), tupleElement(t, 's');
SELECT CAST((1, 'Hello', toDate('2016-01-01')) AS String), CAST([1, 2, 3] AS String);
SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.* APPLY toString;
SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.COLUMNS('i') APPLY toString;
SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.COLUMNS('v') APPLY toString;
SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.COLUMNS(id) APPLY toString;
SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.COLUMNS(value) APPLY toString;
SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, value.id, value.value;
SELECT CAST((['1', '2', '3'], ['Ready', 'Steady', 'Go']), 'Map(UInt8, String)') AS map;
SELECT CAST(([1, 2, 3], ['1', '2', 'foo']), 'Map(UInt8, String)') AS map, map[1];
SELECT CAST(-1 * bitShiftLeft(toUInt64(1), 35) AS DateTime64(3, 'Asia/Istanbul'));
SELECT CAST(-1 AS DateTime64(0, 'Asia/Istanbul'));
SELECT CAST(1 as DateTime64('abc'));
SELECT CAST(1 AS Enum('!#$%&(*+,-./:<=>?@[^`{|}~' = 1)) AS a FORMAT Markdown;
SELECT CAST(1 AS Enum8( 'hello' = 1, 'world' = 2));
SELECT cast(1 AS Enum8( 'hello' = 1, 'world' = 2));
SELECT CAST(1 AS Enum8('hello' = 1, 'world' = 2));
SELECT cast(1 AS Enum8('hello' = 1, 'world' = 2));
SELECT CAST(1 AS Int8);
SELECT CAST(1 AS Nullable(UInt8)) AS id WHERE id = 1;
SELECT CAST(1 AS Nullable(UInt8)) AS id WHERE id = CAST(1 AS Nullable(UInt8));
SELECT CAST(1 AS Nullable(UInt8));
SELECT CAST(1 AS UInt8);
SELECT CAST(1, 'Enum8(\'hello\' = 1, \'world\' = 2)');
SELECT cast(1, 'Enum8(\'hello\' = 1, \'world\' = 2)');
SELECT CAST(1, 'Enum8(\'hello\' = 1,\n\t\'world\' = 2)');
SELECT cast(1, 'Enum8(\'hello\' = 1,\n\t\'world\' = 2)');
SELECT CAST(1, 'Int8');
SELECT CAST(1, 'UInt8');
select CAST(1.0, 'Decimal(15,2)') != CAST(-1, 'Float32');
select CAST(1.0, 'Decimal(15,2)') != CAST(-1, 'Float64');
select CAST(1.0, 'Decimal(15,2)') != CAST(1, 'Float32');
select CAST(1.0, 'Decimal(15,2)') != CAST(1, 'Float64');
select CAST(1.0, 'Decimal(15,2)') < CAST(-1, 'Float32');
select CAST(1.0, 'Decimal(15,2)') < CAST(-1, 'Float64');
select CAST(1.0, 'Decimal(15,2)') < CAST(1, 'Float32');
select CAST(1.0, 'Decimal(15,2)') < CAST(1, 'Float64');
select CAST(1.0, 'Decimal(15,2)') = CAST(-1, 'Float32');
select CAST(1.0, 'Decimal(15,2)') = CAST(-1, 'Float64');
select CAST(1.0, 'Decimal(15,2)') = CAST(1, 'Float32');
select CAST(1.0, 'Decimal(15,2)') = CAST(1, 'Float64');
select CAST(1.0, 'Decimal(15,2)') > CAST(-1, 'Float32');
select CAST(1.0, 'Decimal(15,2)') > CAST(-1, 'Float64');
select CAST(1.0, 'Decimal(15,2)') > CAST(1, 'Float32');
select CAST(1.0, 'Decimal(15,2)') > CAST(1, 'Float64');
select CAST(1000000, 'LowCardinality(UInt64)');
SELECT CAST(1111111111.222 AS DateTime64(3, 'Asia/Istanbul'));
SELECT CAST(5 AS IntervalDay);
SELECT CAST(5 AS IntervalHour);
SELECT CAST(5 AS IntervalMicrosecond);
SELECT CAST(5 AS IntervalMillisecond);
SELECT CAST(5 AS IntervalMinute);
SELECT CAST(5 AS IntervalMonth);
SELECT CAST(5 AS IntervalNanosecond);
SELECT CAST(5 AS IntervalQuarter);
SELECT CAST(5 AS IntervalSecond);
SELECT CAST(5 AS IntervalWeek);
SELECT CAST(5 AS IntervalYear);
select cast(7 as String), * from (select number "'String'" FROM numbers(2));
SELECT CAST(['hello'] AS Array(Enum8('hello' = 1))) AS x, (1, CAST('hello' AS Enum8('hello' = 1))) AS y FORMAT PrettyCompactNoEscapes;
SELECT CAST([('a', 1), ('b', 2)], 'Map(String, UInt8)');
SELECT CAST([('abc', 22), ('def', 33)], 'Map(String, UInt8)');
SELECT CAST([('ghj', [('klm', [16, 17])]), ('nop', [('rst', [18])])], 'Map(String, Map(String, Array(UInt8)))');
SELECT CAST([(1, 'Hello'), (2, 'World')] AS Array(Tuple(a UInt64, b String)));
SELECT CAST([(10, [11, 12]), (13, [14, 15])], 'Map(UInt8, Array(UInt8))');
SELECT CAST([] AS Array(Array(Array(String))));
SELECT CAST([] AS Array(Array(String)));
SELECT CAST([] AS Array(UInt8));
SELECT CAST(a, 'Int32') as x, toTypeName(x) FROM (SELECT materialize(CAST(42, 'Nullable(UInt8)')) AS a);
SELECT CAST(a, 'Int32') as x, toTypeName(x) FROM (SELECT materialize(CAST(NULL, 'Nullable(UInt8)')) AS a);
SELECT CAST(a, b -> c) ++;
SELECT CAST(ALow, 'String') AS AStr FROM testView GROUP BY AStr ORDER BY AStr;
SELECT CAST(arrayJoin(['', '2018', '2018-01-02 01:02:03', '2018-01-02T01:02:03', '2018-01-02 01:02:03 abc']) AS Nullable(DateTime));
SELECT CAST(arrayJoin(['', '2018', '2018-01-02', '2018-1-2', '2018-01-2', '2018-1-02', '2018-ab-cd', '2018-01-02a']) AS Nullable(Date));
SELECT CAST(arrayJoin(['', 'abc', '123', '123a', '-123']) AS Nullable(String));
SELECT CAST(arrayJoin(['', 'abc', '123', '123a', '-123']) AS Nullable(UInt8));
SELECT CAST(arrayJoin(['42.1', NULL]) AS Nullable(Decimal(10,2)));
SELECT CAST(arrayJoin([NULL, '', '', NULL, '', NULL, '01.02.2017 03:04\005GMT', '', NULL, '01/02/2017 03:04:05 MSK01/02/\0017 03:04:05 MSK', '', NULL, '03/04/201903/04/201903/04/\001903/04/2019']), 'Enum8(\'a\' = 1, \'b\' = 2)') AS x;
SELECT CAST(bitShiftLeft(toUInt64(1), 35) AS DateTime64(3, 'Asia/Istanbul'));
SELECT CAST(CAST('Hello' AS LowCardinality(Nullable(String))) AS String);
SELECT CAST(CAST('{"x" : 1}', 'Object(\'json\')'), 'Object(Nullable(\'json\'))');
SELECT CAST(CAST('{"x" : 1}', 'Object(Nullable(\'json\'))'), 'Object(\'json\')');
SELECT CAST(CAST(1, 'Nullable(Enum(\'A\' = 1, \'B\' = 2))'), 'Nullable(String)');
SELECT CAST(CAST(2, 'Bool'), 'UInt8');
SELECT CAST(CAST(materialize(2), 'Bool'), 'UInt8');
SELECT CAST(CAST(Null AS LowCardinality(Nullable(String))) AS String);
SELECT CAST(CAST(NULL AS Nullable(FixedString(1))) AS Nullable(Enum8('Hello' = 1)));
SELECT CAST(CAST(Null AS Nullable(String)) AS String);
SELECT CAST(CAST(NULL, 'Nullable(Enum(\'A\' = 1, \'B\' = 2))'), 'Nullable(String)');
select CAST(CAST(NULL, 'Nullable(String)'), 'Nullable(Bool)');
select CAST(CAST(NULL, 'Nullable(String)'), 'Nullable(IPv4)');
select CAST(CAST(NULL, 'Nullable(String)'), 'Nullable(IPv6)');
SELECT CAST(CAST(toDecimal32(2, 2), 'Bool'), 'UInt8');
SELECT CAST(CAST(toFloat32(2), 'Bool'), 'UInt8');
SELECT CAST(CAST(toInt8(2), 'Bool'), 'UInt8');
SELECT CAST(CAST(toUInt32(2), 'Bool'), 'UInt8');
SELECT cast(color,'String') color, timestamp FROM order_test1 GROUP BY color, timestamp ORDER BY color ASC, timestamp DESC;
SELECT cast(color,'String') color, toDateTime(timestamp) AS second FROM order_test1 GROUP BY color, second ORDER BY color ASC, second DESC;
SELECT CAST(database, 'Nullable(String)') AS ndb FROM system.tables WHERE ndb LIKE '%' format Null;
SELECT CAST(database, 'String') AS db FROM system.tables WHERE db LIKE '%' format Null;
SELECT cast(id1 as UInt16) AS cond1 FROM test_02559 PREWHERE cond1 LIMIT 10;
SELECT cast(id1 as UInt16) AS cond1, (id2 % 40000) AS cond2, (cond1 AND cond2) AS cond FROM test_02559 PREWHERE cond AND id2 > 4 LIMIT 10;
SELECT cast(id1 as UInt16) AS cond1, (id2 % 40000) AS cond2, (cond1 AND cond2) AS cond FROM test_02559 PREWHERE cond LIMIT 10;
SELECT cast(id1 as UInt16) AS cond1, (id2 % 40000) AS cond2, (cond1 AND cond2) AS cond FROM test_02559 PREWHERE cond1 AND id2 > 6 AND cond2 LIMIT 10;
SELECT cast(id1 as UInt16) AS cond1, (id2 % 40000) AS cond2, (cond1 AND cond2) AS cond FROM test_02559 PREWHERE id2 > 5 AND cond LIMIT 10;
SELECT cast(id1 as UInt16) AS cond1, (if(id2 > 3, id2, NULL) % 40000) AS cond2, (cond1 AND cond2) AS cond FROM test_02559 PREWHERE cond LIMIT 10;
SELECT CAST(if(1 = 0, toNullable(toInt8(3)), NULL) AS Int32) as x, toTypeName(x);
SELECT CAST(if(1 = 1, toNullable(toInt8(3)), NULL) AS Int32) as x, toTypeName(x);
SELECT CAST(if(number % 2, 'falsefalse', NULL), 'Nullable(Bool)') FROM numbers(2);
SELECT CAST(if(number % 2, 'truetrue', NULL), 'Nullable(Bool)') FROM numbers(2);
SELECT CAST(lc AS String) FROM low_card;
select cast(makeDateTime(1991, 8, 24, 21, 4, 0, 'CET') as DateTime('UTC'));
select cast(makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 7, 'CET') as DateTime64(7, 'UTC'));
SELECT CAST(materialize(1) AS Nullable(UInt8));
SELECT CAST(materialize(CAST(1, 'Nullable(Enum(\'A\' = 1, \'B\' = 2))')), 'Nullable(String)');
SELECT CAST(materialize(CAST(NULL, 'Nullable(Enum(\'A\' = 1, \'B\' = 2))')), 'Nullable(String)');
SELECT cast(nan, 'Float32') AS value, value != value, value != materialize(value), materialize(value) != value, materialize(value) != materialize(value);
SELECT cast(nan, 'Float32') AS value, value = value, value = materialize(value), materialize(value) = value, materialize(value) = materialize(value);
SELECT CAST(Null AS LowCardinality(Nullable(String)));
SELECT CAST(NULL as Nullable(Nothing));
SELECT CAST(NULL AS Nullable(UUID));
SELECT CAST(NULL, 'LowCardinality(Nullable(Int8))');
SELECT CAST(null, 'Nullable(UInt8)') = 1 ? CAST(null, 'Nullable(UInt8)') : -1 AS x, toTypeName(x), dumpColumnStructure(x);
select CAST(number % 2 ? '0.0.0.0' : NULL, 'Nullable(IPv4)') from numbers(2);
select CAST(number % 2 ? '0000:0000:0000:0000:0000:0000:0000:0000' : NULL, 'Nullable(IPv6)') from numbers(2);
select CAST(number % 2 ? 'true' : NULL, 'Nullable(Bool)') from numbers(2);
SELECT CAST(number = 999999 ? NULL : number AS UInt64) FROM system.numbers LIMIT 10;
SELECT cast(number, if(1 = 1, 'UInt64', toString(number))) FROM numbers(5);
SELECT CAST(toDate('2000-01-01') AS DateTime('UTC')) AS x, toTypeName(x);
SELECT CAST(toDate('2000-01-01') AS DateTime64(5, 'UTC')) AS x, toTypeName(x);
select cast(toIntervalDay(1) as Nullable(Decimal(10, 10)));
SELECT CAST(toIPv4('127.0.0.1') as String) as v, toTypeName(v);
SELECT CAST(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001') as String) as v, toTypeName(v);
select CAST(toLowCardinality(val) as UInt64) from (select arrayJoin(['1']) as val);
SELECT CAST(toNullable(toFloat32(2)), 'Float32') as x, toTypeName(x);
SELECT CAST(toNullable(toFloat32(2)), 'UInt8') as x, toTypeName(x);
SELECT CAST(toNullable(toInt32(0)) AS Int32) as x, toTypeName(x);
SELECT CAST(toNullable(toInt32(1)) AS Int32) as x, toTypeName(x);
SELECT CAST(toNullable(toInt8(0)) AS Int32) as x, toTypeName(x);
SELECT CAST(toNullable(toInt8(1)) AS Int32) as x, toTypeName(x);
SELECT CAST(toString(range(number)) AS Array(UInt64)), CAST(toString((number, number * 111)) AS Tuple(UInt64, UInt8)) FROM system.numbers LIMIT 10;
SELECT cast(tuple('0', '1'), 'Tuple(value_1 String, value_2 String)') AS value, number FROM numbers(value.* APPLY x -> toUInt64(x));
SELECT cast(tuple('1'), 'Tuple(value String)') AS value, number FROM numbers(value.* APPLY x -> toUInt64(x));
SELECT cast(tuple('1', '2'), 'Tuple(value_1 String, value_2 String)') AS value, number FROM numbers(value.* APPLY x -> toUInt64(x));
SELECT cast(tuple(0, 1), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, number FROM numbers(untuple(value));
SELECT cast(tuple(0, 1), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, number FROM numbers(value.*);
SELECT cast(tuple(1), 'Tuple(value UInt64)') AS value, number FROM numbers(untuple(value));
SELECT cast(tuple(1), 'Tuple(value UInt64)') AS value, number FROM numbers(value.*);
SELECT cast(tuple(1, 'Value'), 'Tuple(first UInt64, second String)') AS value, value.first, value.second;
SELECT cast(tuple(1, 2), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, number FROM numbers(untuple(value));
SELECT cast(tuple(1, 2), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, number FROM numbers(value.*);
SELECT cast(tuple(1, 2), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value, value.value_1, value.value_2;
select CAST(x, 'Int16') from auto_assign_enum1;
SELECT CAST(x, 'Int16') FROM t_enum16;
select CAST(x, 'Int8') from auto_assign_enum2;
select CAST(x, 'Int8') from auto_assign_enum;
SELECT CAST(x, 'Int8') FROM t_enum8;
SELECT categoricalInformationValue(c1, c2) FROM VALUES((0, 0), (NULL, 1));
SELECT categoricalInformationValue(c1, c2) FROM VALUES((NULL, 1));
SELECT categoricalInformationValue(c1, c2) FROM VALUES((NULL, NULL));
SELECT categoricalInformationValue(c1, c2) FROM VALUES((toNullable(0), 0));
SELECT categoricalInformationValue(dummy, dummy) WHERE 0;
select cbrt(0) = 0;
select cbrt(1) = 1;
select cbrt(8) = 2;
SELECT ccc FROM ( SELECT 1 AS ccc UNION ALL SELECT * FROM ( SELECT 2 AS ccc ) ANY INNER JOIN ( SELECT 2 AS ccc ) USING (ccc) ) WHERE ccc > 1;
select changed from system.settings where name = 'drain_timeout';
select changed from system.settings where name = 'format_avro_schema_registry_url';
select changed from system.settings where name = 'format_csv_delimiter';
select changed from system.settings where name = 'insert_quorum';
select changed from system.settings where name = 'join_algorithm';
select changed from system.settings where name = 'max_alter_threads';
select changed from system.settings where name = 'mysql_max_rows_to_insert';
select changed from system.settings where name = 'output_format_orc_compression_method';
SELECT changed FROM system.settings where name='max_insert_block_size';
SELECT char(-48, 0xB0 + number,-47,-128,-48,-72,-48,-78,-48,-75,-47,-126) AS hello FROM numbers(16);
SELECT char(-48,-65,-47,-128,-48,-72,-48,-78,-48,-75,-47,-126) AS hello;
SELECT char(0xD0, 0xBF, 0xD1, 0x80, 0xD0, 0xB8, 0xD0, 0xB2, 0xD0, 0xB5, 0xD1, 0x82) AS hello;
SELECT char(0xe4, 0xbd, 0xa0, 0xe5, 0xa5, 0xbd) AS hello;
SELECT char(228) AS value, normalizeUTF8NFC(value);
SELECT char(65 + 256, 66 + 1024, 66 + 1024 + 1);
SELECT char(65, 66 + number, 67 + number) from numbers(3);
SELECT child_key, parent_key, child_key FROM data_02233 GROUP BY parent_key, child_key, child_key WITH TOTALS ORDER BY child_key, parent_key ASC NULLS LAST SETTINGS max_threads = 1, optimize_aggregation_in_order = 1;
SELECT child_key, parent_key, child_key FROM data_02233 GROUP BY parent_key, child_key, child_key WITH TOTALS ORDER BY parent_key ASC NULLS LAST SETTINGS max_threads = 1, optimize_aggregation_in_order = 1;
select cityHash64( toString( groupArray (tuple(*) ) )) from ( select brand_id, rack_id, quantity from ( select brand_id, rack_id, quantity, row_number() over (partition by brand_id, rack_id order by quantity) rn from stack ) as t0 where rn <= 2 order by brand_id, rack_id, quantity ) t;
select cityHash64( toString( groupArray (tuple(*) ) )) from ( select brand_id, rack_id, arrayJoin(arraySlice(arraySort(groupArray(quantity)),1,2)) quantity from stack group by brand_id, rack_id order by brand_id, rack_id, quantity ) t;
SELECT cityHash64('abc') IN cityHash64('abc');
SELECT cityHash64(*) FROM (SELECT 1 AS x, x AS y);
SELECT cityHash64(1, 2, materialize('')) AS x1, cityHash64((1, 2), materialize('')) AS x2, cityHash64(1, (2, materialize(''))) AS x3, cityHash64((1, 2, materialize(''))) AS x4;
SELECT cityHash64(1, materialize(2), '') AS x1, cityHash64((1, materialize(2)), '') AS x2, cityHash64(1, (materialize(2), '')) AS x3, cityHash64((1, materialize(2), '')) AS x4;
SELECT cityHash64(1, materialize(2), materialize('')) AS x1, cityHash64((1, materialize(2)), materialize('')) AS x2, cityHash64(1, (materialize(2), materialize(''))) AS x3, cityHash64((1, materialize(2), materialize(''))) AS x4;
SELECT cityHash64(123456);
SELECT cityHash64([(1, 'a'), (2, 'b')]);
SELECT cityHash64([(1, 'c'), (2, 'b')]);
SELECT cityHash64([(1, [(1, (3, 4, [(5, 6), (7, 8)]))]), (2, [])] AS c), toTypeName(c);
SELECT cityHash64(arrayJoin(['abc', 'def'])) IN cityHash64('abc');
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE ((d != toString(1)) > 0) > 0;
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE (-(d != toString(0)) = -1) > 0;
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE (d != '0' AND d != '1');
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE (d = '0' OR d = '1');
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE (d = toString(0)) > 0;
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE 1 = 1;
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE d != '0';
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE d = '0';
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE d = '1';
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE d = toString(0);
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE d IN ('0', '1');
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE exp2((d != toString(0)) != 0) > 1;
SELECT cityHash64(groupArray(d)) FROM enum_pk WHERE exp2(toInt64(d != '1')) > 1;
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE ((x != toString(1)) > 0) > 0;
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE (-(x != toString(0)) = -1) > 0;
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE (x != '0' AND x != '1');
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE (x = '0' OR x = '1');
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE (x = toString(0)) > 0;
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE 1 = 1;
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE exp2((x != toString(0)) != 0) > 1;
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE exp2(toInt64(x != '1')) > 1;
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE x != '0';
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE x = '0';
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE x = '1';
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE x = toString(0);
SELECT cityHash64(groupArray(x)) FROM enum_pk WHERE x IN ('0', '1');
SELECT cityHash64(map(), CAST(materialize('') AS LowCardinality(Nullable(String))));
SELECT cityHash64(map(1, 'a', 2, 'b'));
SELECT cityHash64(map(1, 'c', 2, 'b'));
SELECT cityHash64(map(1, 'Hello'), CAST(materialize('World') AS LowCardinality(String)));
SELECT cityHash64(materialize(1), 2, '') AS x1, cityHash64((materialize(1), 2), '') AS x2, cityHash64(materialize(1), (2, '')) AS x3, cityHash64((materialize(1), 2, '')) AS x4;
SELECT cityHash64(materialize(1), 2, materialize('')) AS x1, cityHash64((materialize(1), 2), materialize('')) AS x2, cityHash64(materialize(1), (2, materialize(''))) AS x3, cityHash64((materialize(1), 2, materialize(''))) AS x4;
SELECT cityHash64(materialize(1), materialize(2), '') AS x1, cityHash64((materialize(1), materialize(2)), '') AS x2, cityHash64(materialize(1), (materialize(2), '')) AS x3, cityHash64((materialize(1), materialize(2), '')) AS x4;
SELECT cityHash64(materialize(1), materialize(2), materialize('')) AS x1, cityHash64((materialize(1), materialize(2)), materialize('')) AS x2, cityHash64(materialize(1), (materialize(2), materialize(''))) AS x3, cityHash64((materialize(1), materialize(2), materialize(''))) AS x4;
SELECT cityHash64(materialize([(1, 'a'), (2, 'b')]));
SELECT cityHash64(materialize([(1, 'c'), (2, 'b')]));
SELECT cityHash64(materialize(map(1, 'a', 2, 'b')));
SELECT cityHash64(materialize(map(1, 'c', 2, 'b')));
SELECT cityHash64(rand() % 1000) as n, groupBitmapState(number) FROM numbers_mt(200000000) GROUP BY n FORMAT Null;
SELECT cityHash64(toDecimal128(128, 24));
SELECT cityHash64(toDecimal128(number, 16)) from numbers(123, 2);
SELECT cityHash64(toDecimal32(32, 2));
SELECT cityHash64(toDecimal32(number, 3)) from numbers(198, 2);
SELECT cityHash64(toDecimal64(64, 5));
SELECT cityHash64(toDecimal64(number, 9)) from numbers(297, 2);
SELECT cityHash64(toString(quantileDeterministicState(number, sipHash64(number)))) FROM numbers(8193);
SELECT cityHash64(toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0')) AS uuid;
select class.key, class.value from aliases_test array join struct as class;
SELECT click_country_id FROM t AS cc LEFT JOIN d ON d.country_id < 99 AND d.id = cc.click_city_id;
SELECT click_country_id FROM t AS cc LEFT JOIN d ON toUInt32(d.id) = cc.click_city_id;
select client_name from system.query_log where current_database = currentDatabase() and query like 'select 1%' format CSV;
select cnt from (select count() cnt from system.one where 0) where cnt = 0;
select cnt from (select count() cnt where 0) where cnt = 0;
SELECT co,co2,co3,num FROM ( SELECT co,co2,co3,count() AS num FROM ( SELECT 1 AS co,2 AS co2 ,3 AS co3 ) GROUP BY cube (co,co2,co3) ) WHERE co!=0 AND co2 !=2;
SELECT COALESCE(), COALESCE(NULL), COALESCE(1, NULL);
SELECT coalesce(), coalesce(NULL), coalesce(NULL, NULL), coalesce(1), coalesce(1, NULL), coalesce(NULL, 1), coalesce(NULL, 1, NULL);
select coalesce(cast('123', 'Decimal(40, 10)'), 0);
select coalesce(cast('123', 'Nullable(Decimal(20, 10))'), 0);
select coalesce(cast('123', 'Nullable(Decimal(40, 10))'), 0);
SELECT coalesce(materialize(NULL), materialize(NULL)) as x, toTypeName(x);
SELECT coalesce(NULL);
SELECT coalesce(NULL, 1);
SELECT coalesce(NULL, 42, NULL, 1);
SELECT coalesce(NULL, NULL) as x, toTypeName(x);
SELECT coalesce(NULL, NULL, 1);
SELECT coalesce(NULL, NULL, NULL);
SELECT coalesce(NULL, toDecimal32(6, 0)), coalesce(NULL, toDecimal64(6, 0)), coalesce(NULL, toDecimal128(6, 0));
SELECT coalesce(NULL, toLowCardinality(toNullable(2))) as x, toTypeName(x);
SELECT coalesce(NULL, toNullable(2)) as x, toTypeName(x);
SELECT coalesce(NULL, toNullable(materialize(2))) as x, toTypeName(x);
SELECT coalesce(NULL, toNullable(toDecimal32(8, 0))), coalesce(NULL, toNullable(toDecimal64(8, 0))), coalesce(NULL, toNullable(toDecimal128(8, 0)));
SELECT coalesce(number % 2 = 0 ? number : NULL, number % 3 = 0 ? number : NULL, 100) AS res, toTypeName(res) FROM system.numbers LIMIT 15;
SELECT coalesce(number % 2 = 0 ? number : NULL, number % 3 = 0 ? number : NULL, number % 5 = 0 ? number : NULL) AS res, toTypeName(res) FROM system.numbers LIMIT 15;
SELECT coalesce(number % 2 = 0 ? number : NULL, number % 3 = 0 ? number : NULL, number) AS res, toTypeName(res) FROM system.numbers LIMIT 15;
SELECT coalesce(toDecimal32(5, 0), NULL), coalesce(toDecimal64(5, 0), NULL), coalesce(toDecimal128(5, 0), NULL);
SELECT coalesce(toLowCardinality(toNullable(1)), NULL) as x, toTypeName(x);
SELECT coalesce(toLowCardinality(toNullable(1)), toLowCardinality(toNullable(2))) as x, toTypeName(x);
SELECT coalesce(toNullable(1), NULL) as x, toTypeName(x);
SELECT coalesce(toNullable(1), toNullable(2)) as x, toTypeName(x);
SELECT coalesce(toNullable(materialize(1)), NULL) as x, toTypeName(x);
SELECT coalesce(toNullable(materialize(1)), toNullable(materialize(2))) as x, toTypeName(x);
SELECT coalesce(toNullable(toDecimal32(7, 0)), NULL), coalesce(toNullable(toDecimal64(7, 0)), NULL), coalesce(toNullable(toDecimal128(7, 0)), NULL);
SELECT col, col LIKE '%a', col ILIKE '%a' FROM tab WHERE col = 'AA';
SELECT col, col LIKE '%a', col ILIKE '%a' FROM tab WHERE col = 'Aa';
SELECT col, mapFilter((k, v) -> ((v % 10) > 1), col) FROM table_map ORDER BY id ASC;
SELECT col1 FROM test1_00395 ORDER BY col1 ASC;
SELECT col1 FROM test1_00395 WHERE col1 IS NOT NULL ORDER BY col1 ASC;
SELECT col1 FROM test1_00395 WHERE col1 IS NULL;
SELECT col1, CASE WHEN col1 IN ('a' ,'b') THEN 1 ELSE 0 END AS t, toTypeName(t) FROM test1_00395;
SELECT col1, CASE WHEN col1 IN ('a' ,'b') THEN 1 END AS t, toTypeName(t) FROM test1_00395;
SELECT col1, CASE WHEN col1 IN ('a' ,'b') THEN NULL ELSE 0 END AS t, toTypeName(t) FROM test1_00395;
SELECT col1, col2, coalesce(col1, col2) FROM test1_00395 ORDER BY col1, col2 ASC;
SELECT col1, col2, coalesce(col1, col2, 99) FROM test1_00395 ORDER BY col1, col2 ASC;
SELECT col1, col2, col1 + col2, col1 * 7 FROM test1_00395 ORDER BY col1,col2 ASC;
SELECT col1, col2, col3 FROM table_with_defaults_on_aliases WHERE col1 = 1;
SELECT col1, col2, col3, col4 FROM table_with_defaults_on_aliases WHERE col1 = 2;
SELECT col1, col2, col3, col4, col5 FROM table_with_defaults_on_aliases WHERE col1 = 3;
SELECT col1, col2, col3, count() FROM test1_00395 GROUP BY col1, col2, col3 ORDER BY col1, col2, col3;
SELECT col1, col2, count() FROM test1_00395 GROUP BY col1, col2 ORDER BY col1, col2;
SELECT col1, col2, ifNull(col1,col2) FROM test1_00395 ORDER BY col1,col2 ASC;
SELECT col1, col2, isNull(col1), isNotNull(col2) FROM test1_00395 ORDER BY col1,col2 ASC;
SELECT col1, col2, nullIf(col1,col2) FROM test1_00395 ORDER BY col1,col2 ASC;
SELECT col1, count() FROM test1_00395 GROUP BY col1 ORDER BY col1;
SELECT col1, if(col1 IN ('a' ,'b'), 1, 0) AS t, toTypeName(t) FROM test1_00395;
SELECT col1, if(col1 IN ('a' ,'b'), NULL, 0) AS t, toTypeName(t) FROM test1_00395;
SELECT col1,col2 FROM test2 ORDER BY col1,col2 ASC;
SELECT col1.a FROM nested FORMAT Null;
SELECT col1.a, col1.s FROM nested;
SELECT col2.a, col2.n, col2.n.s, col2.n.b FROM nested;
SELECT col3 FROM table_with_defaults_on_aliases;
select col3, col4 from defaulted;
SELECT col3.n1, col3.n2, col3.n1.a, col3.n1.b, col3.n2.s, col3.n2.t FROM nested;
SELECT col3.n2.s FROM nested FORMAT Null;
select colAlias0, colAlias1, colAlias2, colAlias3 from alias_1;
select colAlias0, colAlias1, colAlias2, colAlias3 from alias_2;
SELECT colAlias0, colAlias2, colAlias3 FROM alias_2__fuzz_25;
select colAlias3, colAlias2, colAlias1, colAlias0 from merge order by dt;
select colAlias3, colAlias2, colAlias1, colAlias0 from merge;
SELECT color, toDateTime(timestamp) AS second FROM order_test1 GROUP BY color, second ORDER BY color ASC, second DESC;
SELECT column FROM temporary_table ORDER BY column;
SELECT column, (SELECT d from (select [1, 2, 3, 4] as d)) as d FROM TestTable where column == 'test' GROUP BY column;
SELECT column, serialization_kind FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_alter' AND active ORDER BY column;
SELECT column, serialization_kind FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_columns_clear' AND active ORDER BY column;
SELECT column, serialization_kind FROM system.parts_columns WHERE table = 't_sparse' AND database = currentDatabase() ORDER BY column, serialization_kind;
SELECT column, serialization_kind FROM system.parts_columns WHERE table = 't_sparse' AND database = currentDatabase() ORDER BY column;
SELECT column, serialization_kind FROM system.parts_columns WHERE table = 't_sparse_detach' AND database = currentDatabase() AND active ORDER BY column;
SELECT column, serialization_kind FROM system.parts_columns WHERE table = 't_sparse_full' AND database = currentDatabase() AND active ORDER BY name, column;
SELECT column, subcolumns.names, subcolumns.types, subcolumns.serializations FROM system.parts_columns WHERE table = 'sparse_tuple' AND database = currentDatabase() ORDER BY column;
SELECT column, type, column_position FROM system.parts_columns WHERE database = currentDatabase() AND table = 'test';
SELECT column_default, column_codec, column_ttl FROM r_prop_table1 ORDER BY column_ttl;
SELECT column_default, column_materialized, column_alias, column_codec, column_comment, column_ttl FROM prop_table ORDER BY column_ttl;
SELECT column_default, column_materialized, column_alias, column_codec, column_comment, column_ttl FROM prop_table;
SELECT COLUMNS('') FROM numbers(2);
SELECT COLUMNS('[jk]') APPLY(toString) APPLY(length) from columns_transformers;
SELECT COLUMNS('a') + COLUMNS('a') FROM (SELECT 1 AS a, 2 AS b);
SELECT COLUMNS('a|b') + COLUMNS('b') FROM (SELECT 1 AS a, 2 AS b);
SELECT COLUMNS('b') + COLUMNS('b') FROM (SELECT 1 AS a, 2 AS b);
SELECT COLUMNS('d');
SELECT COLUMNS('i'), COLUMNS('v') FROM test_table;
SELECT COLUMNS('id') FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;
SELECT COLUMNS('n') + COLUMNS('u') FROM (SELECT 1 AS a, 2 AS b);
SELECT COLUMNS('n') + COLUMNS('u') FROM system.numbers LIMIT 2;
SELECT COLUMNS('product.*') from ColumnsClauseTest ORDER BY product_price;
SELECT COLUMNS('test') FROM (SELECT 1 AS id, 'a' AS test) a LEFT JOIN (SELECT 1 AS id, 'b' AS test) b ON b.id = a.id LEFT JOIN (SELECT 1 AS id, 'c' AS test) c ON c.id = a.id;
SELECT COLUMNS('value') FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;
SELECT COLUMNS('x') FROM numbers(10) WHERE number > 5;
SELECT COLUMNS(dummy);
SELECT COLUMNS(id) FROM test_table;
SELECT COLUMNS(id), COLUMNS(value) FROM test_table;
SELECT COLUMNS(id, value) EXCEPT (id) APPLY toString FROM test_table;
SELECT COLUMNS(id, value) EXCEPT (id) FROM test_table;
SELECT COLUMNS(id, value) EXCEPT id REPLACE (5 AS id, 6 as value) APPLY toString FROM test_table;
SELECT COLUMNS(id, value) REPLACE (5 AS id) FROM test_table;
SELECT COLUMNS(id, value) REPLACE (5 AS id, 6 as value) FROM test_table;
select columns.5, columns.6 from file(strings1_02735.parquet, ParquetMetadata) array join columns;
select columns.5, columns.6 from file(strings2_02735.parquet, ParquetMetadata) array join columns;
select columns.5, columns.6 from file(strings3_02735.parquet, ParquetMetadata) array join columns;
SELECT columns_transformers.* APPLY(avg) from columns_transformers;
SELECT columns_transformers.* EXCEPT(j) APPLY(avg) from columns_transformers;
SELECT columns_transformers.* REPLACE(j + 1 AS j, j + 2 AS j) APPLY(avg) from columns_transformers;
SELECT columns_transformers.* REPLACE(j + 2 AS j, i + 1 AS i) APPLY(avg) from columns_transformers;
SELECT command FROM system.mutations WHERE database = currentDatabase() AND table = 't_mutations_nondeterministic' AND is_done ORDER BY command;
select command from system.mutations where table='02681_undrop_detach' and database=currentDatabase() limit 1;
SELECT command, is_done FROM system.mutations WHERE database = currentDatabase() AND table = 't_light';
SELECT comment FROM system.dictionaries WHERE name == '2024_dictionary_with_comment' AND database == currentDatabase();
SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
SELECT compression_codec FROM system.columns WHERE database = currentDatabase() AND table = 'alter_compression_codec' AND name = 'alter_column';
SELECT compression_codec FROM system.columns WHERE database = currentDatabase() AND table = 'delta_codec_for_alter' AND name = 'x';
SELECT compression_codec FROM system.columns WHERE database = currentDatabase() AND table = 'large_alter_table_00804' AND name = 'data';
SELECT compression_codec FROM system.columns WHERE table = 'alter_compression_codec1' AND name = 'alter_column' AND database = currentDatabase();
SELECT compression_codec FROM system.columns WHERE table = 'alter_compression_codec2' AND name = 'alter_column' AND database = currentDatabase();
SELECT concat('', toString(toDateTime('2018-09-19 00:00:00', 'Asia/Tehran') + INTERVAL number * 300 SECOND)) AS k FROM numbers(1000) GROUP BY k HAVING count() > 1 ORDER BY k;
SELECT concat('42', materialize(NULL :: Nullable(UInt64)));
SELECT concat('42', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
select concat('a', 'b') == 'ab' from system.numbers limit 5;
select concat('a', 'b') == 'ab';
select concat('a', 'b', 'c') == 'abc' from system.numbers limit 5;
select concat('a', 'b', 'c') == 'abc';
select concat('a', 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select concat('a', 'b', materialize('c')) == 'abc';
select concat('a', 'b', materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat('a', 'b', materialize(toFixedString('c', 1))) == 'abc';
select concat('a', 'b', toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat('a', 'b', toFixedString('c', 1)) == 'abc';
select concat('a', materialize('b')) == 'ab' from system.numbers limit 5;
select concat('a', materialize('b')) == 'ab';
select concat('a', materialize('b'), 'c') == 'abc' from system.numbers limit 5;
select concat('a', materialize('b'), 'c') == 'abc';
select concat('a', materialize('b'), materialize('c')) == 'abc' from system.numbers limit 5;
select concat('a', materialize('b'), materialize('c')) == 'abc';
select concat('a', materialize('b'), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat('a', materialize('b'), materialize(toFixedString('c', 1))) == 'abc';
select concat('a', materialize('b'), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat('a', materialize('b'), toFixedString('c', 1)) == 'abc';
select concat('a', materialize(toFixedString('b', 1))) == 'ab' from system.numbers limit 5;
select concat('a', materialize(toFixedString('b', 1))) == 'ab';
select concat('a', materialize(toFixedString('b', 1)), 'c') == 'abc' from system.numbers limit 5;
select concat('a', materialize(toFixedString('b', 1)), 'c') == 'abc';
select concat('a', materialize(toFixedString('b', 1)), materialize('c')) == 'abc' from system.numbers limit 5;
select concat('a', materialize(toFixedString('b', 1)), materialize('c')) == 'abc';
select concat('a', materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat('a', materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc';
select concat('a', materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat('a', materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc';
select concat('a', toFixedString('b', 1)) == 'ab' from system.numbers limit 5;
select concat('a', toFixedString('b', 1)) == 'ab';
select concat('a', toFixedString('b', 1), 'c') == 'abc' from system.numbers limit 5;
select concat('a', toFixedString('b', 1), 'c') == 'abc';
select concat('a', toFixedString('b', 1), materialize('c')) == 'abc' from system.numbers limit 5;
select concat('a', toFixedString('b', 1), materialize('c')) == 'abc';
select concat('a', toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat('a', toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc';
select concat('a', toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat('a', toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
SELECT concat('foo');
SELECT concat('Hello, ', unhex('a0'), ' World') AS s1, concat('Hello, ', unhex('a0')) AS s2, concat(unhex('a0'), ' World') AS s3 FORMAT JSONCompact;
SELECT concat('http://reddit.com/r/', subreddit, '/comments/', replaceRegexpOne(link_id, 't[0-9]_', '')) FROM ( SELECT y, subreddit, link_id, cnt FROM ( SELECT created_date AS y, link_id, subreddit, count(*) AS cnt FROM commententry1 WHERE toYear(created_date) = 2016 GROUP BY y, link_id, subreddit ORDER BY y ASC ) ORDER BY y ASC, cnt DESC LIMIT 1 BY y );
select concat('name_', toString(number)) as name, number from numbers(3) format JSONObjectEachRow;
SELECT CONCAT('Testing the ', 'alias');
select concat('third', 'first', 'second')=format('{2}{0}{1}', 'first', 'second', 'third');
SELECT concat('Three ', 'arguments', ' test');
SELECT concat('Two arguments ', 'test');
SELECT concat('With ', attrs.k, attrs.v) FROM concat_nested_test;
SELECT concat('With ', materialize('122.233.64.201' :: IPv4));
SELECT concat('With ', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :: IPv6));
SELECT concat('With ', materialize('2023-11-14 05:50:12' :: DateTime('Europe/Amsterdam')));
SELECT concat('With ', materialize('2023-11-14 05:50:12.123' :: DateTime64(3, 'Europe/Amsterdam')));
SELECT concat('With ', materialize('2023-11-14' :: Date));
SELECT concat('With ', materialize('2123-11-14' :: Date32));
SELECT concat('With ', materialize('bar' :: FixedString(3)));
SELECT concat('With ', materialize('bar' :: LowCardinality(FixedString(3))));
SELECT concat('With ', materialize('bar' :: LowCardinality(Nullable(FixedString(3)))));
SELECT concat('With ', materialize('bar' :: Nullable(FixedString(3))));
SELECT concat('With ', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :: UUID));
SELECT concat('With ', materialize('foo' :: LowCardinality(Nullable(String))));
SELECT concat('With ', materialize('foo' :: LowCardinality(String)));
SELECT concat('With ', materialize('foo' :: Nullable(String)));
SELECT concat('With ', materialize('foo' :: String));
SELECT concat('With ', materialize('hallo' :: Enum('hallo' = 1)));
SELECT concat('With ', materialize('{"foo": "bar"}' :: JSON));
SELECT concat('With ', materialize((42, 'foo') :: Tuple(Int32, String)));
SELECT concat('With ', materialize((42, 43) :: Point));
SELECT concat('With ', materialize(42 :: Int8));
SELECT concat('With ', materialize(42 :: LowCardinality(Nullable(UInt32))));
SELECT concat('With ', materialize(42 :: LowCardinality(UInt32)));
SELECT concat('With ', materialize(42.42 :: Float32));
SELECT concat('With ', materialize(43 :: Int16));
SELECT concat('With ', materialize(43.43 :: Float64));
SELECT concat('With ', materialize(44 :: Int32));
SELECT concat('With ', materialize(44.44 :: Decimal(2)));
SELECT concat('With ', materialize(45 :: Int64));
SELECT concat('With ', materialize(46 :: Int128));
SELECT concat('With ', materialize(47 :: Int256));
SELECT concat('With ', materialize(48 :: UInt8));
SELECT concat('With ', materialize(49 :: UInt16));
SELECT concat('With ', materialize(50 :: UInt32));
SELECT concat('With ', materialize(51 :: UInt64));
SELECT concat('With ', materialize(52 :: UInt128));
SELECT concat('With ', materialize(53 :: UInt256));
SELECT concat('With ', materialize(['foo', 'bar'] :: Array(String)));
SELECT concat('With ', materialize([(0,0),(10,0),(10,10),(0,10)] :: Ring));
SELECT concat('With ', materialize([[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]] :: Polygon));
SELECT concat('With ', materialize([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]] :: MultiPolygon));
SELECT concat('With ', materialize(false :: Bool));
SELECT concat('With ', materialize(map(42, 'foo') :: Map(Int32, String)));
SELECT concat('With ', materialize(true :: Bool));
SELECT concat('With ', x) FROM concat_saf_test ORDER BY x DESC;
SELECT concat('xyz', 'abc'), * FROM (SELECT 2 AS "'xyz'");
SELECT concat();
SELECT concat(42);
SELECT concat(42, 144);
SELECT concat(42, 144, 255);
SELECT concat(42, materialize(NULL :: Nullable(UInt64)));
SELECT concat(42, materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
SELECT concat([], ['Hello'], []);
SELECT concat(concat(toString(id), '_'), (value)) FROM test_table;
SELECT concat(func.name, comb.name) AS x FROM system.functions AS func JOIN system.aggregate_function_combinators AS comb using name WHERE is_aggregate settings allow_experimental_analyzer=1;
SELECT concat(map('key5', 500), map('key6', 600));
select concat(materialize('a'), 'b') == 'ab' from system.numbers limit 5;
select concat(materialize('a'), 'b') == 'ab';
select concat(materialize('a'), 'b', 'c') == 'abc' from system.numbers limit 5;
select concat(materialize('a'), 'b', 'c') == 'abc';
select concat(materialize('a'), 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), 'b', materialize('c')) == 'abc';
select concat(materialize('a'), 'b', materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), 'b', materialize(toFixedString('c', 1))) == 'abc';
select concat(materialize('a'), 'b', toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), 'b', toFixedString('c', 1)) == 'abc';
select concat(materialize('a'), materialize('b')) == 'ab' from system.numbers limit 5;
select concat(materialize('a'), materialize('b')) == 'ab';
select concat(materialize('a'), materialize('b'), 'c') == 'abc' from system.numbers limit 5;
select concat(materialize('a'), materialize('b'), 'c') == 'abc';
select concat(materialize('a'), materialize('b'), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), materialize('b'), materialize('c')) == 'abc';
select concat(materialize('a'), materialize('b'), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), materialize('b'), materialize(toFixedString('c', 1))) == 'abc';
select concat(materialize('a'), materialize('b'), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), materialize('b'), toFixedString('c', 1)) == 'abc';
select concat(materialize('a'), materialize(toFixedString('b', 1))) == 'ab' from system.numbers limit 5;
select concat(materialize('a'), materialize(toFixedString('b', 1))) == 'ab';
select concat(materialize('a'), materialize(toFixedString('b', 1)), 'c') == 'abc' from system.numbers limit 5;
select concat(materialize('a'), materialize(toFixedString('b', 1)), 'c') == 'abc';
select concat(materialize('a'), materialize(toFixedString('b', 1)), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), materialize(toFixedString('b', 1)), materialize('c')) == 'abc';
select concat(materialize('a'), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc';
select concat(materialize('a'), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc';
select concat(materialize('a'), toFixedString('b', 1)) == 'ab' from system.numbers limit 5;
select concat(materialize('a'), toFixedString('b', 1)) == 'ab';
select concat(materialize('a'), toFixedString('b', 1), 'c') == 'abc' from system.numbers limit 5;
select concat(materialize('a'), toFixedString('b', 1), 'c') == 'abc';
select concat(materialize('a'), toFixedString('b', 1), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), toFixedString('b', 1), materialize('c')) == 'abc';
select concat(materialize('a'), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc';
select concat(materialize('a'), toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize('a'), toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
SELECT concat(materialize('foo'));
SELECT concat(materialize('Non-const'), materialize(' strings'));
SELECT concat(materialize(3 :: Int64), ' arguments test', ' with int type');
SELECT concat(materialize(42 :: Int32), materialize(144 :: UInt64));
SELECT concat(materialize(42 :: Int32), materialize(144 :: UInt64), materialize(255 :: UInt32));
SELECT concat(materialize(42));
SELECT concat(materialize(NULL :: Nullable(UInt64)));
SELECT concat(materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
select concat(materialize(toFixedString('a', 1)), 'b') == 'ab' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), 'b') == 'ab';
select concat(materialize(toFixedString('a', 1)), 'b', 'c') == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), 'b', 'c') == 'abc';
select concat(materialize(toFixedString('a', 1)), 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), 'b', materialize('c')) == 'abc';
select concat(materialize(toFixedString('a', 1)), 'b', materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), 'b', materialize(toFixedString('c', 1))) == 'abc';
select concat(materialize(toFixedString('a', 1)), 'b', toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), 'b', toFixedString('c', 1)) == 'abc';
select concat(materialize(toFixedString('a', 1)), materialize('b')) == 'ab' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize('b')) == 'ab';
select concat(materialize(toFixedString('a', 1)), materialize('b'), 'c') == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize('b'), 'c') == 'abc';
select concat(materialize(toFixedString('a', 1)), materialize('b'), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize('b'), materialize('c')) == 'abc';
select concat(materialize(toFixedString('a', 1)), materialize('b'), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize('b'), materialize(toFixedString('c', 1))) == 'abc';
select concat(materialize(toFixedString('a', 1)), materialize('b'), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize('b'), toFixedString('c', 1)) == 'abc';
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1))) == 'ab' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1))) == 'ab';
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), 'c') == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), 'c') == 'abc';
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), materialize('c')) == 'abc';
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc';
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc';
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1)) == 'ab' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1)) == 'ab';
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), 'c') == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), 'c') == 'abc';
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), materialize('c')) == 'abc';
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc';
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(materialize(toFixedString('a', 1)), toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
SELECT concat(NULL);
SELECT concat(NULL, materialize(NULL :: Nullable(UInt64)));
SELECT concat(NULL, NULL);
SELECT CONCAT(number > 5 ? 'censor.net' : 'google', '1') FROM system.numbers LIMIT 10;
select concat(toFixedString('a', 1), 'b') == 'ab' from system.numbers limit 5;
select concat(toFixedString('a', 1), 'b') == 'ab';
select concat(toFixedString('a', 1), 'b', 'c') == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), 'b', 'c') == 'abc';
select concat(toFixedString('a', 1), 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), 'b', materialize('c')) == 'abc';
select concat(toFixedString('a', 1), 'b', materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), 'b', materialize(toFixedString('c', 1))) == 'abc';
select concat(toFixedString('a', 1), 'b', toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), 'b', toFixedString('c', 1)) == 'abc';
select concat(toFixedString('a', 1), materialize('b')) == 'ab' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize('b')) == 'ab';
select concat(toFixedString('a', 1), materialize('b'), 'c') == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize('b'), 'c') == 'abc';
select concat(toFixedString('a', 1), materialize('b'), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize('b'), materialize('c')) == 'abc';
select concat(toFixedString('a', 1), materialize('b'), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize('b'), materialize(toFixedString('c', 1))) == 'abc';
select concat(toFixedString('a', 1), materialize('b'), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize('b'), toFixedString('c', 1)) == 'abc';
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1))) == 'ab' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1))) == 'ab';
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1)), 'c') == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1)), 'c') == 'abc';
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1)), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1)), materialize('c')) == 'abc';
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc';
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc';
select concat(toFixedString('a', 1), toFixedString('b', 1)) == 'ab' from system.numbers limit 5;
select concat(toFixedString('a', 1), toFixedString('b', 1)) == 'ab';
select concat(toFixedString('a', 1), toFixedString('b', 1), 'c') == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), toFixedString('b', 1), 'c') == 'abc';
select concat(toFixedString('a', 1), toFixedString('b', 1), materialize('c')) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), toFixedString('b', 1), materialize('c')) == 'abc';
select concat(toFixedString('a', 1), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc';
select concat(toFixedString('a', 1), toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select concat(toFixedString('a', 1), toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
SELECT concat(toString(number % 256 AS n), '') AS s, n, max(s) FROM system.numbers_mt GROUP BY s, n, n, n, n, n, n, n, n, n ORDER BY s, n;
SELECT concat(toString(number), arrayStringConcat(arrayMap(x -> '.', range(number % 10)))) AS k FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_10_00290) WHERE number < (randConstant() % 2 ? 4999 : 10000) GROUP BY k ORDER BY k LIMIT 10;
SELECT CONCAT(transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other'), '1') FROM system.numbers LIMIT 10;
select concatWithSeparator('1', 'a', null) == null;
select concatWithSeparator('1', null, 'b') == null;
select concatWithSeparator('|', 'a', 'b') == 'a|b';
select concatWithSeparator('|', 'a', materialize('b')) == 'a|b';
select concatWithSeparator('|', 'a', materialize(toFixedString('b', 1))) == 'a|b';
select concatWithSeparator('|', 'a', toFixedString('b', 1)) == 'a|b';
select concatWithSeparator('|', materialize('a'), 'b') == 'a|b';
select concatWithSeparator('|', materialize('a'), materialize('b')) == 'a|b';
select concatWithSeparator('|', materialize('a'), materialize(toFixedString('b', 1))) == 'a|b';
select concatWithSeparator('|', materialize('a'), toFixedString('b', 1)) == 'a|b';
select concatWithSeparator('|', materialize(toFixedString('a', 1)), 'b') == 'a|b';
select concatWithSeparator('|', materialize(toFixedString('a', 1)), materialize('b')) == 'a|b';
select concatWithSeparator('|', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1))) == 'a|b';
select concatWithSeparator('|', materialize(toFixedString('a', 1)), toFixedString('b', 1)) == 'a|b';
select concatWithSeparator('|', toFixedString('a', 1), 'b') == 'a|b';
select concatWithSeparator('|', toFixedString('a', 1), materialize('b')) == 'a|b';
select concatWithSeparator('|', toFixedString('a', 1), materialize(toFixedString('b', 1))) == 'a|b';
select concatWithSeparator('|', toFixedString('a', 1), toFixedString('b', 1)) == 'a|b';
select concatWithSeparator(materialize('|'), 'a', 'b');
select concatWithSeparator(null, 'a', 'b') == null;
SELECT cond_non_constant ? constant_null : constant_null AS res FROM nullable_00431;
SELECT cond_non_constant ? constant_null : else_constant AS res FROM nullable_00431;
SELECT cond_non_constant ? constant_null : else_non_constant AS res FROM nullable_00431;
SELECT cond_non_constant ? constant_null : else_non_constant_nullable AS res FROM nullable_00431;
SELECT cond_non_constant ? then_constant : constant_null AS res FROM nullable_00431;
SELECT cond_non_constant ? then_constant : else_constant AS res FROM nullable_00431;
SELECT cond_non_constant ? then_constant : else_non_constant AS res FROM nullable_00431;
SELECT cond_non_constant ? then_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT cond_non_constant ? then_non_constant : constant_null AS res FROM nullable_00431;
SELECT cond_non_constant ? then_non_constant : else_constant AS res FROM nullable_00431;
SELECT cond_non_constant ? then_non_constant : else_non_constant AS res FROM nullable_00431;
SELECT cond_non_constant ? then_non_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT cond_non_constant ? then_non_constant_nullable : constant_null AS res FROM nullable_00431;
SELECT cond_non_constant ? then_non_constant_nullable : else_constant AS res FROM nullable_00431;
SELECT cond_non_constant ? then_non_constant_nullable : else_non_constant AS res FROM nullable_00431;
SELECT cond_non_constant ? then_non_constant_nullable : else_non_constant_nullable AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? constant_null : constant_null AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? constant_null : else_constant AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? constant_null : else_non_constant AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? constant_null : else_non_constant_nullable AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_constant : constant_null AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_constant : else_constant AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_constant : else_non_constant AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_non_constant : constant_null AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_non_constant : else_constant AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_non_constant : else_non_constant AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_non_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_non_constant_nullable : constant_null AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_non_constant_nullable : else_constant AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_non_constant_nullable : else_non_constant AS res FROM nullable_00431;
SELECT cond_non_constant_nullable ? then_non_constant_nullable : else_non_constant_nullable AS res FROM nullable_00431;
SELECT connection_id(), CONNECTION_ID(), CoNnEcTiOn_Id(), connectionid(), CONNECTIONID(), CoNnEcTiOnId();
SELECT constant_false ? constant_null : constant_null AS res FROM nullable_00431;
SELECT constant_false ? constant_null : else_constant AS res FROM nullable_00431;
SELECT constant_false ? constant_null : else_non_constant AS res FROM nullable_00431;
SELECT constant_false ? constant_null : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_false ? then_constant : constant_null AS res FROM nullable_00431;
SELECT constant_false ? then_constant : else_constant AS res FROM nullable_00431;
SELECT constant_false ? then_constant : else_non_constant AS res FROM nullable_00431;
SELECT constant_false ? then_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_false ? then_non_constant : constant_null AS res FROM nullable_00431;
SELECT constant_false ? then_non_constant : else_constant AS res FROM nullable_00431;
SELECT constant_false ? then_non_constant : else_non_constant AS res FROM nullable_00431;
SELECT constant_false ? then_non_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_false ? then_non_constant_nullable : constant_null AS res FROM nullable_00431;
SELECT constant_false ? then_non_constant_nullable : else_constant AS res FROM nullable_00431;
SELECT constant_false ? then_non_constant_nullable : else_non_constant AS res FROM nullable_00431;
SELECT constant_false ? then_non_constant_nullable : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_null ? constant_null : constant_null AS res FROM nullable_00431;
SELECT constant_null ? constant_null : else_constant AS res FROM nullable_00431;
SELECT constant_null ? constant_null : else_non_constant AS res FROM nullable_00431;
SELECT constant_null ? constant_null : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_null ? then_constant : constant_null AS res FROM nullable_00431;
SELECT constant_null ? then_constant : else_constant AS res FROM nullable_00431;
SELECT constant_null ? then_constant : else_non_constant AS res FROM nullable_00431;
SELECT constant_null ? then_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant : constant_null AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant : else_constant AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant : else_non_constant AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant_nullable : constant_null AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant_nullable : else_constant AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant_nullable : else_non_constant AS res FROM nullable_00431;
SELECT constant_null ? then_non_constant_nullable : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_true ? constant_null : constant_null AS res FROM nullable_00431;
SELECT constant_true ? constant_null : else_constant AS res FROM nullable_00431;
SELECT constant_true ? constant_null : else_non_constant AS res FROM nullable_00431;
SELECT constant_true ? constant_null : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_true ? then_constant : constant_null AS res FROM nullable_00431;
SELECT constant_true ? then_constant : else_constant AS res FROM nullable_00431;
SELECT constant_true ? then_constant : else_non_constant AS res FROM nullable_00431;
SELECT constant_true ? then_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_true ? then_non_constant : constant_null AS res FROM nullable_00431;
SELECT constant_true ? then_non_constant : else_constant AS res FROM nullable_00431;
SELECT constant_true ? then_non_constant : else_non_constant AS res FROM nullable_00431;
SELECT constant_true ? then_non_constant : else_non_constant_nullable AS res FROM nullable_00431;
SELECT constant_true ? then_non_constant_nullable : constant_null AS res FROM nullable_00431;
SELECT constant_true ? then_non_constant_nullable : else_constant AS res FROM nullable_00431;
SELECT constant_true ? then_non_constant_nullable : else_non_constant AS res FROM nullable_00431;
SELECT constant_true ? then_non_constant_nullable : else_non_constant_nullable AS res FROM nullable_00431;
SELECT contingency(1, [1, NULL]);
SELECT corr(1, NULL);
SELECT corr(c1, c2) FROM VALUES((0, 0), (NULL, 2), (1, 0), (1, 1));
SELECT corr(NULL, 1);
SELECT corr(NULL, NULL);
SELECT corr(x_value, y_value) FROM (SELECT x_value, y_value FROM series LIMIT 1);
SELECT corrMatrix(a_value) FROM (select a_value from fh limit 0);
SELECT corrMatrix(a_value) FROM (select a_value from fh limit 1);
SELECT corrMatrix(a_value, b_value, c_value, d_value) FROM (select a_value, b_value, c_value, d_value from fh limit 0);
SELECT corrMatrix(a_value, b_value, c_value, d_value) FROM (select a_value, b_value, c_value, d_value from fh limit 1);
SELECT corrStable(x_value, y_value) FROM (SELECT x_value, y_value FROM series LIMIT 1);
select cos(0) = 1;
select cos(pi() / 2) < 1.0e-9;
select cosh(0) = 1;
select cosh(1) = cosh(-1);
SELECT cosineDistance((1, 0), (0.5, sqrt(3) / 2));
SELECT cosineDistance((1, 1), (-1, -1));
SELECT cosineDistance((1, 1), materialize((-3, 3.0)));
SELECT cosineDistance((1, 2), (2, 3, 4));
SELECT cosineDistance((NULL, 1), (NULL, NULL));
SELECT cosineDistance([1, 2, 3], [0, 0, 0]);
SELECT cosineDistance([1, 2, 3], [3, 5, 7]);
SELECT cosineDistance([3, 2, 1], v) FROM vec1;
SELECT cosineDistance(materialize((1, 1)), (2, 2));
SELECT cosineDistance(v, materialize([1., 1., 1.])) FROM vec1;
SELECT count('') AND NULL FROM d PREWHERE ceil(j) <= NULL;
SELECT count('special query for 01290_max_execution_speed_distributed') FROM remote('127.0.0.{2,3}', numbers(1000000));
SELECT count((t, x_0, x_1) -> ((key_2, x_0, x_1) IN (NULL, NULL, '0.3'))) FROM numbers(10);
SELECT count() FROM system.tables AS t JOIN system.databases AS db ON db.name = t.database WHERE t.name = 'one';
select count() != 0 from dst1;
select count() != 0 from dst2;
select count() != 0 from shard_0.tbl;
select count() != 0 from shard_1.tbl;
SELECT count() * 2 FROM count;
select count() + 1 from m3;
SELECT count() + 1 FROM remote('127.0.0.{2,3}', system, one);
SELECT count() / 2 FROM remote('127.0.0.{1,2}', currentDatabase(), count);
SELECT count() = 1 FROM null_in__fuzz_6 PREWHERE 71 WHERE i IN (test_set);
SELECT count() = 1 FROM t1 CROSS JOIN t2 WHERE t1.x > t2.x;
SELECT count() = 1 FROM t1, t2 WHERE t1.x > t2.x;
SELECT COUNT() = 10 FROM test_table WHERE day = '2020-01-01' SETTINGS max_rows_to_read = 10;
SELECT COUNT() = 10 FROM test_table WHERE day = '2020-01-01' UNION ALL SELECT 1 FROM numbers(1) SETTINGS max_rows_to_read = 11;
SELECT COUNT() = 10 FROM test_table WHERE day1 = '2020-01-02' SETTINGS max_rows_to_read = 10;
SELECT COUNT() = 10 FROM test_table WHERE day1 = '2020-01-03' UNION ALL SELECT 1 FROM numbers(1) SETTINGS max_rows_to_read = 11;
SELECT count() = 2 FROM t1 CROSS JOIN t2 WHERE t1.x = t2.x;
SELECT count() = 2 FROM t1, t2 WHERE t1.x = t2.x;
SELECT count() = 200000 FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_100k_log) GROUP BY number WITH TOTALS ORDER BY number LIMIT 10;
select count() = sequenceCount('')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select count() = sequenceCount('.')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
select count() = sequenceCount('.*')(time, data = 0, data = 1, data = 2, data = 3) from sequence_test;
SELECT count() == 0 FROM (EXPLAIN PIPELINE SELECT * FROM ( SELECT 'a' AS key ) AS t1 INNER JOIN ( SELECT 'a' AS key ) AS t2 ON t1.key = t2.key ) WHERE explain ilike '%FilterBySetOnTheFlyTransform%' ;
SELECT count() == 0 FROM (SELECT '33.3' :: Decimal(9, 1) AS a WHERE a IN ('33.33' :: Decimal(9, 2)));
SELECT count() == 0 FROM dtest WHERE a IN toDecimal128('33.3000', 4);
SELECT count() == 0 FROM dtest WHERE a IN toDecimal256('33.3000', 4);
SELECT count() == 0 FROM dtest WHERE a IN toDecimal32('33.3000', 4);
SELECT count() == 0 FROM dtest WHERE a IN toDecimal64('33.3000', 4);
SELECT count() == 0 FROM dtest WHERE b IN toDecimal128('44.4000', 0);
SELECT count() == 0 FROM dtest WHERE b IN toDecimal256('44.4000', 0);
SELECT count() == 0 FROM dtest WHERE b IN toDecimal32('44.4000', 0);
SELECT count() == 0 FROM dtest WHERE b IN toDecimal64('44.4000', 0);
SELECT count() == 1 FROM (EXPLAIN ESTIMATE SELECT sum(a) FROM t1);
SELECT count() == 1 FROM (EXPLAIN SYNTAX SELECT number FROM system.numbers ORDER BY number DESC) WHERE explain ILIKE 'SELECT%';
SELECT count() == 1 FROM decimal_in_float_test WHERE a IN (33);
SELECT count() == 1 FROM decimal_in_float_test WHERE a IN (33.0);
SELECT count() == 1 FROM decimal_in_float_test WHERE a NOT IN (33.333);
SELECT count() == 1 FROM decimal_in_float_test WHERE b IN (44.44);
SELECT count() == 1 FROM decimal_in_float_test WHERE b NOT IN (44.4,44.444);
SELECT count() == 1 FROM dtest WHERE b IN toDecimal128('44.4000', 4);
SELECT count() == 1 FROM dtest WHERE b IN toDecimal256('44.4000', 4);
SELECT count() == 1 FROM dtest WHERE b IN toDecimal32('44.4000', 4);
SELECT count() == 1 FROM dtest WHERE b IN toDecimal64('44.4000', 4);
SELECT count() == 1 FROM null_in WHERE i global in test_set2;
SELECT count() == 1 FROM null_in WHERE i global in test_set;
SELECT count() == 1 FROM null_in WHERE i global not in (1, 3, NULL);
SELECT count() == 1 FROM null_in WHERE i global not in range(4);
SELECT count() == 1 FROM null_in WHERE i in test_set2;
SELECT count() == 1 FROM null_in WHERE i in test_set;
SELECT count() == 1 FROM null_in WHERE i not in (1, 3, NULL);
SELECT count() == 1 FROM null_in WHERE i not in range(4);
SELECT count() == 1 FROM null_in WHERE s global not in ('1', '3', NULL);
SELECT count() == 1 FROM null_in WHERE s not in ('1', '3', NULL);
SELECT COUNT() == 1 FROM test_index WHERE key_uint32 = 1;
SELECT COUNT() == 1 FROM test_index WHERE toUInt32(key_string) = 1;
SELECT count() == 10 FROM (SELECT 1 as key) t1 ANY RIGHT JOIN join_test_right ON t1.key = join_test_right.key;
SELECT count() == 10 FROM (SELECT 2 as key) t1 ANY RIGHT JOIN join_test_right ON t1.key = join_test_right.key;
SELECT count() == 10 FROM test_table WHERE day = '2020-01-01';
SELECT count() == 2 FROM null_in WHERE i global in (1, 3, NULL);
SELECT count() == 2 FROM null_in WHERE i global in range(4);
SELECT count() == 2 FROM null_in WHERE i global not in test_set2;
SELECT count() == 2 FROM null_in WHERE i global not in test_set;
SELECT count() == 2 FROM null_in WHERE i in (1, 3, NULL);
SELECT count() == 2 FROM null_in WHERE i in range(4);
SELECT count() == 2 FROM null_in WHERE i not in test_set2;
SELECT count() == 2 FROM null_in WHERE i not in test_set;
SELECT count() == 2 FROM null_in WHERE s global in ('1', '3', NULL);
SELECT count() == 2 FROM null_in WHERE s in ('1', '3', NULL);
SELECT count() == 3 FROM (SELECT 1 as key) t1 ANY RIGHT JOIN join_test_right ON t1.key = join_test_right.key;
SELECT count() == 3 FROM null_in WHERE i global in test_set2;
SELECT count() == 3 FROM null_in WHERE i global in test_set;
SELECT count() == 3 FROM null_in WHERE i global not in (1, 3);
SELECT count() == 3 FROM null_in WHERE i global not in range(4);
SELECT count() == 3 FROM null_in WHERE i in test_set2;
SELECT count() == 3 FROM null_in WHERE i in test_set;
SELECT count() == 3 FROM null_in WHERE i not in (1, 3);
SELECT count() == 3 FROM null_in WHERE i not in range(4);
SELECT count() == 3 FROM null_in WHERE s global not in ('1', '3');
SELECT count() == 3 FROM null_in WHERE s not in ('1', '3');
SELECT count() == 33333 FROM null_in_subquery WHERE i global in (SELECT i FROM null_in_subquery WHERE dt = 2);
SELECT count() == 33333 FROM null_in_subquery WHERE i in (SELECT i FROM null_in_subquery WHERE dt = 0);
SELECT count() == 33333 FROM null_in_subquery WHERE i in (SELECT i FROM null_in_subquery WHERE dt = 2);
SELECT count() == 33333 FROM null_in_subquery WHERE idx global in (SELECT idx FROM null_in_subquery WHERE dt = 2);
SELECT count() == 33335 FROM null_in_subquery WHERE i global in (SELECT i FROM null_in_subquery WHERE dt = 0);
SELECT count() == 33335 FROM null_in_subquery WHERE i in (SELECT i FROM null_in_subquery WHERE dt = 0);
SELECT count() == 4 FROM null_in WHERE i global in (1, 3, NULL);
SELECT count() == 4 FROM null_in WHERE i in (1, 3, NULL);
SELECT count() == 4 FROM null_in WHERE s global in ('1', '3', NULL);
SELECT count() == 4 FROM null_in WHERE s in ('1', '3', NULL);
SELECT count() == 66666 FROM null_in_subquery WHERE i global not in (SELECT i FROM null_in_subquery WHERE dt = 0);
SELECT count() == 66666 FROM null_in_subquery WHERE i global not in (SELECT i FROM null_in_subquery WHERE dt = 1);
SELECT count() == 66666 FROM null_in_subquery WHERE i not in (SELECT i FROM null_in_subquery WHERE dt = 1);
SELECT count() == 66666 FROM null_in_subquery WHERE idx global not in (SELECT idx FROM null_in_subquery WHERE dt = 0);
SELECT count() == 66666 FROM null_in_subquery WHERE idx not in (SELECT idx FROM null_in_subquery WHERE dt = 1);
SELECT count() == 66668 FROM null_in_subquery WHERE i global not in (SELECT i FROM null_in_subquery WHERE dt = 2);
SELECT count() == 66668 FROM null_in_subquery WHERE i not in (SELECT i FROM null_in_subquery WHERE dt = 2);
SELECT count() > 0 FROM (EXPLAIN CURRENT TRANSACTION);
SELECT count() > 0 FROM (EXPLAIN PLAN SELECT * FROM system.numbers ORDER BY number DESC) WHERE explain ILIKE '%Sort%';
SELECT count() > 0 FROM (EXPLAIN SELECT * FROM system.numbers ORDER BY number DESC) WHERE explain ILIKE '%Sort%';
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 1);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 10);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 2);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 3);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 4);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 5);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 6);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 7);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 8);
SELECT count() > 0 FROM (SELECT * FROM system.columns LIMIT 9);
SELECT count() > 0 FROM parallel_replicas;
select count() > 0 from system.settings;
SELECT count() > 0 FROM system.text_log WHERE event_date >= yesterday() AND message LIKE '%Starting ClickHouse%';
SELECT count() > 0 FROM system.text_log WHERE query_id in (select query_id from system.query_log where current_database = currentDatabase() AND log_comment = '02875_190aed82-2423-413b-ad4c-24dcca50f65b') AND message LIKE '%Parallel reading from replicas is disabled for cluster%';
SELECT count() > 0 FROM system.text_log WHERE query_id in (select query_id from system.query_log where current_database = currentDatabase() AND log_comment = '02875_89f3c39b-1919-48cb-b66e-ef9904e73146') AND message LIKE '%Parallel reading from replicas is disabled for cluster%';
SELECT count() > 0 FROM system.text_log WHERE query_id in (select query_id from system.query_log where current_database = currentDatabase() AND log_comment='02898_default_190aed82-2423-413b-ad4c-24dcca50f65b') AND message LIKE '%Total rows to read: 3000%' SETTINGS allow_experimental_parallel_reading_from_replicas=0;
SELECT count() > 0 FROM system.text_log WHERE query_id in (select query_id from system.query_log where current_database = currentDatabase() AND log_comment='02898_inorder_190aed82-2423-413b-ad4c-24dcca50f65b') AND message LIKE '%Updated total rows to read: added % rows, total 3000 rows%' SETTINGS allow_experimental_parallel_reading_from_replicas=0;
select count() > 0 from system.text_log where yesterday() <= event_date and logger_name like '%' || currentDatabase() || '%' and message like '%Removing % parts from filesystem (concurrently): Parts:%';
SELECT count() > 0 FROM system.text_log WHERE yesterday() <= event_date AND message LIKE '%Replica number 10 is unavailable%';
select count() > 0, lower(status::String), errorCodeToName(exception_code) from system.query_views_log where view_name = concatWithSeparator('.', currentDatabase(), 'mv_02572') and view_target = concatWithSeparator('.', currentDatabase(), 'copy_02572') group by 2, 3 ;
SELECT count() > 1 FROM (EXPLAIN PIPELINE SELECT * FROM ( SELECT materialize('a') AS key ) AS t1 INNER JOIN ( SELECT materialize('a') AS key ) AS t2 ON t1.key = t2.key ) WHERE explain ilike '%FilterBySetOnTheFlyTransform%' ;
select count() > 1, countDistinct(thread_id) > 1 from system.text_log where yesterday() <= event_date and logger_name like '%' || currentDatabase() || '%' and message like '%Removing % parts in blocks range%';
SELECT count() > 10 FROM system.licenses;
SELECT count() > 3 FROM (EXPLAIN PIPELINE header = 1 SELECT * FROM system.numbers ORDER BY number DESC) WHERE explain LIKE '%Header: \_\_table1.number UInt64%';
SELECT count() > 3 FROM (EXPLAIN PIPELINE header = 1 SELECT * FROM system.numbers ORDER BY number DESC) WHERE explain LIKE '%Header: number UInt64%';
SELECT count() >= 10 FROM system.merge_tree_settings WHERE is_obsolete = 1;
SELECT count() >= 10 FROM system.settings WHERE is_obsolete = 1;
SELECT count() >= 100 FROM sample_00276 SAMPLE 100;
SELECT count() >= 20, count() <= 22 FROM ( SELECT x FROM ( SELECT zero AS x FROM system.zeros SETTINGS max_block_size = 2, max_rows_to_read = 10, read_overflow_mode = 'break' ) UNION ALL SELECT x FROM ( SELECT zero + 1 AS x FROM system.zeros SETTINGS max_block_size = 2, max_rows_to_read = 20, read_overflow_mode = 'break' ) );
SELECT count() >= 20, count() <= 22 FROM ( SELECT x FROM ( SELECT zero AS x FROM system.zeros SETTINGS max_block_size = 2, max_rows_to_read = 20, read_overflow_mode = 'break' ) UNION ALL SELECT x FROM ( SELECT zero + 1 AS x FROM system.zeros SETTINGS max_block_size = 2, max_rows_to_read = 10, read_overflow_mode = 'break' ) );
SELECT count() AS amount, a, b, GROUPING(a, b) FROM test02315 GROUP BY GROUPING SETS ((a, b), (a, a), ()) ORDER BY (amount, a, b) SETTINGS force_grouping_standard_compatibility=0, allow_experimental_analyzer=1;
SELECT count() AS amount, a, b, GROUPING(a, b) FROM test02315 GROUP BY ROLLUP(a, b) ORDER BY (amount, a, b) SETTINGS force_grouping_standard_compatibility=0;
SELECT count() AS amount, a, b, GROUPING(a, b) FROM test02416 GROUP BY ROLLUP(a, b) ORDER BY (amount, a, b);
select count() as c, x in ('a', 'bb') as g from tab group by g order by c;
SELECT count() AS cnt FROM (SELECT CASE x WHEN 1 THEN 'hello' WHEN 2 THEN 'world' ELSE 'unknow' END FROM distributed_00609);
SELECT count() AS cnt FROM (SELECT CASE x WHEN 1 THEN 'hello' WHEN 2 THEN 'world' ELSE 'unknow' END FROM mergetree_00609);
SELECT count() AS cnt WHERE 0 HAVING cnt = 0;
SELECT COUNT() AS count FROM test_distributed INNER JOIN ( SELECT text FROM test_distributed WHERE (text ILIKE '%text-for-search%') AND (text2 ILIKE '%text-for-search%') ) USING (text) WHERE (text ILIKE '%text-for-search%') AND (text2 ILIKE '%text-for-search%') ;
select count() as diff from (select distinct * from distinct_in_order except select * from ordinary_distinct);
SELECT count() AS x WITH TOTALS HAVING x != toNullable(0);
select count() cnt, * from dist_01247 group by number having cnt == 1 limit 1;
select count() cnt, * from dist_01247 group by number having cnt == 2;
SELECT count() FROM test_log;
SELECT count() FROM ( SELECT arrayJoin(arrayMap(i -> (i + 1), range(2))) AS index, number FROM numbers_mt(100000) GROUP BY number ORDER BY index ASC SETTINGS max_block_size = 100000, max_threads = 2 );
SELECT count() FROM ( SELECT count([NULL, NULL]), count([2147483646, -2147483647, 3, 3]), uniqExact(if(number >= 1048577, number, NULL), NULL) FROM numbers(1048577) GROUP BY if(number >= 2., number, NULL) );
SELECT count() FROM ( SELECT * FROM test WHERE x != 'xyz' UNION ALL SELECT * FROM test WHERE isZeroOrNull(x != 'xyz') );
SELECT count() FROM ( SELECT * FROM test WHERE x != 'xyz' UNION ALL SELECT * FROM test WHERE NOT x != 'xyz' );
SELECT count() FROM ( SELECT count() FROM numbers(65411) GROUP BY if(number < 1, NULL, number) );
SELECT count() FROM ( SELECT f.id FROM test_grace_hash AS f LEFT JOIN test_grace_hash AS d ON f.id = d.id LIMIT 1000 );
SELECT COUNT() FROM ( SELECT DISTINCT meta_source_req_uuid FROM bug_14144 WHERE meta_source_type = 'missing' ORDER BY meta_source_req_uuid ASC LIMIT 100000 );
select count() from ( SELECT event_dt FROM ( select event_dt, 403 AS event_id from ( select event_dt from tba as tba where event_id = 9 and ((tba.event_dt >= 20220822 and tba.event_dt <= 20220822)) ) ) tba WHERE tba.event_dt >= 20220822 and tba.event_dt <= 20220822 and event_id = 403 );
SELECT count() FROM ( select 1 AS a UNION ALL select 1 as a ) AS t1, ( select 2 AS b, 3 AS c UNION ALL select 2 as b, 3 as c) AS t2;
SELECT count() FROM ( SELECT [1], count(1) ) AS t1 ALL RIGHT JOIN ( SELECT number AS s FROM numbers(2) ) AS t2 USING (s);
SELECT count() FROM (EXPLAIN PIPELINE SELECT nw, sum(WR) AS R, sumIf(WR, uniq_rows = 1) AS UNR FROM ( SELECT uniq(nw) OVER (PARTITION BY ac) AS uniq_rows, AVG(wg) AS WR, ac, nw FROM window_funtion_threading GROUP BY ac, nw ) GROUP BY nw ORDER BY nw ASC, R DESC LIMIT 10) where explain ilike '%ScatterByPartitionTransform%' SETTINGS max_threads = 4;
SELECT count() FROM (SELECT * FROM 02919_test_table_noarg LIMIT 100);
SELECT count() FROM (SELECT * FROM 02919_test_table_reuse_args LIMIT 100);
SELECT count() FROM (SELECT * FROM 02919_test_table_valid_args LIMIT 100);
SELECT count() FROM (SELECT * FROM count UNION ALL SELECT * FROM count);
SELECT count() FROM (SELECT * FROM remote('127.0.0.1', system.numbers) LIMIT 100) SETTINGS max_bytes_to_read_leaf=1000;
SELECT count() FROM (SELECT * FROM remote('127.0.0.1', system.numbers) LIMIT 100) SETTINGS max_rows_to_read_leaf=1;
SELECT count() FROM (SELECT * FROM remote('127.0.0.2', system.numbers) LIMIT 100) SETTINGS max_bytes_to_read_leaf=1000;
SELECT count() FROM (SELECT * FROM remote('127.0.0.2', system.numbers) LIMIT 100) SETTINGS max_rows_to_read_leaf=1;
SELECT count() FROM (SELECT * FROM system.numbers LIMIT 1000) WHERE 1 IN (SELECT 0 WHERE 0) FORMAT JSON;
SELECT count() FROM (SELECT * FROM system.numbers LIMIT 11);
SELECT count() FROM (SELECT * FROM t_sparse_intersect EXCEPT SELECT * FROM t_sparse_intersect);
SELECT count() FROM (SELECT * FROM t_sparse_intersect INTERSECT SELECT * FROM t_sparse_intersect);
SELECT count() FROM (SELECT * FROM test ARRAY JOIN products);
select count() from (select * from test intersect (select * from test where toUInt8(name) < 4) union distinct (select * from test where name = '5' or name = '1') except select * from test where name = '3');
select count() from (select * from test union distinct select * from test except select * from test where name = '3');
select count() from (select * from test union distinct select * from test union all select * from test);
SELECT COUNT() FROM (SELECT * FROM test_00974 FINAL) where x = 1 SETTINGS enable_optimize_predicate_expression_to_final_subquery = 0;
SELECT COUNT() FROM (SELECT * FROM test_00974 FINAL) where x = 1 SETTINGS enable_optimize_predicate_expression_to_final_subquery = 1, max_rows_to_read = 2;
SELECT count() FROM (SELECT * FROM test_distributed) SETTINGS max_bytes_to_read = 100000;
SELECT count() FROM (SELECT * FROM test_distributed) SETTINGS max_rows_to_read_leaf = 40000;
select count() from (select 1 except select 2) limit 100;
select count() from (select 1 intersect select 1) limit 100;
SELECT count() FROM (SELECT [number] a, [number * 2] b FROM system.numbers LIMIT 1) AS t ARRAY JOIN a, b WHERE NOT ignore(a + b);
SELECT count() FROM (SELECT arrayJoin([sum(x), medianExact(x)]), arrayJoin([min(x), max(x)]) FROM (SELECT number AS x FROM numbers(10)));
SELECT count() FROM (SELECT count() FROM numbers(10));
SELECT count() FROM (SELECT DISTINCT nowInBlock(), nowInBlock('Pacific/Pitcairn') FROM system.numbers LIMIT 2);
SELECT count() FROM (SELECT dummy, sum(dummy) GROUP BY dummy WITH TOTALS);
select count() from (select fromUnixTimestamp64Milli(time, 'UTC') time_fmt, name from test where time_fmt > '2022-09-05 00:00:00');
select count() from (select if(number >= 0, number, sleep(1)) from numbers(10000000));
select count() from (select number < 100, number from numbers(2000) order by number < 100 desc limit 10 with ties);
select count() from (select number > 100 from numbers(2000) order by number > 100 limit 1, 7 with ties);
SELECT count() FROM (SELECT number AS x FROM system.numbers LIMIT 10);
select count() from (select number from numbers(10) except select 5);
select count() from (select number from numbers(100) intersect select number from numbers(20, 60) except select number from numbers(30, 20) except select number from numbers(60, 20) union all select number from numbers(100, 10));
select count() from (select number from numbers(100) intersect select number from numbers(20, 60) except select number from numbers(30, 20) except select number from numbers(60, 20));
select count() from (select number from numbers(1000000) intersect select number from numbers(200000, 600000) except select number from numbers(300000, 200000) except select number from numbers(600000, 200000));
select count() from (select number from numbers(1000000) intersect select number from numbers(200000, 600000));
SELECT count() FROM (SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100 UNION ALL SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100 UNION ALL SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100);
SELECT count() FROM (SELECT queryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID() HAVING t == initialQueryID());
SELECT count() FROM (SELECT queryID() FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());
SELECT count() FROM (SELECT sum(x) AS a, avg(x) AS b FROM (SELECT number AS x FROM numbers(10)));
SELECT count() FROM (SELECT sum(x), arrayJoin([min(x), max(x)]) FROM (SELECT number AS x FROM numbers(10)));
SELECT count() FROM (SELECT sum(x), avg(x) FROM (SELECT number % 3 AS x FROM numbers(10) GROUP BY x));
SELECT count() FROM (SELECT sum(x), avg(x) FROM (SELECT number AS x FROM numbers(10)));
select count() from (select throwIf(count() != 2) from t1 group by a);
select count() from (select throwIf(count() != 2) from t2 group by a);
select count() from (select throwIf(count() != 2) from t3 group by a);
select count() from (select throwIf(count() != 2) from t4 group by a);
select count() from (select throwIf(count() != 2) from t5 group by a);
select count() from (select throwIf(count() != 2) from t6 group by a);
SELECT count() FROM (SELECT toStartOfMonth(date) AS d FROM t_sparse_sort_limit ORDER BY -i LIMIT 65536);
select count() from (select y from t_mv group by y);
SELECT count() FROM 02416_rocksdb;
SELECT count() FROM 02418_test;
SELECT count() FROM 02418_test_another;
SELECT count() FROM 02481_merge SAMPLE 1 / 2 ARRAY JOIN arr WHERE x != 0;
SELECT count() FROM 02481_mergetree SAMPLE 1 / 2 ARRAY JOIN arr WHERE x != 0;
SELECT count() FROM 02577_keepermap_delete_update;
SELECT count() from 02581_trips WHERE description = '';
SELECT count() FROM 02707_keepermap_delete_update;
SELECT count() FROM 02725_cnf WHERE ((NOT c2) AND c2 AND (NOT c1)) OR ((NOT c2) AND c3 AND (NOT c5)) OR ((NOT c7) AND (NOT c8)) OR (c9 AND c6 AND c8 AND (NOT c8) AND (NOT c7)) SETTINGS convert_query_to_cnf = 1, allow_experimental_analyzer = 0;
SELECT count() FROM 02725_cnf WHERE ((NOT c2) AND c2 AND (NOT c1)) OR ((NOT c2) AND c3 AND (NOT c5)) OR ((NOT c7) AND (NOT c8)) OR (c9 AND c6 AND c8 AND (NOT c8) AND (NOT c7)) SETTINGS convert_query_to_cnf = 1, allow_experimental_analyzer = 1;
SELECT count() FROM 02725_cnf WHERE (c5 AND (NOT c0)) OR ((NOT c3) AND (NOT c6) AND (NOT c1) AND (NOT c6)) OR (c7 AND (NOT c3) AND (NOT c5) AND (NOT c7)) OR ((NOT c8) AND c5) OR ((NOT c0)) OR ((NOT c8) AND (NOT c5) AND c1 AND c6 AND c3) OR (c7 AND (NOT c0) AND c6 AND c1 AND (NOT c2)) OR (c3 AND (NOT c9) AND c1) SETTINGS convert_query_to_cnf = 1, allow_experimental_analyzer = 0;
SELECT count() FROM 02725_cnf WHERE (c5 AND (NOT c0)) OR ((NOT c3) AND (NOT c6) AND (NOT c1) AND (NOT c6)) OR (c7 AND (NOT c3) AND (NOT c5) AND (NOT c7)) OR ((NOT c8) AND c5) OR ((NOT c0)) OR ((NOT c8) AND (NOT c5) AND c1 AND c6 AND c3) OR (c7 AND (NOT c0) AND c6 AND c1 AND (NOT c2)) OR (c3 AND (NOT c9) AND c1) SETTINGS convert_query_to_cnf = 1, allow_experimental_analyzer = 1;
SELECT count() FROM 02918_table_obj1;
SELECT count() FROM 02918_table_str;
select count() from `table_00653` where toUInt64(val) == 0;
SELECT count() FROM A ASOF JOIN B ON A.a == B.b AND A.t == B.t;
SELECT count() FROM A ASOF LEFT JOIN B ON A.a == B.b AND B.t <= A.t;
select count() from a8x;
SELECT count() FROM aggregate_functions_null_for_empty;
SELECT COUNT() FROM another_indexed_table WHERE log_message like '%x%';
select count() from atf_p settings additional_table_filters = {'atf_p': 'x <= 2'};
SELECT count() FROM b1_01361;
SELECT count() FROM bftest WHERE has (x, 42) and has(x, -42) FORMAT Null;
SELECT count() FROM bftest WHERE has (x, 42) or has(x, -42) FORMAT Null;
SELECT count() FROM bftest WHERE hasAll(x, [0, 1]) OR 0. FORMAT Null;
SELECT count() FROM bftest WHERE hasAll(x, [1]) FORMAT Null;
SELECT count() FROM bftest WHERE hasAll(x, [42,-42]) FORMAT Null;
SELECT count() FROM bftest WHERE hasAll(x, []) FORMAT Null;
SELECT count() FROM bftest WHERE hasAll(y, [0,NULL]) FORMAT Null;
SELECT count() FROM bftest WHERE hasAll(y, [[123], -42]) FORMAT Null;
SELECT count() FROM bftest WHERE hasAny(x, [0, 1]) OR 0. FORMAT Null;
SELECT count() FROM bftest WHERE hasAny(x, [1]) FORMAT Null;
SELECT count() FROM bftest WHERE hasAny(x, [42,-42]) FORMAT Null;
SELECT count() FROM bftest WHERE hasAny(x, []) FORMAT Null;
SELECT count() FROM bftest WHERE hasAny(y, [0,NULL]) FORMAT Null;
SELECT count() FROM bftest WHERE hasAny(y, [[123], -42]) FORMAT Null;
SELECT count() FROM big_array ARRAY JOIN x AS y;
SELECT count() FROM big_array ARRAY JOIN x;
SELECT count() FROM binary_op_mono1 WHERE toDate(i / 1000) = '2020-09-02';
SELECT count() FROM binary_op_mono2 WHERE 1000 / i = 100;
SELECT count() FROM binary_op_mono3 WHERE i + 1000 = 500;
SELECT count() FROM binary_op_mono4 WHERE 1000 + i = 500;
SELECT count() FROM binary_op_mono5 WHERE i - 1000 = 1234;
SELECT count() FROM binary_op_mono6 WHERE 1000 - i = 1234;
SELECT count() FROM binary_op_mono7 WHERE i / 1000.0 = 22.3;
SELECT count() FROM binary_op_mono8 WHERE 1000.0 / i = 33.4;
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date, toDate('1970-01-02'));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date, toDate('1970-01-06'));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date, toDate('1970-01-11'));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date, toDate('1970-04-11'));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date_time, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date_time, toDateTime('1970-01-01 02:00:01', 'Asia/Istanbul'));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date_time, toDateTime('1970-01-01 02:00:05', 'Asia/Istanbul'));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date_time, toDateTime('1970-01-01 02:00:10', 'Asia/Istanbul'));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(date_time, toDateTime('1970-01-01 02:01:40', 'Asia/Istanbul'));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f32, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f32, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f32, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f32, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f32, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f64, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f64, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f64, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f64, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(f64, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(fixed_string, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(fixed_string, toFixedString('1', 5));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(fixed_string, toFixedString('10', 5));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(fixed_string, toFixedString('100', 5));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(fixed_string, toFixedString('5', 5));
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i16, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i16, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i16, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i16, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i16, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i32, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i32, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i32, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i32, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i32, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i64, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i64, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i64, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i64, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i64, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i8, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i8, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i8, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i8, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(i8, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(str, '1');
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(str, '10');
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(str, '100');
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(str, '5');
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(str, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u16, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u16, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u16, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u16, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u16, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u32, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u32, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u32, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u32, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u32, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u64, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u64, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u64, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u64, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u64, NULL);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u8, 1);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u8, 10);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u8, 100);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u8, 5);
SELECT COUNT() FROM bloom_filter_array_lc_null_types_test WHERE has(u8, NULL);
SELECT count() FROM bloom_filter_array_offsets_i WHERE has(i, 99999);
SELECT count() FROM bloom_filter_array_offsets_lc_str WHERE has(str, 'value');
SELECT count() FROM bloom_filter_array_offsets_str WHERE has(str, 'value');
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(date, toDate('1970-01-02'));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(date, toDate('1970-01-06'));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(date, toDate('1970-01-11'));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(date_time, toDateTime('1970-01-01 02:00:01', 'Asia/Istanbul'));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(date_time, toDateTime('1970-01-01 02:00:05', 'Asia/Istanbul'));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(date_time, toDateTime('1970-01-01 02:00:10', 'Asia/Istanbul'));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(f32, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(f32, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(f32, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(f64, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(f64, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(f64, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(fixed_string, toFixedString('1', 5));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(fixed_string, toFixedString('10', 5));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(fixed_string, toFixedString('5', 5));
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i16, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i16, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i16, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i32, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i32, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i32, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i64, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i64, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i64, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i8, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i8, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(i8, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(str, '1');
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(str, '10');
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(str, '5');
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u16, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u16, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u16, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u32, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u32, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u32, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u64, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u64, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u64, 5);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u8, 1);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u8, 10);
SELECT COUNT() FROM bloom_filter_array_types_test WHERE has(u8, 5);
SELECT COUNT() FROM bloom_filter_lc_null_types_test WHERE fixed_string = toFixedString('1', 5) SETTINGS max_rows_to_read = 12;
SELECT COUNT() FROM bloom_filter_lc_null_types_test WHERE isNull(fixed_string);
SELECT COUNT() FROM bloom_filter_lc_null_types_test WHERE isNull(str);
SELECT COUNT() FROM bloom_filter_lc_null_types_test WHERE str = '1' SETTINGS max_rows_to_read = 12;
SELECT COUNT() FROM bloom_filter_lc_null_types_test WHERE str IN ( SELECT str FROM bloom_filter_lc_null_types_test);
SELECT count() FROM bloom_filter_not_has WHERE has(ary, 'a');
SELECT count() FROM bloom_filter_not_has WHERE has(ary, 'b');
SELECT count() FROM bloom_filter_not_has WHERE has(ary, 'c');
SELECT count() FROM bloom_filter_not_has WHERE has(ary, 'd');
SELECT count() FROM bloom_filter_not_has WHERE has(ary, 'f');
SELECT count() FROM bloom_filter_not_has WHERE NOT has(ary, 'a');
SELECT COUNT() FROM bloom_filter_null_array WHERE has(v, '1');
SELECT COUNT() FROM bloom_filter_null_array WHERE has(v, '2');
SELECT COUNT() FROM bloom_filter_null_array WHERE has(v, '3');
SELECT COUNT() FROM bloom_filter_null_array WHERE has(v, '4');
SELECT COUNT() FROM bloom_filter_null_array WHERE has(v, 0);
SELECT COUNT() FROM bloom_filter_null_array WHERE not has(v, 0);
SELECT COUNT() FROM bloom_filter_null_array;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE date = '1970-01-02' SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE date_time = toDateTime('1970-01-01 02:00:01', 'Asia/Istanbul') SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE f32 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE f64 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE fixed_string = toFixedString('1', 5) SETTINGS max_rows_to_read = 12;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE i16 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE i32 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE i64 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE i8 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(date);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(date_time);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(f32);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(f64);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(fixed_string);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(i16);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(i32);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(i64);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(i8);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(str);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(u16);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(u32);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(u64);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE isNull(u8);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE str = '1' SETTINGS max_rows_to_read = 12;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE str IN ( SELECT str FROM bloom_filter_null_types_test);
SELECT COUNT() FROM bloom_filter_null_types_test WHERE u16 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE u32 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE u64 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_null_types_test WHERE u8 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() from bloom_filter_sizing_pk WHERE key = 1;
SELECT COUNT() from bloom_filter_sizing_sec WHERE key1 = 1;
SELECT COUNT() FROM bloom_filter_types_test WHERE date = '1970-01-02' SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE date_time = toDateTime('1970-01-01 02:00:01', 'Asia/Istanbul') SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE f32 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE f64 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE fixed_string = toFixedString('1', 5) SETTINGS max_rows_to_read = 12;
SELECT COUNT() FROM bloom_filter_types_test WHERE i16 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE i32 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE i64 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE i8 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE str = '1' SETTINGS max_rows_to_read = 12;
SELECT COUNT() FROM bloom_filter_types_test WHERE str IN ( SELECT str FROM bloom_filter_types_test);
SELECT COUNT() FROM bloom_filter_types_test WHERE u16 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE u32 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE u64 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM bloom_filter_types_test WHERE u8 = 1 SETTINGS max_rows_to_read = 6;
SELECT count() FROM check_table_test WHERE value2 > value1;
SELECT count() FROM checksums_r1;
SELECT count() FROM checksums_r2;
SELECT count() FROM checksums_r3;
SELECT count() FROM clusterAllReplicas('test_cluster_two_shard_three_replicas_localhost', currentDatabase(), tt) settings log_comment='02875_190aed82-2423-413b-ad4c-24dcca50f65b';
SELECT count() FROM constCondOptimization WHERE if(0, 1, n = 1000) AND 1 = 1;
SELECT count() FROM constCondOptimization WHERE if(0, 1, n = 1000);
SELECT count() FROM constrained;
SELECT count() FROM constraint_test_assumption WHERE domainWithoutWWW(URL) = 'bigmir.net';
SELECT count() FROM constraint_test_constants WHERE 9 < b;
SELECT count() FROM constraint_test_constants_repl WHERE a - b = 10;
SELECT count() FROM constraint_test_strong_connectivity WHERE a = d;
SELECT count() FROM constraint_test_transitivity WHERE a = d;
SELECT count() FROM constraint_test_transitivity2 WHERE a > d;
SELECT count() FROM constraint_test_transitivity3 WHERE a < b;
SELECT count() FROM count HAVING count() != 1234567;
SELECT count() FROM count HAVING count() = 1234567;
SELECT count() FROM count WITH TOTALS;
SELECT count() FROM count;
select count() from d group by toDate(dt);
select count() from data prewhere indexHint(_partition_id = '1');
select count() from data where indexHint(_partition_id = '1');
SELECT count() FROM data WHERE str NOT LIKE 'a%%' SETTINGS force_primary_key=1;
SELECT count() FROM data WHERE str NOT LIKE 'a%' SETTINGS force_primary_key=1;
SELECT count() FROM data WHERE str NOT LIKE 'a' SETTINGS force_primary_key=1;
select count() from data_01256;
select count() from data_01811;
select count() from data_02021 prewhere 1 or ignore(key) where ignore(key)=0;
SELECT count() FROM datetime_date_table WHERE col_date > '2020-03-04 10:20:45';
SELECT count() FROM datetime_date_table WHERE col_date > '2020-03-04 10:20:45.100';
SELECT count() FROM datetime_date_table WHERE col_date > '2020-03-04'::Date;
SELECT count() FROM datetime_date_table WHERE col_date > '2020-03-04';
SELECT count() FROM datetime_date_table WHERE col_date_lc > '2020-03-04 10:20:45'::DateTime;
SELECT count() FROM datetime_date_table WHERE col_date_lc > '2020-03-04 10:20:45.100'::DateTime64(3);
SELECT count() FROM datetime_date_table WHERE col_date_lc > '2020-03-04'::Date;
SELECT count() FROM datetime_date_table WHERE col_date_lc > '2020-03-04';
SELECT count() FROM datetime_date_table WHERE col_date_string > '2020-03-04 10:20:45'::DateTime;
SELECT count() FROM datetime_date_table WHERE col_date_string > '2020-03-04 10:20:45.100'::DateTime64(3);
SELECT count() FROM datetime_date_table WHERE col_date_string > '2020-03-04'::Date;
SELECT count() FROM datetime_date_table WHERE col_date_string > '2020-03-04';
SELECT count() FROM datetime_date_table WHERE col_datetime > '2020-03-04 10:20:45'::DateTime;
SELECT count() FROM datetime_date_table WHERE col_datetime > '2020-03-04 10:20:45';
SELECT count() FROM datetime_date_table WHERE col_datetime > '2020-03-04 10:20:45.100';
SELECT count() FROM datetime_date_table WHERE col_datetime > '2020-03-04'::Date;
SELECT count() FROM datetime_date_table WHERE col_datetime > '2020-03-04';
SELECT count() FROM datetime_date_table WHERE col_datetime_lc > '2020-03-04 10:20:45'::DateTime;
SELECT count() FROM datetime_date_table WHERE col_datetime_lc > '2020-03-04 10:20:45.100'::DateTime64(3);
SELECT count() FROM datetime_date_table WHERE col_datetime_lc > '2020-03-04'::Date;
SELECT count() FROM datetime_date_table WHERE col_datetime_lc > '2020-03-04';
SELECT count() FROM datetime_date_table WHERE col_datetime_string > '2020-03-04 10:20:45'::DateTime;
SELECT count() FROM datetime_date_table WHERE col_datetime_string > '2020-03-04 10:20:45.100'::DateTime64(3);
SELECT count() FROM datetime_date_table WHERE col_datetime_string > '2020-03-04'::Date;
SELECT count() FROM datetime_date_table WHERE col_datetime_string > '2020-03-04';
select count() from db_01870.a_data_01870;
select count() from db_hang.test;
select count() from db_hang.test_mv;
SELECT count() FROM decimal WHERE a IS NOT NULL;
SELECT count() FROM decimal WHERE b IS NOT NULL;
SELECT count() FROM decimal WHERE c IS NOT NULL;
SELECT count() FROM decimal WHERE d IS NULL AND e IS NULL;
SELECT count() FROM decimal WHERE d IS NULL AND f IS NULL;
SELECT count() FROM decimal WHERE d IS NULL;
SELECT count() FROM decimal WHERE d1 != toDecimal32('4.2', 8);
SELECT count() FROM decimal WHERE d1 < toDecimal32('4.2', 8);
SELECT count() FROM decimal WHERE d1 <= toDecimal32('4.2', 8);
SELECT count() FROM decimal WHERE d1 = toDecimal32('4.2', 8);
SELECT count() FROM decimal WHERE d1 = 1;
SELECT count() FROM decimal WHERE d1 > toDecimal32('4.2', 8);
SELECT count() FROM decimal WHERE d1 >= toDecimal32('4.2', 8);
SELECT count() FROM decimal WHERE e IS NULL AND f IS NULL;
SELECT count() FROM decimal WHERE e IS NULL;
SELECT count() FROM decimal WHERE f IS NULL;
SELECT count() FROM default_constraints;
SELECT COUNT() from default_table;
SELECT count() FROM derived_metrics_local;
SELECT count() FROM dest_a;
select count() from dist_01223 settings distributed_group_by_no_merge=1;
select count() from dist_01223;
select count() from distr as l global all left join distr as r on l.a = r.a;
SELECT count() FROM distributed;
SELECT COUNT() FROM endsWith_test WHERE endsWith(S1, S1);
SELECT COUNT() FROM endsWith_test WHERE endsWith(S1, S2);
SELECT COUNT() FROM endsWith_test WHERE endsWith(S2, S3);
SELECT count() FROM enum WHERE x = 'hello';
SELECT count() FROM enum WHERE x = 'world';
SELECT count() FROM enum WHERE x = 'xyz';
select count() from file('02841.parquet') where indexHint(s > '');
SELECT count() FROM foo ANY INNER JOIN bar USING (dimension_1) WHERE (foo.server_date <= '2020-11-07') AND (toDate(foo.server_time, 'Asia/Yekaterinburg') <= '2020-11-07');
SELECT count() FROM format(TSVRaw, (SELECT cast(arrayStringConcat(groupArray('some long string'), '\n'), 'LowCardinality(String)') FROM numbers(10000))) FORMAT TSVRaw;
SELECT count() FROM github_events WHERE (repo_name = 'apache/pulsar') AND (toString(event_type) IN ('PullRequestEvent', 'PullRequestReviewCommentEvent', 'PullRequestReviewEvent', 'IssueCommentEvent')) AND (actor_login NOT IN ('github-actions[bot]', 'codecov-commenter')) AND (number = 9276);
SELECT count() from h ARRAY JOIN [1] AS a PREWHERE WatchID IN (SELECT toUInt64(1)) WHERE (EventDate = '2020-06-10') AND (CounterID = 16671268);
SELECT count() FROM hit;
SELECT count() FROM index_compact WHERE b < 10;
SELECT count() FROM index_memory;
SELECT COUNT() FROM indexed_table WHERE log_message like '%x%';
SELECT count() FROM information_schema.taBLES WHERE table_schema =currentDatabase() AND table_name = 't';
SELECT count() FROM INFORMATION_SCHEMA.tables WHERE table_schema = currentDatabase() AND table_name = 't';
SELECT count() FROM join_table_mutation;
SELECT count() FROM lc_nullable WHERE has(date, NULL);
SELECT count() FROM lc_nullable WHERE has(date, toDate('1970-01-02'));
SELECT count() FROM lc_nullable WHERE has(date, toDate('1970-01-06'));
SELECT count() FROM lc_nullable WHERE has(date, toDate('1970-01-11'));
SELECT count() FROM lc_nullable WHERE has(date, toDate('1970-04-11'));
SELECT count() FROM lc_nullable WHERE has(date, toDate(has(u64, 1), '1970-01\002'));
SELECT count() FROM lc_nullable WHERE has(date_time, NULL);
SELECT count() FROM lc_nullable WHERE has(date_time, toDateTime('1970-01-01 02:00:01', 'Asia/Istanbul'));
SELECT count() FROM lc_nullable WHERE has(date_time, toDateTime('1970-01-01 02:00:05', 'Asia/Istanbul'));
SELECT count() FROM lc_nullable WHERE has(date_time, toDateTime('1970-01-01 02:00:10', 'Asia/Istanbul'));
SELECT count() FROM lc_nullable WHERE has(date_time, toDateTime('1970-01-01 02:01:40', 'Asia/Istanbul'));
SELECT count() FROM lc_nullable WHERE has(f32, -1);
SELECT count() FROM lc_nullable WHERE has(f32, 1);
SELECT count() FROM lc_nullable WHERE has(f32, 10);
SELECT count() FROM lc_nullable WHERE has(f32, 100);
SELECT count() FROM lc_nullable WHERE has(f32, 5);
SELECT count() FROM lc_nullable WHERE has(f32, NULL);
SELECT count() FROM lc_nullable WHERE has(f64, -1);
SELECT count() FROM lc_nullable WHERE has(f64, 1);
SELECT count() FROM lc_nullable WHERE has(f64, 10);
SELECT count() FROM lc_nullable WHERE has(f64, 100);
SELECT count() FROM lc_nullable WHERE has(f64, 5);
SELECT count() FROM lc_nullable WHERE has(f64, NULL);
SELECT count() FROM lc_nullable WHERE has(fixed_string, NULL);
SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('-1', 5));
SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('1', 5));
SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('10', 5));
SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('100', 5));
SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('5', 5));
SELECT count() FROM lc_nullable WHERE has(i16, -1);
SELECT count() FROM lc_nullable WHERE has(i16, 1);
SELECT count() FROM lc_nullable WHERE has(i16, 10);
SELECT count() FROM lc_nullable WHERE has(i16, 100);
SELECT count() FROM lc_nullable WHERE has(i16, 5);
SELECT count() FROM lc_nullable WHERE has(i16, NULL);
SELECT count() FROM lc_nullable WHERE has(i32, -1);
SELECT count() FROM lc_nullable WHERE has(i32, 1);
SELECT count() FROM lc_nullable WHERE has(i32, 10);
SELECT count() FROM lc_nullable WHERE has(i32, 100);
SELECT count() FROM lc_nullable WHERE has(i32, 5);
SELECT count() FROM lc_nullable WHERE has(i32, NULL);
SELECT count() FROM lc_nullable WHERE has(i64, -1);
SELECT count() FROM lc_nullable WHERE has(i64, 1);
SELECT count() FROM lc_nullable WHERE has(i64, 10);
SELECT count() FROM lc_nullable WHERE has(i64, 100);
SELECT count() FROM lc_nullable WHERE has(i64, 5);
SELECT count() FROM lc_nullable WHERE has(i64, NULL);
SELECT count() FROM lc_nullable WHERE has(i8, -1);
SELECT count() FROM lc_nullable WHERE has(i8, 1);
SELECT count() FROM lc_nullable WHERE has(i8, 10);
SELECT count() FROM lc_nullable WHERE has(i8, 100);
SELECT count() FROM lc_nullable WHERE has(i8, 5);
SELECT count() FROM lc_nullable WHERE has(i8, NULL);
SELECT count() FROM lc_nullable WHERE has(str, '-1');
SELECT count() FROM lc_nullable WHERE has(str, '1');
SELECT count() FROM lc_nullable WHERE has(str, '10');
SELECT count() FROM lc_nullable WHERE has(str, '100');
SELECT count() FROM lc_nullable WHERE has(str, '5');
SELECT count() FROM lc_nullable WHERE has(str, NULL);
SELECT count() FROM lc_nullable WHERE has(u16, -1);
SELECT count() FROM lc_nullable WHERE has(u16, 1);
SELECT count() FROM lc_nullable WHERE has(u16, 10);
SELECT count() FROM lc_nullable WHERE has(u16, 100);
SELECT count() FROM lc_nullable WHERE has(u16, 5);
SELECT count() FROM lc_nullable WHERE has(u16, NULL);
SELECT count() FROM lc_nullable WHERE has(u32, -1);
SELECT count() FROM lc_nullable WHERE has(u32, 1);
SELECT count() FROM lc_nullable WHERE has(u32, 10);
SELECT count() FROM lc_nullable WHERE has(u32, 100);
SELECT count() FROM lc_nullable WHERE has(u32, 5);
SELECT count() FROM lc_nullable WHERE has(u32, NULL);
SELECT count() FROM lc_nullable WHERE has(u64, -1);
SELECT count() FROM lc_nullable WHERE has(u64, 1);
SELECT count() FROM lc_nullable WHERE has(u64, 10);
SELECT count() FROM lc_nullable WHERE has(u64, 100);
SELECT count() FROM lc_nullable WHERE has(u64, 5);
SELECT count() FROM lc_nullable WHERE has(u64, NULL);
SELECT count() FROM lc_nullable WHERE has(u8, -1);
SELECT count() FROM lc_nullable WHERE has(u8, 1);
SELECT count() FROM lc_nullable WHERE has(u8, 10);
SELECT count() FROM lc_nullable WHERE has(u8, 100);
SELECT count() FROM lc_nullable WHERE has(u8, 5);
SELECT count() FROM lc_nullable WHERE has(u8, NULL);
SELECT count() FROM legacy_column_name_of_tuple_literal;
SELECT COUNT() FROM limited_merge_table;
SELECT count() FROM local;
SELECT count() FROM logs AS plogs WHERE plogs.date = '2019-11-20';
select count() from m3;
SELECT count() FROM map_subcolumns PREWHERE arrayMax(m.values) > 3;
SELECT count() FROM map_subcolumns PREWHERE has(m.keys, 'b');
SELECT count() FROM map_subcolumns WHERE arrayMax(m.values) > 3;
SELECT count() FROM map_subcolumns WHERE has(m.keys, 'a');
SELECT count() FROM map_subcolumns WHERE m.size0 > 2;
SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$') WHERE _table = 'non_existing';
SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$') WHERE _table = 'numbers1';
SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$') WHERE _table = 'numbers2';
SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$') WHERE _table = 'numbers3';
SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$') WHERE _table='numbers1';
SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$');
SELECT count() FROM merge;
select count() from merge_dist_01223 settings distributed_group_by_no_merge=1;
select count() from merge_dist_01223;
SELECT COUNT() FROM merge_table_standard_delete;
SELECT count() FROM merge_tree WHERE toUInt32(x) = 0;
SELECT count() FROM merge_tree WHERE toUInt32(x) IN (0, 0);
SELECT count() FROM merge_tree WHERE toUInt64(x) = 0;
SELECT count() FROM merge_tree WHERE toUInt64(x) IN (0, 0);
SELECT count() FROM merge_tree WHERE x = 0;
SELECT count() FROM merge_tree WHERE x IN (0, 0);
SELECT count() FROM merge_tree;
SELECT count() FROM merge_tree_table;
SELECT count() FROM min_max_with_nullable_string WHERE nullable_str = '';
SELECT count() FROM min_max_with_nullable_string WHERE nullable_str = '.';
SELECT count() FROM minmax_compact WHERE i64 = 2;
SELECT count() FROM mt ANY LEFT JOIN ( SELECT 1 AS x ) js2 USING (x) PREWHERE x IN (1) WHERE y = today();
SELECT count() FROM mt_match_pk WHERE match(v, '^a$|^b');
SELECT count() FROM mt_match_pk WHERE match(v, '^a');
SELECT count() FROM mt_match_pk WHERE match(v, '^a.');
SELECT count() FROM mt_match_pk WHERE match(v, '^ab');
SELECT count() FROM mt_match_pk WHERE match(v, '^ab*');
SELECT count() FROM mt_match_pk WHERE match(v, '^ac?');
SELECT COUNT() FROM mutations_and_quorum1;
SELECT COUNT() FROM mutations_and_quorum2;
select count() from mv;
SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) WHERE c != 'twee';
SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100);
SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connection_pool_size = 0);
SELECT count() FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connection_pool_size = 1, connect_timeout = 100, connection_wait_timeout = 100);
SELECT count() FROM mysql(mysql('127.0.0.1:9004', currentDatabase(), 'foo', 'default', ''), '127.0.0.1:9004', currentDatabase(), 'foo', '', '');
SELECT count() FROM null_in_1 WHERE (a, b) IN (0, 0);
SELECT count() FROM null_in_1 WHERE (a, b) IN (0, NULL);
SELECT count() FROM null_in_1 WHERE (a, b) IN (1, 1);
SELECT count() FROM null_in_1 WHERE (a, b) IN (1, 42);
SELECT count() FROM null_in_1 WHERE (a, b) IN (1, NULL);
SELECT count() FROM null_in_1 WHERE (a, b) IN (42, NULL);
SELECT count() FROM null_in_1 WHERE (a, b) IN (NULL, 0);
SELECT count() FROM null_in_1 WHERE (a, b) IN (NULL, 1);
SELECT count() FROM null_in_1 WHERE (a, b) IN (NULL, 42);
SELECT count() FROM null_in_1 WHERE (a, b) IN (NULL, NULL);
SELECT count() FROM null_in_1 WHERE (u, n) IN ((1, 2), (1, NULL), (2, 2));
SELECT count() FROM null_in_1 WHERE (u, n) IN ((NULL, NULL), (2, 2), (NULL, 2));
SELECT count() FROM null_in_1 WHERE (u, n) IN (42, NULL);
SELECT count() FROM null_in_1 WHERE (u, n) NOT IN ((3, NULL), (5, NULL));
SELECT count() FROM null_in_1 WHERE n IN (1, 2, NULL);
SELECT count() FROM null_in_1 WHERE u IN (1, 2, NULL);
SELECT count() FROM null_subcolumns PREWHERE n.null;
SELECT count() FROM null_subcolumns WHERE n.null;
SELECT count() FROM nulls WHERE x IS NULL;
SELECT count() FROM numbers(0);
SELECT count() FROM numbers(1);
SELECT count() FROM numbers(10) WHERE 0;
select count() from numbers(10) where exists(select 1 except select 1);
select count() from numbers(10) where exists(select 1 intersect select 1);
select count() from numbers(10) where exists(select number from numbers(10) where number > 8);
select count() from numbers(10) where exists(select number from numbers(10) where number > 9);
SELECT count() FROM numbers(10) WHERE number = -1 GROUP BY number WITH TOTALS FORMAT Vertical;
SELECT count() FROM numbers(10) WHERE number = -1 WITH TOTALS FORMAT Vertical;
SELECT count() FROM numbers(10);
SELECT count() FROM numbers(1000);
SELECT count() FROM numbers(100000);
SELECT count() FROM numbers(19);
SELECT count() FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3;
SELECT count() FROM numbers(2) GROUP BY GROUPING SETS ( (number, number + 0, number + 1), (number % 1048576, number % -9223372036854775808), (number / 2, number / 2));
SELECT count() FROM numbers(20);
SELECT count() FROM numbers(2000000);
SELECT count() FROM numbers(21);
SELECT count() FROM numbers(256) WHERE toUInt8(number);
SELECT count() FROM numbers(29);
SELECT count() FROM numbers(30);
SELECT count() FROM numbers(31);
SELECT count() FROM numbers(4) AS n1, numbers(3) AS n2 WHERE n1.number > (select avg(n.number) from numbers(3) n) SETTINGS allow_experimental_analyzer=0;
SELECT count() FROM numbers(4) AS n1, numbers(3) AS n2, numbers(6) AS n3 WHERE n1.number > (select avg(n.number) from numbers(3) n) SETTINGS allow_experimental_analyzer=0;
select count() from numbers_mt(100) having count() > 1;
SELECT count() FROM numbers_mt(100000000) WHERE NOT ignore(toIPv6OrZero(randomString(8)));
SELECT count() FROM numbers_mt(1000000000);
SELECT count() FROM numbers_mt(10000000000) SETTINGS log_comment='02161_test_case';
SELECT count() FROM numbers_squashed;
select count() from nv_regular_mt_table;
SELECT count() FROM output;
SELECT count() FROM partial_duplicates;
select count() from partslost_0;
select count() from partslost_1;
select count() from partslost_2;
SELECT count() FROM pk_set WHERE host IN ('admin.market1', 'admin.market2') AND code = 100 AND n = 11;
SELECT count() FROM pk_set WHERE host IN ('admin.market1', 'admin.market2') AND code = 100 AND n >= 11;
SELECT count() FROM pk_set WHERE host IN ('admin.market1', 'admin.market2') AND code = 100;
SELECT count() FROM pk_set WHERE host IN ('admin.market2', 'admin.market3', 'admin.market4', 'abc') AND code = 100 AND n = 11;
SELECT count() FROM pk_set WHERE host IN ('admin.market2', 'admin.market3', 'admin.market4', 'abc', 'news') AND code = 100 AND n = 11;
SELECT count() FROM pk_set WHERE host IN ('market', 'admin.market2', 'admin.market3', 'admin.market4', 'abc') AND code = 100 AND n = 11;
SELECT count() FROM pk_set WHERE host IN ('market', 'admin.market2', 'admin.market3', 'admin.market4', 'abc') AND code = 100 AND n >= 11;
select count() from pr_t;
SELECT count() FROM prewhere PREWHERE (length(s) >= 1) = 0 WHERE NOT ignore(y);
SELECT COUNT() FROM prop_table;
SELECT count() FROM quorum1;
SELECT count() FROM quorum2;
SELECT count() FROM quorum3;
SELECT COUNT() FROM r1;
SELECT COUNT() FROM r2;
SELECT COUNT() FROM r_prop_table1;
SELECT COUNT() FROM r_prop_table2;
SELECT COUNT() FROM recompression_table;
SELECT count() FROM regression_for_in_operator_view WHERE g = '5' OR g = '6' SETTINGS allow_experimental_analyzer = 1;
SELECT count() FROM regression_for_in_operator_view WHERE g = '5' OR g = '6';
SELECT count() FROM regression_for_in_operator_view WHERE g = '5';
SELECT count() FROM regression_for_in_operator_view WHERE g IN ('5');
SELECT count() FROM regression_for_in_operator_view WHERE g IN ('5','6');
select count() from remote('127.0.0.1,127.0.0.2', currentDatabase(), test_local) where 'XXX' global in (select 'XXX');
select count() from remote('127.0.0.1,127.0.0.2', currentDatabase(), test_local) where * global in (select * from numbers(10));
select count() from remote('127.0.0.1,127.0.0.2', currentDatabase(), test_local) where * in (select * from numbers(10));
select count() from remote('127.0.0.1,127.0.0.2', currentDatabase(), test_local);
SELECT count() FROM remote('127.0.0.1,localhos', system.one);
SELECT count() FROM remote('127.0.0.{1,2}', currentDatabase(), count);
SELECT count() FROM remote('127.0.0.{1..6}', currentDatabase(), tt) settings log_comment='02875_89f3c39b-1919-48cb-b66e-ef9904e73146';
SELECT count() FROM remote('127.0.0.{2,3}', system.one) WITH TOTALS;
SELECT count() FROM remote('127.0.0.{2,3}', system.one);
SELECT count() FROM remote('127.0.0.{2|3|4}', currentDatabase(), t);
select count() from remote('127.0.0.{2|3}', currentDatabase(), sample_final) final;
select count() FROM remote('127.0.0.{2|3}', currentDatabase(), test_max_parallel_replicas_lr) PREWHERE timestamp > 0;
select count() from remote('127.{1,2}', currentDatabase(), data_02176) where key = 0 group by key settings distributed_aggregation_memory_efficient=0;
select count() from remote('127.{1,2}', currentDatabase(), data_02177) group by key settings distributed_aggregation_memory_efficient=0;
select count() from remote('127.{1,2}', system, one, dummy) where 0 settings optimize_skip_unused_shards=1, force_optimize_skip_unused_shards=1;
SELECT count() FROM remote('{1,127}.0.0.{2,3}', system.one) SETTINGS skip_unavailable_shards = 1;
SELECT count() FROM remote('{127,1}.0.0.{2,3}', system.one) SETTINGS skip_unavailable_shards = 1;
SELECT count() FROM remote(remote1, database=currentDatabase());
SELECT count() FROM remote(remote2, database=merge(currentDatabase(), '^remote_test'));
select count() from replacing_m3 FINAL;
select count() from replacing_m3;
SELECT COUNT() FROM replica1;
SELECT COUNT() FROM replicated_table_for_alter1;
SELECT COUNT() FROM replicated_table_for_alter2;
SELECT COUNT() FROM replicated_table_r1;
SELECT COUNT() FROM replicated_table_r2;
SELECT count() FROM s3(s3_conn, filename = 'test_02496_*', format = Parquet, structure = 'a UInt64');
select count() from sample_final final sample 1/2;
select count() from sample_final final;
select count() from sample_final sample 1/2;
select count() from sample_final;
SELECT count() FROM sample_prewhere SAMPLE 1/2 PREWHERE CounterID = 1;
select count() from set_array where has(index_array, 333);
SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) = (1, 2) SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) IN ((1, 2), (2, 3)) SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) IN (SELECT arrayJoin([(toInt32(1), toInt32(2)), (toInt32(2), toInt32(3))])) SETTINGS max_rows_to_read = 7;
SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) = (1, 1) SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) IN ((1, 1), (2, 2)) SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) IN (SELECT arrayJoin([(toInt32(1), toUInt64(1)), (toInt32(2), toUInt64(2))])) SETTINGS max_rows_to_read = 7;
SELECT COUNT() FROM single_column_bloom_filter WHERE (i64, (i64, i32)) = (1, (1, 1)) SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM single_column_bloom_filter WHERE (i64, (i64, i32)) IN ((1, (1, 1)), (2, (2, 2))) SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM single_column_bloom_filter WHERE (i64, (i64, i32)) IN (SELECT arrayJoin([(toUInt64(1), (toUInt64(1), toInt32(1))), (toUInt64(2), (toUInt64(2), toInt32(2)))])) SETTINGS max_rows_to_read = 7;
SELECT COUNT() FROM single_column_bloom_filter WHERE i32 = 1 SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM single_column_bloom_filter WHERE i32 IN (1, 2) SETTINGS max_rows_to_read = 6;
SELECT COUNT() FROM single_column_bloom_filter WHERE i32 IN (SELECT arrayJoin([toInt32(1), toInt32(2)])) SETTINGS max_rows_to_read = 7;
SELECT count() FROM skip_idx_comp_parts WHERE b > 100;
SELECT COUNT() from sometable;
SELECT count() FROM sorted;
SELECT count() FROM source;
SELECT COUNT() FROM startsWith_test WHERE startsWith(S1, S1);
SELECT COUNT() FROM startsWith_test WHERE startsWith(S1, S2);
SELECT COUNT() FROM startsWith_test WHERE startsWith(S2, S3);
select count() from summing_merge_tree_aggregate_function;
SELECT count() FROM system.asynchronous_inserts;
SELECT COUNT() FROM system.columns WHERE database='_temporary_and_external_tables';
SELECT COUNT() FROM system.databases WHERE name='_temporary_and_external_tables';
select count() from system.mutations where database = currentDatabase() and table = 'per_table_ttl_02265';
select count() from system.mutations where database = currentDatabase() and table = 'ttl' and is_done;
SELECT COUNT() FROM system.mutations WHERE database = currentDatabase() AND table like 'mutations_and_quorum%' and is_done = 0;
SELECT count() FROM system.mutations WHERE table = 'bad_conversions' AND database = currentDatabase();
SELECT count() FROM system.mutations WHERE table = 'bad_conversions_2' AND database = currentDatabase();
SELECT COUNT() FROM system.mutations where table='alter_enum_array' and database=currentDatabase();
SELECT count() FROM system.numbers FORMAT Null SETTINGS max_rows_to_read = 1, read_overflow_mode = 'break';
SELECT count() FROM system.numbers LIMIT 1, 0;
SELECT count() FROM system.numbers SETTINGS max_rows_to_read = 1, read_overflow_mode = 'throw';
SELECT count() FROM system.numbers;
SELECT count() FROM system.numbers_mt WHERE NOT ignore(JSONExtract('{' || repeat('"a":"b",', rand() % 10) || '"c":"d"}', 'a', 'String')) FORMAT Null;
SELECT count() FROM system.one WHERE 0;
SELECT count() FROM system.one WHERE 1;
SELECT count() FROM system.one WHERE rand() < 0;
SELECT count() FROM system.parts WHERE database = 'T5yajf3DLcMjJJvpCeX5ajUy1P0VTk51zMEp1kDKXZAGr5EpleuIKbuY8cKaThkaBqllUm2EFxDX';
SELECT count() FROM system.parts WHERE database = currentDatabase() AND table = 'partitions';
SELECT COUNT() FROM system.parts WHERE database = currentDatabase() AND table = 'test_table' AND active = 1;
SELECT count() FROM system.parts WHERE table = NULL AND database = currentDatabase();
select count() from system.projection_parts where database = currentDatabase() and table = 't' and active;
select count() from system.projection_parts where database = currentDatabase() and table = 'tp_2' and name = 'pp' and active;
SELECT count() FROM system.query_cache WHERE query LIKE 'SELECT v FROM t_cache_sparse%';
select count() from system.query_log where current_database = currentDatabase() and query like 'select \'01231_log_queries_min_type w/ Settings/EXCEPTION_WHILE_PROCESSING%' and query not like '%system.query_log%' and event_date >= yesterday() and type = 'ExceptionWhileProcessing' and Settings['max_rows_to_read'] != '';
select count() from system.query_log where query like 'select \'01547_query_log_current_database%' and current_database = currentDatabase() and event_date >= yesterday();
select count() from system.query_log where current_database = currentDatabase() and query like 'select \'01231_log_queries_min_type/EXCEPTION_BEFORE_START%' and event_date >= yesterday();
select count() from system.query_log where current_database = currentDatabase() and query like 'select \'01231_log_queries_min_type/EXCEPTION_WHILE_PROCESSING%' and event_date >= yesterday() and type = 'ExceptionWhileProcessing';
select count() from system.query_log where current_database = currentDatabase() and query like 'select \'01231_log_queries_min_type/QUERY_START%' and event_date >= yesterday();
select count() from system.query_log where event_date >= yesterday() and query like 'select /* test=01531, enable_global_with_statement=0 */ 2%' and current_database = currentDatabase() ;
select count() from system.query_log where event_date >= yesterday() and query like 'select /* test=01531, enable_global_with_statement=1 */ 2%' and current_database = currentDatabase() ;
select count() from system.query_thread_log where query like 'select \'01546_log_queries_min_query_duration_ms-fast%' and current_database = currentDatabase() and event_date >= yesterday();
SELECT count() FROM system.tables WHERE database = 'default' AND name IN ('data_02716_1', 'data_02716_2');
SELECT COUNT() FROM system.tables WHERE database='_temporary_and_external_tables';
select count() from system.text_log where logger_name like '%' || currentDatabase() || '%' and message ilike '%table with non-zero lost_part_count equal to%';
SELECT count() FROM system.zookeeper WHERE path = '/clickhouse/test/'||currentDatabase()||'/01586_replicated_mutations_empty_partitions/'||getMacro('shard')||'/block_numbers';
select count() from t array join (select a from t1) AS _a settings optimize_trivial_count_query=1;
select count() from t cross join numbers(2) r;
SELECT count() FROM t FINAL SETTINGS do_not_merge_across_partitions_select_final = 0;
SELECT count() FROM t FINAL;
SELECT count() FROM t PREWHERE NOT ignore(a) WHERE b > 0;
select count() from t where id = 3;
SELECT count() FROM t0 GROUP BY gcd(-sign(c0), -c0) SETTINGS optimize_use_implicit_projections = 1;
SELECT count() FROM t02176 WHERE identity(timestamp) >= toDateTime('1970-01-01 00:00:00');
SELECT count() FROM t02176 WHERE timestamp >= toDateTime('1970-01-01 00:00:00');
SELECT count() FROM t1 INNER JOIN t2 USING (y);
SELECT COUNT() FROM t1 INNER JOIN t2 USING x;
SELECT count() FROM t1 JOIN t2 ON t1.time = t2.time_alias;
SELECT count() FROM t1 JOIN t2 ON t1.time_alias = t2.time;
SELECT count() FROM t1 JOIN t2 ON t1.time_alias = t2.time_alias;
SELECT count() FROM t1 JOIN t2 ON t1.x = t2.x WHERE t1.x % 2 == 0 AND t2.x % 2 == 0 AND t1.y % 2 == 0 AND t2.y % 2 == 0;
SELECT count() FROM t1 JOIN t2 ON t1.x = t2.x WHERE t1.x % 2 == 0;
SELECT count() FROM t1 JOIN t2 ON t1.x = t2.x WHERE t1.y % 2 == 0 AND t2.y % 2 == 0;
SELECT count() FROM t1 JOIN t2 ON t1.x = t2.x WHERE t1.y % 2 == 0;
SELECT count() FROM t1 JOIN t2 ON t1.x = t2.x WHERE t2.x % 2 == 0;
SELECT count() FROM t1 JOIN t2 ON t1.x = t2.x WHERE t2.y % 2 == 0;
SELECT count() FROM t1 JOIN t2 USING (time_alias);
select count() from t1 where c1 in (select 'BBBBBB' union all select null);
select count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);
SELECT count() FROM t1;
select count() from t1;
SELECT count() FROM t1_00856 WHERE if(1, 1, n = 0);
SELECT count() FROM t1_01361;
select count() from t1_r2;
SELECT count() FROM t2 INNER JOIN t1 USING (y);
SELECT count() FROM t2;
SELECT count() FROM t2_00856 WHERE if(1, 1, n = 0);
SELECT count() FROM t2_01361;
SELECT count() FROM t4 where number > 74;
SELECT count() FROM t;
select count() from t;
select count() from t_00575 where toDayOfWeek(d) in (2);
SELECT count() FROM t_01411 WHERE arr[1] = 'asdf337';
SELECT count() FROM t_01411 WHERE arr[1] = str;
SELECT count() FROM t_01411 WHERE has(arr, 'asdf337');
SELECT count() FROM t_01411 WHERE has(arr, str);
SELECT count() FROM t_01411 WHERE indexOf(arr, 'asdf337') > 0;
SELECT count() FROM t_01411 WHERE indexOf(arr, str) > 0;
SELECT count() FROM t_01411 WHERE str = 'asdf337';
SELECT count() FROM t_01411_num WHERE arr[1] = 42;
SELECT count() FROM t_01411_num WHERE arr[1] = num;
SELECT count() FROM t_01411_num WHERE has(arr, 42);
SELECT count() FROM t_01411_num WHERE has(arr, num);
SELECT count() FROM t_01411_num WHERE indexOf(arr, 42) > 0;
SELECT count() FROM t_01411_num WHERE indexOf(arr, num % 337) > 0;
SELECT count() FROM t_01411_num WHERE indexOf(arr, num) > 0;
SELECT count() FROM t_01411_num WHERE num = 42;
SELECT count() FROM t_01906 FINAL WHERE id >= 42 and update_ts <= '2021-01-01 00:00:00';
SELECT count() FROM t_01906 WHERE id >= 42;
SELECT count() FROM t_02156_merge1 WHERE k = 3 AND notEmpty(v);
SELECT count() FROM t_02156_merge2 WHERE k = 3 AND notEmpty(v);
SELECT count() FROM t_02156_merge3 WHERE k = 3 AND notEmpty(v);
SELECT count() FROM t_02708 SETTINGS allow_experimental_parallel_reading_from_replicas=1;
SELECT count() FROM t_02848_mt1 WHERE k = 3 AND notEmpty(v);
SELECT count() FROM t_02848_mt2 WHERE a = 3 AND b == '3' AND c < 20 AND d like '%es%';
SELECT count() FROM t_02848_mt2 WHERE a = 3 AND b == '3' AND d like '%es%';
SELECT count() FROM t_02848_mt2 WHERE a = 3 AND c < 20 AND c > 0 AND d like '%es%';
SELECT count() FROM t_02848_mt2 WHERE b == '3' AND c < 20 AND d like '%es%';
SELECT count() FROM t_async_inserts_flush;
select count() from t_buf sample 1/2 format Null;
select count() from t_delete_skip_index where y in (4, 5);
select count() from t_hardware_error;
SELECT count() FROM t_in_tuple_index WHERE (PLATFORM, USER_ID) IN (('insta', '33'));
SELECT count() FROM t_in_tuple_index WHERE (PLATFORM, USER_ID) IN (('insta', '33'), ('insta', '22'));
SELECT count() FROM t_index_non_materialized WHERE a = 1;
SELECT count() FROM t_json WHERE obj.foo != 0;
SELECT count() FROM t_key_condition_float WHERE a > 0.0;
SELECT count() FROM t_key_condition_float WHERE a > 0::Float32;
SELECT count() FROM t_key_condition_float WHERE a > 0::Float64;
SELECT count() FROM t_key_condition_float WHERE a > 0;
SELECT count() FROM t_key_condition_float WHERE a > 1.5;
SELECT count() FROM t_map_null WHERE a = map('name', NULL, '', NULL);
SELECT count() FROM t_move_to_prewhere WHERE a AND b AND c AND NOT ignore(fat_string);
SELECT COUNT() FROM t_obj;
SELECT count() FROM t_projections_lwd;
SELECT count() FROM t_s3_compressed_blocks WHERE NOT ignore(s);
SELECT count() FROM t_sparse WHERE notEmpty(s);
SELECT count() FROM t_sparse WHERE u > 0;
SELECT count() FROM t_sparse_detach WHERE s != '';
SELECT count() FROM t_sparse_full WHERE u % 4 = 0;
SELECT count() FROM t_sparse_full WHERE u IN (SELECT u FROM t_sparse_full WHERE id % 4 = 2);
SELECT count() FROM t_sparse_reload WHERE NOT ignore(*);
SELECT count() FROM t_sparse_s3 PREWHERE cond WHERE id IN (1, 3, 5, 7, 9, 11, 13, 15, 17) AND NOT ignore(s);
select count() from tab2 final;
SELECT count() FROM tab_00612 WHERE (key1, id1) IN (-1, 1) AND (key1, 1) IN (-1, 1) SETTINGS force_primary_key = 1;
select count() from tab_00717;
select count() from tab_lc where y == '0' settings local_filesystem_read_prefetch=1;
select count() from table1 as t1 join table2 as t2 on t1.a = t2.a join table3 as t3 on t2.b = t3.b join table5 as t5 on t3.c = t5.c WHERE t1.a in table_set;
SELECT count() FROM table4 WHERE id % 10 = 7;
SELECT COUNT() FROM table_01;
SELECT count() FROM table_float WHERE (toUInt64(f) = 1) AND (f >= 1.3) AND (f <= 1.4) AND (u > 0);
SELECT COUNT() FROM table_for_alter;
SELECT count() FROM table_for_ttl;
SELECT count() FROM table_map_with_key_integer WHERE m = map();
SELECT count() FROM table_rename_with_ttl;
select count() from tableOut;
select count() from tbl where _partition_value = ('2021-04-01', 1, 2) settings max_rows_to_read = 1;
select count() from tbl where _partition_value.1 = '2021-04-01' settings max_rows_to_read = 4;
select count() from tbl where _partition_value.2 = 0 settings max_rows_to_read = 4;
select count() from tbl where _partition_value.3 = 4 settings max_rows_to_read = 1;
select count() from test group by _file order by _file settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=0, compile_aggregate_expressions=0;
select count() from test group by _file order by _file settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=0, compile_aggregate_expressions=1;
select count() from test group by _file order by _file settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=1, compile_aggregate_expressions=0;
select count() from test group by _file order by _file settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=1, compile_aggregate_expressions=1;
select count() from test group by _file, _path order by _file, _path settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=0, compile_aggregate_expressions=0;
select count() from test group by _file, _path order by _file, _path settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=0, compile_aggregate_expressions=1;
select count() from test group by _file, _path order by _file, _path settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=1, compile_aggregate_expressions=0;
select count() from test group by _file, _path order by _file, _path settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=1, compile_aggregate_expressions=1;
SELECT count() FROM test PREWHERE x >= 10 WHERE x < 11 AND y = 10 SETTINGS max_rows_to_read = 3;
select count() from test where a = (select toUInt64(1) where 1 = 2) settings enable_early_constant_folding = 0, force_primary_key = 1;
SELECT COUNT() FROM test WHERE key <= 100000 AND (NOT (toLowCardinality('') IN (SELECT '')));
SELECT count() FROM test WHERE key = '1';
select count() from test where project in ('val1', 'val2');
select count() from test where toUInt64(val) = -1;
SELECT count() FROM test WHERE val = 0;
SELECT count() FROM test WHERE x != '100000';
SELECT count() FROM test WHERE x != 100000;
SELECT count() FROM test WHERE x < '100000';
SELECT count() FROM test WHERE x < 100000;
SELECT count() FROM test WHERE x <= '100000';
SELECT count() FROM test WHERE x <= 100000;
SELECT count() FROM test WHERE x = '100000';
SELECT count() FROM test WHERE x = 10 AND y < 10 SETTINGS max_rows_to_read = 20;
SELECT count() FROM test WHERE x = 10 AND y > 10 SETTINGS max_rows_to_read = 42;
SELECT count() FROM test WHERE x = 100000;
SELECT count() FROM test WHERE x > '100000';
SELECT count() FROM test WHERE x > 100000;
SELECT count() FROM test WHERE x >= '100000';
SELECT count() FROM test WHERE x >= 10 AND x <= 20 AND y >= 20 AND y <= 30;
SELECT count() FROM test WHERE x >= 10 AND y = 10 SETTINGS max_rows_to_read = 33;
SELECT count() FROM test WHERE x >= 100000;
SELECT count() FROM test WHERE y = 10 AND x <= 10 SETTINGS max_rows_to_read = 17;
SELECT count() FROM test WHERE y = 10 SETTINGS max_rows_to_read = 48;
select count() from test1 where i not in (1,2,3);
select count() FROM test1 where toDate(p) = '2020-09-01' and sipHash64(toString(toDate(p))) % 2 = 0;
select count() from test1 where toInt16(i) = 1777;
SELECT count() FROM test1601_detach_permanently_atomic.test_name_reuse;
SELECT count() FROM test1__fuzz_37 GROUP BY dictHas('non_existing_dictionary', materialize('a'));
SELECT count() FROM test2;
SELECT count() FROM test3;
SELECT count() FROM test4;
SELECT count() FROM test5;
SELECT count() FROM test6;
SELECT COUNT() FROM test;
SELECT count() FROM test;
select count() from test;
SELECT count() FROM test_01307 WHERE identity(val) = '2';
SELECT count() FROM test_01307 WHERE val = '2';
SELECT count() FROM test_01778 WHERE key = 'xxx';
SELECT count() FROM test_01778 WHERE key = toFixedString('xxx', 3);
SELECT count() FROM test_01778 WHERE toString(key) = 'xxx';
SELECT count() FROM test_02559 PREWHERE (1 OR ignore(id1)) AND (id1 <= 10 AND id2 > 0);
SELECT count() FROM test_02559 PREWHERE (1 OR ignore(id1)) AND id2 > 0;
SELECT count() FROM test_02559 PREWHERE (id1 <= 10 AND id2 > 0) AND (1 OR ignore(id1));
SELECT count() FROM test_02559 PREWHERE (id1 <= 10 AND id2 > 0) AND ignore(id1);
SELECT count() FROM test_02559 PREWHERE 1 OR ignore(id1);
SELECT count() FROM test_02559 PREWHERE id2>=0 AND (1 OR ignore(id1)) WHERE ignore(id1)=0;
SELECT count() FROM test_02559 PREWHERE ignore(id1) AND (id1 <= 10 AND id2 > 0);
SELECT count() FROM test_02559 PREWHERE ignore(id1) AND id2 > 0;
SELECT count() FROM test_02559 PREWHERE ignore(id1);
SELECT count() FROM test_02559__fuzz_20 PREWHERE (id2 >= 104) AND ((-9223372036854775808 OR (inf OR -2147483649 OR NULL) OR NULL) OR 1 OR ignore(ignore(id1) OR NULL, id1)) WHERE ignore(id1) = 0;
SELECT count() from test_1603_rename_bug_atomic.bar;
SELECT count() from test_1603_rename_bug_atomic.foo;
SELECT count() from test_1603_rename_bug_ordinary.bar;
SELECT count() from test_1603_rename_bug_ordinary.foo;
SELECT count() FROM test_alias;
SELECT count() FROM test_alter_attach_01901D;
SELECT count() FROM test_alter_attach_01901S;
SELECT count() from test_buffer.buf prewhere ts > toDateTime('2019-03-01 12:00:00') and ts < toDateTime('2019-03-02 12:00:00');
SELECT count() FROM test_merge JOIN (SELECT 'anystring' AS name) AS n USING name WHERE id = 1;
SELECT count() FROM test_move_partition_dest;
SELECT count() FROM test_move_partition_src;
SELECT count() FROM test_mtree WHERE x = NULL;
select count() from test_null_filter where key = null and value > 0 settings force_primary_key = 1;
SELECT count() FROM test_parallel_replicas_settings WHERE NOT ignore(*) settings log_comment='0_f621c4f2-4da7-4a7c-bb6d-052c442d0f7f';
SELECT count() FROM test_parallel_replicas_settings WHERE NOT ignore(*) settings log_comment='1_f621c4f2-4da7-4a7c-bb6d-052c442d0f7f';
SELECT count() FROM test_parallel_replicas_settings WHERE NOT ignore(*);
SELECT count() FROM test_parallel_replicas_unavailable_shards WHERE NOT ignore(*);
SELECT count() FROM test_r1;
SELECT count() FROM test_r2;
SELECT count() from test_startsWith where startsWith(a, 'a') settings force_primary_key=1;
SELECT count() from test_startsWith where startsWith(a, 'abc') settings force_primary_key=1;
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.id = 1 AND t1.value_1 = '1' AND t1.value_2 = '1' AND t1.value_3 = '1' SETTINGS force_primary_key = 1, force_data_skipping_indices = 'value_1_idx, value_2_idx, value_3_idx';
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.id = 1 AND t1.value_1 = '1' AND t1.value_2 = '1' SETTINGS force_primary_key = 1, force_data_skipping_indices = 'value_1_idx, value_2_idx';
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.id = 1 AND t1.value_1 = '1' SETTINGS force_primary_key = 1, force_data_skipping_indices = 'value_1_idx';
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.id = 1 SETTINGS force_primary_key = 1;
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.value = '1' SETTINGS force_data_skipping_indices = 'value_idx';
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.value_1 = '1' AND t1.value_2 = '1' SETTINGS force_data_skipping_indices = 'value_1_idx, value_2_idx';
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.value_1 = '1' SETTINGS force_data_skipping_indices = 'value_1_idx';
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.value_2 = '1' SETTINGS force_data_skipping_indices = 'value_2_idx';
SELECT count() FROM test_table AS t1 INNER JOIN (SELECT number AS id FROM numbers(10)) AS t2 ON t1.id = t2.id WHERE t1.value_3 = '1' SETTINGS force_data_skipping_indices = 'value_3_idx';
SELECT count() FROM test_table WHERE dictGet('test_dictionary_10_shards', 'value', key) != value;
SELECT count() FROM test_table WHERE dictGet('test_dictionary_load_factor', 'value', key) != value;
SELECT count() FROM test_table WHERE dictGet('test_sparse_dictionary_load_factor', 'value', key) != value;
SELECT count() FROM test_table WHERE id = 1 AND value_1 = '1' AND value_2 = '1' AND value_3 = '1' SETTINGS force_primary_key = 1, force_data_skipping_indices = 'value_1_idx, value_2_idx, value_3_idx';
SELECT count() FROM test_table WHERE id = 1 AND value_1 = '1' AND value_2 = '1' SETTINGS force_primary_key = 1, force_data_skipping_indices = 'value_1_idx, value_2_idx';
SELECT count() FROM test_table WHERE id = 1 AND value_1 = '1' SETTINGS force_primary_key = 1, force_data_skipping_indices = 'value_1_idx';
SELECT count() FROM test_table WHERE id = 1 AND value_3 = '1' SETTINGS force_primary_key = 1, force_data_skipping_indices = 'value_3_idx';
SELECT count() FROM test_table WHERE id = 1 SETTINGS force_primary_key = 1;
SELECT count() FROM test_table WHERE value = '1' SETTINGS force_data_skipping_indices = 'value_idx';
SELECT count() FROM test_table WHERE value_1 = '1' AND value_2 = '1' SETTINGS force_data_skipping_indices = 'value_1_idx, value_2_idx';
SELECT count() FROM test_table WHERE value_1 = '1' SETTINGS force_data_skipping_indices = 'value_1_idx';
SELECT count() FROM test_table WHERE value_2 = '1' SETTINGS force_data_skipping_indices = 'value_2_idx';
SELECT count() FROM test_table WHERE value_3 = '1' SETTINGS force_data_skipping_indices = 'value_3_idx';
SELECT count() FROM test_table_complex WHERE dictGet('test_complex_dictionary_10_shards', 'value', (key_1, key_2)) != value;
SELECT count() FROM test_table_complex WHERE dictGet('test_complex_dictionary_load_factor', 'value', (key_1, key_2)) != value;
SELECT count() FROM test_table_nullable WHERE dictGet('test_dictionary_10_shards_nullable', 'value', key) != value;
SELECT count() FROM test_table_nullable WHERE dictGet('test_dictionary_load_factor_nullable', 'value', key) != value;
SELECT count() FROM test_tuple PREWHERE sipHash64(sipHash64(p, toString(toDate(p))), toString(toDate(p))) % -0. WHERE i > NULL settings optimize_trivial_count_query=0, optimize_use_implicit_projections=1;
SELECT COUNT() from test_vertical_merge WHERE val2 <= 2400;
select count() from testNullableStates;
select count() from testNullableStatesAgg;
SELECT COUNT() from time_table WHERE value < now() - 1 AND value != 0 AND modulo(value, 2) != 0 AND timecol < now() - 1;
SELECT count() FROM too_many_parts;
SELECT count() FROM totimezone_op_mono WHERE toTimeZone(create_time, 'UTC') = '2020-09-01 00:00:00';
SELECT count() FROM transform_null_in;
select count() from tst final prewhere timestamp > '2017-01-01 00:00:00';
select count() from tst final prewhere timestamp > 0;
select count() from tst final prewhere val>0;
select count() from tst final where timestamp > '2017-01-01 00:00:00';
select count() from tst final where timestamp is not null;
select count() from tst final where timestamp>0;
select count() from tst final where val is not null;
select count() from tst final where val>0;
select count() from tst final;
select count() from tst where timestamp is not null;
select count() from tst where val is not null;
select count() from tst;
select count() from tsv;
select count() from ttl where s = 'a';
select count() from ttl where s = 'b';
select COUNT() from urlCluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv');
SELECT count() FROM users PREWHERE uid > 2000;
SELECT count() FROM uuid WHERE id != '00000000-0000-03f8-9cb8-cb1b82fb3900';
SELECT count() FROM uuid WHERE id < '00000000-0000-03f8-9cb8-cb1b82fb3900';
SELECT count() FROM uuid WHERE id <= '00000000-0000-03f8-9cb8-cb1b82fb3900';
SELECT count() FROM uuid WHERE id = '00000000-0000-03f8-9cb8-cb1b82fb3900';
SELECT count() FROM uuid WHERE id > '00000000-0000-03f8-9cb8-cb1b82fb3900';
SELECT count() FROM uuid WHERE id >= '00000000-0000-03f8-9cb8-cb1b82fb3900';
SELECT COUNT() FROM versioned_collapsing_table;
select count() from view(select 1 union all (select 2 union all select 3));
SELECT count() FROM wide_to_comp WHERE not ignore(*);
SELECT COUNT() from wikistat1 WHERE NOT ignore(*);
SELECT COUNT() from wikistat2 WHERE NOT ignore(*);
SELECT count() FROM with_deduplication;
SELECT count() FROM without_deduplication;
select count() from x where _partition_id in (select partitionId(number + 1) from numbers(1));
select count() from xp_d prewhere toYYYYMM(A) global in (select toYYYYMM(min(A)) from xp_d) where B > -1;
SELECT count() FROM xp_d WHERE A GLOBAL IN (SELECT NULL);
SELECT count() FROM XXXX WHERE indexHint(p = 1.) SETTINGS optimize_use_implicit_projections = 1;
SELECT count() FROM XXXX WHERE indexHint(t = toDateTime(0)) SETTINGS optimize_use_implicit_projections = 1;
SELECT count() GROUP BY 1 WITH TOTALS LIMIT 1;
SELECT count() OVER (ORDER BY number + 1) + 1 as foo FROM numbers(10) ORDER BY foo;
SELECT count() OVER (ORDER BY number + 1) FROM numbers(10) ORDER BY number;
SELECT count() OVER dummy WINDOW dummy AS (PARTITION BY dummy);
SELECT count() WITH TOTALS;
select count(), * from cluster(test_cluster_two_shards, currentDatabase(), dist_01247) group by number settings distributed_group_by_no_merge=1;
select count(), * from cluster(test_cluster_two_shards, currentDatabase(), dist_01247) group by number;
select count(), * from dist_01247 group by number limit 1 offset 1;
select count(), * from dist_01247 group by number limit 1 settings extremes=1;
select count(), * from dist_01247 group by number limit 1;
select count(), * from dist_01247 group by number offset 1 settings distributed_push_down_limit=0;
select count(), * from dist_01247 group by number offset 1 settings distributed_push_down_limit=1;
select count(), * from dist_01247 group by number order by number desc;
select count(), * from dist_01247 group by number order by number limit 1 by number;
select count(), * from dist_01247 group by number order by number limit 1;
select count(), * from dist_01247 group by number settings distributed_group_by_no_merge=1;
select count(), * from dist_01247 group by number settings extremes=1;
select count(), * from dist_01247 group by number with cube;
select count(), * from dist_01247 group by number with rollup;
select count(), * from dist_01247 group by number with totals limit 1;
select count(), * from dist_01247 group by number with totals order by number limit 1;
select count(), * from dist_01247 group by number with totals order by number;
select count(), * from dist_01247 group by number with totals;
select count(), * from dist_01247 group by number, 1;
select count(), * from dist_01247 group by number;
select count(), * from dist_01247 group by toString(number);
select count(), * from dist_01247 where number = _shard_num-1 group by number order by number limit 1 offset 1;
select count(), 42 AS z from remote('127.0.0.{2,3}', system.one) group by z WITH TOTALS;
select count(), 42 AS z from remote('127.0.0.{2,3}', system.one) group by z;
select count(), _file from test group by _file order by _file settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=0, compile_aggregate_expressions=0;
select count(), _file from test group by _file order by _file settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=0, compile_aggregate_expressions=1;
select count(), _file from test group by _file order by _file settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=1, compile_aggregate_expressions=0;
select count(), _file from test group by _file order by _file settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=1, compile_aggregate_expressions=1;
SELECT count(), _part from 02581_trips WHERE description = '' GROUP BY _part ORDER BY _part;
SELECT count(), _part FROM 02581_trips WHERE description = '' GROUP BY _part ORDER BY _part;
SELECT count(), _state FROM system.parts WHERE database = currentDatabase() AND table = 'data_01660' GROUP BY _state ORDER BY _state;
select count(), a[1] from wups group by a[1] order by a[1];
select count(), a[1] from wups group by a[1];
select count(), any(number) from dist_01247 group by number%2;
SELECT count(), arrayJoin([1, 2, 3]) AS n GROUP BY n WITH TOTALS ORDER BY n LIMIT 1 FORMAT JSON;
select count(), b from lc_00906 group by b;
select count(), count(a), max(a), min(a), avg(a), sum(a), any(a) from (select cast(1,'Nullable(Float64)') a) where a =0;
select count(), count(a), max(a), min(a), avg(a), sum(a), any(a) from (select cast(Null,'Nullable(Float64)') a);
SELECT count(), count(DISTINCT x, y) FROM (SELECT DISTINCT * FROM (SELECT 'a\0b' AS x, 'c' AS y UNION ALL SELECT 'a', 'b\0c'));
SELECT count(), count(DISTINCT x, y) FROM (SELECT DISTINCT * FROM (SELECT [1, 2] AS x, [3] AS y UNION ALL SELECT [1], [2, 3]));
select count(), count(n), count(s) from cluster('test_cluster_two_shards', currentDatabase(), t);
SELECT count(), countArray(Users.Dates), countArrayArray(Users.Dates) FROM sites;
SELECT count(), groupArray(message) FROM system.text_log WHERE logger_name LIKE '%' || currentDatabase() || '.t_sparse_columns_clear' || '%' AND level = 'Error';
SELECT count(), ignore('test cpu time query profiler') FROM numbers_mt(10000000000);
SELECT count(), min(a), max(a) FROM t SETTINGS additional_table_filters = {'t' : '0'};
SELECT count(), min(a), max(a) FROM t;
SELECT count(), min(id) FROM t_missed_subcolumns;
SELECT count(), min(id) FROM t_mutations_subcolumns;
SELECT count(), min(id), max(id), avg(id) FROM test2_d SETTINGS allow_experimental_parallel_reading_from_replicas = 2, max_parallel_replicas = 3, prefer_localhost_replica = 0, parallel_replicas_for_non_replicated_merge_tree=1;
SELECT count(), min(id), max(id), avg(id) FROM test_d SETTINGS allow_experimental_parallel_reading_from_replicas = 2, max_parallel_replicas = 3, prefer_localhost_replica = 0, parallel_replicas_for_non_replicated_merge_tree=1;
SELECT count(), min(k), max(k), avg(k) FROM t1 SETTINGS allow_experimental_parallel_reading_from_replicas = 1, max_parallel_replicas = 3, prefer_localhost_replica = 0, cluster_for_parallel_replicas='test_cluster_one_shard_three_replicas_localhost', parallel_replicas_single_task_marks_count_multiplier = 0.001;
SELECT count(), min(length(c.d)) AS minExpr, min(dcount) AS minAlias, max(length(c.d)) AS maxExpr, max(dcount) AS maxAlias, b FROM max_length_alias_14053 GROUP BY b;
SELECT count(), min(length(c.d)) AS minExpr, min(dcount) AS minAlias, max(length(c.d)) AS maxExpr, max(dcount) AS maxAlias, b FROM max_length_alias_14053__fuzz_45 GROUP BY b;
select count(), min(mostly_null), max(mostly_null) from file('02892.orc') where (mostly_null is not NULL);
select count(), min(mostly_null_lc), max(mostly_null_lc) from file('02892.orc') where (mostly_null_lc is not NULL);
select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc') where (negative_or_null > -50);
select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where (negative_or_null < -500);
select count(), min(nEgAtIvE_oR_nUlL), max(nEgAtIvE_oR_nUlL) from file('02892.orc', ORC, 'number UInt64, nEgAtIvE_oR_nUlL Int64') where (nEgAtIvE_oR_nUlL > -50) settings input_format_orc_case_insensitive_column_matching = 1;
select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where (negative_or_null > -50);
select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where (negative_or_null in (0, -1, -10, -100, -1000));
select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where (negative_or_null is null);
select count(), min(never_null), max(never_null) from file('02892.orc') where (never_null < 150);
select count(), min(never_null), max(never_null) from file('02892.orc') where (never_null > 850);
select count(), min(never_null_lc), max(never_null_lc) from file('02892.orc') where (never_null_lc < 150);
select count(), min(never_null_lc), max(never_null_lc) from file('02892.orc') where (never_null_lc > 850);
select count(), min(number) from dist_01247 group by 1;
select count(), min(number), max(number) from file('02892.orc') where indexHint(0);
select count(), min(positive_or_null), max(positive_or_null) from file('02892.orc', ORC, 'number UInt64, positive_or_null UInt64') where (positive_or_null < 50);
select count(), min(s), max(s) from file('02892.orc') where (s like '99%' or u64 == 2000);
select count(), min(s), max(s) from file('02892.orc') where (s like 'z%');
select count(), min(sometimes_null), max(sometimes_null) from file('02892.orc') where (sometimes_null < 150);
select count(), min(sometimes_null), max(sometimes_null) from file('02892.orc') where (sometimes_null > 850);
select count(), min(sometimes_null), max(sometimes_null) from file('02892.orc') where (sometimes_null is NULL);
select count(), min(sometimes_null_lc), max(sometimes_null_lc) from file('02892.orc') where (sometimes_null_lc < 150);
select count(), min(sometimes_null_lc), max(sometimes_null_lc) from file('02892.orc') where (sometimes_null_lc > 850);
select count(), min(sometimes_null_lc), max(sometimes_null_lc) from file('02892.orc') where (sometimes_null_lc is NULL);
select count(), min(string_or_null), max(string_or_null) from file('02892.orc', ORC, 'number UInt64, string_or_null LowCardinality(Nullable(String))') where (string_or_null like 'I am%');
select count(), min(string_or_null), max(string_or_null) from file('02892.orc', ORC, 'number UInt64, string_or_null LowCardinality(String)') where (string_or_null like 'I am%');
select count(), min(string_or_null), max(string_or_null) from file('02892.orc', ORC, 'number UInt64, string_or_null String') where (string_or_null == '');
select count(), min(u8), max(u8) from file('02892.orc') where (u8 < 0);
select count(), min(u8), max(u8) from file('02892.orc') where (u8 == 10 or 1 == 1);
SELECT count(), min(x), max(x) FROM test_00209;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM modify_sample SAMPLE 0.1;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM modify_sample_replicated SAMPLE 0.1;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 0.05 OFFSET 0.35;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 0.05 OFFSET 0.4;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 0.1;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/10 OFFSET 1/10;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/10 OFFSET 10/10;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/10 OFFSET 19/20;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/10 OFFSET 9/10;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/10;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/1e1;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 OFFSET 1/2 SETTINGS parallel_replicas_count = 3, parallel_replica_offset = 0;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 OFFSET 1/2 SETTINGS parallel_replicas_count = 3, parallel_replica_offset = 1;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 OFFSET 1/2 SETTINGS parallel_replicas_count = 3, parallel_replica_offset = 2;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 OFFSET 1/2 SETTINGS parallel_replicas_count = 3;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 OFFSET 1/2;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 SETTINGS parallel_replicas_count = 3, parallel_replica_offset = 0;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 SETTINGS parallel_replicas_count = 3, parallel_replica_offset = 1;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 SETTINGS parallel_replicas_count = 3, parallel_replica_offset = 2;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2 SETTINGS parallel_replicas_count = 3;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1/2;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1000;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1e-1;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 1e1/1e2;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276 SAMPLE 2e-2;
SELECT count(), min(x), max(x), sum(x), uniqExact(x) FROM sample_00276;
SELECT count(), min(y), max(y), sum(y), uniqExact(y) FROM modify_sample_replicated SAMPLE 0.1;
SELECT count(), notEmpty(v6) e FROM defaulted GROUP BY e;
SELECT COUNT(), part_type FROM system.parts WHERE database = currentDatabase() AND table = 'merge_table_standard_delete' AND active GROUP BY part_type ORDER BY part_type;
SELECT COUNT(), part_type FROM system.parts WHERE database = currentDatabase() AND table = 't_light' AND active GROUP BY part_type ORDER BY part_type;
SELECT count(), round(avg(bytes), -6) FROM system.parts WHERE database = currentDatabase() AND table = 'test' AND active;
SELECT count(), sum(1), uniq(123) FROM (SELECT * FROM system.numbers LIMIT 10);
SELECT count(), sum(cityHash64(*)) FROM mass_table_117;
SELECT count(), sum(cityHash64(*)) FROM mass_table_312 ARRAY JOIN n;
SELECT count(), sum(cityHash64(*)) FROM mass_table_312;
SELECT count(), sum(d) FROM dst;
SELECT count(), sum(d) FROM rdst;
SELECT count(), sum(d) FROM src;
SELECT count(), sum(d), uniqExact(_part) FROM dst;
select count(), sum(ephemeralOwner) from system.zookeeper where path like '/clickhouse/zero_copy/zero_copy_s3/' || (select value from system.zookeeper where path='/test/02413/'||currentDatabase()||'/dst' and name='table_shared_id') || '/%';
select count(), sum(ephemeralOwner) from system.zookeeper where path like '/clickhouse/zero_copy/zero_copy_s3/' || (select value from system.zookeeper where path='/test/02413/'||currentDatabase()||'/src' and name='table_shared_id') || '/%';
select count(), sum(ephemeralOwner) from system.zookeeper where path like '/clickhouse/zero_copy/zero_copy_s3/' || (select value from system.zookeeper where path='/test/02446/'||currentDatabase()||'/rmt' and name='table_shared_id') || '/%';
SELECT count(), sum(id) FROM remote('127.0.0.1|127.0.0.2|127.0.0.3|127.0.0.4', currentDatabase(), test) SETTINGS allow_experimental_parallel_reading_from_replicas = 2, max_parallel_replicas = 4, prefer_localhost_replica = 0, parallel_replicas_for_non_replicated_merge_tree = 1;
SELECT count(), sum(id) FROM test_d SETTINGS allow_experimental_parallel_reading_from_replicas = 2, max_parallel_replicas = 3, prefer_localhost_replica = 0, parallel_replicas_for_non_replicated_merge_tree=1;
SELECT count(), sum(length(s)) FROM size_hint;
select count(), sum(length(s)) from t settings max_threads = 3, read_backoff_min_latency_ms = 1, read_backoff_max_throughput = 1000000000, read_backoff_min_interval_between_events_ms = 1, read_backoff_min_events = 1, read_backoff_min_concurrency = 1;
select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in ('src_table_2', 'src_table_3') and n % 20 = 0;
select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in ('src_table_2', 'src_table_3');
select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in set and n % 2 = 0;
select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in set;
select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in tmp;
select count(), sum(n) from merge(currentDatabase(), 'src_table') where n % 2 = 0 and _table in tmp;
select count(), sum(n) from merge(currentDatabase(), 'src_table');
select count(), sum(n) from trunc;
select count(), sum(n), sum(m) from rmt2;
select count(), sum(n), sum(m) from rmt;
SELECT count(), sum(n), sum(toInt64(s)), max(n), min(n) FROM dst;
SELECT count(), sum(ns), max(ns) FROM (SELECT intDiv(number, 100) AS k, groupArray(number) AS ns FROM numbers_mt GROUP BY k) ARRAY JOIN ns;
SELECT count(), sum(ns), max(ns) FROM (SELECT intDiv(number, 100) AS k, groupArray(number) AS ns FROM remote('127.0.0.{2,3}', currentDatabase(), 'numbers_mt') GROUP BY k) ARRAY JOIN ns;
SELECT count(), sum(ns[1]), max(ns[1]), sum(ns[2])/10 FROM (SELECT intDiv(number, 100) AS k, groupArray([number, number*10]) AS ns FROM numbers_mt GROUP BY k) ARRAY JOIN ns;
select count(), sum(number) from file('02841.parquet') where indexHint(d128 between '-0.00000000000011'::Decimal128(20) and 0.00000000000006::Decimal128(20));
select count(), sum(number) from file('02841.parquet') where indexHint(d256 between '-0.00000000000000000000000000011'::Decimal256(40) and 0.00000000000000000000000000006::Decimal256(35));
select count(), sum(number) from file('02841.parquet') where indexHint(d32 between '-0.011'::Decimal32(3) and 0.006::Decimal32(3));
select count(), sum(number) from file('02841.parquet') where indexHint(d64 between '-0.0000011'::Decimal64(7) and 0.0000006::Decimal64(9));
select count(), sum(number) from file('02841.parquet') where indexHint(date32 between '1992-01-01' and '2023-08-02');
select count(), sum(number) from file('02841.parquet') where indexHint(dt64_cs between toDateTime64('-2.01e8'::Decimal64(1), 1) and toDateTime64(1.5e8::Decimal64(2), 2));
select count(), sum(number) from file('02841.parquet') where indexHint(dt64_ms between '2000-01-01' and '2005-01-01');
select count(), sum(number) from file('02841.parquet') where indexHint(dt64_ns between '2000-01-01' and '2005-01-01');
select count(), sum(number) from file('02841.parquet') where indexHint(dt64_s between toDateTime64('-2.01e8'::Decimal64(0), 0) and toDateTime64(1.5e8::Decimal64(0), 0));
select count(), sum(number) from file('02841.parquet') where indexHint(dt64_us between toDateTime64(900000000, 2) and '2005-01-01');
select count(), sum(number) from file('02841.parquet') where indexHint(f32 between -0.11::Float32 and 0.06::Float32);
select count(), sum(number) from file('02841.parquet') where indexHint(f64 between -0.11 and 0.06);
select count(), sum(number) from file('02841.parquet') where indexHint(fs between '-9' and '1!!!');
select count(), sum(number) from file('02841.parquet') where indexHint(i16 between -150 and 250);
select count(), sum(number) from file('02841.parquet') where indexHint(i32 between -150 and 250);
select count(), sum(number) from file('02841.parquet') where indexHint(i64 between -150 and 250);
select count(), sum(number) from file('02841.parquet') where indexHint(i8 between -3 and 2);
select count(), sum(number) from file('02841.parquet') where indexHint(mostly_null is not NULL);
select count(), sum(number) from file('02841.parquet') where indexHint(mostly_null_lc is not NULL);
select count(), sum(number) from file('02841.parquet') where indexHint(negative_or_null > -50);
select count(), sum(number) from file('02841.parquet') where indexHint(never_null < 150);
select count(), sum(number) from file('02841.parquet') where indexHint(never_null > 850);
select count(), sum(number) from file('02841.parquet') where indexHint(never_null_lc < 150);
select count(), sum(number) from file('02841.parquet') where indexHint(never_null_lc > 850);
select count(), sum(number) from file('02841.parquet') where indexHint(positive_or_null < 50);
select count(), sum(number) from file('02841.parquet') where indexHint(s between '-9' and '1!!!');
select count(), sum(number) from file('02841.parquet') where indexHint(s like '99%' or u64 == 2000);
select count(), sum(number) from file('02841.parquet') where indexHint(s like 'z%');
select count(), sum(number) from file('02841.parquet') where indexHint(sometimes_null > 850);
select count(), sum(number) from file('02841.parquet') where indexHint(sometimes_null is NULL);
select count(), sum(number) from file('02841.parquet') where indexHint(sometimes_null_lc < 150);
select count(), sum(number) from file('02841.parquet') where indexHint(sometimes_null_lc > 850);
select count(), sum(number) from file('02841.parquet') where indexHint(sometimes_null_lc is NULL);
select count(), sum(number) from file('02841.parquet') where indexHint(string_or_null == '');
select count(), sum(number) from file('02841.parquet') where indexHint(u16 between 4000 and 61000 or u16 == 42);
select count(), sum(number) from file('02841.parquet') where indexHint(u32 + 1000000 == 999000);
select count(), sum(number) from file('02841.parquet') where indexHint(u32 in (42, 4294966296));
select count(), sum(number) from file('02841.parquet') where indexHint(u64 + 1000000 == 1001000) settings input_format_parquet_filter_push_down = 0;
select count(), sum(number) from file('02841.parquet') where indexHint(u64 + 1000000 == 1001000);
select count(), sum(number) from file('02841.parquet') where indexHint(u64 in (42, 18446744073709550616));
select count(), sum(number) from file('02841.parquet') where indexHint(u8 < 0);
select count(), sum(number) from file('02841.parquet') where indexHint(u8 == 10 or 1 == 1);
select count(), sum(number) from file('02841.parquet', Parquet, 'number UInt64, nEgAtIvE_oR_nUlL Int64') where indexHint(nEgAtIvE_oR_nUlL > -50) settings input_format_parquet_case_insensitive_column_matching = 1;
select count(), sum(number) from file('02841.parquet', Parquet, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null > -50);
select count(), sum(number) from file('02892.orc') where indexHint(d128 between '-0.00000000000011'::Decimal128(20) and 0.00000000000006::Decimal128(20));
select count(), sum(number) from file('02892.orc') where indexHint(d32 between '-0.011'::Decimal32(3) and 0.006::Decimal32(3));
select count(), sum(number) from file('02892.orc') where indexHint(d64 between '-0.0000011'::Decimal64(7) and 0.0000006::Decimal64(9));
select count(), sum(number) from file('02892.orc') where indexHint(date32 between '1992-01-01' and '2023-08-02');
select count(), sum(number) from file('02892.orc') where indexHint(dt64_cs between toDateTime64('-2.01e8'::Decimal64(1), 1) and toDateTime64(1.5e8::Decimal64(2), 2));
select count(), sum(number) from file('02892.orc') where indexHint(dt64_ms between '2000-01-01' and '2005-01-01');
select count(), sum(number) from file('02892.orc') where indexHint(dt64_ns between '2000-01-01' and '2005-01-01');
select count(), sum(number) from file('02892.orc') where indexHint(dt64_s between toDateTime64('-2.01e8'::Decimal64(0), 0) and toDateTime64(1.5e8::Decimal64(0), 0));
select count(), sum(number) from file('02892.orc') where indexHint(dt64_us between toDateTime64(900000000, 2) and '2005-01-01');
select count(), sum(number) from file('02892.orc') where indexHint(f32 between -0.11::Float32 and 0.06::Float32);
select count(), sum(number) from file('02892.orc') where indexHint(f64 between -0.11 and 0.06);
select count(), sum(number) from file('02892.orc') where indexHint(fs between '-9' and '1!!!');
select count(), sum(number) from file('02892.orc') where indexHint(i16 between -150 and 250);
select count(), sum(number) from file('02892.orc') where indexHint(i32 between -150 and 250);
select count(), sum(number) from file('02892.orc') where indexHint(i64 between -150 and 250);
select count(), sum(number) from file('02892.orc') where indexHint(i8 between -3 and 2);
select count(), sum(number) from file('02892.orc') where indexHint(mostly_null is not NULL);
select count(), sum(number) from file('02892.orc') where indexHint(mostly_null_lc is not NULL);
select count(), sum(number) from file('02892.orc') where indexHint(negative_or_null > -50);
select count(), sum(number) from file('02892.orc') where indexHint(never_null < 150);
select count(), sum(number) from file('02892.orc') where indexHint(never_null > 850);
select count(), sum(number) from file('02892.orc') where indexHint(never_null_lc < 150);
select count(), sum(number) from file('02892.orc') where indexHint(never_null_lc > 850);
select count(), sum(number) from file('02892.orc') where indexHint(s between '-9' and '1!!!');
select count(), sum(number) from file('02892.orc') where indexHint(s like '99%' or u64 == 2000);
select count(), sum(number) from file('02892.orc') where indexHint(s like 'z%');
select count(), sum(number) from file('02892.orc') where indexHint(sometimes_null < 150);
select count(), sum(number) from file('02892.orc') where indexHint(sometimes_null > 850);
select count(), sum(number) from file('02892.orc') where indexHint(sometimes_null_lc < 150);
select count(), sum(number) from file('02892.orc') where indexHint(sometimes_null_lc > 850);
select count(), sum(number) from file('02892.orc') where indexHint(sometimes_null_lc is NULL);
select count(), sum(number) from file('02892.orc') where indexHint(string_or_null == '');
select count(), sum(number) from file('02892.orc') where indexHint(u16 between 4000 and 61000 or u16 == 42);
select count(), sum(number) from file('02892.orc') where indexHint(u32 in (42, 4294966296));
select count(), sum(number) from file('02892.orc') where indexHint(u64 in (42, 18446744073709550616));
select count(), sum(number) from file('02892.orc') where indexHint(u8 < 0);
select count(), sum(number) from file('02892.orc') where indexHint(u8 == 10 or 1 == 1);
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null < -500);
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, nEgAtIvE_oR_nUlL Int64') where indexHint(nEgAtIvE_oR_nUlL > -50) settings input_format_orc_case_insensitive_column_matching = 1;
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null > -50);
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null in (0, -1, -10, -100, -1000));
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null is null);
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, positive_or_null UInt64') where indexHint(positive_or_null < 50);
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, string_or_null LowCardinality(Nullable(String))') where indexHint(string_or_null like 'I am%');
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, string_or_null LowCardinality(String)') where indexHint(string_or_null like 'I am%');
select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, string_or_null String') where indexHint(string_or_null == '');
SELECT count(), sum(number) FROM table2;
SELECT count(), sum(number) FROM table3;
SELECT count(), sum(part) FROM test_inserts;
SELECT count(), sum(ProfileEvents['AsyncInsertQuery']) FROM system.query_log WHERE event_date >= yesterday() AND type = 'QueryFinish' AND current_database = currentDatabase() AND query ILIKE 'INSERT INTO t_async_insert_02193_1%';
SELECT count(), sum(ProfileEvents['InsertedWideParts']), sum(ProfileEvents['InsertedCompactParts']) FROM system.query_log WHERE current_database = currentDatabase() AND log_comment = '02306_part_types_profile_events' AND query ILIKE 'INSERT INTO%' AND type = 'QueryFinish';
SELECT count(), sum(ProfileEvents['MergedIntoWideParts']), sum(ProfileEvents['MergedIntoCompactParts']) FROM system.query_log WHERE current_database = currentDatabase() AND log_comment = '02306_part_types_profile_events' AND query ILIKE 'OPTIMIZE TABLE%' AND type = 'QueryFinish';
SELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_lwd_mutations' AND active;
SELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_materialize_delete' AND active;
SELECT count(), sum(s::UInt64) FROM t_sparse_mutations_2 WHERE s != '';
SELECT count(), sum(toInt64(n)), max(n), min(n) FROM dist;
SELECT count(), sum(toInt64(n)), max(n), min(n) FROM mv;
SELECT count(), sum(toUInt64(ns)), max(toUInt64(ns)) FROM (SELECT intDiv(number, 100) AS k, groupArray(toString(number)) AS ns FROM numbers_mt GROUP BY k) ARRAY JOIN ns;
SELECT count(), sum(toUInt64(ns)), max(toUInt64(ns)) FROM (SELECT intDiv(number, 100) AS k, groupArray(toString(number)) AS ns FROM remote('127.0.0.{2,3}', currentDatabase(), 'numbers_mt') GROUP BY k) ARRAY JOIN ns;
SELECT count(), sum(toUInt64(ns[1])), max(toUInt64(ns[1])), sum(toUInt64(ns[2]))/10 FROM (SELECT intDiv(number, 100) AS k, groupArray([toString(number), toString(number*10)]) AS ns FROM numbers_mt GROUP BY k) ARRAY JOIN ns;
SELECT count(), sum(toUInt64(ns[1])), max(toUInt64(ns[1])), sum(toUInt64(ns[2]))/10 FROM (SELECT intDiv(number, 100) AS k, groupArray([toString(number), toString(number*10)]) AS ns FROM remote('127.0.0.{2,3}', currentDatabase(), 'numbers_mt') GROUP BY k) ARRAY JOIN ns;
SELECT count(), sum(v) FROM t_materialize_delete;
SELECT count(), sum(v) FROM t_sparse_mutation;
SELECT count(), sum(v), arraySort(groupUniqArray(id % 10)) FROM t_lwd_mutations;
SELECT count(), sum(x) FROM mt;
SELECT count(), uniq(dummy) FROM remote('127.0.0.{2,3,4,5}', system.one) SETTINGS distributed_group_by_no_merge=1;
SELECT count(), uniq(dummy) FROM remote('127.0.0.{2,3}', system.one) LIMIT 1 SETTINGS distributed_group_by_no_merge=1;
SELECT count(), uniq(dummy) FROM remote('127.0.0.{2,3}', system.one) SETTINGS distributed_group_by_no_merge=1;
SELECT count(), uniq(x), avg(x), avg(toNullable(x)), groupArray(x), groupUniqArray(x) FROM (SELECT * FROM t UNION ALL SELECT * FROM t);
SELECT count(), uniq(x), avg(x), avg(toNullable(x)), groupArray(x), groupUniqArray(x) FROM remote('127.0.0.{1..10}', system.one) WHERE (rand() AS x) < 0 GROUP BY x;
SELECT count(), uniq(x), avg(x), avg(toNullable(x)), groupArray(x), groupUniqArray(x) FROM remote('127.0.0.{1..10}', system.one) WHERE (rand() AS x) < 0;
SELECT count(), uniq(x), avg(x), avg(toNullable(x)), groupArray(x), groupUniqArray(x) FROM t;
SELECT count(), uniqExact(x), min(x), max(x), sum(x), sum(cityHash64(x)) FROM merge;
SELECT count(), X FROM (SELECT * FROM foo_merge) f JOIN t2 USING Val WHERE Val = 3 AND Id = 3 GROUP BY X;
SELECT count(), X FROM foo_merge JOIN t2 USING Val WHERE Val = 3 AND (Id = 3 AND t2.X == 4) GROUP BY X;
SELECT count(), X FROM foo_merge JOIN t2 USING Val WHERE Val = 3 AND Id = 3 AND t2.X == 4 GROUP BY X;
SELECT count(), X FROM foo_merge JOIN t2 USING Val WHERE Val = 3 AND Id = 3 GROUP BY X;
select count()>0 from system.zookeeper_log where path like '/test/01158/' || currentDatabase() || '/rmt%' and duration_ms > 0;
select count(*) as `value`, 0 as `data` from test group by `data`;
SELECT count(*) AS total FROM ( SELECT message, info, count() AS cnt FROM installation_stats WHERE message_type LIKE 'fail' GROUP BY message, info ORDER BY cnt DESC LIMIT 5 BY message );
SELECT count(*) c FROM ( SELECT count(*), count(*) as c FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3 WHERE (n1.number = n2.number) AND (n2.number = n3.number) AND (SELECT count(*) FROM numbers(1)) = 1 ) WHERE (SELECT count(*) FROM numbers(2)) = 2 HAVING c IN(SELECT count(*) c FROM numbers(1));
SELECT COUNT(*) FROM ( SELECT table_lz4.id, table_lz4.ui AS ui1, table_gcd.id, table_gcd.ui AS ui2 FROM table_lz4 JOIN table_gcd ON table_lz4.id = table_gcd.id ) WHERE ui1 != ui2;
SELECT count(*) FROM (SELECT * FROM numbers(10) SETTINGS limit=5);
SELECT count(*) FROM (SELECT * FROM numbers(10)) SETTINGS limit=5;
SELECT count(*) FROM (SELECT * FROM numbers(10));
SELECT COUNT(*) FROM (SELECT * FROM test_table LIMIT 100);
select count(*) from (select first_col, count(second_col) from tp2 group by 1);
SELECT COUNT(*) FROM adaptive_granularity_alter1;
SELECT COUNT(*) FROM adaptive_granularity_alter2;
SELECT COUNT(*) FROM adaptive_granularity_alter;
SELECT COUNT(*) from bad_skip_idx WHERE value = 'xxxxxxxxxx1015';
SELECT count(*) FROM bitmap_test WHERE 0 = bitmapContains((SELECT groupBitmapState(uid) FROM bitmap_test WHERE pickup_date = '2019-01-01'), uid);
SELECT count(*) FROM bitmap_test WHERE 0 = bitmapHasAny((SELECT groupBitmapState(uid) FROM bitmap_test WHERE pickup_date = '2019-01-01'), bitmapBuild([uid]));
SELECT count(*) FROM bitmap_test WHERE bitmapContains((SELECT groupBitmapState(uid) FROM bitmap_test WHERE pickup_date = '2019-01-01'), uid);
SELECT count(*) FROM bitmap_test WHERE bitmapHasAny((SELECT groupBitmapState(uid) FROM bitmap_test WHERE pickup_date = '2019-01-01'), bitmapBuild([uid]));
SELECT count(*) FROM bitmap_test WHERE bitmapHasAny(bitmapBuild([uid]), (SELECT groupBitmapState(uid) FROM bitmap_test WHERE pickup_date = '2019-01-01'));
select count(*) from bug_delta_gorilla where 0 <> value_bug;
SELECT count(*) FROM compression_codec WHERE id = 2 GROUP BY id;
SELECT count(*) FROM compression_codec WHERE id = 3 GROUP BY id;
SELECT count(*) FROM compression_codec_log WHERE id = 2 GROUP BY id;
SELECT count(*) FROM compression_codec_multiple;
SELECT count(*) FROM compression_codec_multiple_log;
SELECT count(*) FROM compression_codec_multiple_replicated1;
SELECT count(*) FROM compression_codec_multiple_replicated2;
SELECT count(*) FROM compression_codec_multiple_tiny_log;
SELECT count(*) FROM compression_codec_replicated1 WHERE id = 2 GROUP BY id;
SELECT count(*) FROM compression_codec_replicated2 WHERE id = 2 GROUP BY id;
SELECT count(*) FROM compression_codec_tiny_log WHERE id = 2 GROUP BY id;
select count(*) from dat where eventTimestamp >= (select eventTimestamp from datDictionary);
SELECT count(*) from database_for_dict.dict1;
SELECT count(*) FROM database_for_dict.dict2;
SELECT count(*) from database_for_dict.dict2;
SELECT count(*) FROM database_for_dict.dict3;
SELECT count(*) from database_for_dict.dict3;
SELECT count(*) FROM database_for_dict.dict4;
SELECT count(*) FROM defaults;
SELECT COUNT(*) FROM e WHERE (t, dt) IN (86, '2022-12-12 11:00:00');
SELECT COUNT(*) FROM four_rows_per_granule FINAL;
SELECT COUNT(*) FROM four_rows_per_granule1;
SELECT COUNT(*) FROM four_rows_per_granule2;
SELECT COUNT(*) FROM four_rows_per_granule;
SELECT COUNT(*) FROM huge_granularity_small_blocks FINAL;
SELECT COUNT(*) FROM huge_granularity_small_blocks;
select count(*) from m3;
SELECT COUNT(*) FROM ms;
SELECT COUNT(*) FROM mt_with_pk WHERE x > toDateTime('2018-10-01 23:57:57');
SELECT COUNT(*) FROM mt_with_pk WHERE z + w > 5000;
SELECT COUNT(*) FROM mt_with_small_granularity WHERE x > toDateTime('2018-10-01 23:57:57');
SELECT COUNT(*) FROM mt_without_pk WHERE x > toDateTime('2018-10-01 23:57:57');
SELECT count(*) FROM numbers(10) AS a, numbers(11) AS b, numbers(12) AS c;
SELECT count(*) FROM numbers(10000) n1 CROSS JOIN numbers(1000) n2;
SELECT count(*) FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3 WHERE (n1.number = n2.number) AND (n2.number = n3.number);
SELECT count(*) FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3;
SELECT count(*) FROM or_expr_bug WHERE (a=1 OR a=2 OR a=3) AND (b=21 OR b=22 OR b=23);
SELECT count(*) FROM quorum2;
SELECT COUNT(*) FROM remote('127.0.0.1', currentDatabase(), remote_test);
SELECT count(*) FROM remote('127.0.0.{1,2}', merge(currentDatabase(), '^remote_test'));
SELECT count(*) FROM remote('127.0.0.{2,3}', currentDatabase(), numbers500k) WHERE bitmapContains((SELECT groupBitmapState(number) FROM numbers500k), toUInt32(number));
select count(*) from replacing_m3;
select COUNT(*) from s3Cluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv');
SELECT COUNT(*) FROM six_rows_per_granule;
SELECT count(*) FROM source WHERE toYear(dt) < 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt) < 2023;
SELECT count(*) FROM source WHERE toYear(dt) <= 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt) <= 2023;
SELECT count(*) FROM source WHERE toYear(dt) <> 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt) <> 2023;
SELECT count(*) FROM source WHERE toYear(dt) = 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt) = 2023;
SELECT count(*) FROM source WHERE toYear(dt) > 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt) > 2023;
SELECT count(*) FROM source WHERE toYear(dt) >= 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt) >= 2023;
SELECT count(*) FROM source WHERE toYear(dt_32) < 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt_32) < 2023;
SELECT count(*) FROM source WHERE toYear(dt_32) <= 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt_32) <= 2023;
SELECT count(*) FROM source WHERE toYear(dt_32) <> 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt_32) <> 2023;
SELECT count(*) FROM source WHERE toYear(dt_32) = 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt_32) = 2023;
SELECT count(*) FROM source WHERE toYear(dt_32) > 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt_32) > 2023;
SELECT count(*) FROM source WHERE toYear(dt_32) >= 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(dt_32) >= 2023;
SELECT count(*) FROM source WHERE toYear(ts) < 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts) < 2023;
SELECT count(*) FROM source WHERE toYear(ts) <= 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts) <= 2023;
SELECT count(*) FROM source WHERE toYear(ts) <> 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts) <> 2023;
SELECT count(*) FROM source WHERE toYear(ts) = 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts) = 2023;
SELECT count(*) FROM source WHERE toYear(ts) > 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts) > 2023;
SELECT count(*) FROM source WHERE toYear(ts) >= 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts) >= 2023;
SELECT count(*) FROM source WHERE toYear(ts_64) < 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts_64) < 2023;
SELECT count(*) FROM source WHERE toYear(ts_64) <= 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts_64) <= 2023;
SELECT count(*) FROM source WHERE toYear(ts_64) <> 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts_64) <> 2023;
SELECT count(*) FROM source WHERE toYear(ts_64) = 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts_64) = 2023;
SELECT count(*) FROM source WHERE toYear(ts_64) > 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts_64) > 2023;
SELECT count(*) FROM source WHERE toYear(ts_64) >= 2023 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYear(ts_64) >= 2023;
SELECT count(*) FROM source WHERE toYYYYMM(dt) < 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt) < 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt) <= 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt) <= 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt) <> 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt) <> 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt) = 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt) = 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt) > 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt) > 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt) >= 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt) >= 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) < 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) < 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) <= 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) <= 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) <> 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) <> 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) = 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) = 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) > 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) > 202312;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) >= 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(dt_32) >= 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts) < 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts) < 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts) <= 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts) <= 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts) <> 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts) <> 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts) = 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts) = 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts) > 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts) > 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts) >= 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts) >= 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) < 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) < 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) <= 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) <= 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) <> 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) <> 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) = 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) = 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) > 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) > 202312;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) >= 202312 SETTINGS allow_experimental_analyzer=1;
SELECT count(*) FROM source WHERE toYYYYMM(ts_64) >= 202312;
SELECT count(*) FROM system.data_skipping_indices WHERE table = 'data_01917' AND database = currentDatabase();
SELECT count(*) FROM system.data_skipping_indices WHERE table = 'data_01917_2' AND database = currentDatabase();
SELECT count(*) FROM system.parts WHERE active AND database = currentDatabase() AND table='quorum1';
select count(*) from system.processes where current_database = currentDatabase();
SELECT count(*) FROM system.query_cache;
SELECT COUNT(*) FROM system.query_cache;
select count(*) from t cross join numbers(2) r;
select count(*) from t, numbers(2) r;
SELECT count(*) FROM t1 WHERE b < 10 and a < 10;
SELECT count(*) FROM t1 WHERE b < NULL and a < '10';
SELECT count(*) FROM t1 WHERE c < 10 and a < 10;
SELECT count(*) FROM t_1 PREWHERE ordinary_1 > 5000 WHERE _part_offset != order_0;
SELECT count(*) FROM t_1 WHERE _part_offset != order_0;
SELECT count(*) FROM t_1 WHERE order_0 IN (SELECT toUInt64(rand64()%1000) FROM system.numbers limit 100) AND _part_offset != order_0;
select count(*) from t_light;
SELECT count(*) FROM t_light_r1;
select count(*) from tab_00484 prewhere s != 'abc' format Null;
select count(*) from tab_00484 prewhere s = 'abc' format Null;
SELECT count(*) FROM tab_00612 PREWHERE id1 IN (1);
SELECT count(*) FROM table WHERE (arrayExists(x -> ((x.1) = toLowCardinality('pattern')), values) = 1);
SELECT count(*) FROM test WHERE bitmapContains(bitmapBuild([1, 5, 7, 9]), toUInt16(num));
SELECT count(*) FROM test WHERE bitmapContains(bitmapBuild([1, 5, 7, 9]), toUInt32(num));
SELECT count(*) FROM test WHERE bitmapContains(bitmapBuild([1, 5, 7, 9]), toUInt64(num));
SELECT count(*) FROM test WHERE bitmapContains(bitmapBuild([1, 5, 7, 9]), toUInt8(num));
SELECT count(*) FROM test_array_ops where arr < CAST([10, -20] AS Array(Nullable(Int64)));
SELECT count(*) FROM test_array_ops where arr <= CAST([10, -20] AS Array(Nullable(Int64)));
SELECT count(*) FROM test_array_ops where arr = CAST([10, -20] AS Array(Nullable(Int64)));
SELECT count(*) FROM test_array_ops where arr > CAST([10, -20] AS Array(Nullable(Int64)));
SELECT count(*) FROM test_array_ops where arr >= CAST([10, -20] AS Array(Nullable(Int64)));
SELECT count(*) FROM test_array_ops where arr IN( CAST([10, -20] AS Array(Nullable(Int64))), CAST([null,10, -20] AS Array(Nullable(Int64))));
SELECT count(*) FROM test_block_mismatch FINAL;
SELECT count(*) FROM test_block_mismatch_sk1 FINAL;
SELECT count(*) FROM test_block_mismatch_sk2 FINAL;
SELECT count(*) FROM test_insert_t3;
SELECT COUNT(*) FROM testx WHERE NOT a AND t < (SELECT tkey FROM dt);
SELECT count(*) FROM tt_01373 FINAL;
SELECT count(*) FROM tt_01373;
SELECT COUNT(*) FROM two_rows_per_granule FINAL;
SELECT COUNT(*) FROM two_rows_per_granule;
select COUNT(*) from urlCluster('test_cluster_two_shards_localhost', 'http://localhost:11111/test/{a,b,c}.tsv');
SELECT COUNT(*) from valid_min_index_granularity_bytes_setting WHERE value = 'xxxxxxxxxx1015';
SELECT count(*) FROM view(SELECT * FROM numbers(10) SETTINGS limit=5);
SELECT count(*) FROM view(SELECT * FROM numbers(10)) SETTINGS limit=5;
SELECT count(*) FROM view(SELECT * FROM numbers(10));
SELECT COUNT(*) FROM zero_rows_per_granule FINAL;
SELECT COUNT(*) FROM zero_rows_per_granule1;
SELECT COUNT(*) FROM zero_rows_per_granule2;
SELECT COUNT(*) FROM zero_rows_per_granule;
SELECT count(*) OVER (ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) FROM numbers(4);
SELECT count(*), sum(_part_offset), sum(order_0) from t_1 prewhere _part != '' where granule == 0;
SELECT count(*), sum(_part_offset), sum(order_0) from t_1 prewhere granule == 0 where _part_offset >= 100000;
SELECT count(*), sum(_part_offset), sum(order_0) from t_1 where granule == 0 AND _part_offset < 100000;
SELECT count(*), sum(_part_offset), sum(order_0) from t_1 where granule == 0 AND _part_offset >= 100000;
SELECT count(*), sum(_part_offset), sum(order_0) from t_1 where granule == 0;
SELECT COUNT(1) == 1 FROM 01504_test;
SELECT COUNT(1) == 1 FROM 02416_test;
SELECT COUNT(1) == 1000 FROM 02416_test;
SELECT COUNT(1) == 10000 FROM 01504_test;
SELECT count(1) FROM ( SELECT materialize(1) as k, n FROM numbers(10) nums JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j USING k);
SELECT count(1) FROM ( SELECT materialize(1) as k, n FROM numbers(1000) nums JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j USING k);
SELECT count(1) FROM ( SELECT t2.n FROM numbers(10) t1 JOIN (SELECT toUInt32(1) AS k, number n FROM numbers(100)) t2 ON toUInt32(t1.number) = t2.k JOIN (SELECT toUInt32(1) AS k, number n FROM numbers(100)) t3 ON t2.k = t3.k JOIN (SELECT toUInt32(1) AS k, number n FROM numbers(100)) t4 ON t2.k = t4.k );
select count(1) from (select * from (select 1 as x, 2 as y) t1 left join (select 1 as xx, 2 as yy from numbers(555)) t2 on x = xx or y = yy);
select count(1) from (SELECT 1 AS a, count(1) + 1 FROM numbers(5));
select count(1) from (SELECT 1 AS a, count(1) FROM numbers(5));
SELECT count(1) FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3;
SELECT count(1) FROM remote('127.0.0.{1,1,2}', currentDatabase(), test_count);
SELECT count(1) FROM test_table PREWHERE (n % 8192) < 4000 WHERE (n % 33) == 0;
SELECT count(1) FROM test_table PREWHERE (n % 8192) < 4000;
SELECT count(1) FROM test_table PREWHERE 7 / (n % 5) > 2 WHERE (n % 33) == 0;
SELECT count(1) FROM test_table WHERE (n % 8192) < 4000;
SELECT count(1) FROM test_table WHERE 7 / (n % 5) > 2;
SELECT count(1), b FROM lc_00906__fuzz_46 GROUP BY b;
select count(1), min(d128), max(128) from file('02892.orc') where (d128 between '-0.00000000000011'::Decimal128(20) and 0.00000000000006::Decimal128(20));
select count(1), min(d32), max(d32) from file('02892.orc') where (d32 between '-0.011'::Decimal32(3) and 0.006::Decimal32(3));
select count(1), min(d64), max(d64) from file('02892.orc') where (d64 between '-0.0000011'::Decimal64(7) and 0.0000006::Decimal64(9));
select count(1), min(date32), max(date32) from file('02892.orc') where date32 between '1992-01-01' and '2023-08-02';
select count(1), min(dt64_cs), max(dt64_cs) from file('02892.orc') where (dt64_cs between toDateTime64('-2.01e8'::Decimal64(1), 1) and toDateTime64(1.5e8::Decimal64(2), 2));
select count(1), min(dt64_ms), max(dt64_ms) from file('02892.orc') where dt64_ms between '2000-01-01' and '2005-01-01';
select count(1), min(dt64_ns), max(dt64_ns) from file('02892.orc') where (dt64_ns between '2000-01-01' and '2005-01-01');
select count(1), min(dt64_s), max(dt64_s) from file('02892.orc') where (dt64_s between toDateTime64('-2.01e8'::Decimal64(0), 0) and toDateTime64(1.5e8::Decimal64(0), 0));
select count(1), min(dt64_us), max(dt64_us) from file('02892.orc') where (dt64_us between toDateTime64(900000000, 2) and '2005-01-01');
select count(1), min(f32), max(f32) from file('02892.orc') where (f32 between -0.11::Float32 and 0.06::Float32);
select count(1), min(f64), max(f64) from file('02892.orc') where (f64 between -0.11 and 0.06);
select count(1), min(fs), max(fs) from file('02892.orc') where (fs between '-9' and '1!!!');
select count(1), min(i16), max(i16) from file('02892.orc') where i16 between -150 and 250;
select count(1), min(i32), max(i32) from file('02892.orc') where i32 between -150 and 250;
select count(1), min(i64), max(i64) from file('02892.orc') where i64 between -150 and 250;
select count(1), min(i8), max(i8) from file('02892.orc') where i8 between -3 and 2;
select count(1), min(s), max(s) from file('02892.orc') where (s between '-9' and '1!!!');
select count(1), min(u16), max(u16) from file('02892.orc') where u16 between 4000 and 61000 or u16 == 42;
select count(1), min(u32), max(u32) from file('02892.orc') where u32 in (42, 4294966296);
select count(1), min(u64), max(u64) from file('02892.orc') where u64 in (42, 18446744073709550616);
select count(1), min(u8), max(u8) from file('02892.orc') where u8 in (10, 15, 250);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT 1 as k FROM numbers(1)) nums JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT 1 AS k FROM numbers(1)) nums JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT 1 as k FROM numbers(1)) nums JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT 1 as k FROM numbers(1)) nums JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT materialize(1) as k FROM numbers(1)) nums JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT materialize(1) AS k FROM numbers(1)) nums JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT materialize(1) as k FROM numbers(1)) nums JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT materialize(1) as k FROM numbers(1)) nums JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT materialize(toNullable(1)) as k FROM numbers(1)) nums JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT materialize(toNullable(1)) AS k FROM numbers(1)) nums JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT materialize(toNullable(1)) as k FROM numbers(1)) nums JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT materialize(toNullable(1)) as k FROM numbers(1)) nums JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT toNullable(1) as k FROM numbers(1)) nums JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT toNullable(1) as k FROM numbers(1)) nums JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT toNullable(1) as k FROM numbers(1)) nums JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(1) FROM ( SELECT k FROM (SELECT toNullable(1) as k FROM numbers(1)) nums JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j USING k);
SELECT count(1), uniqExact(n) FROM ( SELECT materialize(1) as k, n FROM numbers(1000) nums JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j USING k);
SELECT count(1), uniqExact(n) FROM ( SELECT materialize(1) as k, n FROM numbers(1000000) nums JOIN (SELECT materialize(1) AS k, number n FROM numbers(10)) j USING k);
SELECT count(3.4028234663852886e38), b FROM lc_00906__fuzz_46 GROUP BY b;
SELECT count(7 = (SELECT number FROM numbers(0) ORDER BY number ASC NULLS FIRST LIMIT 7)) FROM xp_d PREWHERE toYYYYMM(A) GLOBAL IN (SELECT NULL = (SELECT number FROM numbers(1) ORDER BY number DESC NULLS LAST LIMIT 1), toYYYYMM(min(A)) FROM xp_d) WHERE B > NULL FORMAT Null;
SELECT count(_part) FROM test_view_tb;
select count(a) from m3;
select count(a) from replacing_m3 FINAL;
select count(a) from replacing_m3;
SELECT count(a), count(b), count(c) FROM decimal;
select count(b) AS len, substring(a, 1, 3), substring(a, 1, len) from group_by_all group by all;
select count(b) from m3;
select count(b) from replacing_m3 FINAL;
select count(b) from replacing_m3;
select count(d/3) from test settings force_optimize_projection = 1;
SELECT count(db.name) FROM system.tables AS t JOIN system.databases AS db ON t.database = db.name WHERE t.name = 'one';
select count(distinct a) from t;
SELECT count(distinct data) FROM compression_codec_multiple;
SELECT count(distinct data) FROM compression_codec_multiple_log;
SELECT count(distinct data) FROM compression_codec_multiple_replicated1;
SELECT count(distinct data) FROM compression_codec_multiple_replicated2;
SELECT count(distinct data) FROM compression_codec_multiple_tiny_log;
SELECT COUNT(DISTINCT data) FROM compression_codec_multiple_with_key WHERE id < 222;
SELECT COUNT(DISTINCT data) FROM compression_codec_multiple_with_key_replicated WHERE id < 222;
SELECT COUNT(DISTINCT hash) FROM store_of_hash_00804;
SELECT COUNT(DISTINCT hash) FROM store_of_hash_00926;
SELECT count(DISTINCT NULL);
SELECT count(DISTINCT number >= 10 ? number : NULL) FROM numbers(10);
SELECT count(DISTINCT number >= 5 ? number : NULL) FROM numbers(10);
select count(DISTINCT number) from dist_01247 group by number;
select count(DISTINCT number) from dist_01247;
SELECT count(DISTINCT t) FROM (SELECT initialQueryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());
SELECT count(DISTINCT t) FROM (SELECT queryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());
SELECT count(distinct value) FROM replicated_mutations_empty_partitions;
SELECT count(distinct value) FROM table_for_ttl;
SELECT count(DISTINCT x) FROM (SELECT number % 123 AS x FROM system.numbers LIMIT 1000);
SELECT count(DISTINCT x, y) FROM (SELECT number % 11 AS x, number % 13 AS y FROM system.numbers LIMIT 1000);
SELECT COUNT(DISTINCT(_part)) FROM t_1;
SELECT count(distinct(dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', toUInt64(number)))) from numbers(100);
select count(geohashDecode('abcdefghijklmnopqrstuvwxyz'));
SELECT COUNT(hash) FROM store_of_hash_00804;
SELECT COUNT(hash) FROM store_of_hash_00926;
SELECT count(id) AS cnt FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;
SELECT count(id) FROM t_func_to_subcolumns;
select count(if(d=4, d, 1)) from test settings force_optimize_projection = 1;
select count(if(d=4, Null, 1)) from test settings force_optimize_projection = 1;
SELECT count(in(NULL, []));
SELECT count(in(NULL, tuple(NULL)));
SELECT count(n) FROM defaults;
SELECT count(n) FROM t2_00856 WHERE if(1, 1, n = 0);
SELECT count(n) FROM t_func_to_subcolumns;
SELECT COUNT(n) FROM zstd_1_00 LEFT JOIN words ON i == n WHERE b == word;
SELECT COUNT(n) FROM zstd_1_24 LEFT JOIN words ON i == n WHERE b == word;
SELECT COUNT(n) FROM zstd_9_00 LEFT JOIN words ON i == n WHERE b == word;
SELECT COUNT(n) FROM zstd_9_24 LEFT JOIN words ON i == n WHERE b == word;
SELECT count(n), sum(n) FROM test_dist_02536;
SELECT count(n1.number), count(n2.number), count(n3.number) FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3;
SELECT count(notIn(NULL, []));
SELECT count(notIn(NULL, tuple(NULL)));
SELECT count(notNullIn(NULL, []));
SELECT count(notNullIn(NULL, tuple(NULL)));
SELECT count(now()) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'ignore';
SELECT count(now()) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'save';
SELECT count(now()) SETTINGS use_query_cache = true;
SELECT count(NULL as a), a FROM t1 WITH TOTALS;
SELECT count(NULL) FROM t1 WITH TOTALS;
SELECT count(NULL);
SELECT count(nullIn(NULL, []));
SELECT count(nullIn(NULL, tuple(NULL)));
select count(number), 1 AS k1, 2 as k2, 3 as k3 from numbers_mt(10000000) group by k1, k2, k3 settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=0, compile_aggregate_expressions = 1;
select count(number), 1 AS k1, 2 as k2, 3 as k3 from numbers_mt(10000000) group by k1, k2, k3 settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=0, compile_aggregate_expressions=0;
select count(number), 1 AS k1, 2 as k2, 3 as k3 from numbers_mt(10000000) group by k1, k2, k3 settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=1, compile_aggregate_expressions = 0;
select count(number), 1 AS k1, 2 as k2, 3 as k3 from numbers_mt(10000000) group by k1, k2, k3 settings optimize_group_by_constant_keys=1, enable_software_prefetch_in_aggregation=1, compile_aggregate_expressions = 1;
select count(r.number) from t cross join numbers(2) r;
SELECT count(s) FROM tab WHERE hasToken(s, '4C4B4B4B4B4B5040');
SELECT count(s), countIf(s != ''), arraySort(groupUniqArray(s)) FROM t_modify_to_nullable;
SELECT count(str1), count(str2) FROM (SELECT str1, str2 FROM 02919_test_multi_col LIMIT 100);
SELECT count(t.database) FROM (SELECT * FROM system.tables WHERE name = 'one') AS t JOIN system.databases AS db ON t.database = db.name;
select count(t.number) from t cross join numbers(2) r;
SELECT count(v), sum(v) FROM t_full_pk WHERE k = 0 OR k = 3 OR k = 7 OR k = 8;
SELECT count(v), sum(v) FROM t_full_pk WHERE k = 0;
SELECT count(v), sum(v) FROM t_sparse_pk WHERE k = 0 OR k = 3 OR k = 7 OR k = 8;
SELECT count(v), sum(v) FROM t_sparse_pk WHERE k = 0;
SELECT count(val) FROM test SETTINGS optimize_use_implicit_projections = 1;
SELECT count(x) FROM (SELECT CAST(number AS Nullable(UInt64)) AS x FROM system.numbers LIMIT 10);
SELECT count(x) FROM (SELECT nullIf(number, 5) AS x FROM system.numbers LIMIT 10);
SELECT count(x) FROM (SELECT number AS x FROM system.numbers LIMIT 10);
SELECT count(x) FROM tdm WHERE toDate(x) < toDate(now(), 'Asia/Istanbul') SETTINGS max_rows_to_read = 1;
SELECT count(x) FROM tdm__fuzz_23 WHERE toDate(x) < toDate(now(), 'Asia/Istanbul') SETTINGS max_rows_to_read = 1;
select countArray([NULL, NULL]);
SELECT countDigits(-1);
SELECT countDigits(-123.45678901::Decimal256(8));
SELECT countDigits(-123.4567890::Decimal128(7));
SELECT countDigits(-123.456789::Decimal256(8));
SELECT countDigits(-123.456789::Decimal64(6));
SELECT countDigits(-123.45678::Decimal128(7));
SELECT countDigits(-123.45678::Decimal32(5));
SELECT countDigits(-123.4567::Decimal64(6));
SELECT countDigits(-12345);
SELECT countDigits(0);
SELECT countDigits(0xFFFFFFFFFFFFFFFF);
SELECT countDigits(1);
SELECT countDigits(12345);
SELECT countDigits(CAST(-1 AS UInt128));
SELECT countDigits(CAST(-1 AS UInt256));
SELECT countDigits(CAST(0x8000000000000000 AS Int64));
SELECT countDigits(CAST(CAST(-1 AS UInt128) DIV 2 + 1 AS Int128));
SELECT countDigits(CAST(CAST(-1 AS UInt256) DIV 2 + 1 AS Int256));
SELECT countDigits(materialize(toDecimal32(4.2, 1))), countDigits(materialize(toDecimal64(4.2, 2))), countDigits(materialize(toDecimal128(4.2, 3)));
SELECT countDigits(toDecimal32(0, 0)), countDigits(toDecimal32(42, 0)), countDigits(toDecimal32(4.2, 1)), countDigits(toDecimal64(0, 0)), countDigits(toDecimal64(42, 0)), countDigits(toDecimal64(4.2, 2)), countDigits(toDecimal128(0, 0)), countDigits(toDecimal128(42, 0)), countDigits(toDecimal128(4.2, 3));
SELECT countDigits(toDecimal32(1, 9)), countDigits(toDecimal32(-1, 9)), countDigits(toDecimal64(1, 18)), countDigits(toDecimal64(-1, 18)), countDigits(toDecimal128(1, 38)), countDigits(toDecimal128(-1, 38));
SELECT countDigits(toInt8(0)), countDigits(toInt8(0)), countDigits(toUInt8(0)), countDigits(toInt16(0)), countDigits(toInt16(0)), countDigits(toUInt16(0)), countDigits(toInt32(0)), countDigits(toInt32(0)), countDigits(toUInt32(0)), countDigits(toInt64(0)), countDigits(toInt64(0)), countDigits(toUInt64(0));
SELECT countDigits(toInt8(127)), countDigits(toInt8(-128)), countDigits(toUInt8(255)), countDigits(toInt16(32767)), countDigits(toInt16(-32768)), countDigits(toUInt16(65535)), countDigits(toInt32(2147483647)), countDigits(toInt32(-2147483648)), countDigits(toUInt32(4294967295)), countDigits(toInt64(9223372036854775807)), countDigits(toInt64(-9223372036854775808)), countDigits(toUInt64(18446744073709551615));
SELECT countDigits(toInt8(42)), countDigits(toInt8(-42)), countDigits(toUInt8(42)), countDigits(toInt16(42)), countDigits(toInt16(-42)), countDigits(toUInt16(42)), countDigits(toInt32(42)), countDigits(toInt32(-42)), countDigits(toUInt32(42)), countDigits(toInt64(42)), countDigits(toInt64(-42)), countDigits(toUInt64(42));
SELECT countDigits(toNullable(toDecimal32(4.2, 1))), countDigits(materialize(toNullable(toDecimal32(4.2, 2)))), countDigits(toNullable(toDecimal64(4.2, 3))), countDigits(materialize(toNullable(toDecimal64(4.2, 4)))), countDigits(toNullable(toDecimal128(4.2, 5))), countDigits(materialize(toNullable(toDecimal128(4.2, 6))));
select countDistinct(a) from table_02152;
select countDistinct(b) from table_02152;
SELECT countDistinctIf(number % 10, number % 5 = 2) FROM numbers(1000);
SELECT CounterID FROM remote('127.0.0.2', currentDatabase(), 'globalin') WHERE (CounterID GLOBAL IN ( SELECT toUInt32(34) )) GROUP BY CounterID UNION ALL SELECT CounterID FROM remote('127.0.0.2', currentDatabase(), 'globalin') WHERE (CounterID GLOBAL IN ( SELECT toUInt32(34))) GROUP BY CounterID;
select CounterID, dummy from merge where dummy <> '' limit 10;
select CounterID, dummy from merge_distributed where dummy <> '' limit 10;
select CounterID, dummy1 from merge where dummy1 <> '' limit 10;
select CounterID, dummy1 from merge_distributed where dummy1 <> '' limit 10;
select CounterID, StartDate, Sign, VisitID, UserID, VisitVersion, BannerID, Load, PuidKeyArr, PuidValArr, arrayEnumerateUniqRanked(PuidKeyArr, PuidValArr) as uniqTestPuid from arr_tests_visits array join Test.BannerID as BannerID, Test.Load as Load, Test.PuidKey as PuidKeyArr, Test.PuidVal as PuidValArr;
select countIf(1, NULL);
SELECT countIf(DISTINCT number % 10, number % 5 = 2) FROM numbers(10000);
SELECT countIf(explain like '%Algorithm: DirectKeyValueJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN actions = 1 SELECT s FROM (SELECT toUInt64(9911) id) t1 INNER JOIN dict t2 USING (id) );
SELECT countIf(explain like '%Algorithm: DirectKeyValueJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN actions = 1 SELECT * FROM ( SELECT k AS key FROM t2 ) AS t2 INNER JOIN rdb ON rdb.key = t2.key ORDER BY key ASC );
SELECT countIf(explain like '%Algorithm: GraceHashJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN actions = 1 SELECT * FROM ( SELECT number AS key, number * 10 AS key2 FROM numbers_mt(10) ) AS t1 JOIN ( SELECT k AS key, k + 100 AS key2 FROM t2 ) AS t2 ON t1.key = t2.key );
SELECT countIf(explain like '%Algorithm: GraceHashJoin%'), countIf(explain like '%Algorithm: HashJoin%') FROM ( EXPLAIN PLAN actions = 1 SELECT * FROM ( SELECT number AS key, number * 10 AS key2 FROM numbers_mt(10) ) AS t1 JOIN ( SELECT k AS key, k + 100 AS key2 FROM t2 ) AS t2 ON t1.key = t2.key OR t1.key2 = t2.key2 );
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1 CROSS JOIN t2 CROSS JOIN t3 CROSS JOIN t4 SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1 JOIN t2 ON t1.a = t2.a CROSS JOIN t3 SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1 JOIN t2 USING a CROSS JOIN t3 SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2 CROSS JOIN t3 SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2 WHERE t1.b = t2.b SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3 WHERE t1.a = t2.a AND t1.a = t3.a SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3 WHERE t1.b = t2.b AND t1.b = t3.b SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t1.a = t3.a AND t1.a = t4.a SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t2.a = t3.a AND t3.a = t4.a SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.b = t2.b AND t1.b = t3.b AND t1.b = t4.b SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t2.a = t1.a AND t2.a = t3.a AND t2.a = t4.a SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t3.a = t1.a AND t3.a = t2.a AND t3.a = t4.a SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN QUERY TREE SELECT t1.a FROM t1, t2, t3, t4 WHERE t4.a = t1.a AND t4.a = t2.a AND t4.a = t3.a SETTINGS allow_experimental_analyzer = 1);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1 CROSS JOIN t2 CROSS JOIN t3 CROSS JOIN t4);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1 JOIN t2 ON t1.a = t2.a CROSS JOIN t3);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1 JOIN t2 USING a CROSS JOIN t3);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2 CROSS JOIN t3);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2 WHERE t1.b = t2.b);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3 WHERE t1.a = t2.a AND t1.a = t3.a);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3 WHERE t1.b = t2.b AND t1.b = t3.b);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t1.a = t3.a AND t1.a = t4.a);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t2.a = t3.a AND t3.a = t4.a);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t1.b = t2.b AND t1.b = t3.b AND t1.b = t4.b);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t2.a = t1.a AND t2.a = t3.a AND t2.a = t4.a);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t3.a = t1.a AND t3.a = t2.a AND t3.a = t4.a);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4 WHERE t4.a = t1.a AND t4.a = t2.a AND t4.a = t3.a);
SELECT countIf(explain like '%COMMA%' OR explain like '%CROSS%'), countIf(explain like '%INNER%') FROM ( EXPLAIN SYNTAX SELECT t1.a FROM t1, t2, t3, t4);
SELECT countIf(has(x, 10)) FROM big_array ARRAY JOIN x AS y WHERE 1;
SELECT countIf(has(x, 10)) FROM big_array ARRAY JOIN x AS y;
SELECT countIf(has(x, 10)), sum(y) FROM big_array ARRAY JOIN x AS y WHERE 1;
SELECT countIf(has(x, 10)), sum(y) FROM big_array ARRAY JOIN x AS y WHERE has(x,15);
SELECT countIf(has(x, 10)), sum(y) FROM big_array ARRAY JOIN x AS y;
SELECT countIf(ignore(*) == 0) FROM t1 JOIN t2 ON t1.s = t2.s;
select countIf(NULL, 1);
SELECT countIf(number % 2 != 0) FROM numbers(100);
SELECT countIf(number % 2 == 0) FROM numbers(100);
SELECT countIf(number % 2 > 2) FROM numbers(100);
SELECT countIf(number, toNullable('a') IN ('a', 'b')) FROM numbers(100);
SELECT countIf(s = 'foo'), arraySort(groupUniqArray(s)) FROM t_sparse_mutations_1;
SELECT countIf(sym = 'Red') OVER () AS res FROM ( SELECT CAST(CAST(number % 5, 'Enum8(\'Red\' = 0, \'Blue\' = 1, \'Yellow\' = 2, \'Black\' = 3, \'White\' = 4)'), 'LowCardinality(String)') AS sym FROM numbers(10) );
SELECT countMap(statusMap) FROM map_comb;
select countMatches('', 'foo');
select countMatches('foo', '');
select countMatches('foo.com bar.com baz.com bam.com', '([^. ]+)\.([^. ]+)');
select countMatches('foo.com@foo.com bar.com@foo.com baz.com@foo.com bam.com@foo.com', '([^. ]+)\.([^. ]+)@([^. ]+)\.([^. ]+)');
select countMatches('foobarbazfoobarbaz', 'foo(bar)(?:baz|)');
select countMatches('foobarfoo', 'foo');
select countMatches('foobarfoo', 'foo.*');
select countMatches('oooo', 'oo');
select countMatches(1, 'foo') from numbers(1);
select countMatches(concat(toString(number), 'foofoo'), 'foo') from numbers(2);
select countMatchesCaseInsensitive('foo.com BAR.COM baz.com bam.com', '([^. ]+)\.([^. ]+)');
select countMatchesCaseInsensitive('foo.com@foo.com bar.com@foo.com BAZ.com@foo.com bam.com@foo.com', '([^. ]+)\.([^. ]+)@([^. ]+)\.([^. ]+)');
select countMatchesCaseInsensitive('foOBarBAZfoobarbaz', 'foo(bar)(?:baz|)');
select countMatchesCaseInsensitive('foobarfoo', 'FOo');
select countMatchesCaseInsensitive('foobarfoo', 'FOo.*');
select countMatchesCaseInsensitive('oooo', 'Oo');
select countMatchesCaseInsensitive(concat(toString(number), 'Foofoo'), 'foo') from numbers(2);
SELECT countMerge(*) FROM (SELECT countState(0.5) AS a UNION ALL SELECT countState() UNION ALL SELECT countIfState(2, 1) UNION ALL SELECT countArrayState([1, 2]) UNION ALL SELECT countArrayIfState([1, 2], 1));
select countMerge(*) from b;
SELECT countMerge(cnt) FROM with_deduplication_mv;
SELECT countMerge(cnt) FROM without_deduplication_mv;
select countMerge(cnts), countMerge(cntsa), maxMerge(maxs), minMerge(mins), avgMerge(avgs), sumMerge(sums), anyMerge(anys) from ( select countState() cnts, countState(a) cntsa, maxState(a) maxs, minState(a) mins, avgState(a) avgs, sumState(a) sums, anyState(a) anys from (select cast(1,'Nullable(Float64)') a) where a =0 );
select countMerge(cnts), countMerge(cntsa), maxMerge(maxs), minMerge(mins), avgMerge(avgs), sumMerge(sums), anyMerge(anys) from ( select countState() cnts, countState(a) cntsa, maxState(a) maxs, minState(a) mins, avgState(a) avgs, sumState(a) sums, anyState(a) anys from (select cast(Null,'Nullable(Float64)') a));
SELECT countMerge(x + y) FROM (SELECT countState(a) as x, countState(b) as y from add_aggregate);
SELECT countMerge(x) AS y FROM ( SELECT 0 * countState() AS x FROM ( SELECT 1 UNION ALL SELECT 2));
SELECT countMerge(x) AS y FROM ( SELECT 2 * countState() AS x FROM ( SELECT 1 ));
SELECT countMerge(x) AS y FROM ( SELECT countState() * 0 AS x FROM ( SELECT 1 UNION ALL SELECT 2));
SELECT countMerge(x) AS y FROM ( SELECT countState() * 2 AS x FROM ( SELECT 1 ));
SELECT countOrNull(n) FROM defaults;
SELECT CountryID, StartDate, Tax FROM database_for_range_dict.range_dictionary ORDER BY CountryID, StartDate, EndDate;
SELECT CountryID, StartDate, Tax FROM database_for_range_dict.range_dictionary_nullable ORDER BY CountryID, StartDate, EndDate;
SELECT CountryID, StartDate, Tax FROM range_dictionary ORDER BY CountryID, StartDate, EndDate;
SELECT CountryID, StartDate, Tax FROM range_dictionary_nullable ORDER BY CountryID, StartDate, EndDate;
select countSubstrings('', '');
select countSubstrings('', '.');
select countSubstrings('', toString(number)) from numbers(1);
select countSubstrings('.', '');
select countSubstrings('.foobar.com.', '.');
select countSubstrings('0100', toString(number)) from numbers(1);
select countSubstrings('010000', toString(number)) from numbers(1);
select countSubstrings('100', toString(number)) from numbers(3);
select countSubstrings('aaa', materialize(''));
select countSubstrings('aaaa', 'aa');
select countSubstrings('aaaxxxaa\0xxx', pattern) from tab where id = 1;
select countSubstrings('com.foo.com.bar.com', 'com');
select countSubstrings('com.foobar', 'com');
select countSubstrings('com.foobar.com', 'com');
select countSubstrings('foo.com.bar', 'com');
select countSubstrings('foobar.com', '.');
select countSubstrings('foobar.com', 'com');
select countSubstrings('www.foobar.com', '.');
select countSubstrings(concat(toString(number), '000111'), '1') from numbers(1);
select countSubstrings(concat(toString(number), '000111'), toString(number)) from numbers(1);
select countSubstrings(concat(toString(number), '000111001'), '1') from numbers(1);
select countSubstrings(concat(toString(number), '000111001'), toString(number)) from numbers(1);
select countSubstrings(haystack, pattern) from tab where id = 1;
select countSubstrings(materialize('aaa'), '');
select countSubstrings(materialize('aaa'), materialize(''));
select countSubstrings(toString(number), '') from numbers(1);
select countSubstrings(toString(number), '1') from system.numbers limit 3 offset 9;
select countSubstrings(toString(number), toString(number)) from numbers(1);
select countSubstringsCaseInsensitive('aaaa', 'AA');
select countSubstringsCaseInsensitive('aaaxxxaa\0xxx', pattern) from tab where id = 1;
select countSubstringsCaseInsensitive('aab', char(number)) from numbers(100) where number >= 0x41 and number <= 0x43;
select countSubstringsCaseInsensitive('aba', 'B');
select countSubstringsCaseInsensitive('abaaaa', char(number)) from numbers(100) where number = 0x41;
select countSubstringsCaseInsensitive('bab', 'B');
select countSubstringsCaseInsensitive('BaBaB', 'b');
select countSubstringsCaseInsensitive('com.foo.com.bar.com', 'COM');
select countSubstringsCaseInsensitive('com.foobar', 'COM');
select countSubstringsCaseInsensitive('com.foobar.com', 'COM');
select countSubstringsCaseInsensitive('foo.com.bar', 'COM');
select countSubstringsCaseInsensitive('foobar.com', 'COM');
select countSubstringsCaseInsensitive(char(number), 'a') from numbers(100) where number >= 0x41 and number <= 0x43;
select countSubstringsCaseInsensitive(concat(toString(number), 'aaa111aa1'), char(number)) from numbers(100) where number = 0x41;
select countSubstringsCaseInsensitive(haystack, pattern) from tab where id = 1;
select countSubstringsCaseInsensitive(upper(char(number)), lower(char(number))) from numbers(100) where number = 0x41;
select countSubstringsCaseInsensitiveUTF8('aaaxxxaa\0xxx', pattern) from tab where id = 1;
select countSubstringsCaseInsensitiveUTF8('подстрока.рф', 'РФ');
select countSubstringsCaseInsensitiveUTF8('подстрока.рф.подстрока', 'РФ');
select countSubstringsCaseInsensitiveUTF8('рф.подстрока', 'рф');
select countSubstringsCaseInsensitiveUTF8('рф.подстрока.рф', 'рф');
select countSubstringsCaseInsensitiveUTF8('рф.подстрока.рф.подстрока.рф', 'РФ');
select countSubstringsCaseInsensitiveUTF8('фуу', 'Ф');
select countSubstringsCaseInsensitiveUTF8('ФуФ', 'ф');
select countSubstringsCaseInsensitiveUTF8('ФуФуФ', 'ф');
select countSubstringsCaseInsensitiveUTF8('ЯЯb', concat(substringUTF8(char(number), 2), 'я')) from numbers(100) where number = 0x41;
select countSubstringsCaseInsensitiveUTF8('яяяя', 'ЯЯ');
select countSubstringsCaseInsensitiveUTF8(concat(char(number), 'я'), 'Я') from numbers(100) where number = 0x41;
select countSubstringsCaseInsensitiveUTF8(haystack, pattern) from tab where id = 1;
SELECT countSubstringsCaseInsensitiveUTF8(materialize('сссссс'), 'ё');
SELECT countSubstringsCaseInsensitiveUTF8(materialize('сссссссс'), 'Ё');
SELECT countSubstringsCaseInsensitiveUTF8(materialize('ссссссссссссссссссс'), 'ЁС');
SELECT countSubstringsCaseInsensitiveUTF8(materialize('ссссссссссссссссссс'), 'ёёёёёёё');
SELECT countSubstringsCaseInsensitiveUTF8(materialize('ссссссссссссссссссс'), 'ёЁёЁёЁёссс');
SELECT countSubstringsCaseInsensitiveUTF8(materialize('ссссссссссссссссссс'), 'ёЁёЁёЁёЁёЁ');
SELECT covarPop(a, a), covarPop(b, b), covarPop(c, c) FROM decimal;
SELECT covarPop(x_value, y_value) FROM (SELECT x_value, y_value FROM series LIMIT 1);
SELECT covarPopMatrix(a_value) FROM (select a_value from fh limit 0);
SELECT covarPopMatrix(a_value) FROM (select a_value from fh limit 1);
SELECT covarPopMatrix(a_value, b_value, c_value, d_value) FROM (select a_value, b_value, c_value, d_value from fh limit 0);
SELECT covarPopMatrix(a_value, b_value, c_value, d_value) FROM (select a_value, b_value, c_value, d_value from fh limit 1);
SELECT covarPopStable(x_value, y_value) FROM (SELECT x_value, y_value FROM series LIMIT 1);
SELECT covarSamp(x_value, y_value) FROM (SELECT x_value, y_value FROM series LIMIT 1);
SELECT covarSampMatrix(a_value) FROM (select a_value from fh limit 0);
SELECT covarSampMatrix(a_value) FROM (select a_value from fh limit 1);
SELECT covarSampMatrix(a_value, b_value, c_value, d_value) FROM (select a_value, b_value, c_value, d_value from fh limit 0);
SELECT covarSampMatrix(a_value, b_value, c_value, d_value) FROM (select a_value, b_value, c_value, d_value from fh limit 1);
SELECT covarSampStable(x_value, y_value) FROM (SELECT x_value, y_value FROM series LIMIT 1);
SELECT cpu_total_week FROM ( WITH neighbor(cpu_total, 7) AS cpu_total_7 SELECT rDate, floor(multiIf(cpu_total_7 = 0, 0, cpu_total - cpu_total_7), 2) AS cpu_total_week FROM t ) AS t_table_471873 WHERE (rDate >= '2022-03-06') AND (rDate <= '2022-03-06') SETTINGS enable_optimize_predicate_expression = 1;
select CrC32('string'), crc32('test');
select CRC32('string');
SELECT CRC32(murmurHash3_128());
select CRC32(str1), CRC32(str2) from table1 order by CRC32(str1), CRC32(str2);
select CRC32(str2) from table1 order by CRC32(str2);
SELECT CRC32IEEE(sipHash128());
SELECT create_query FROM system.functions WHERE name = '02101_test_function';
SELECT create_table_query FROM system.tables WHERE database ILIKE 'INFORMATION_SCHEMA' AND table ILIKE 'TABLES';
SELECT create_table_query FROM system.tables WHERE name = 'test_table_default' AND database = '02097_db';
SELECT csv_col1, csv_col2 FROM test_new_col ORDER BY csv_col1;
SELECT csv_col3 FROM test_new_col ORDER BY csv_col3;
SELECT current_schemas(1);
SELECT current_schemas(false) AS result;
SELECT current_schemas(true) AS result;
select currentUser() = initial_user from system.processes where query like '%$!@#%';
select currentUser() = user(), currentUser() = USER();
SELECT cutIPv6(IPv6StringToNum('127.0.0.1'), 0, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 1);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 10);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 11);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 12);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 13);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 14);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 15);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 16);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 2);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 3);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 4);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 5);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 6);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 7);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 8);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 0, 9);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 1, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 10, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 11, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 12, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 13, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 14, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 15, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 16, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 2, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 3, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 4, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 5, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 6, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 7, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 8, 0);
SELECT cutIPv6(IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D'), 9, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 1);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 10);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 11);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 12);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 13);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 14);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 15);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 16);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 2);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 3);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 4);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 5);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 6);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 7);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 8);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 0, 9);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 1, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 10, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 11, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 12, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 13, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 14, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 15, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 16, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 2, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 3, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 4, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 5, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 6, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 7, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 8, 0);
SELECT cutIPv6(toFixedString(unhex('00000000000000000000FFFFC1FC110A'), 16), 9, 0);
SELECT cutIPv6(toFixedString(unhex(addr), 16), 0, 3) FROM addresses ORDER BY addr ASC;
SELECT cutIPv6(toFixedString(unhex(addr), 16), 3, 0) FROM addresses ORDER BY addr ASC;
SELECT d FROM (SELECT toDate(1) AS d) ORDER BY d DESC WITH FILL FROM toDate(3) TO toDate(0) STEP INTERVAL -1 DAY;
SELECT d FROM attach_r1 ORDER BY d;
SELECT d FROM pk_order ORDER BY d LIMIT 5;
select d from prewhere_alias prewhere a = 1;
select d from prewhere_alias prewhere a;
select d from prewhere_alias prewhere b = 1;
select d from prewhere_alias prewhere c = 1;
select d from prewhere_alias prewhere c;
select d from prewhere_alias prewhere d = 2;
SELECT d FROM test3 WHERE toFloat32(d) = 7777.0 SETTINGS max_rows_to_read = 2;
SELECT d FROM test3 WHERE toFloat64(d) = 7777.0 SETTINGS max_rows_to_read = 2;
select d from values('d Decimal(28, 8)', 0, 10) where d not in (18446744073709551615, 0);
select d from values('d Decimal(8, 8)', 0, 1) where d not in (-1, 0);
SELECT d, sumMerge(Sum), avgMerge(Avg), uniqMerge(Uniq), anyMerge(Any), anyIfMerge(AnyIf), arrayMap(x -> round(x, 6), quantilesMerge(0.5, 0.9)(Quantiles)), groupArrayMerge(GroupArray) FROM stored_aggregates GROUP BY d ORDER BY d;
SELECT d, uniqMerge(Uniq), uniqThetaMerge(UniqThetaSketch) FROM stored_aggregates GROUP BY d ORDER BY d;
SELECT d, a FROM pk_order ORDER BY d DESC, -a LIMIT 5;
SELECT d, a FROM pk_order ORDER BY d DESC, a DESC LIMIT 5;
SELECT d, a, a1, b FROM prewhere PREWHERE a LIKE 'hello%' ORDER BY a1;
SELECT d, b FROM pk_order ORDER BY d, b LIMIT 5;
SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 DAY LIMIT 5;
SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 HOUR LIMIT 5;
SELECT d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 15 MINUTE LIMIT 5;
SELECT d, dt, dtm FROM generateRandom('d Date, dt DateTime(\'UTC\'), dtm DateTime(\'UTC\')', 1, 10, 10) LIMIT 10;
SELECT d, e, f from decimal WHERE d > 0 AND d < 1 AND e > 0 AND e < 1 AND f > 0 AND f < 1;
SELECT d, k, m.k1, m.k2ID, m.s FROM summing_composite_key ARRAY JOIN FirstMap AS m ORDER BY d, k, m.k1, m.k2ID, m.s, SecondMap.k1ID, SecondMap.k2Key, SecondMap.k3Type, SecondMap.s;
SELECT d, k, m.k1, m.k2ID, m.s FROM summing_composite_key ARRAY JOIN FirstMap AS m ORDER BY d, k, m.k1, m.k2ID, m.s;
SELECT d, k, m.k1, m.k2ID, m.s FROM summing_composite_key FINAL ARRAY JOIN FirstMap AS m ORDER BY d, k, m.k1, m.k2ID, m.s;
SELECT d, k, m.k1, m.k2ID, sum(m.s) FROM summing_composite_key ARRAY JOIN FirstMap AS m GROUP BY d, k, m.k1, m.k2ID ORDER BY d, k, m.k1, m.k2ID;
SELECT d, k, m.k1ID, m.k2Key, m.k3Type, m.s FROM summing_composite_key ARRAY JOIN SecondMap AS m ORDER BY d, k, m.k1ID, m.k2Key, m.k3Type, m.s;
SELECT d, k, m.k1ID, m.k2Key, m.k3Type, m.s FROM summing_composite_key FINAL ARRAY JOIN SecondMap AS m ORDER BY d, k, m.k1ID, m.k2Key, m.k3Type, m.s;
SELECT d, k, m.k1ID, m.k2Key, m.k3Type, sum(m.s) FROM summing_composite_key ARRAY JOIN SecondMap AS m GROUP BY d, k, m.k1ID, m.k2Key, m.k3Type ORDER BY d, k, m.k1ID, m.k2Key, m.k3Type;
SELECT d, k1, sumMerge(Sum), avgMerge(Avg), uniqMerge(Uniq), anyMerge(Any), anyIfMerge(AnyIf), arrayMap(x -> round(x, 6), quantilesMerge(0.5, 0.9)(Quantiles)), groupArrayMerge(GroupArray) FROM stored_aggregates GROUP BY d, k1 ORDER BY d, k1;
SELECT d, k1, uniqMerge(Uniq), uniqThetaMerge(UniqThetaSketch) FROM stored_aggregates GROUP BY d, k1 ORDER BY d, k1;
SELECT d, k1, k2, sumMerge(Sum), avgMerge(Avg), uniqMerge(Uniq), anyMerge(Any), anyIfMerge(AnyIf), arrayMap(x -> round(x, 6), quantilesMerge(0.5, 0.9)(Quantiles)), groupArrayMerge(GroupArray) FROM stored_aggregates GROUP BY d, k1, k2 ORDER BY d, k1, k2;
SELECT d, k1, k2, uniqMerge(Uniq), uniqThetaMerge(UniqThetaSketch) FROM stored_aggregates GROUP BY d, k1, k2 ORDER BY d, k1, k2;
SELECT d, max(b) FROM pk_order GROUP BY d, a ORDER BY d, a LIMIT 5;
SELECT d, uniqMerge(s) FROM aggregates GROUP BY d ORDER BY d;
SELECT d, uniqMerge(Uniq) FROM stored_aggregates GROUP BY d ORDER BY d;
SELECT d, uniqMerge(Uniq), uniqThetaMerge(UniqThetaSketch) FROM stored_aggregates GROUP BY d ORDER BY d;
select d0.id from t1_distr d0 join ( select d1.id from t1_distr as d1 inner join t2_distr as d2 on d1.id = d2.id where d1.id > 0 order by d1.id ) s0 using id;
select d0.id from t1_distr d0 where d0.id in ( select d1.id from t1_distr as d1 inner join t2_distr as d2 on d1.id = d2.id where d1.id > 0 order by d1.id );
SELECT d1 > f1 FROM t ORDER BY f1;
SELECT d1 > f2 FROM t ORDER BY f2;
select d1, a1 from aliases_test array join d1 as d2, a1 as a2;
select d1, a1 from aliases_test array join d1 as d2, a1;
select d1, a1 from aliases_test array join d1, a1 as a2;
select d1, a1 from aliases_test array join d1, a1;
select d1, a1, a2, a3, a4, a5, a6 from aliases_test;
SELECT d1, f1, d1 * f1 FROM t ORDER BY f1;
SELECT d1, f1, d1 + f1 FROM t ORDER BY f1;
SELECT d1, f1, d1 - f1 FROM t ORDER BY f1;
SELECT d1, f1, d1 / f1 FROM t ORDER BY f1;
SELECT d1, f1, greatest(d1, f1) FROM t ORDER BY f1;
SELECT d1, f1, least(d1, f1) FROM t ORDER BY f1;
SELECT d1, f2, d1 * f2 FROM t ORDER BY f2;
SELECT d1, f2, d1 + f2 FROM t ORDER BY f2;
SELECT d1, f2, d1 - f2 FROM t ORDER BY f2;
SELECT d1, f2, d1 / f2 FROM t ORDER BY f2;
SELECT d1, f2, greatest(d1, f2) FROM t ORDER BY f2;
SELECT d1, f2, least(d1, f2) FROM t ORDER BY f2;
SELECT d2 > f1 FROM t ORDER BY f1;
SELECT d2 > f2 FROM t ORDER BY f2;
SELECT d2, f1, d2 * f1 FROM t ORDER BY f1;
SELECT d2, f1, d2 + f1 FROM t ORDER BY f1;
SELECT d2, f1, d2 - f1 FROM t ORDER BY f1;
SELECT d2, f1, d2 / f1 FROM t ORDER BY f1;
SELECT d2, f1, greatest(d2, f1) FROM t ORDER BY f1;
SELECT d2, f1, least(d2, f1) FROM t ORDER BY f1;
SELECT d2, f2, d2 * f2 FROM t ORDER BY f2;
SELECT d2, f2, d2 + f2 FROM t ORDER BY f2;
SELECT d2, f2, d2 - f2 FROM t ORDER BY f2;
SELECT d2, f2, d2 / f2 FROM t ORDER BY f2;
SELECT d2, f2, greatest(d2, f2) FROM t ORDER BY f2;
SELECT d2, f2, least(d2, f2) FROM t ORDER BY f2;
SELECT d3 > f1 FROM t ORDER BY f1;
SELECT d3 > f2 FROM t ORDER BY f2;
SELECT d3, f1, d3 * f1 FROM t ORDER BY f1;
SELECT d3, f1, d3 + f1 FROM t ORDER BY f1;
SELECT d3, f1, d3 - f1 FROM t ORDER BY f1;
SELECT d3, f1, d3 / f1 FROM t ORDER BY f1;
SELECT d3, f1, greatest(d3, f1) FROM t ORDER BY f1;
SELECT d3, f1, least(d3, f1) FROM t ORDER BY f1;
SELECT d3, f2, d3 * f2 FROM t ORDER BY f2;
SELECT d3, f2, d3 + f2 FROM t ORDER BY f2;
SELECT d3, f2, d3 - f2 FROM t ORDER BY f2;
SELECT d3, f2, d3 / f2 FROM t ORDER BY f2;
SELECT d3, f2, greatest(d3, f2) FROM t ORDER BY f2;
SELECT d3, f2, least(d3, f2) FROM t ORDER BY f2;
SELECT d32 FROM generateRandom('d32 Date32', 1, 10, 10) LIMIT 10;
SELECT d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL 1 DAY LIMIT 5;
SELECT d4 > f1 FROM t ORDER BY f1;
SELECT d4 > f2 FROM t ORDER BY f2;
SELECT d4, f1, d4 * f1 FROM t ORDER BY f1;
SELECT d4, f1, d4 + f1 FROM t ORDER BY f1;
SELECT d4, f1, d4 - f1 FROM t ORDER BY f1;
SELECT d4, f1, d4 / f1 FROM t ORDER BY f1;
SELECT d4, f1, greatest(d4, f1) FROM t ORDER BY f1;
SELECT d4, f1, least(d4, f1) FROM t ORDER BY f1;
SELECT d4, f2, d4 * f2 FROM t ORDER BY f2;
SELECT d4, f2, d4 + f2 FROM t ORDER BY f2;
SELECT d4, f2, d4 - f2 FROM t ORDER BY f2;
SELECT d4, f2, d4 / f2 FROM t ORDER BY f2;
SELECT d4, f2, greatest(d4, f2) FROM t ORDER BY f2;
SELECT d4, f2, least(d4, f2) FROM t ORDER BY f2;
SELECT d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL 15 MINUTE LIMIT 5;
SELECT d_ids, id, name FROM f LEFT ARRAY JOIN d_ids LEFT JOIN d ON d.id = d_ids ORDER BY id;
SELECT data FROM compression_codec_multiple_with_key WHERE id = 2222;
SELECT data FROM compression_codec_multiple_with_key WHERE id BETWEEN 3 AND 1112;
SELECT data FROM compression_codec_multiple_with_key_replicated WHERE id BETWEEN 3 AND 1112;
SELECT data FROM t_json_wide_parts ORDER BY data.k1 FORMAT JSONEachRow;
SELECT data, toTypeName(data) FROM t_json_bools;
SELECT data, toTypeName(data) FROM t_json_dist;
SELECT data.k1, count(), sum(data.k2.k3) FROM t_json_sparse GROUP BY data.k1 ORDER BY data.k1;
SELECT data.k1, data.k2.k3, data.k2.k4 FROM t_json_5 ORDER BY data.k1;
SELECT data.k1, data.k2.k3, data.k2.k4 FROM t_json_dist;
SELECT data_compressed_bytes FROM system.columns WHERE table = 'test_log' AND database = currentDatabase();
SELECT data_compressed_bytes FROM system.columns WHERE table = 'test_tiny_log' AND database = currentDatabase();
SELECT data_compressed_bytes, data_uncompressed_bytes FROM system.columns WHERE (database = currentDatabase()) AND (table = 'clear_column') AND (name = 'num');
SELECT data_uncompressed_bytes FROM system.columns WHERE (database = currentDatabase()) AND (table = 'clear_column') AND (name = 'num');
SELECT data_version FROM system.parts WHERE database=currentDatabase() AND table='t' AND active=1;
SELECT database AS db FROM system.tables WHERE db LIKE '%' format Null;
SELECT database, name FROM system.dictionaries WHERE database='db_01018' AND name LIKE 'dict1';
SELECT database, name FROM system.dictionaries WHERE database='memory_db' AND name LIKE 'dict2';
SELECT database, name, create_table_query, engine, engine_full, is_temporary FROM system.tables WHERE name LIKE 'test_01602%' ORDER BY name;
SELECT database, name, engine, is_temporary, data_paths, metadata_path, toTimeZone(metadata_modification_time, 'UTC'), dependencies_database, dependencies_table, create_table_query, engine_full, partition_key, sorting_key, primary_key, sampling_key, storage_policy, total_rows, total_bytes FROM system.tables WHERE is_temporary AND name='t_00693';
SELECT database, name, total_rows, total_bytes FROM system.tables WHERE is_temporary AND name = '02271_temporary_table_show_rows_bytes';
SELECT database, name, type FROM system.dictionaries WHERE database = {CLICKHOUSE_DATABASE:String} ORDER BY name;
SELECT database, name, uuid FROM system.dictionaries WHERE database='test_01155_ordinary';
SELECT database, substr(name, 1, 10) FROM system.tables WHERE database like 'test_01155_%';
SELECT database, t.name FROM (SELECT * FROM system.tables) AS t JOIN (SELECT name, name AS database FROM system.databases) AS db USING database WHERE db.name = 'system' AND t.name = 'one' FORMAT PrettyCompactNoEscapes;
SELECT database, t.name FROM (SELECT name AS database FROM system.databases) AS db ALL INNER JOIN system.tables AS t USING database WHERE database = 'system' AND t.name = 'one' FORMAT PrettyCompactNoEscapes;
SELECT database, t.name FROM (SELECT name, database FROM system.tables) AS t ALL INNER JOIN (SELECT name AS database FROM system.databases) AS db USING database WHERE database = 'system' AND t.name = 'one' FORMAT PrettyCompactNoEscapes;
SELECT database, t.name FROM (SELECT name, database FROM system.tables) AS t JOIN (SELECT name AS database FROM system.databases) AS db USING database WHERE database = 'system' AND t.name = 'one' SETTINGS join_default_strictness = 'ALL' FORMAT PrettyCompactNoEscapes;
SELECT database, t.name FROM system.tables AS t ALL INNER JOIN (SELECT name AS database FROM system.databases) AS db USING database WHERE database = 'system' AND t.name = 'one' FORMAT PrettyCompactNoEscapes;
SELECT database, table, name FROM system.dropped_tables_parts WHERE database = currentDatabase() and table = '25400_dropped_tables';
SELECT database, table, name FROM system.parts WHERE database = currentDatabase() AND startsWith(table, '02947_table_');
select date '2001-09-29';
SELECT date AS d, toNullable(f) AS f FROM 02861_interpolate WHERE id = '1' ORDER BY d ASC WITH FILL STEP toIntervalDay(1) INTERPOLATE (f);
select date, a, b from t1 where (date, a, b) NOT IN (select date,a,b from t2);
select date, a, b from t2 where (date, a, b) NOT IN (select date,a,b from t1);
SELECT date, argMax(name, clicks) FROM lc GROUP BY date;
SELECT date, i FROM t_read_in_order WHERE date = '2020-10-11' ORDER BY i LIMIT 5;
SELECT date, i FROM t_read_in_order WHERE date = '2020-10-12' ORDER BY i DESC LIMIT 5;
SELECT date, i FROM t_read_in_order WHERE date = '2020-10-12' ORDER BY i LIMIT 5;
SELECT date, id, name, value FROM (SELECT date, name, value, min(id) AS id FROM test_00597 GROUP BY date, name, value) WHERE id = 1;
SELECT date, uts, pr, ya_uid, adf_uid, owner_id, eff_uid, page_session, sample_key FROM elog_cut;
SELECT date, value FROM distributed_00952;
SELECT date, value FROM local_00952;
select date, value, version, sign from mult_tab final order by date, key, sign settings max_block_size=33;
select date, value, version, sign from mult_tab;
SELECT DATE_ADD(hour, '1', toDateTime(1234567890, 'UTC'));
SELECT DATE_ADD(hour, (SELECT 1), toDateTime(1234567890, 'UTC'));
SELECT DATE_ADD(hour, 1, toDateTime(1234567890, 'UTC'));
SELECT DATE_ADD(hour, 2, toDateTime(1234567890, 'UTC'));
SELECT DATE_ADD(hours, 2, toDateTime(1234567890, 'UTC'));
SELECT DATE_ADD(INTERVAL 1 YEAR, DATE '2022-01-01');
SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL '2 day');
SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL '2 days');
SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL '2' day);
SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL 2 day);
SELECT DATE_ADD(toDateTime(1234567890, 'UTC'), INTERVAL 2 days);
SELECT DATE_ADD(YEAR, 1, DATE '2022-01-01');
select DATE_ADD(YEAR, 3, toDate('2018-01-01'));
select DATE_DIFF(MONTH, toDate('2018-12-18'), toDate('2018-01-01'));
select DATE_DIFF(QQ, toDate('2018-12-18'), toDate('2018-01-01'));
SELECT DATE_DIFF(YEAR, DATE '2021-01-01', DATE '2022-01-01');
SELECT DATE_FORMAT(toDateTime('2000-12-31 00:33:44'), '%j'), DATE_FORMAT(toDate32('2000-12-31'), '%j');
SELECT DATE_FORMAT(toDateTime('2000-12-31 00:33:44'), '%k'), DATE_FORMAT(toDate32('2000-12-31'), '%k');
SELECT DATE_FORMAT(toDateTime('2018-01-01 00:33:44'), '%j'), DATE_FORMAT(toDate32('2018-01-01'), '%j');
SELECT DATE_FORMAT(toDateTime('2018-01-02 00:33:44'), '%I');
SELECT DATE_FORMAT(toDateTime('2018-01-02 00:33:44'), '%p'), DATE_FORMAT(toDate32('2018-01-02'), '%p');
SELECT DATE_FORMAT(toDateTime('2018-01-02 02:33:44'), '%H');
SELECT DATE_FORMAT(toDateTime('2018-01-02 11:33:44'), '%I');
SELECT DATE_FORMAT(toDateTime('2018-01-02 11:33:44'), '%p');
SELECT DATE_FORMAT(toDateTime('2018-01-02 12:33:44'), '%p');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%a'), DATE_FORMAT(toDate32('2018-01-02'), '%a');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%b'), DATE_FORMAT(toDate32('2018-01-02'), '%b');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%c'), DATE_FORMAT(toDate32('2018-01-02'), '%c');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%C'), DATE_FORMAT(toDate32('2018-01-02'), '%C');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%d'), DATE_FORMAT(toDate32('2018-01-02'), '%d');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%D'), DATE_FORMAT(toDate32('2018-01-02'), '%D');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%e'), DATE_FORMAT(toDate32('2018-01-02'), '%e');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%F'), DATE_FORMAT(toDate32('2018-01-02'), '%F');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%h'), DATE_FORMAT(toDate32('2018-01-02'), '%h');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%H'), DATE_FORMAT(toDate32('2018-01-02'), '%H');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%i'), DATE_FORMAT(toDate32('2018-01-02'), '%i');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%I'), DATE_FORMAT(toDate32('2018-01-02'), '%I');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%m'), DATE_FORMAT(toDate32('2018-01-02'), '%m');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%M'), DATE_FORMAT(toDate32('2018-01-02'), '%M');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%n'), DATE_FORMAT(toDate32('2018-01-02'), '%n');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%r'), DATE_FORMAT(toDate32('2018-01-02'), '%r');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%R'), DATE_FORMAT(toDate32('2018-01-02'), '%R');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%S'), DATE_FORMAT(toDate32('2018-01-02'), '%S');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%t'), DATE_FORMAT(toDate32('2018-01-02'), '%t');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%T'), DATE_FORMAT(toDate32('2018-01-02'), '%T');
SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%W'), DATE_FORMAT(toDate32('2018-01-02'), '%W');
SELECT DATE_SUB(DATE '2022-01-01', INTERVAL 1 YEAR);
SELECT DATE_SUB(YEAR, 1, DATE '2022-01-01');
SELECT date_trunc('day', toDate('2020-01-01', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('day', toDateTime('2020-01-01 04:11:22', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('day', toDateTime('2020-01-01 12:11:22', 'Europe/London'), 'Europe/London');
SELECT date_trunc('day', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('day', toDateTime64('2020-01-01 04:11:22.123', 3, 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('day', toDateTime64('2020-01-01 12:11:22.123', 3, 'Europe/London'), 'Europe/London');
SELECT date_trunc('day', toDateTime64('2020-01-01 20:11:22.123', 3, 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('hour', toDateTime('2020-01-01 04:11:22', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('hour', toDateTime('2020-01-01 12:11:22', 'Europe/London'), 'Europe/London');
SELECT date_trunc('hour', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('hour', toDateTime64('2020-01-01 04:11:22.123', 3, 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('hour', toDateTime64('2020-01-01 12:11:22.123', 3, 'Europe/London'), 'Europe/London');
SELECT date_trunc('hour', toDateTime64('2020-01-01 20:11:22.123', 3, 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('minute', toDateTime('2020-01-01 04:11:22', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('minute', toDateTime('2020-01-01 12:11:22', 'Europe/London'), 'Europe/London');
SELECT date_trunc('minute', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('minute', toDateTime64('2020-01-01 04:11:22.123', 3, 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('minute', toDateTime64('2020-01-01 12:11:22.123', 3, 'Europe/London'), 'Europe/London');
SELECT date_trunc('minute', toDateTime64('2020-01-01 20:11:22.123', 3, 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('month', toDate('2020-01-01', 'Europe/London'));
SELECT date_trunc('month', toDateTime('2020-01-01 04:11:22', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('month', toDateTime('2020-01-01 12:11:22', 'Europe/London'), 'Europe/London');
SELECT date_trunc('month', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('month', toDateTime64('2020-01-01 04:11:22.123', 3, 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('month', toDateTime64('2020-01-01 12:11:22.123', 3, 'Europe/London'), 'Europe/London');
SELECT date_trunc('month', toDateTime64('2020-01-01 20:11:22.123', 3, 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('quarter', toDate('2020-01-01', 'Europe/London'));
SELECT date_trunc('quarter', toDateTime('2020-01-01 04:11:22', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('quarter', toDateTime('2020-01-01 12:11:22', 'Europe/London'), 'Europe/London');
SELECT date_trunc('quarter', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('quarter', toDateTime64('2020-01-01 04:11:22.123', 3, 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('quarter', toDateTime64('2020-01-01 12:11:22.123', 3, 'Europe/London'), 'Europe/London');
SELECT date_trunc('quarter', toDateTime64('2020-01-01 20:11:22.123', 3, 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('second', toDateTime('2020-01-01 04:11:22', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('second', toDateTime('2020-01-01 12:11:22', 'Europe/London'), 'Europe/London');
SELECT date_trunc('second', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('second', toDateTime64('2020-01-01 04:11:22.123', 3, 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('second', toDateTime64('2020-01-01 12:11:22.123', 3, 'Europe/London'), 'Europe/London');
SELECT date_trunc('second', toDateTime64('2020-01-01 20:11:22.123', 3, 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('week', toDate('2020-01-01', 'Europe/London'));
SELECT date_trunc('week', toDateTime('2020-01-01 04:11:22', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('week', toDateTime('2020-01-01 12:11:22', 'Europe/London'), 'Europe/London');
SELECT date_trunc('week', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('week', toDateTime64('2020-01-01 04:11:22.123', 3, 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('week', toDateTime64('2020-01-01 12:11:22.123', 3, 'Europe/London'), 'Europe/London');
SELECT date_trunc('week', toDateTime64('2020-01-01 20:11:22.123', 3, 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('year', toDate('2020-01-01', 'Europe/London'));
SELECT date_trunc('year', toDateTime('2020-01-01 04:11:22', 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('year', toDateTime('2020-01-01 12:11:22', 'Europe/London'), 'Europe/London');
SELECT date_trunc('year', toDateTime('2020-01-01 20:11:22', 'Europe/London'), 'Asia/Tokyo');
SELECT date_trunc('year', toDateTime64('2020-01-01 04:11:22.123', 3, 'Europe/London'), 'America/Vancouver');
SELECT date_trunc('year', toDateTime64('2020-01-01 12:11:22.123', 3, 'Europe/London'), 'Europe/London');
SELECT date_trunc('year', toDateTime64('2020-01-01 20:11:22.123', 3, 'Europe/London'), 'Asia/Tokyo');
SELECT dateAdd(DAY, 1 arg_1, toDate('2019-05-05') arg_2), arg_1, arg_2;
SELECT DATEADD(INTERVAL 1 YEAR, DATE '2022-01-01');
SELECT DATEADD(YEAR, 1, DATE '2022-01-01');
SELECT dateDiff('day', materialize(toDate('2015-08-18', 'UTC')), materialize(toDate32('2015-08-19', 'UTC')), 'UTC');
SELECT dateDiff('day', materialize(toDate('2015-08-18', 'UTC')), materialize(toDateTime64('2015-08-19 00:00:00', 3, 'UTC')));
SELECT dateDiff('day', materialize(toDate('2015-08-18', 'UTC')), toDate32('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('day', materialize(toDate('2015-08-18', 'UTC')), toDateTime64('2015-08-19 00:00:00', 3, 'UTC'));
SELECT dateDiff('day', materialize(toDate32('1927-01-01', 'UTC')), materialize(toDateTime64('1927-01-02 00:00:00', 3, 'UTC')), 'UTC');
SELECT dateDiff('day', materialize(toDate32('1927-01-01', 'UTC')), toDateTime64('1927-01-02 00:00:00', 3, 'UTC'), 'UTC');
SELECT dateDiff('day', materialize(toDate32('2015-08-18', 'UTC')), materialize(toDate('2015-08-19', 'UTC')), 'UTC');
SELECT dateDiff('day', materialize(toDate32('2015-08-18', 'UTC')), materialize(toDateTime('2015-08-19 00:00:00', 'UTC')), 'UTC');
SELECT dateDiff('day', materialize(toDate32('2015-08-18', 'UTC')), toDate('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('day', materialize(toDate32('2015-08-18', 'UTC')), toDateTime('2015-08-19 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('day', materialize(toDateTime('2015-08-18 00:00:00', 'UTC')), materialize(toDate32('2015-08-19', 'UTC')), 'UTC');
SELECT dateDiff('day', materialize(toDateTime('2015-08-18 00:00:00', 'UTC')), toDate32('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('day', materialize(toDateTime64('1927-01-01 00:00:00', 3, 'UTC')), materialize(toDate32('1927-01-02', 'UTC')), 'UTC');
SELECT dateDiff('day', materialize(toDateTime64('1927-01-01 00:00:00', 3, 'UTC')), toDate32('1927-01-02', 'UTC'), 'UTC');
SELECT dateDiff('day', materialize(toDateTime64('2015-08-18 00:00:00', 0, 'UTC')), materialize(toDate('2015-08-19', 'UTC')));
SELECT dateDiff('day', materialize(toDateTime64('2015-08-18 00:00:00', 0, 'UTC')), toDate('2015-08-19', 'UTC'));
SELECT dateDiff('day', toDate('2014-10-26'), toDate('2014-10-27'), 'Asia/Istanbul');
SELECT dateDiff('day', toDate('2014-10-26'), toDate('2014-10-27'), 'UTC');
SELECT dateDiff('day', toDate('2015-08-18', 'UTC'), materialize(toDate32('2015-08-19', 'UTC')), 'UTC');
SELECT dateDiff('day', toDate('2015-08-18', 'UTC'), materialize(toDateTime64('2015-08-19 00:00:00', 3, 'UTC')));
SELECT dateDiff('day', toDate('2015-08-18', 'UTC'), toDate32('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('day', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT dateDiff('day', toDate('2017-12-31'), toDate('2017-01-01'));
SELECT dateDiff('day', toDate('2017-12-31'), toDate('2018-01-01'));
SELECT dateDiff('DAY', toDate('2019-05-05') arg_1, toDate('2019-05-06') arg_2), arg_1, arg_2;
SELECT dateDiff('DAY', toDate('2019-05-05') arg_1, toDate('2019-05-06') arg_2, 'UTC'), arg_1, arg_2;
SELECT dateDiff('DAY', toDate('2019-05-05') AS arg_1, toDate('2019-05-06') AS arg_2, 'UTC'), arg_1, arg_2;
SELECT dateDiff('day', toDate32('1927-01-01', 'UTC'), materialize(toDateTime64('1927-01-02 00:00:00', 3, 'UTC')), 'UTC');
SELECT dateDiff('day', toDate32('1927-01-01', 'UTC'), toDate32('1927-01-02', 'UTC'), 'UTC');
SELECT dateDiff('day', toDate32('1927-01-01', 'UTC'), toDateTime64('1927-01-02 00:00:00', 3, 'UTC'), 'UTC');
SELECT dateDiff('day', toDate32('2015-08-18', 'UTC'), materialize(toDate('2015-08-19', 'UTC')), 'UTC');
SELECT dateDiff('day', toDate32('2015-08-18', 'UTC'), materialize(toDateTime('2015-08-19 00:00:00', 'UTC')), 'UTC');
SELECT dateDiff('day', toDate32('2015-08-18', 'UTC'), toDate('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('day', toDate32('2015-08-18', 'UTC'), toDateTime('2015-08-19 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('day', toDateTime('2014-10-26 00:00:00', 'Asia/Istanbul'), toDateTime('2014-10-27 00:00:00', 'Asia/Istanbul'));
SELECT dateDiff('day', toDateTime('2014-10-26 00:00:00', 'UTC'), toDateTime('2014-10-27 00:00:00', 'UTC'));
SELECT dateDiff('day', toDateTime('2015-08-18 00:00:00', 'UTC'), materialize(toDate32('2015-08-19', 'UTC')), 'UTC');
SELECT dateDiff('day', toDateTime('2015-08-18 00:00:00', 'UTC'), toDate32('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('day', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1927-01-02 00:00:00', 0, 'UTC'));
SELECT dateDiff('day', toDateTime64('1927-01-01 00:00:00', 3, 'UTC'), materialize(toDate32('1927-01-02', 'UTC')), 'UTC');
SELECT dateDiff('day', toDateTime64('1927-01-01 00:00:00', 3, 'UTC'), toDate32('1927-01-02', 'UTC'), 'UTC');
SELECT dateDiff('day', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-01-02 00:00:00', 3, 'UTC'));
SELECT dateDiff('day', toDateTime64('2015-08-18 00:00:00', 0, 'UTC'), materialize(toDate('2015-08-19', 'UTC')));
SELECT dateDiff('days', toDateTime('2017-12-31'), toDateTime('2016-01-01'));
SELECT dateDiff('h', toDateTime('2018-01-01 22:00:00'), toDateTime('2018-01-02 23:00:00'));
SELECT dateDiff('hour', toDate('2014-10-26'), toDate('2014-10-27'), 'Asia/Istanbul');
SELECT dateDiff('hour', toDate('2014-10-26'), toDate('2014-10-27'), 'UTC');
SELECT dateDiff('hour', toDate('2015-08-18', 'UTC'), toDate32('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('hour', toDate('2017-12-31'), toDate('2016-01-01'), 'UTC');
SELECT dateDiff('hour', toDate('2017-12-31'), toDate('2017-01-01'), 'UTC');
SELECT dateDiff('hour', toDate('2017-12-31'), toDate('2018-01-01'), 'UTC');
SELECT dateDiff('hour', toDate32('1927-01-01', 'UTC'), toDate32('1927-01-02', 'UTC'), 'UTC');
SELECT dateDiff('hour', toDate32('1927-01-01', 'UTC'), toDateTime64('1927-01-02 00:00:00', 3, 'UTC'), 'UTC');
SELECT dateDiff('hour', toDate32('2015-08-18', 'UTC'), toDate('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('hour', toDate32('2015-08-18', 'UTC'), toDateTime('2015-08-19 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('hour', toDateTime('2014-10-26 00:00:00', 'Asia/Istanbul'), toDateTime('2014-10-27 00:00:00', 'Asia/Istanbul'));
SELECT dateDiff('hour', toDateTime('2014-10-26 00:00:00', 'UTC'), toDateTime('2014-10-27 00:00:00', 'UTC'));
SELECT dateDiff('hour', toDateTime('2015-08-18 00:00:00', 'UTC'), toDate32('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('hour', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1927-01-01 10:00:00', 0, 'UTC'));
SELECT dateDiff('hour', toDateTime64('1927-01-01 00:00:00', 3, 'UTC'), toDate32('1927-01-02', 'UTC'), 'UTC');
SELECT dateDiff('hour', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-01-01 10:00:00', 3, 'UTC'));
SELECT dateDiff('hours', toDateTime('2017-12-31', 'UTC'), toDateTime('2016-01-01', 'UTC'));
SELECT dateDiff('microseconds', toDateTime('2017-12-31', 'UTC'), toDateTime('2016-01-01', 'UTC'));
SELECT dateDiff('milliseconds', toDateTime('2017-12-31', 'UTC'), toDateTime('2016-01-01', 'UTC'));
SELECT dateDiff('minute', materialize(toDate('2017-12-31')), materialize(toDate('2018-01-01')), 'UTC');
SELECT dateDiff('minute', materialize(toDate('2017-12-31')), toDate('2016-01-01'), 'UTC');
SELECT dateDiff('minute', toDate('2014-10-26'), toDate('2014-10-27'), 'Asia/Istanbul');
SELECT dateDiff('minute', toDate('2014-10-26'), toDate('2014-10-27'), 'UTC');
SELECT dateDiff('minute', toDate('2015-08-18', 'UTC'), toDate32('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('minute', toDate('2017-12-31'), materialize(toDate('2017-01-01')), 'UTC');
SELECT dateDiff('minute', toDate('2017-12-31'), toDate('2016-01-01'), 'UTC');
SELECT dateDiff('minute', toDate('2017-12-31'), toDate('2017-01-01'), 'UTC');
SELECT dateDiff('minute', toDate('2017-12-31'), toDate('2018-01-01'), 'UTC');
SELECT dateDiff('minute', toDate32('1927-01-01', 'UTC'), toDate32('1927-01-02', 'UTC'), 'UTC');
SELECT dateDiff('minute', toDate32('1927-01-01', 'UTC'), toDateTime64('1927-01-02 00:00:00', 3, 'UTC'), 'UTC');
SELECT dateDiff('minute', toDate32('2015-08-18', 'UTC'), toDate('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('minute', toDate32('2015-08-18', 'UTC'), toDateTime('2015-08-19 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('minute', toDateTime('2014-10-26 00:00:00', 'Asia/Istanbul'), toDateTime('2014-10-27 00:00:00', 'Asia/Istanbul'));
SELECT dateDiff('minute', toDateTime('2014-10-26 00:00:00', 'UTC'), toDateTime('2014-10-27 00:00:00', 'UTC'));
SELECT dateDiff('minute', toDateTime('2015-08-18 00:00:00', 'UTC'), toDate32('2015-08-19', 'UTC'), 'UTC');
SELECT dateDiff('minute', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1927-01-01 00:10:00', 0, 'UTC'));
SELECT dateDiff('minute', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1927-01-01 10:00:00', 0, 'UTC'));
SELECT dateDiff('minute', toDateTime64('1927-01-01 00:00:00', 3, 'UTC'), toDate32('1927-01-02', 'UTC'), 'UTC');
SELECT dateDiff('minute', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-01-01 00:10:00', 3, 'UTC'));
SELECT dateDiff('minute', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-01-01 10:00:00', 3, 'UTC'));
SELECT dateDiff('minutes', toDateTime('2017-12-31', 'UTC'), toDateTime('2016-01-01', 'UTC'));
SELECT dateDiff('month', toDate('2014-10-26'), toDate('2014-10-27'), 'Asia/Istanbul');
SELECT dateDiff('month', toDate('2014-10-26'), toDate('2014-10-27'), 'UTC');
SELECT dateDiff('month', toDate('2015-08-18', 'UTC'), toDate32('2015-09-18', 'UTC'), 'UTC');
SELECT dateDiff('month', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT dateDiff('month', toDate('2017-12-31'), toDate('2017-01-01'));
SELECT dateDiff('month', toDate('2017-12-31'), toDate('2018-01-01'));
SELECT dateDiff('month', toDate32('1927-01-01', 'UTC'), toDate32('1927-02-01', 'UTC'), 'UTC');
SELECT dateDiff('month', toDate32('1927-01-01', 'UTC'), toDateTime64('1927-02-01 00:00:00', 3, 'UTC'), 'UTC');
SELECT dateDiff('month', toDate32('2015-08-18', 'UTC'), toDate('2015-09-18', 'UTC'), 'UTC');
SELECT dateDiff('month', toDate32('2015-08-18', 'UTC'), toDateTime('2015-09-18 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('month', toDateTime('2014-10-26 00:00:00', 'Asia/Istanbul'), toDateTime('2014-10-27 00:00:00', 'Asia/Istanbul'));
SELECT dateDiff('month', toDateTime('2014-10-26 00:00:00', 'UTC'), toDateTime('2014-10-27 00:00:00', 'UTC'));
SELECT dateDiff('month', toDateTime('2015-08-18 00:00:00', 'UTC'), toDate32('2015-09-18', 'UTC'), 'UTC');
SELECT dateDiff('month', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1927-02-01 00:00:00', 0, 'UTC'));
SELECT dateDiff('month', toDateTime64('1927-01-01 00:00:00', 3, 'UTC'), toDate32('1927-02-01', 'UTC'), 'UTC');
SELECT dateDiff('month', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-02-01 00:00:00', 3, 'UTC'));
SELECT dateDiff('months', toDateTime('2017-12-31'), toDateTime('2016-01-01'));
SELECT dateDiff('quarter', toDate('2015-08-18', 'UTC'), toDate32('2015-11-18', 'UTC'), 'UTC');
SELECT dateDiff('quarter', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT dateDiff('quarter', toDate('2017-12-31'), toDate('2017-01-01'));
SELECT dateDiff('quarter', toDate('2017-12-31'), toDate('2018-01-01'));
SELECT dateDiff('quarter', toDate32('1927-01-01', 'UTC'), toDate32('1927-04-01', 'UTC'), 'UTC');
SELECT dateDiff('quarter', toDate32('1927-01-01', 'UTC'), toDateTime64('1927-04-01 00:00:00', 3, 'UTC'), 'UTC');
SELECT dateDiff('quarter', toDate32('2015-08-18', 'UTC'), toDate('2015-11-18', 'UTC'), 'UTC');
SELECT dateDiff('quarter', toDate32('2015-08-18', 'UTC'), toDateTime('2015-11-18 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('quarter', toDateTime('2015-08-18 00:00:00', 'UTC'), toDate32('2015-11-18', 'UTC'), 'UTC');
SELECT dateDiff('quarter', toDateTime64('1927-01-01 00:00:00', 3, 'UTC'), toDate32('1927-04-01', 'UTC'), 'UTC');
SELECT dateDiff('quarters', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT dateDiff('second', materialize(toDateTime('2015-08-18 00:00:00', 'UTC')), materialize(toDateTime64('2015-08-18 00:00:10', 3, 'UTC')));
SELECT dateDiff('second', materialize(toDateTime('2015-08-18 00:00:00', 'UTC')), toDateTime64('2015-08-18 00:00:10', 3, 'UTC'));
SELECT dateDiff('second', materialize(toDateTime64('1927-01-01 00:00:00', 6, 'UTC')), materialize(toDateTime64('1927-01-01 00:00:10', 3, 'UTC')));
SELECT dateDiff('second', materialize(toDateTime64('1927-01-01 00:00:00', 6, 'UTC')), toDateTime64('1927-01-01 00:00:10', 3, 'UTC'));
SELECT dateDiff('second', materialize(toDateTime64('2015-08-18 00:00:00', 0, 'UTC')), materialize(toDateTime('2015-08-18 00:00:10', 'UTC')));
SELECT dateDiff('second', materialize(toDateTime64('2015-08-18 00:00:00', 0, 'UTC')), toDateTime('2015-08-18 00:00:10', 'UTC'));
SELECT dateDiff('second', toDate('2014-10-26'), toDate('2014-10-27'), 'Asia/Istanbul');
SELECT dateDiff('second', toDate('2014-10-26'), toDate('2014-10-27'), 'UTC');
SELECT dateDiff('second', toDate('2015-08-18'), toDate32('2015-08-19')) - timeDiff(toDate('2015-08-18'), toDate32('2015-08-19')) <= 2;
SELECT dateDiff('second', toDate('2017-12-31'), toDate('2016-01-01'), 'UTC');
SELECT dateDiff('second', toDate('2017-12-31'), toDate('2017-01-01'), 'UTC');
SELECT dateDiff('second', toDate('2017-12-31'), toDate('2018-01-01'), 'UTC');
SELECT dateDiff('second', toDate('2017-12-31'), toDateTime('2016-01-01 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('second', toDate32('1927-01-01'), toDateTime64('1927-01-02 00:00:00', 3)) - timeDiff(toDate32('1927-01-01'), toDateTime64('1927-01-02 00:00:00', 3)) <= 2;
SELECT dateDiff('second', toDate32('2015-08-18'), toDate('2015-08-19')) - timeDiff(toDate32('2015-08-18'), toDate('2015-08-19')) <= 2;
SELECT dateDiff('second', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00')) - timeDiff(toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00')) <= 2;
SELECT dateDiff('second', toDateTime('2014-10-26 00:00:00', 'Asia/Istanbul'), toDateTime('2014-10-27 00:00:00', 'Asia/Istanbul'));
SELECT dateDiff('second', toDateTime('2014-10-26 00:00:00', 'UTC'), toDateTime('2014-10-27 00:00:00', 'UTC'));
SELECT dateDiff('second', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19')) - timeDiff(toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19')) <= 2;
SELECT dateDiff('second', toDateTime('2015-08-18 00:00:00', 'UTC'), materialize(toDateTime64('2015-08-18 00:00:10', 3, 'UTC')));
SELECT dateDiff('second', toDateTime('2015-08-18 00:00:00', 'UTC'), toDateTime64('2015-08-18 00:00:10', 3, 'UTC'));
SELECT dateDiff('second', toDateTime('2015-08-18 00:00:00', 'UTC'), toDateTime64('2015-08-18 00:10:00', 3, 'UTC'));
SELECT dateDiff('second', toDateTime('2015-08-18 00:00:00', 'UTC'), toDateTime64('2015-08-18 01:00:00', 3, 'UTC'));
SELECT dateDiff('second', toDateTime('2015-08-18 00:00:00', 'UTC'), toDateTime64('2015-08-18 01:10:10', 3, 'UTC'));
SELECT dateDiff('second', toDateTime('2017-12-31 00:00:00', 'UTC'), toDate('2017-01-01'), 'UTC');
SELECT dateDiff('second', toDateTime('2017-12-31 00:00:00', 'UTC'), toDateTime('2018-01-01 00:00:00', 'UTC'));
SELECT dateDiff('second', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1927-01-01 00:10:00', 0, 'UTC'));
SELECT dateDiff('second', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1927-01-01 01:00:00', 0, 'UTC'));
SELECT dateDiff('second', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1927-01-01 01:10:10', 0, 'UTC'));
SELECT dateDiff('second', toDateTime64('1927-01-01 00:00:00', 3), toDate32('1927-01-02')) - timeDiff(toDateTime64('1927-01-01 00:00:00', 3), toDate32('1927-01-02')) <= 2;
SELECT dateDiff('second', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), materialize(toDateTime64('1927-01-01 00:00:10', 3, 'UTC')));
SELECT dateDiff('second', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-01-01 00:10:00', 3, 'UTC'));
SELECT dateDiff('second', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-01-01 01:00:00', 3, 'UTC'));
SELECT dateDiff('second', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1927-01-01 01:10:10', 3, 'UTC'));
SELECT dateDiff('second', toDateTime64('2015-08-18 00:00:00', 0, 'UTC'), materialize(toDateTime('2015-08-18 00:00:10', 'UTC')));
SELECT dateDiff('second', toDateTime64('2015-08-18 00:00:00', 0, 'UTC'), toDateTime('2015-08-18 00:00:10', 'UTC'));
SELECT dateDiff('second', toDateTime64('2015-08-18 00:00:00', 0, 'UTC'), toDateTime('2015-08-18 00:10:00', 'UTC'));
SELECT dateDiff('second', toDateTime64('2015-08-18 00:00:00', 0, 'UTC'), toDateTime('2015-08-18 01:00:00', 'UTC'));
SELECT dateDiff('second', toDateTime64('2015-08-18 00:00:00', 0, 'UTC'), toDateTime('2015-08-18 01:10:10', 'UTC'));
SELECT dateDiff('seconds', toDateTime('2017-12-31', 'UTC'), toDateTime('2016-01-01', 'UTC'));
SELECT dateDiff('week', toDate('2014-10-26'), toDate('2014-10-27'), 'Asia/Istanbul');
SELECT dateDiff('week', toDate('2014-10-26'), toDate('2014-10-27'), 'UTC');
SELECT dateDiff('week', toDate('2015-08-18', 'UTC'), toDate32('2015-08-25', 'UTC'), 'UTC');
SELECT dateDiff('week', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT dateDiff('week', toDate('2017-12-31'), toDate('2017-01-01'));
SELECT dateDiff('week', toDate('2017-12-31'), toDate('2018-01-01'));
SELECT dateDiff('week', toDate32('1927-01-01', 'UTC'), toDate32('1927-01-08', 'UTC'), 'UTC');
SELECT dateDiff('week', toDate32('1927-01-01', 'UTC'), toDateTime64('1927-01-08 00:00:00', 3, 'UTC'), 'UTC');
SELECT dateDiff('week', toDate32('2015-08-18', 'UTC'), toDate('2015-08-25', 'UTC'), 'UTC');
SELECT dateDiff('week', toDate32('2015-08-18', 'UTC'), toDateTime('2015-08-25 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('week', toDateTime('2014-10-26 00:00:00', 'Asia/Istanbul'), toDateTime('2014-10-27 00:00:00', 'Asia/Istanbul'));
SELECT dateDiff('week', toDateTime('2014-10-26 00:00:00', 'UTC'), toDateTime('2014-10-27 00:00:00', 'UTC'));
SELECT dateDiff('week', toDateTime('2015-08-18 00:00:00', 'UTC'), toDate32('2015-08-25', 'UTC'), 'UTC');
SELECT dateDiff('week', toDateTime64('1927-01-01 00:00:00', 3, 'UTC'), toDate32('1927-01-08', 'UTC'), 'UTC');
SELECT dateDiff('weeks', toDateTime('2017-12-31'), toDateTime('2016-01-01'));
SELECT dateDiff('year', toDate('2015-08-18', 'UTC'), toDate32('2016-08-18', 'UTC'), 'UTC');
SELECT dateDiff('year', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT dateDiff('year', toDate('2017-12-31'), toDate('2017-01-01'));
SELECT dateDiff('year', toDate('2017-12-31'), toDate('2018-01-01'));
SELECT dateDiff('year', toDate32('1927-01-01', 'UTC'), toDate32('1928-01-01', 'UTC'), 'UTC');
SELECT dateDiff('year', toDate32('1927-01-01', 'UTC'), toDateTime64('1928-01-01 00:00:00', 3, 'UTC'), 'UTC');
SELECT dateDiff('year', toDate32('2015-08-18', 'UTC'), toDate('2016-08-18', 'UTC'), 'UTC');
SELECT dateDiff('year', toDate32('2015-08-18', 'UTC'), toDateTime('2016-08-18 00:00:00', 'UTC'), 'UTC');
SELECT dateDiff('year', toDateTime('2015-08-18 00:00:00', 'UTC'), toDate32('2016-08-18', 'UTC'), 'UTC');
SELECT dateDiff('year', toDateTime64('1927-01-01 00:00:00', 0, 'UTC'), toDateTime64('1928-01-01 00:00:00', 0, 'UTC'));
SELECT dateDiff('year', toDateTime64('1927-01-01 00:00:00', 3, 'UTC'), toDate32('1928-01-01', 'UTC'), 'UTC');
SELECT dateDiff('year', toDateTime64('1927-01-01 00:00:00', 6, 'UTC'), toDateTime64('1928-01-01 00:00:00', 3, 'UTC'));
SELECT DATEDIFF('year', today(), today() - INTERVAL 10 YEAR);
SELECT dateDiff('years', toDate('2017-12-31'), toDate('2016-01-01'));
SELECT dateDiff(DAY, toDate('2019-05-05') arg_1, toDate('2019-05-06') arg_2), arg_1, arg_2;
SELECT dateDiff(DAY, toDate('2019-05-05') arg_1, toDate('2019-05-06') arg_2, 'UTC'), arg_1, arg_2;
SELECT dateDiff(DAY, toDate('2019-05-05') AS arg_1, toDate('2019-05-06') AS arg_2, 'UTC'), arg_1, arg_2;
SELECT DATEDIFF(microsecond, '1969-12-31 23:59:59.999950'::DateTime64(6, 'UTC'), '1970-01-01 00:00:00.000010'::DateTime64(6, 'UTC'));
SELECT DATEDIFF(microsecond, '2021-01-01 23:59:59.899999'::DateTime64(6), '2021-01-02 00:01:00.100200300'::DateTime64(9));
SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.2'::DateTime64(1), '2021-01-02'::Date);
SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.299'::DateTime64, '2021-01-02'::Date);
SELECT DATEDIFF(millisecond, '2021-01-01 23:59:59.299999'::DateTime64(6), '2021-01-02'::Date);
SELECT DATEDIFF(millisecond, '2021-01-01'::Date, '2021-01-02 00:00:01.299'::DateTime64);
SELECT DATEDIFF(millisecond, '2021-01-01'::Date, '2021-01-02 00:01:01'::DateTime);
SELECT DATEDIFF(millisecond, '2021-01-01'::Date, '2021-01-02'::Date);
SELECT DATEDIFF(millisecond, '2021-01-01'::Date, '2021-01-03'::Date32);
SELECT DATEDIFF(second, '1969-12-31 23:59:59.123'::DateTime64(6, 'UTC'), '1970-01-01 00:00:09.123'::DateTime64(6, 'UTC'));
SELECT DATEDIFF(YEAR, DATE '2021-01-01', DATE '2022-01-01');
SELECT DATESUB(DATE '2022-01-01', INTERVAL 1 YEAR);
SELECT dateSub(DAY, 1 arg_1, toDate('2019-05-05') arg_2), arg_1, arg_2;
SELECT DATESUB(YEAR, 1, DATE '2022-01-01');
SELECT dateTrunc('DAY', toDateTime('2022-03-01 12:55:55'));
SELECT dateTrunc('Day', toDateTime('2022-03-01 12:55:55'));
SELECT dateTrunc('day', toDateTime('2022-03-01 12:55:55'));
SELECT dateTrunc('MONTH', toDateTime64('2022-03-01 12:55:55', 2));
SELECT dateTrunc('Month', toDateTime64('2022-03-01 12:55:55', 2));
SELECT dateTrunc('month', toDateTime64('2022-03-01 12:55:55', 2));
SELECT dateTrunc('WEEK', toDate('2022-03-01'));
SELECT dateTrunc('Week', toDate('2022-03-01'));
SELECT dateTrunc('week', toDate('2022-03-01'));
SELECT day = '2020-01-01' FROM ( SELECT day FROM test_table WHERE day = '2020-01-01' GROUP BY day ) AS a INNER JOIN ( SELECT toDate('2020-01-01') AS day FROM numbers(1) ) AS b ON a.day = b.day SETTINGS max_rows_to_read = 11;
SELECT day = '2020-01-03' FROM ( SELECT toDate('2020-01-03') AS day FROM numbers(1) ) AS a INNER JOIN ( SELECT day FROM test_table WHERE day = '2020-01-03' GROUP BY day ) AS b ON a.day = b.day SETTINGS max_rows_to_read = 11;
SELECT DAY(toDateTime('2016-06-15 23:00:00'));
SELECT day, timestamp FROM remote('127.0.0.{1,2}', currentDatabase(), t) GROUP BY day, timestamp ORDER BY timestamp;
SELECT day1 = '2020-01-04' FROM test_table PREWHERE day1 = '2020-01-04' WHERE day1 = '2020-01-04' GROUP BY day1 SETTINGS max_rows_to_read = 10;
SELECT db.name, t.name FROM (SELECT name, database FROM system.tables WHERE name = 'one') AS t JOIN (SELECT name FROM system.databases WHERE name = 'system') AS db ON t.database = db.name FORMAT PrettyCompactNoEscapes;
SELECT db.name, t.name FROM system.tables AS t JOIN (SELECT * FROM system.databases WHERE name = 'system') AS db ON t.database = db.name WHERE t.name = 'one' FORMAT PrettyCompactNoEscapes;
SELECT db.x, t.name FROM (SELECT name, database AS x FROM system.tables) AS t JOIN (SELECT name AS x FROM system.databases) AS db USING x WHERE x = 'system' AND t.name = 'one' FORMAT PrettyCompactNoEscapes;
SELECT decodeHTMLComponent('&#12345678;
SELECT decodeHTMLComponent('&#20026;');
SELECT decodeHTMLComponent('&#32;
SELECT decodeHTMLComponent('&#41;
SELECT decodeHTMLComponent('&#61;
SELECT decodeHTMLComponent('&#x0426;
SELECT decodeHTMLComponent('&#x4e3a;');
SELECT decodeHTMLComponent('&amp;
SELECT decodeHTMLComponent('&apos;
SELECT decodeHTMLComponent('&lt;
SELECT decodeHTMLComponent('');
SELECT decodeHTMLComponent('C&lscr;
SELECT decodeHTMLComponent('C');
SELECT decodeHTMLComponent('Hello, &&amp;
SELECT decodeHTMLComponent('Hello, &;
SELECT decodeHTMLComponent('Hello, &a;
SELECT decodeHTMLComponent('Hello, &ltt&amp;
SELECT decodeHTMLComponent('Hello, &ltt;
SELECT decodeHTMLComponent('Hello, &quot;
SELECT decodeHTMLComponent('Hello, &t;
SELECT decodeURLComponent(materialize(pathFull('www.example.com/?query=hello%20world+foo%2Bbar'))) AS Path;
SELECT decodeXMLComponent('&#12345678;&apos;123');
SELECT decodeXMLComponent('&#20026;');
SELECT decodeXMLComponent('&#41;&#42;&#43;&#44;&#45;&#46;&#47;&#48;&#49;&#50;&#51;&#52;&#53;&#54;&#55;&#56;&#57;&#58;&#59;&#60;');
SELECT decodeXMLComponent('&#61;&#62;&#63;&#64;&#65;&#66;&#67;&#68;&#69;&#70;&#71;&#72;#73;#74;&#75;#76;&#77;&#78;&#79;&#80;');
SELECT decodeXMLComponent('&#x0426;&#X0426;&#x042E;&#X042e;&#x042B;&#x3131;');
SELECT decodeXMLComponent('&#x4e3a;');
SELECT decodeXMLComponent('&amp;clickhouse');
SELECT decodeXMLComponent('&apos;foo&apos;');
SELECT decodeXMLComponent('&lt;123&gt;');
SELECT decodeXMLComponent('Hello, &&amp;world');
SELECT decodeXMLComponent('Hello, &;&amp;world');
SELECT decodeXMLComponent('Hello, &a;&amp;world');
SELECT decodeXMLComponent('Hello, &ltt&amp;world');
SELECT decodeXMLComponent('Hello, &ltt;&amp;world');
SELECT decodeXMLComponent('Hello, &quot; world&quot;!');
SELECT decodeXMLComponent('Hello, &t;&amp;world');
SELECT decrypt('aes-128-cbc', encrypt('aes-128-cbc', 'text', 'keykeykeykeykeyk', ''), 'keykeykeykeykeyk', '');
select default_database from system.users where name = 'u_02001';
SELECT defaultValueOfArgumentType([1, 2, 3]), defaultValueOfArgumentType([[[1]]]), defaultValueOfArgumentType((1, 'Hello', toTimeZone(now(), 'UTC'), today()));
SELECT defaultValueOfArgumentType([1])[1];
SELECT defaultValueOfTypeName(FQDN());
select delete_ttl_info_min, delete_ttl_info_max from system.parts where database = currentDatabase() and table = 'ttl' and active > 0 order by name asc;
select delete_ttl_info_min, delete_ttl_info_max from system.parts where database = currentDatabase() and table = 'ttl' and active > 0;
select deltaSum(arrayJoin([1, 2, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 4, 2, 3]));
select deltaSum(arrayJoin([1, 2, 3, 0, 3, 3, 3, 3, 3, 4, 2, 3]));
select deltaSum(arrayJoin([1, 2, 3, 0, 3, 4, 2, 3]));
select deltaSum(arrayJoin([1, 2, 3, 0, 3, 4]));
select deltaSum(arrayJoin([1, 2, 3]));
select deltaSum(arrayJoin([2.25, 3, 4.5]));
select deltaSumMerge(rows) as delta_sum from ( select * from ( select deltaSumState(arrayJoin([0, 1])) as rows union all select deltaSumState(arrayJoin([4, 5])) as rows ) order by rows ) order by delta_sum;
select deltaSumMerge(rows) as delta_sum from ( select * from ( select deltaSumState(arrayJoin([0.1, 0.3, 0.5])) as rows union all select deltaSumState(arrayJoin([4.1, 5.1, 6.6])) as rows ) order by rows ) order by delta_sum;
select deltaSumMerge(rows) as delta_sum from ( select * from ( select deltaSumState(arrayJoin([3, 5])) as rows union all select deltaSumState(arrayJoin([1, 2])) as rows union all select deltaSumState(arrayJoin([4, 6])) as rows ) order by rows ) order by delta_sum;
select deltaSumMerge(rows) as delta_sum from ( select * from ( select deltaSumState(arrayJoin([4, 5])) as rows union all select deltaSumState(arrayJoin([0, 1])) as rows ) order by rows ) order by delta_sum;
select deltaSumTimestamp(value, timestamp) from (select number as timestamp, [0, 4, 8, 3, 0, 0, 0, 1, 3, 5][number] as value from numbers(1, 10));
select deltaSumTimestamp(value, timestamp) from (select toDateTime(number) as timestamp, [0, 4, 8, 3][number] as value from numbers(1, 4));
select deltaSumTimestamp(value, timestamp) from (select toDateTime(number) as timestamp, [0, 4.5, 8, 3][number] as value from numbers(1, 4));
select deltaSumTimestampMerge(state) from (select deltaSumTimestampState(value, timestamp) as state from (select number as timestamp, [0, 4, 8, 3][number] as value from numbers(1, 4)) UNION ALL select deltaSumTimestampState(value, timestamp) as state from (select number as timestamp, [4, 5, 5, 5][number-4] as value from numbers(5, 4)));
SELECT demangle('_ZNKSt3__18functionIFvvEEclEv');
SELECT dependencies_database, dependencies_table FROM system.tables WHERE name = 'test_log' and database=currentDatabase();
SELECT detectCharset('Plain English');
SELECT detectLanguage('*****///// _____ ,,,,,,,, .....');
SELECT detectLanguage('A vaincre sans peril, on triomphe sans gloire.');
SELECT detectLanguage('Sweet are the uses of adversity which, like the toad, ugly and venomous, wears yet a precious jewel in his head.');
SELECT detectLanguage('Они сошлись. Волна и камень, Стихи и проза, лед и пламень, Не столь различны меж собой.');
SELECT detectLanguage('二兎を追う者は一兎をも得ず');
SELECT detectLanguage('有情饮水饱，无情食饭饥。');
SELECT detectLanguageMixed('*****///// _____ ,,,,,,,, .....');
SELECT detectLanguageMixed('二兎を追う者は一兎をも得ず二兎を追う者は一兎をも得ず A vaincre sans peril, on triomphe sans gloire.');
SELECT detectLanguageMixed('어디든 가치가 있는 곳으로 가려면 지름길은 없다');
SELECT detectLanguageUnknown('Plain English');
SELECT detectProgrammingLanguage('#include <iostream>');
SELECT detectTonality('милая кошка');
SELECT detectTonality('ненависть к людям');
SELECT detectTonality('обычная прогулка по ближайшему парку');
SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01753_dictionary_db.direct_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
SELECT dictGet('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01754_dictionary_db.direct_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first, dictGet('01754_dictionary_db.direct_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01754_dictionary_db.direct_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first, dictGet('01754_dictionary_db.direct_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01754_dictionary_db.direct_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first, dictGet('01754_dictionary_db.direct_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01754_dictionary_db.direct_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first, dictGet('01754_dictionary_db.direct_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01765_db.hashed_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
SELECT dictGet('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first, dictGet('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first, dictGet('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first, dictGet('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first, dictGet('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first, dictGet('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
SELECT dictGet('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first, dictGet('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
SELECT dictGet('02125_test_dictionary', 'value', toUInt64(0));
SELECT dictGet('02176_test_complex_key_dictionary', 'value', tuple('0', '0'));
SELECT dictGet('02176_test_complex_key_dictionary', 'value', tuple([0], '0'));
SELECT dictGet('02176_test_complex_key_dictionary', 'value', tuple(toUInt64(0), '0'));
SELECT dictGet('02176_test_complex_key_dictionary', 'value', tuple(toUInt8(0), '0'));
SELECT dictGet('02176_test_simple_key_dictionary', 'value', '0');
SELECT dictGet('02176_test_simple_key_dictionary', 'value', [0]);
SELECT dictGet('02176_test_simple_key_dictionary', 'value', toUInt64(0));
SELECT dictGet('02176_test_simple_key_dictionary', 'value', toUInt8(0));
SELECT dictGet('02179_test_dictionary', 'value', 0, 15);
SELECT dictGet('02179_test_dictionary', 'value', 0, 5);
SELECT dictGet('02183_cache_dictionary', 'value_date', 0);
SELECT dictGet('02183_flat_dictionary', 'value', 0);
SELECT dictGet('02184_range_dictionary', ('value_0', 'value_1', 'value_2'), 1, 18446744073709551615);
SELECT dictGet('02185_range_dictionary', 'value', 0, 0);
SELECT dictGet('02185_range_dictionary', 'value', 0, 10001);
SELECT dictGet('02185_range_dictionary', 'value', 0, 5001);
select dictGet('02186_range_dictionary', 'value', toUInt64(1), toDate('2020-01-01'));
select dictGet('02186_range_dictionary', 'value', toUInt64(1), toDate('2020-01-02'));
select dictGet('02186_range_dictionary', 'value', toUInt64(1), toDate('2020-01-03'));
SELECT dictGet('cache_dictionary', 'array_value', toUInt64(0));
SELECT dictGet('cache_dictionary', 'array_value', toUInt64(1));
SELECT dictGet('cache_dictionary', 'decimal_value', toUInt64(1));
SELECT dictGet('cache_dictionary', 'value', toUInt64(0));
SELECT dictGet('cache_dictionary', 'value', toUInt64(1));
SELECT dictGet('cache_dictionary', 'value', toUInt64(2));
SELECT dictGet('complex_executable_cache_dictionary_implicit_key', 'value', (toUInt64(1), 'FirstKey'));
SELECT dictGet('complex_executable_cache_dictionary_no_implicit_key', 'value', (toUInt64(1), 'FirstKey'));
SELECT dictGet('complex_key_cache_dictionary_01862', 'value', (toUInt64(1), 'FirstKey')) FORMAT Null;
SELECT dictGet('complex_key_cache_dictionary_01862', 'value', (toUInt64(2), 'FirstKey')) FORMAT Null;
SELECT dictGet('complex_key_direct_dictionary_01862', 'value', (toUInt64(1), 'FirstKey')) FORMAT Null;
SELECT dictGet('complex_key_direct_dictionary_01862', 'value', (toUInt64(2), 'FirstKey')) FORMAT Null;
SELECT dictGet('complex_key_hashed_dictionary_01862', 'value', (toUInt64(1), 'FirstKey')) FORMAT Null;
SELECT dictGet('complex_key_hashed_dictionary_01862', 'value', (toUInt64(2), 'FirstKey')) FORMAT Null;
SELECT dictGet('database_for_range_dict.range_dictionary', 'Tax', toUInt64(1), toDate('2019-05-15'));
SELECT dictGet('database_for_range_dict.range_dictionary', 'Tax', toUInt64(1), toDate('2019-05-29'));
SELECT dictGet('database_for_range_dict.range_dictionary', 'Tax', toUInt64(2), toDate('2019-05-29'));
SELECT dictGet('database_for_range_dict.range_dictionary', 'Tax', toUInt64(2), toDate('2019-05-31'));
SELECT dictGet('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(1), toDate('2019-05-15'));
SELECT dictGet('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(1), toDate('2019-05-29'));
SELECT dictGet('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(2), toDate('2019-05-29'));
SELECT dictGet('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(2), toDate('2019-05-31'));
SELECT dictGet('db_01526.dict1', 'third_column', (number, number + 1)) FROM numbers(4);
SELECT dictGet('db_for_dict.dict_with_hashed_layout', 'value', toUInt64(1));
SELECT dictGet('db_for_dict.dict_with_hashed_layout', 'value', toUInt64(2));
SELECT dictGet('ddl_dictionary_test', 'value', number) FROM system.numbers LIMIT 3;
SELECT dictGet('dict', 'value', toUInt64(1));
SELECT dictGet('dict', ('ip6', 'ip4'), arrayJoin([2,1]));
SELECT dictGet('dict_nested_map_dictionary', 'test_config', toUInt64(3));
SELECT dictGet('dictdb_01376.dict_exists', 'value', toUInt64(1)) as val FROM numbers(2) GROUP BY val;
SELECT dictGet('direct_dictionary', 'array_value', toUInt64(0));
SELECT dictGet('direct_dictionary', 'array_value', toUInt64(1));
SELECT dictGet('direct_dictionary', 'decimal_value', toUInt64(1));
SELECT dictGet('direct_dictionary', 'value', toUInt64(0));
SELECT dictGet('direct_dictionary', 'value', toUInt64(1));
SELECT dictGet('direct_dictionary', 'value', toUInt64(2));
SELECT dictGet('executable_pool_complex', 'a', ('First_1', 'Second_1'));
SELECT dictGet('executable_pool_complex', 'a', ('First_2', 'Second_2'));
SELECT dictGet('executable_pool_complex', 'b', ('First_1', 'Second_1'));
SELECT dictGet('executable_pool_complex', 'b', ('First_2', 'Second_2'));
SELECT dictGet('executable_pool_complex_implicit_key', 'a', ('First_1', 'Second_1'));
SELECT dictGet('executable_pool_complex_implicit_key', 'a', ('First_2', 'Second_2'));
SELECT dictGet('executable_pool_complex_implicit_key', 'b', ('First_1', 'Second_1'));
SELECT dictGet('executable_pool_complex_implicit_key', 'b', ('First_2', 'Second_2'));
SELECT dictGet('executable_pool_simple', 'a', toUInt64(1));
SELECT dictGet('executable_pool_simple', 'a', toUInt64(2));
SELECT dictGet('executable_pool_simple', 'b', toUInt64(1));
SELECT dictGet('executable_pool_simple', 'b', toUInt64(2));
SELECT dictGet('executable_pool_simple_implicit_key', 'a', toUInt64(1));
SELECT dictGet('executable_pool_simple_implicit_key', 'a', toUInt64(2));
SELECT dictGet('executable_pool_simple_implicit_key', 'b', toUInt64(1));
SELECT dictGet('executable_pool_simple_implicit_key', 'b', toUInt64(2));
SELECT dictGet('flat_dictionary', 'array_value', toUInt64(0));
SELECT dictGet('flat_dictionary', 'array_value', toUInt64(1));
SELECT dictGet('flat_dictionary', 'decimal_value', toUInt64(1));
SELECT dictGet('flat_dictionary', 'value', toUInt64(0));
SELECT dictGet('flat_dictionary', 'value', toUInt64(1));
SELECT dictGet('flat_dictionary', 'value', toUInt64(2));
SELECT dictGet('hashed_dictionary', 'array_value', toUInt64(0));
SELECT dictGet('hashed_dictionary', 'array_value', toUInt64(1));
SELECT dictGet('hashed_dictionary', 'decimal_value', toUInt64(1));
SELECT dictGet('hashed_dictionary', 'value', toUInt64(0));
SELECT dictGet('hashed_dictionary', 'value', toUInt64(1));
SELECT dictGet('hashed_dictionary', 'value', toUInt64(2));
SELECT dictGet('ip_trie_dictionary', 'array_value', tuple(IPv4StringToNum('127.0.0.0')));
SELECT dictGet('ip_trie_dictionary', 'array_value', tuple(IPv4StringToNum('128.0.0.0')));
SELECT dictGet('ip_trie_dictionary', 'decimal_value', tuple(IPv4StringToNum('127.0.0.0')));
SELECT dictGet('ip_trie_dictionary', 'value', tuple(IPv4StringToNum('127.0.0.0')));
SELECT dictGet('ip_trie_dictionary_01862', 'value', tuple(toIPv4('1.1.1.1'))) FORMAT Null;
SELECT dictGet('ip_trie_dictionary_01862', 'value', tuple(toIPv4('127.0.0.1'))) FORMAT Null;
SELECT dictGet('null_ip_dict', 'val', toIPv4('127.0.0.1'));
SELECT dictGet('polygon_dictionary', 'array_value', tuple(0.5, 0.5));
SELECT dictGet('polygon_dictionary', 'array_value', tuple(1.5, 1.5));
SELECT dictGet('polygon_dictionary', 'decimal_value', tuple(0.5, 0.5));
SELECT dictGet('polygon_dictionary', 'value', tuple(0.5, 0.5));
SELECT dictGet('polygon_dictionary', 'value', tuple(1.5, 1.5));
SELECT dictGet('polygon_dictionary', 'value', tuple(2.0, 2.0));
SELECT dictGet('range_dictionary', 'array_value', toUInt64(1), toDate('2019-05-15'));
SELECT dictGet('range_dictionary', 'array_value', toUInt64(1), toDate('2019-05-21'));
SELECT dictGet('range_dictionary', 'Tax', (toUInt64(1), '1'), toDate('2019-05-15'));
SELECT dictGet('range_dictionary', 'Tax', (toUInt64(1), '1'), toDate('2019-05-29'));
SELECT dictGet('range_dictionary', 'Tax', (toUInt64(2), '2'), toDate('2019-05-29'));
SELECT dictGet('range_dictionary', 'Tax', (toUInt64(2), '2'), toDate('2019-05-31'));
SELECT dictGet('range_dictionary', 'value', toUInt64(0), toDate('2019-05-15'));
SELECT dictGet('range_dictionary', 'value', toUInt64(1), toDate('2019-05-15'));
SELECT dictGet('range_dictionary', 'value', toUInt64(2), toDate('2019-05-15'));
SELECT dictGet('range_dictionary_nullable', 'Tax', (toUInt64(1), '1'), toDate('2019-05-15'));
SELECT dictGet('range_dictionary_nullable', 'Tax', (toUInt64(1), '1'), toDate('2019-05-29'));
SELECT dictGet('range_dictionary_nullable', 'Tax', (toUInt64(2), '2'), toDate('2019-05-29'));
SELECT dictGet('range_dictionary_nullable', 'Tax', (toUInt64(2), '2'), toDate('2019-05-31'));
SELECT dictGet('range_hashed_dictionary', 'value', 0, toUInt64(4));
SELECT dictGet('range_hashed_dictionary', 'value', 4, toUInt64(6), 'DefaultValue');
SELECT dictGet('range_hashed_dictionary', 'value', toUInt64(1), toUInt64(-1));
SELECT dictGet('range_hashed_dictionary', 'value', toUInt64(1), toUInt64(18446744073709551615));
select dictGet('regexp_dict1', ('name', 'version', 'comment'), '30/tclwebkit');
select dictGet('regexp_dict1', ('name', 'version', 'comment'), '33/tclwebkit11.10x');
select dictGet('regexp_dict1', ('name', 'version', 'comment'), 'Linux/101.tlinux');
SELECT dictGet('simple_executable_cache_dictionary_implicit_key', 'value', toUInt64(1));
SELECT dictGet('simple_key_direct_dictionary_01862', 'value', toUInt64(1)) FORMAT Null;
SELECT dictGet('simple_key_direct_dictionary_01862', 'value', toUInt64(2)) FORMAT Null;
SELECT dictGet('simple_key_flat_dictionary_01862', 'value', toUInt64(2)) FORMAT Null;
SELECT dictGet('simple_key_hashed_dictionary_01862', 'value', toUInt64(1)) FORMAT Null;
SELECT dictGet('simple_key_hashed_dictionary_01862', 'value', toUInt64(2)) FORMAT Null;
SELECT dictGet('simple_key_range_hashed_dictionary_01862', 'value', toUInt64(1), today()) FORMAT Null;
SELECT dictGet('simple_key_range_hashed_dictionary_01862', 'value', toUInt64(2), today()) FORMAT Null;
SELECT dictGet('simple_key_sparse_hashed_dictionary_01862', 'value', toUInt64(1)) FORMAT Null;
SELECT dictGet('simple_key_sparse_hashed_dictionary_01862', 'value', toUInt64(2)) FORMAT Null;
SELECT dictGet('test_01155_ordinary.dict', 'x', 'after renaming database');
SELECT dictGet('test_01155_ordinary.dict', 'x', 'after renaming tables');
SELECT dictGet('test_01155_ordinary.dict', 'x', 'before moving tables');
SELECT dictGet('test_01155_ordinary.dict1', 'x', 'before moving tables');
SELECT dictGet('test_dictionary', 'insert_time', toUInt64(1), 10);
SELECT dictGet('test_dictionary', 'value', 'Key');
SELECT dictGet('test_dictionary', 'value', 0);
SELECT dictGet('test_dictionary', 'value', 0, 'DefaultValue');
SELECT dictGet('test_dictionary', 'value', materialize('Key'));
SELECT dictGet('test_dictionary', 'value', toUInt64(0));
SELECT dictGet('test_dictionary', 'value', tuple('Key'));
SELECT dictGet('test_dictionary', 'value', tuple(materialize('Key')));
SELECT dictGet('test_dictionary_non_nullable', 'value', arrayJoin([toUInt64(0), NULL, 1]));
SELECT dictGet('test_dictionary_non_nullable', 'value', NULL);
SELECT dictGet('test_dictionary_nullable', 'value', arrayJoin([toUInt64(0), NULL, 1, 2]));
SELECT dictGet('test_dictionary_nullable', 'value', NULL);
SELECT dictGet(currentDatabase() || '.dict', 's', number) FROM numbers(2);
SELECT dictGet(default.dict3, 'some_column', toUInt64(12));
select dictGet(regexp_dict1, ('name', 'version'), key) from needle_table;
select dictGet(regexp_dict1, ('name', 'version', 'comment'), '33/tclwebkit');
SELECT dictGet(t.nest.a, concat(currentDatabase(), '.dict.dict'), 's', number) FROM numbers(5);
SELECT dictGet(test_01191.dict1, 's', toUInt64(42));
SELECT dictGet(test_01191.dict2, 's', toUInt64(42));
SELECT dictGet(test_01191.t, 's', toUInt64(42));
SELECT dictGet(test_dict, 'value', (toUInt32(1), toUInt32(2)));
SELECT dictGet(test_dictionary, 'value', toUInt64(0));
SELECT dictGet({CLICKHOUSE_DATABASE:Identifier}.dict3, 'some_column', toUInt64(12));
select dictGet({CLICKHOUSE_DATABASE:String} || '.test_dict_01051_d', 'value', toUInt64(4));
SELECT dictGetChildren('01778_db.hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 6;
SELECT dictGetChildren('01778_db.hierarchy_hashed_dictionary', number) FROM system.numbers LIMIT 6;
SELECT dictGetChildren('hierarchy_flat_dictionary', 0);
SELECT dictGetChildren('hierarchy_flat_dictionary', 1);
SELECT dictGetChildren('hierarchy_flat_dictionary', 2);
SELECT dictGetChildren('hierarchy_flat_dictionary', 3);
SELECT dictGetChildren('hierarchy_flat_dictionary', 4);
SELECT dictGetChildren('hierarchy_flat_dictionary', 5);
SELECT dictGetDescendants('01778_db.hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 6;
SELECT dictGetDescendants('01778_db.hierarchy_flat_dictionary', number, 1) FROM system.numbers LIMIT 6;
SELECT dictGetDescendants('01778_db.hierarchy_hashed_dictionary', number) FROM system.numbers LIMIT 6;
SELECT dictGetDescendants('01778_db.hierarchy_hashed_dictionary', number, 1) FROM system.numbers LIMIT 6;
SELECT dictGetDescendants('hierarchy_flat_dictionary', 0);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 0, 1);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 1);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 1, 1);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 2);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 2, 1);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 3);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 3, 1);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 4);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 4, 1);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 5);
SELECT dictGetDescendants('hierarchy_flat_dictionary', 5, 1);
SELECT dictGetFloat32('db_01268.dict3', 'parent_region', toUInt64(1));
SELECT dictGetFloat32('db_01268.dict3', 'parent_region', toUInt64(2));
SELECT dictGetFloat32('db_01268.dict3', 'parent_region', toUInt64(3));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'fourth_column', toUInt64(14));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'fourth_column', tuple(toUInt64(14), '196'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'Tax', toUInt64(1), toDate('2019-05-15'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'Tax', toUInt64(1), toDate('2019-05-29'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'Tax', toUInt64(2), toDate('2019-05-29'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict1', 'Tax', toUInt64(2), toDate('2019-05-31'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict2', 'Tax', toUInt64(1), toDateTime('2019-05-15 00:00:00'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict2', 'Tax', toUInt64(1), toDateTime('2019-05-29 00:00:00'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict2', 'Tax', toUInt64(2), toDateTime('2019-05-29 00:00:00'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict2', 'Tax', toUInt64(2), toDateTime('2019-05-31 00:00:00'));
SELECT dictGetFloat64({CLICKHOUSE_DATABASE:String} || '.dict_exists', 'value', toUInt64(1));
SELECT dictGetHierarchy('01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', toUInt64(1));
SELECT dictGetHierarchy('01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', toUInt64(4));
SELECT dictGetHierarchy('01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy', toUInt64(1));
SELECT dictGetHierarchy('01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy', toUInt64(4));
SELECT dictGetHierarchy('01753_dictionary_db.direct_dictionary_simple_key_hierarchy', toUInt64(1));
SELECT dictGetHierarchy('01753_dictionary_db.direct_dictionary_simple_key_hierarchy', toUInt64(4));
SELECT dictGetHierarchy('01765_db.hashed_dictionary_simple_key_hierarchy', toUInt64(1));
SELECT dictGetHierarchy('01765_db.hashed_dictionary_simple_key_hierarchy', toUInt64(4));
SELECT dictGetHierarchy('01765_db.sparse_hashed_dictionary_simple_key_hierarchy', toUInt64(1));
SELECT dictGetHierarchy('01765_db.sparse_hashed_dictionary_simple_key_hierarchy', toUInt64(4));
SELECT dictGetHierarchy('01778_db.hierarchy_cache_dictionary', number) FROM system.numbers LIMIT 6;
SELECT dictGetHierarchy('01778_db.hierarchy_direct_dictionary', number) FROM system.numbers LIMIT 6;
SELECT dictGetHierarchy('01778_db.hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 6;
SELECT dictGetHierarchy('01778_db.hierarchy_hashed_dictionary', number) FROM system.numbers LIMIT 6;
SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(11)));
SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)));
SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', toUInt64(11));
SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', toUInt64(22));
SELECT dictGetHierarchy('db_01268.dict2', toUInt64(3));
SELECT dictGetHierarchy('hierarchy_flat_dictionary', 0);
SELECT dictGetHierarchy('hierarchy_flat_dictionary', 1);
SELECT dictGetHierarchy('hierarchy_flat_dictionary', 2);
SELECT dictGetHierarchy('hierarchy_flat_dictionary', 3);
SELECT dictGetHierarchy('hierarchy_flat_dictionary', 4);
SELECT dictGetHierarchy('hierarchy_flat_dictionary', 5);
SELECT dictGetHierarchy({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', toUInt64(3));
SELECT dictGetOrDefault('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
SELECT dictGetOrDefault('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
SELECT dictGetOrDefault('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
SELECT dictGetOrDefault('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
SELECT dictGetOrDefault('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
SELECT dictGetOrDefault('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
SELECT dictGetOrDefault('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
SELECT dictGetOrDefault('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
SELECT dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
SELECT dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
SELECT dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
SELECT dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first, dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
SELECT dictGetOrDefault('cache_dictionary', 'array_value', toUInt64(1), [2,3,4]);
SELECT dictGetOrDefault('cache_dictionary', 'value', id, value) FROM dictionary_nullable_default_source_table;
SELECT dictGetOrDefault('cache_dictionary', 'value', toUInt64(2), 2);
SELECT dictGetOrDefault('cache_dictionary', 'value', toUInt64(2), NULL);
SELECT dictGetOrDefault('database_for_range_dict.range_dictionary', 'Tax', toUInt64(2), toDate('2019-05-31'), 0.4);
SELECT dictGetOrDefault('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(2), toDate('2019-05-31'), 0.4);
SELECT dictGetOrDefault('direct_dictionary', 'array_value', toUInt64(1), [2,3,4]);
SELECT dictGetOrDefault('direct_dictionary', 'value', id, value) FROM dictionary_nullable_default_source_table;
SELECT dictGetOrDefault('direct_dictionary', 'value', toUInt64(2), 2);
SELECT dictGetOrDefault('direct_dictionary', 'value', toUInt64(2), NULL);
SELECT dictGetOrDefault('flat_dictionary', 'array_value', toUInt64(1), [2,3,4]);
SELECT dictGetOrDefault('flat_dictionary', 'value', id, value) FROM dictionary_nullable_default_source_table;
SELECT dictGetOrDefault('flat_dictionary', 'value', toUInt64(2), 2);
SELECT dictGetOrDefault('flat_dictionary', 'value', toUInt64(2), NULL);
SELECT dictGetOrDefault('hashed_dictionary', 'array_value', toUInt64(1), [2,3,4]);
SELECT dictGetOrDefault('hashed_dictionary', 'value', id, value) FROM dictionary_nullable_default_source_table;
SELECT dictGetOrDefault('hashed_dictionary', 'value', toUInt64(2), 2);
SELECT dictGetOrDefault('hashed_dictionary', 'value', toUInt64(2), NULL);
SELECT dictGetOrDefault('ip_trie_dictionary', 'array_value', tuple(IPv4StringToNum('128.0.0.0')), [2,3,4]);
SELECT dictGetOrDefault('polygon_dictionary', 'array_value', tuple(1.5, 1.5), [2, 3, 4]);
SELECT dictGetOrDefault('polygon_dictionary', 'value', key, value) FROM polygon_dictionary_nullable_default_source_table;
SELECT dictGetOrDefault('polygon_dictionary', 'value', tuple(2.0, 2.0), 2);
SELECT dictGetOrDefault('polygon_dictionary', 'value', tuple(2.0, 2.0), NULL);
SELECT dictGetOrDefault('range_dictionary', 'array_value', toUInt64(1), toDate('2019-05-21'), [2, 3, 4]);
SELECT dictGetOrDefault('range_dictionary', 'Tax', (toUInt64(2), '2'), toDate('2019-05-31'), 0.4);
SELECT dictGetOrDefault('range_dictionary', 'value', key, toDate('2019-05-15'), value) FROM range_dictionary_nullable_default_source_table;
SELECT dictGetOrDefault('range_dictionary', 'value', toUInt64(2), toDate('2019-05-15'), 2);
SELECT dictGetOrDefault('range_dictionary', 'value', toUInt64(2), toDate('2019-05-15'), NULL);
SELECT dictGetOrDefault('range_dictionary_nullable', 'Tax', (toUInt64(2), '2'), toDate('2019-05-31'), 0.4);
SELECT dictGetOrDefault('range_hashed_dictionary', 'value', 1, toUInt64(6), 'DefaultValue', 1);
select dictGetOrDefault('regexp_dict1', ('name', 'version', 'comment'), '30/tclwebkit', ('', 0, 'default'));
SELECT dictGetOrDefault('test_dictionary', 'value', 1, 'DefaultValue', 1);
SELECT dictGetString('02125_test_dictionary', 'value', toUInt64(0));
SELECT dictGetString('db_01268.dict2', 'region_name', toUInt64(4));
SELECT dictGetString('db_01268.dict2', 'region_name', toUInt64(5));
SELECT dictGetString(concat('default', '.countryId'), 'country', toUInt64(number)) AS country FROM numbers(2) GROUP BY country;
SELECT dictGetString(default.dict3, 'some_column', toUInt64(12));
SELECT dictGetString(dict3, 'some_column', toUInt64(12));
SELECT dictGetString({CLICKHOUSE_DATABASE:Identifier}.dict3, 'some_column', toUInt64(12));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict', 'value_default', toUInt64(12));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict', 'value_default', toUInt64(14));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict', 'value_expression', toUInt64(12));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict', 'value_expression', toUInt64(14));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict1', 'third_column', toUInt64(12));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict2', 'some_column', toUInt64(12));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dict3', 'some_column', toUInt64(12));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', 'RegionName', toUInt64(2));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', tuple(toInt64(0)));
SELECT dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', tuple(toInt64(1)));
select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(0)) as x);
select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(1)) as x);
select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(number)) as x from numbers(5));
select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(blockSize()=0)) as x);
select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(materialize(0))) as x);
select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(materialize(1))) as x);
select dictGetString({CLICKHOUSE_DATABASE:String} || '.test_dict_01080', 'dim_id', x) from (select tuple(toInt64(rand64()*0)) as x);
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(1), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(10), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(100), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(2), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(3), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(4), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(5), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(6), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(7), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(8), 'NONE');
SELECT dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(9), 'NONE');
SELECT dictGetUInt64('db_01268.dict1', 'second_column', toUInt64(100500));
SELECT dictGetUInt64('db_01268.dict2', 'parent_region', toUInt64(3));
SELECT dictGetUInt64('db_01268.dict2', 'parent_region', toUInt64(99));
SELECT dictGetUInt64('dict_db_01036.dict', 'val', toUInt64(0));
SELECT dictGetUInt64('dict_db_01254.dict', 'val', toUInt64(0));
SELECT dictGetUInt64('dict_db_02179.dict', 'val', toUInt64(0));
SELECT dictGetUInt64('dict_db_02179.dict', 'val', toUInt64(1));
SELECT dictGetUInt64('foo 1234.dict', 'val', toUInt64(0));
SELECT dictGetUInt64('ordinary_db.dict1', 'second_column', toUInt64(100500));
SELECT dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', toUInt64(11));
SELECT dictGetUInt8({CLICKHOUSE_DATABASE:String} || '.dict1', 'second_column', tuple(toUInt64(11), '121'));
SELECT dictGetUInt8({CLICKHOUSE_DATABASE_1:String}||'.dict1', 'second_column', toUInt64(100500));
SELECT dictHas('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
SELECT dictHas('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
SELECT dictHas('01753_dictionary_db.direct_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01753_dictionary_db.direct_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01754_dictionary_db.direct_dictionary_complex_key_complex_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
SELECT dictHas('01754_dictionary_db.direct_dictionary_complex_key_simple_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
SELECT dictHas('01765_db.hashed_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01765_db.hashed_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
SELECT dictHas('01766_db.hashed_dictionary_complex_key_complex_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
SELECT dictHas('01766_db.hashed_dictionary_complex_key_simple_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
SELECT dictHas('02176_test_complex_key_dictionary', tuple('0', '0'));
SELECT dictHas('02176_test_complex_key_dictionary', tuple([0], '0'));
SELECT dictHas('02176_test_complex_key_dictionary', tuple(toUInt64(0), '0'));
SELECT dictHas('02176_test_complex_key_dictionary', tuple(toUInt8(0), '0'));
SELECT dictHas('02176_test_simple_key_dictionary', '0');
SELECT dictHas('02176_test_simple_key_dictionary', [0]);
SELECT dictHas('02176_test_simple_key_dictionary', toUInt8(0));
SELECT dictHas('02179_test_dictionary', 0, 15);
SELECT dictHas('02179_test_dictionary', 0, 5);
SELECT dictHas('02183_cache_dictionary', 0);
SELECT dictHas('02183_cache_dictionary', 1);
SELECT dictHas('02183_cache_dictionary', 2);
SELECT dictHas('02183_direct_dictionary', 0);
SELECT dictHas('02183_direct_dictionary', 1);
SELECT dictHas('02183_direct_dictionary', 2);
SELECT dictHas('02183_flat_dictionary', 1);
SELECT dictHas('02183_flat_dictionary', 2);
SELECT dictHas('02183_hashed_array_dictionary', 0);
SELECT dictHas('02183_hashed_array_dictionary', 1);
SELECT dictHas('02183_hashed_array_dictionary', 2);
SELECT dictHas('02183_hashed_dictionary', 0);
SELECT dictHas('02183_hashed_dictionary', 1);
SELECT dictHas('02183_hashed_dictionary', 2);
SELECT dictHas('02183_ip_trie_dictionary', tuple(IPv4StringToNum('127.0.0.0')));
SELECT dictHas('02183_ip_trie_dictionary', tuple(IPv4StringToNum('127.0.0.1')));
SELECT dictHas('02183_polygon_dictionary', tuple(0.5, 0.5));
SELECT dictHas('02183_polygon_dictionary', tuple(1.5, 1.5));
SELECT dictHas('02183_range_dictionary', 0, 0);
SELECT dictHas('02183_range_dictionary', 0, 2);
SELECT dictHas('02184_range_dictionary', 1, 18446744073709551615);
SELECT dictHas('02185_range_dictionary', 0, 0);
SELECT dictHas('02185_range_dictionary', 0, 10001);
SELECT dictHas('02185_range_dictionary', 0, 5001);
SELECT dictHas('database_for_range_dict.range_dictionary', toUInt64(1), toDate('2019-05-15'));
SELECT dictHas('database_for_range_dict.range_dictionary', toUInt64(1), toDate('2019-05-29'));
SELECT dictHas('database_for_range_dict.range_dictionary', toUInt64(2), toDate('2019-05-29'));
SELECT dictHas('database_for_range_dict.range_dictionary', toUInt64(2), toDate('2019-05-31'));
SELECT dictHas('database_for_range_dict.range_dictionary_nullable', toUInt64(1), toDate('2019-05-15'));
SELECT dictHas('database_for_range_dict.range_dictionary_nullable', toUInt64(1), toDate('2019-05-29'));
SELECT dictHas('database_for_range_dict.range_dictionary_nullable', toUInt64(2), toDate('2019-05-29'));
SELECT dictHas('database_for_range_dict.range_dictionary_nullable', toUInt64(2), toDate('2019-05-31'));
SELECT dictHas('db_01268.dict2', toUInt64(3));
SELECT dictHas('db_01268.dict2', toUInt64(45));
SELECT dictHas('db_01526.dict1', (toUInt64(1), toUInt64(3)));
SELECT dictHas('ddl_dictionary_test', number) FROM system.numbers LIMIT 3;
SELECT dictHas('range_dictionary', (toUInt64(1), '1'), toDate('2019-05-15'));
SELECT dictHas('range_dictionary', (toUInt64(1), '1'), toDate('2019-05-29'));
SELECT dictHas('range_dictionary', (toUInt64(2), '2'), toDate('2019-05-29'));
SELECT dictHas('range_dictionary', (toUInt64(2), '2'), toDate('2019-05-31'));
SELECT dictHas('range_dictionary_nullable', (toUInt64(1), '1'), toDate('2019-05-15'));
SELECT dictHas('range_dictionary_nullable', (toUInt64(1), '1'), toDate('2019-05-29'));
SELECT dictHas('range_dictionary_nullable', (toUInt64(2), '2'), toDate('2019-05-29'));
SELECT dictHas('range_dictionary_nullable', (toUInt64(2), '2'), toDate('2019-05-31'));
SELECT dictHas('test_dictionary', 'Key');
SELECT dictHas('test_dictionary', materialize('Key'));
SELECT dictHas('test_dictionary', toUInt64(0));
SELECT dictHas('test_dictionary', toUInt64(1));
SELECT dictHas('test_dictionary', tuple('Key'));
SELECT dictHas('test_dictionary', tuple(materialize('Key')));
SELECT dictIsIn('01778_db.hierarchy_cache_dictionary', number, number) FROM system.numbers LIMIT 6;
SELECT dictIsIn('01778_db.hierarchy_direct_dictionary', number, number) FROM system.numbers LIMIT 6;
SELECT dictIsIn('01778_db.hierarchy_flat_dictionary', number, number) FROM system.numbers LIMIT 6;
SELECT dictIsIn('01778_db.hierarchy_hashed_dictionary', number, number) FROM system.numbers LIMIT 6;
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), materialize(toUInt64(11)));
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), materialize(toUInt64(111)));
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), toUInt64(11));
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), toUInt64(111));
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(11), materialize(toUInt64(22)));
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(11), materialize(toUInt64(222)));
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(2), toUInt64(1));
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(22), toUInt64(11));
SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(22), toUInt64(111));
SELECT dictIsIn('db_01268.dict2', toUInt64(1), toUInt64(3));
SELECT dictIsIn('db_01268.dict2', toUInt64(3), toUInt64(1));
SELECT dictIsIn('hierarchy_flat_dictionary', 1, 1);
SELECT dictIsIn('hierarchy_flat_dictionary', 2, 0);
SELECT dictIsIn('hierarchy_flat_dictionary', 2, 1);
SELECT dictIsIn({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', toUInt64(1), toUInt64(5));
SELECT dictIsIn({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', toUInt64(3), toUInt64(2));
SELECT dictIsIn({CLICKHOUSE_DATABASE:String} || '.dictionary_with_hierarchy', toUInt64(7), toUInt64(10000));
SELECT did, id, name FROM f LEFT ARRAY JOIN d_ids as did LEFT JOIN d ON d.id = did ORDER BY id;
select dim1, dim2, count() from test group by dim1, dim2 with cube order by dim1, dim2, count();
select dim1, dim2, count() from test group by dim1, dim2 with rollup order by dim1, dim2, count();
select dim1, dim2, count() from test group by dim1, dim2 with totals order by dim1, dim2, count();
select dim1, dim2, count() from test group by grouping sets ((dim1, dim2), dim1) order by dim1, dim2, count();
SELECT disk_name, partition, rows FROM system.parts WHERE database = currentDatabase() AND table = 'test_move_partition_throttling' and active;
select displayName();
SELECT distanceL1((1, 1), (1, 1)), distanceL2((1, 1), (1, 1)), distanceLinf((1, 1), (1, 1)), distanceLp((1, 1), (1, 1), 1.);
select distinct 'constant_1' as constant_value, count(*) over(partition by constant_value, string_value) as value_cnt from ( select string_value from test_table );
select distinct 'constant_1' as constant_value, * from (select string_value from test_table) ORDER BY constant_value, string_value settings max_threads=1;
SELECT DISTINCT 'a';
SELECT DISTINCT * FROM (SELECT 2 UNION ALL SELECT 2);
SELECT DISTINCT * FROM clear_column2 ORDER BY d, i, s;
select distinct * from dist_01223 order by key;
select distinct * from dist_01223 where key global in (select toInt32(1));
select distinct 1 as x, 2 as y from distinct_in_order order by x, y;
select distinct 1 as x, 2 as y from distinct_in_order order by x;
SELECT DISTINCT 1 FROM bug_13492, numbers(1) n;
SELECT DISTINCT _part FROM (SELECT _part FROM t_reverse_order_virt_col ORDER BY order_0 DESC);
SELECT DISTINCT _partition_id, _partition_value FROM weird_partitions_02245 ORDER BY _partition_id ASC;
select distinct a from distinct_in_order order by a desc;
select distinct a from distinct_in_order order by a;
select distinct a from distinct_in_order;
select distinct a from fooL semi left join fooR using(a) order by a;
select distinct a from sorting_key_empty_tuple;
select distinct a, 1 as x, 2 as y from distinct_in_order order by a;
select distinct a, b, x, y from (select a, b, 1 as x, 2 as y from distinct_in_order order by a) order by a, b;
select distinct a,b from distinct_in_order order by b desc;
select distinct a,b from distinct_in_order order by b;
select distinct a,c from distinct_in_order order by c desc;
select distinct a,c from distinct_in_order order by c;
select distinct any(number) over (rows unbounded preceding) from numbers(2);
SELECT DISTINCT arrayFilter(x -> notEmpty(x), arrayJoin([[''], ['is_registred'], ['registration_month','user_login','is_registred'], ['is_registred'], ['is_registred'], ['']]));
SELECT DISTINCT arrayReduce('quantile(0.5)', [0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFE]) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantile(0.5)', []::Array(Float64)) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantile(0.5)', [CAST(-1, 'UInt256'), CAST(-2, 'UInt256')]) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantile(0.5)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantileDeterministic(0.5)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantiles(0, 0.5, 0.9, 1)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantiles(0.5)', [0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFE]) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantiles(0.5)', []::Array(Float64)) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantiles(0.5)', [CAST(-1, 'UInt256'), CAST(-2, 'UInt256')]) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantiles(0.5)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantilesDeterministic(0, 0.5, 0.9, 1)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayReduce('quantilesDeterministic(0.5)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;
SELECT DISTINCT arrayUniq(finalizeAggregation(groupArrayState(x))) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k;
SELECT DISTINCT b FROM (SELECT a, b FROM d GROUP BY a, b) order by b;
select distinct b,c from distinct_in_order order by c desc;
select distinct b,c from distinct_in_order order by c;
SELECT DISTINCT bitXor(materialize(toFixedString('abc', 3)), toFixedString('\x00\x01\x02', 3)) FROM numbers(10);
SELECT DISTINCT bitXor(materialize(toFixedString('abcdef', 6)), toFixedString('\x00\x01\x02\x03\x04\x05', 6)) FROM numbers(10);
SELECT DISTINCT bitXor(toFixedString('\x00\x01\x02', 3), materialize(toFixedString('abc', 3))) FROM numbers(10);
SELECT DISTINCT bitXor(toFixedString('\x00\x01\x02\x03\x04\x05', 6), materialize(toFixedString('abcdef', 6))) FROM numbers(10);
SELECT DISTINCT blockSize() FROM t;
SELECT DISTINCT c > 30000 FROM (SELECT arrayJoin(arrayMap(x -> reinterpretAsUInt8(substring(randomFixedString(100), x + 1, 1)), range(100))) AS byte, count() AS c FROM numbers(100000) GROUP BY byte ORDER BY byte);
SELECT DISTINCT c > 30000 FROM (SELECT arrayJoin(arrayMap(x -> reinterpretAsUInt8(substring(randomString(100), x + 1, 1)), range(100))) AS byte, count() AS c FROM numbers(100000) GROUP BY byte ORDER BY byte);
SELECT DISTINCT c1, c2, c3 FROM test;
SELECT DISTINCT c2, c1 FROM test_string;
SELECT DISTINCT col1, multiIf(col1 != 213, 'Москва', 'Мир') AS k FROM multi_if_check LIMIT 10;
SELECT DISTINCT count() FROM merge(currentDatabase(), '^numbers\\d+$') GROUP BY number;
select distinct datetime from sorting_key_contain_function;
SELECT DISTINCT decodeURLComponent(encodeURLComponent(randomString(100) AS x)) = x FROM numbers(100000);
SELECT DISTINCT description LIKE '"%"' FROM system.settings;
SELECT DISTINCT dumpColumnStructure([[], [1]]) FROM numbers(2);
SELECT DISTINCT emptyArrayString() AS k FROM (SELECT * FROM system.numbers LIMIT 100000);
SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM numbers(10)) GROUP BY k WITH TOTALS ORDER BY k;
SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k;
SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(1)) GROUP BY k WITH CUBE ORDER BY k;
SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(1)) GROUP BY k WITH ROLLUP ORDER BY k;
SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(1)) GROUP BY k WITH TOTALS ORDER BY k;
SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(10)) GROUP BY k WITH TOTALS ORDER BY k;
SELECT DISTINCT id FROM dist_01213 SETTINGS optimize_skip_unused_shards=1, optimize_distributed_group_by_sharding_key=0;
SELECT DISTINCT id FROM dist_01213 SETTINGS optimize_skip_unused_shards=1, optimize_distributed_group_by_sharding_key=1;
SELECT DISTINCT id FROM dist_01213 WHERE id = 1 SETTINGS distributed_group_by_no_merge=1;
SELECT DISTINCT id FROM dist_01213 WHERE id = 1 SETTINGS optimize_skip_unused_shards=1;
SELECT DISTINCT id, v FROM t_sparse_distinct format Null;
SELECT DISTINCT intDiv(number, nan) FROM numbers(10);
SELECT DISTINCT JSONExtractRaw(concat('{"x":', rand() % 2 ? 'true' : 'false', '}'), 'x') AS res FROM numbers(1000000) ORDER BY res;
SELECT distinct length(range(number, number + 100, 100)) == 1 FROM numbers(1000);
SELECT distinct length(range(number, number + 100, 99)) == 2 FROM numbers(1000);
SELECT DISTINCT marks FROM system.parts WHERE (table = NULL) AND (database = currentDatabase()) AND (active = 1);
SELECT DISTINCT meta_source_req_uuid FROM bug_14144 WHERE meta_source_type = 'missing' ORDER BY meta_source_req_uuid ASC;
select distinct n from mt;
SELECT DISTINCT n.a, n.c FROM nested PREWHERE filter;
SELECT DISTINCT n.b FROM nested PREWHERE filter;
SELECT DISTINCT n.c FROM nested PREWHERE filter;
SELECT DISTINCT NULL = countEqual(materialize([arrayJoin([NULL, NULL, NULL]), NULL AS x, arrayJoin([255, 1025, NULL, NULL]), arrayJoin([2, 1048576, NULL, NULL])]), materialize(x));
SELECT DISTINCT NULL, if(number > 0, 't', '') AS res FROM numbers(1) ORDER BY res;
SELECT DISTINCT number % 3, number % 5, (number % 3, number % 5), [number % 3, number % 5] FROM (SELECT * FROM system.numbers LIMIT 100);
SELECT DISTINCT number + nan FROM numbers(1000);
select DISTINCT number from dist_01247;
SELECT DISTINCT number FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_memory) ORDER BY number LIMIT 10;
SELECT DISTINCT ON (a) * FROM t1;
SELECT DISTINCT ON (a, b) * FROM t1;
SELECT DISTINCT ON (a, b) a, b, c FROM t1;
select distinct part_type from system.parts where database = currentDatabase() and table = 'mt_compact' and active;
SELECT DISTINCT positionCaseInsensitiveUTF8(materialize('Hello'), '%\xF0%') FROM numbers(1000);
SELECT DISTINCT query_duration_ms >= 500 FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%special query for 01290_max_execution_speed_distributed%' AND query NOT LIKE '%system.query_log%' AND type = 2;
SELECT DISTINCT regexpQuoteMeta(toString(number)) = toString(number) FROM numbers(100000);
SELECT DISTINCT result FROM (SELECT toStartOfFifteenMinutes(toDateTime(toStartOfFifteenMinutes(toDateTime(1000.0001220703125) + (number * 65536))) + (number * 9223372036854775807)) AS result FROM system.numbers LIMIT 1048576) ORDER BY result DESC NULLS FIRST FORMAT Null;
SELECT DISTINCT s FROM remote('127.0.0.{1,2}', currentDatabase(), data) ORDER BY x + y, s;
SELECT DISTINCT substring(toString(range(rand(1) % 50)), -(rand(2) % 50)) = substringUTF8(toString(range(rand(1) % 50)), -(rand(2) % 50)) AS res FROM numbers(1000000);
SELECT DISTINCT substring(toString(range(rand(1) % 50)), rand(2) % 50) = substringUTF8(toString(range(rand(1) % 50)), rand(2) % 50) AS res FROM numbers(1000000);
SELECT DISTINCT substring(toString(range(rand(1) % 50)), rand(2) % 50, rand(3) % 50) = substringUTF8(toString(range(rand(1) % 50)), rand(2) % 50, rand(3) % 50) AS res FROM numbers(1000000);
select distinct sum(number) over w as x, max(number) over w as y from remote('127.0.0.{1,2}', '', t_01568) window w as (partition by p) order by x, y;
select distinct toDate(datetime) from sorting_key_contain_function;
SELECT DISTINCT toDayOfWeek(toStartOfISOYear(toDate(10000 + rand64() % 20000))) FROM numbers(10000);
SELECT DISTINCT toFloat64(arrayJoin(['+inf', '+Inf', '+INF', '+infinity', '+Infinity']));
SELECT DISTINCT toFloat64(arrayJoin(['-inf', '-Inf', '-INF', '-infinity', '-Infinity']));
SELECT DISTINCT toFloat64(arrayJoin(['inf', 'Inf', 'INF', 'infinity', 'Infinity']));
SELECT DISTINCT toString(number) = toStringCutToZero(toFixedString(toString(number), 10)) FROM (SELECT * FROM system.numbers LIMIT 1000);
SELECT DISTINCT toString(number) = toStringCutToZero(toString(number)) FROM (SELECT * FROM system.numbers LIMIT 1000);
SELECT DISTINCT toTypeName(data) FROM t_json_5;
SELECT DISTINCT toTypeName(data) FROM t_json_field;
SELECT DISTINCT toTypeName(data) FROM type_json_dst;
SELECT DISTINCT u FROM t_sparse_full ORDER BY id LIMIT 5;
SELECT DISTINCT UserID FROM audience_local PREWHERE Date = toDate('2019-07-25') AND Release = '17.11.0.542';
SELECT DISTINCT v FROM t_sparse_distinct ORDER BY v;
SELECT DISTINCT x FROM (SELECT number % 10 AS x FROM system.numbers LIMIT 100000) ORDER BY x;
SELECT DISTINCT x FROM (SELECT toFixedString(number < 20 ? '' : 'Hello', 5) AS x FROM system.numbers LIMIT 50) WHERE x != '\0\0\0\0\0';
SELECT DISTINCT x FROM sorted;
SELECT DISTINCT x FROM tab_v ORDER BY x;
select distinct x, y from (select 1 as x, 2 as y from distinct_in_order order by x) order by y;
select distinct(d0.id) from distr1 d0 where d0.id in ( select d1.id from distr1 as d1 join distr2 as d2 on d1.id = d2.id where d1.id > 0 );
select distinct(distr1.id) from distr1 where distr1.id in ( select distr1.id from distr1 join distr2 on distr1.id = distr2.id where distr1.id > 0 );
select distinct(distr1.id) from distr1 where distr1.id in ( select distr1.id from distr1 as d1 join distr2 as d2 on distr1.id = distr2.id where distr1.id > 0 );
SELECT distinct(marks) from system.parts WHERE table = 'adaptive_granularity_alter' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'adaptive_granularity_alter1' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'adaptive_granularity_alter2' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'four_rows_per_granule' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'four_rows_per_granule1' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'four_rows_per_granule2' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'huge_granularity_small_blocks' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'six_rows_per_granule' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'two_rows_per_granule' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'zero_rows_per_granule' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'zero_rows_per_granule1' and database=currentDatabase() and active=1;
SELECT distinct(marks) from system.parts WHERE table = 'zero_rows_per_granule2' and database=currentDatabase() and active=1;
select distinct(val) from lc_00800_2 order by val;
SELECT distinct(value) FROM mutation_table ORDER BY value;
SELECT distinct(y) FROM mt_with_pk;
SELECT DIV `MOD` FROM (SELECT 1 `DIV`) FORMAT TSVWithNames;
SELECT div `MOD` FROM (SELECT 1 `div`) FORMAT TSVWithNames;
SELECT DIV AS MOD FROM (SELECT 1 `DIV`) FORMAT TSVWithNames;
SELECT DIV AS mod FROM (SELECT 1 `DIV`) FORMAT TSVWithNames;
SELECT DIV MOD 1 FROM (SELECT 1 `DIV`) FORMAT TSVWithNames;
SELECT DIV mod 1 FROM (SELECT 1 `DIV`) FORMAT TSVWithNames;
SELECT divide(sum(a) + sum(b), nullIf(sum(c) + sum(d), 0)) FROM foo;
SELECT divideDecimal(toDecimal128(-123.76, 2), toDecimal128(11.123456, 6));
SELECT divideDecimal(toDecimal256(1e66, 0), toDecimal256(1e-10, 10), 0);
SELECT divideDecimal(toDecimal32(-123.123, 3), toDecimal128(-11.4, 1), 2);
SELECT divideDecimal(toDecimal32(123.123, 3), toDecimal128(-11.4, 1), 2);
SELECT divideDecimal(toDecimal32(123.123, 3), toDecimal128(11.4, 1), 2);
SELECT divideDecimal(toDecimal64(10, 1), toNullable(toDecimal64(100, 5)));
SELECT divideDecimal(toDecimal64(123.123, 3), toDecimal64(0, 1));
SELECT divideDecimal(toNullable(toDecimal64(10, 1)), toDecimal64(100, 5));
SELECT divideDecimal(toNullable(toDecimal64(10, 1)), toNullable(toDecimal64(100, 5)));
SELECT domainRFC('2001:db8::1]:80') FORMAT CSV;
SELECT domainRFC('[ ]:80') FORMAT CSV;
SELECT domainRFC('[2001::db 81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db#81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db%81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db&81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db.81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db/81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db;
SELECT domainRFC('[2001::db<81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db=81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db>81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db?81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db@81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db\81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db^81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db{81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db|81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db}81]:80') FORMAT CSV;
SELECT domainRFC('[2001::db~81]:80') FORMAT CSV;
SELECT domainRFC('[2001:db8::1') FORMAT CSV;
SELECT domainRFC('[2001:db8::1]') FORMAT CSV;
SELECT domainRFC('[2001:db8::1]:80') FORMAT CSV;
SELECT domainRFC('[2001db81]:80') FORMAT CSV;
SELECT domainRFC('[20[01:db8::1]:80') FORMAT CSV;
SELECT domainRFC('[20[01:db]8::1]:80') FORMAT CSV;
SELECT domainRFC('[::200]:80') FORMAT CSV;
SELECT domainRFC('[[]:80') FORMAT CSV;
SELECT domainRFC('[]:80') FORMAT CSV;
SELECT domainRFC('[]]:80') FORMAT CSV;
SELECT domainRFC('http://[2001:db8::1]:80') FORMAT CSV;
SELECT dotProduct([1, 1, 1, 1, 1], [222, 12, 0, -12, 8]);
SELECT dotProduct([1.3, 2, 3, 4, 5], [222, 12, 5.3, 2, 8]);
SELECT dotProduct([12, 2.22, 302], [1.32, 231.2, 11.1]);
SELECT dotProduct(materialize((-1, 2, 3.002)), materialize((2, 3.4, 4)));
select dt, id, arraySort(groupArrayArray(arr)) from ( select dt, id, arr from table1 where dt = '2019-01-14' and id = 1 UNION ALL select dt, id, arr from table2 where dt = '2019-01-14' and id = 1 ) group by dt, id;
SELECT dt, user_id FROM decrypt_null WHERE (user_id > 0) AND (decrypt('aes-256-gcm', encrypted, 'keykeykeykeykeykeykeykeykeykey02', iv) = 'value2');
SELECT dt, user_id, (tryDecrypt('aes-256-gcm', encrypted, 'keykeykeykeykeykeykeykeykeykey02', iv)) as value FROM decrypt_null ORDER BY user_id;
SELECT dt64, dts64, dtms64 FROM generateRandom('dt64 DateTime64(3, \'UTC\'), dts64 DateTime64(6, \'UTC\'), dtms64 DateTime64(6 ,\'UTC\')', 1, 10, 10) LIMIT 10;
SELECT dummy + 1 AS k, count() FROM remote('127.0.0.{2,3}', system, one) GROUP BY k WITH TOTALS ORDER BY k;
SELECT dummy + dummy;
SELECT dummy == (1,1.2) FROM 01504_test WHERE k IN (1, 3) OR k IN (1) OR k IN (3, 1) OR k IN [1] OR k IN [1, 3] ;
SELECT dummy > 0, toTypeName(any(dummy)), any(toTypeName(dummy)) FROM ( SELECT [toUInt32(dummy), toUInt32(dummy)] AS dummy FROM system.one ) AS x ARRAY JOIN dummy JOIN ( SELECT toInt32(dummy) AS dummy FROM system.one ) AS y USING dummy GROUP BY (dummy > 0);
SELECT dummy AS d FROM remote('127.0.0.{2,3}', system.one) ORDER BY d SETTINGS distributed_group_by_no_merge=2;
SELECT dummy AS dummy, dummy AS b FROM system.one;
SELECT dummy AS dummy, dummy AS b, b AS c FROM system.one;
select dummy as foo from remote('127.{2,3}', currentDatabase(), dist) limit 1 settings prefer_localhost_replica=0, distributed_group_by_no_merge=1;
select dummy as foo from remote('127.{2,3}', currentDatabase(), dist) limit 1 settings prefer_localhost_replica=0, distributed_push_down_limit=1;
SELECT dummy FROM one AS A JOIN one ON A.dummy = one.dummy;
SELECT dummy FROM one JOIN one AS A ON A.dummy = one.dummy;
SELECT dummy FROM one l JOIN one r ON dummy = r.dummy;
SELECT dummy FROM one l JOIN one r ON l.dummy = dummy;
SELECT dummy FROM one l JOIN one r ON l.dummy = one.dummy;
SELECT dummy FROM remote('127.0.0.{2,3}', system.one) LIMIT 2 BY dummy;
select dummy from system.one left join system.one using dummy;
SELECT dummy FROM system.one ORDER BY materialize('{"k":"v"}'::JSON), dummy;
SELECT dummy FROM system.one ORDER BY materialize('{"k":"v"}'::JSON);
SELECT dummy FROM system.one;
SELECT dummy IN (0) AS x, count() GROUP BY x;
SELECT dummy IN (SELECT 0) FROM remote('127.0.0.1', system.one);
SELECT dummy IN (SELECT 0) FROM remote('127.0.0.{1,2}', system.one);
SELECT dummy IN (SELECT 1) FROM remote('127.0.0.1', system.one);
SELECT dummy IN (SELECT 1) FROM remote('127.0.0.{1,2}', system.one);
SELECT dummy, count() FROM remote('127.0.0.{2,3}', system, one) GROUP BY dummy WITH TOTALS;
SELECT dummy, count() GROUP BY dummy WITH TOTALS;
SELECT dummy;
SELECT dumpColumnStructure(['Hello', 'World']::Array(LowCardinality(String)));
SELECT dumpColumnStructure([[[]]]);
SELECT dumpColumnStructure([]);
select dumpColumnStructure([a]), arrayReduce('sumMap', [a], [a]) from (select [1, 2] a FROM numbers(2));
SELECT e + 1 > e, e + 10 > e, 1 + e > e, 10 + e > e FROM decimal WHERE e > 0;
SELECT e + 21, e - 21, e - 84, e * 21, e * -21, e / 21, e / 84 FROM decimal WHERE e > 0;
SELECT e + e, e - e, e * e, e / e, intDiv(e, e), intDivOrZero(e, e) FROM decimal WHERE e > 0;
SELECT e FROM alter_update_00806 ORDER BY d;
SELECT e FROM mutations_and_escaping_1648 ORDER BY d;
SELECT e, count() FROM enum_totals GROUP BY e WITH TOTALS ORDER BY e;
SELECT editDistance(randomString(power(2, 17)), 'abc');
SELECT element_count FROM system.dictionaries WHERE database = currentDatabase() and name = 'test_complex_dictionary_10_shards';
SELECT element_count FROM system.dictionaries WHERE database = currentDatabase() and name = 'test_complex_dictionary_load_factor';
SELECT element_count FROM system.dictionaries WHERE database = currentDatabase() AND name = 'test_dictionary_10_shards';
SELECT element_count FROM system.dictionaries WHERE database = currentDatabase() AND name = 'test_dictionary_10_shards_nullable';
SELECT element_count FROM system.dictionaries WHERE database = currentDatabase() AND name = 'test_dictionary_load_factor';
SELECT element_count FROM system.dictionaries WHERE database = currentDatabase() AND name = 'test_dictionary_load_factor_nullable';
SELECT element_count FROM system.dictionaries WHERE database = currentDatabase() AND name = 'test_sparse_dictionary_load_factor';
SELECT empty(a), empty(b), empty(c) FROM decimal;
select empty(map());
select empty(map(1,2,3,4));
SELECT empty(nest.a), empty(nest.b), empty(nest.c) FROM decimal;
SELECT empty(toFixedString('', 1 + randConstant() % 100));
SELECT empty(toIPv4('0.0.0.0'));
SELECT empty(toIPv4('127.0.0.1'));
SELECT empty(toIPv6('::'));
SELECT empty(toIPv6('::1'));
SELECT empty(toUUID('00000000-0000-0000-0000-000000000000'));
SELECT emptyArrayToSingle(arr) FROM (SELECT arrayMap(x -> (x, toString(x), x = 1 ? NULL : x), range(number % 3)) AS arr FROM system.numbers LIMIT 10);
SELECT emptyArrayToSingle(arrayFilter(x -> x != 99, arrayJoin([[1, 2], [99], [4, 5, 6]])));
SELECT emptyArrayToSingle(arrayMap(x -> nullIf(x, 2), arrayJoin([emptyArrayUInt8(), [1], [2, 3]]))) AS arr;
SELECT emptyArrayToSingle(arrayMap(x -> toFixedString(toString(x), 3), arrayMap(x -> nullIf(x, 2), arrayJoin([emptyArrayUInt8(), [1], [2, 3], [3, 4, 5]])))) AS arr;
SELECT emptyArrayToSingle(arrayMap(x -> toString(x), arrayMap(x -> nullIf(x, 2), arrayJoin([emptyArrayUInt8(), [1], [2, 3]])))) AS arr;
SELECT emptyArrayToSingle(emptyArrayString()), emptyArrayToSingle(emptyArrayDate()), emptyArrayToSingle(arrayFilter(x -> 0, [now('Asia/Istanbul')]));
SELECT encodeXMLComponent('&clickhouse');
SELECT encodeXMLComponent('<123>');
SELECT encodeXMLComponent('\'foo\'');
SELECT encodeXMLComponent('Hello, "world"!');
SELECT endsWith('123', '');
SELECT endsWith('123', '23');
SELECT endsWith('123', '3');
SELECT endsWith('123', '32');
select endsWith([1, 2, 3, 4], [3, 4]);
select endsWith([1, 2, 3, 4], [3]);
select endsWith([1, NULL], [NULL]);
select endsWith([1], []);
select endsWith([1], emptyArrayUInt8());
SELECT endsWith([], 'str');
select endsWith([], [1]);
select endsWith([], []);
select endsWith([], [NULL]);
select endsWith([NULL, 1], [NULL]);
select endsWith([NULL], []);
select endsWith([NULL], [NULL]);
SELECT endsWith(s, '') FROM (SELECT arrayJoin(['', 'h', 'hi']) AS s);
SELECT endsWith(s, 'ow') FROM (SELECT arrayJoin(['', 'o', 'ow', 'Hellow', '3434', 'owfffffffdHe']) AS s);
SELECT endsWithUTF8('123', '');
SELECT endsWithUTF8('123', '23');
SELECT endsWithUTF8('123', '3');
SELECT endsWithUTF8('123', '32');
select endsWithUTF8('富强民主文明和谐', '');
select endsWithUTF8('富强民主文明和谐', '\x90');
select endsWithUTF8('富强民主文明和谐', '和谐');
SELECT endUserIDs._experience FROM t_nested_tuple FORMAT JSONEachRow;
SELECT endUserIDs._experience.aaid FROM t_nested_tuple FORMAT JSONEachRow;
SELECT endUserIDs._experience.aaid.id FROM t_nested_tuple FORMAT JSONEachRow;
SELECT endUserIDs._experience.aaid.namespace FROM t_nested_tuple FORMAT JSONEachRow;
SELECT endUserIDs._experience.aaid.namespace.code FROM t_nested_tuple FORMAT JSONEachRow;
SELECT endUserIDs._experience.aaid.primary FROM t_nested_tuple FORMAT JSONEachRow;
select engine from system.tables where database = currentDatabase() and name = 'td';
SELECT engine, metadata_path LIKE '%/metadata/dict\_db\_01224/dict.sql', create_table_query FROM system.tables WHERE database = 'dict_db_01224' AND name = 'dict';
SELECT engine_full FROM system.databases WHERE name = 'replicated_database_test';
SELECT entropy(rand64()) > 8 FROM remote('127.0.0.{1,2}', numbers(256));
SELECT equals(tupleElement(tuple('a', 10) AS x, 1), 'a') FROM remote('127.0.0.{1,2,3}', numbers(2));
select erf(-10) = -1;
select erf(0) = 0;
select erf(10) = 1;
select erfc(-10) = 2;
select erfc(0) = 1;
select erfc(28) = 0;
SELECT errorCodeToName(-1);
SELECT errorCodeToName(1);
SELECT errorCodeToName(950);
SELECT errorCodeToName(toUInt32(-1));
SELECT event FROM system.events WHERE event LIKE '%MMap%' ORDER BY event;
SELECT event FROM system.events WHERE length(description) < 10;
SELECT event_type, table, part_name, bytes_uncompressed > 0, size_in_bytes < bytes_uncompressed FROM system.part_log WHERE event_date >= yesterday() AND database = currentDatabase() AND table = 'part_log_bytes_uncompressed' ORDER BY part_name, event_type;
SELECT exception_code FROM system.query_log WHERE current_database = currentDatabase() AND lower(query) LIKE lower('SELECT * FROM test_table_for_01070_exception_code_in_query_log_table%') AND event_date >= yesterday() AND event_time > now() - INTERVAL 5 MINUTE ORDER BY exception_code;
SELECT EXISTS (SELECT 1);
select exists(select 1 except select 1);
select exists(select number from numbers(10) where number < 0);
select exists(select number from numbers(10) where number > 0);
SELECT exp10(nan);
select exp2(-1) = 1/2;
select exp2(0) = 1;
select exp2(1) = 2;
select exp2(2) = 4;
select exp2(3) = 8;
SELECT exp2(number) AS e2d, intExp2(number) AS e2i, toUInt64(e2d) = e2i AS e2eq, exp10(number) AS e10d, intExp10(number) AS e10i, toString(e10d) = toString(e10i) AS e10eq FROM system.numbers LIMIT 64;
SELECT EXTRACT (MONTH FROM toDate('2017-06-15'));
SELECT extract('1234' arg_1, '123' arg_2), arg_1, arg_2;
SELECT EXTRACT('Hello, world', '^\w+');
SELECT EXTRACT(DAY FROM toDate('2017-06-15'));
SELECT EXTRACT(DAY FROM toDate('2019-05-05') arg_1), arg_1;
SELECT EXTRACT(DAY from toDateTime('2017-12-31 18:59:58'));
SELECT EXTRACT(HOUR FROM toDateTime('2017-12-31 18:59:58'));
SELECT extract(message, 'SeL.+?;') FROM system.text_log WHERE event_date >= yesterday() AND message LIKE '%SeLeCt \'ab\n%' ORDER BY event_time DESC LIMIT 1 FORMAT TSVRaw;
SELECT EXTRACT(MINUTE FROM toDateTime('2017-12-31 18:59:58'));
SELECT extract(MONTH FROM toDateTime('2017-12-31 18:59:58'));
SELECT EXTRACT(SECOND FROM toDateTime('2017-12-31 18:59:58'));
SELECT EXTRACT(YEAR FROM DATE '2022-01-01');
SELECT EXTRACT(YEAR FROM toDate('2017-06-15'));
SELECT EXTRACT(year FROM toDateTime('2017-12-31 18:59:58'));
SELECT EXTRACT(YYYY FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, EXTRACT(DAY FROM OrderDate) AS OrderDay, EXTRACT(HOUR FROM OrderDate), EXTRACT(MINUTE FROM OrderDate), EXTRACT(SECOND FROM OrderDate) FROM Orders WHERE OrderId=1;
SELECT extractAll('\0', '');
SELECT extractAll('Mozilla/5.0 (Windows NT 10.0;
SELECT extractAllGroupsHorizontal('@#$%^&*', '(\w*)');
SELECT extractAllGroupsHorizontal('abc=111, def=222, ghi=333 "jkl mno"="444 foo bar"', '("[^"]+"|\\w+)=("[^"]+"|\\w+)');
SELECT extractAllGroupsHorizontal('hello world', '(\\w+)');
SELECT extractAllGroupsHorizontal('hello world', CAST('(\\w+)' as FixedString(5)));
SELECT extractAllGroupsHorizontal(CAST('hello world' AS FixedString(12)), '(\\w+)');
SELECT extractAllGroupsHorizontal(CAST('hello world' AS FixedString(12)), CAST('(\\w+)' as FixedString(5)));
SELECT extractAllGroupsHorizontal(materialize(CAST('hello world' AS FixedString(12))), '(\\w+)');
SELECT extractAllGroupsHorizontal(materialize(CAST('hello world' AS FixedString(12))), CAST('(\\w+)' as FixedString(5)));
SELECT extractAllGroupsVertical('@#$%^&*', '(\w*)');
SELECT extractAllGroupsVertical('abc=111, def=222, ghi=333 "jkl mno"="444 foo bar"', '("[^"]+"|\\w+)=("[^"]+"|\\w+)');
SELECT extractAllGroupsVertical('hello world', '(\\w+)');
SELECT extractAllGroupsVertical('hello world', CAST('(\\w+)' as FixedString(5)));
SELECT extractAllGroupsVertical(CAST('hello world' AS FixedString(12)), '(\\w+)');
SELECT extractAllGroupsVertical(CAST('hello world' AS FixedString(12)), CAST('(\\w+)' as FixedString(5)));
SELECT extractAllGroupsVertical(materialize(CAST('hello world' AS FixedString(12))), '(\\w+)');
SELECT extractAllGroupsVertical(materialize(CAST('hello world' AS FixedString(12))), CAST('(\\w+)' as FixedString(5)));
SELECT extractGroups('abc=111, def=222, ghi=333 "jkl mno"="444 foo bar"', '("[^"]+"|\\w+)=("[^"]+"|\\w+)');
SELECT extractGroups('hello world', '(\\w+) (\\w+)');
SELECT extractGroups('hello world', '\\w+');
SELECT extractGroups('hello world', CAST('(\\w+) (\\w+)' as FixedString(11)));
SELECT extractGroups('hello', '');
SELECT extractGroups(CAST('hello world' AS FixedString(12)), '(\\w+) (\\w+)');
SELECT extractGroups(CAST('hello world' AS FixedString(12)), CAST('(\\w+) (\\w+)' as FixedString(11)));
SELECT extractGroups(materialize(CAST('hello world' AS FixedString(12))), '(\\w+) (\\w+)');
SELECT extractGroups(materialize(CAST('hello world' AS FixedString(12))), CAST('(\\w+) (\\w+)' as FixedString(11)));
SELECT extractTextFromHTML(' ');
SELECT extractTextFromHTML(' ');
SELECT extractTextFromHTML(' <img src="pictures/power.png" style="margin-bottom: -30px;
SELECT extractTextFromHTML(' \t Hello,\rworld \n ');
SELECT extractTextFromHTML(' Hello, world ');
SELECT extractTextFromHTML(' Hello, world');
SELECT extractTextFromHTML('<![CDATA[ \t Hello,\rworld \n ]]>');
SELECT extractTextFromHTML('<![CDATA[<sender>John <![CDATA[]]>Smith</sender>]]>');
SELECT extractTextFromHTML('<![CDATA[<sender>John <![CDATA[Smith</sender>]]>');
SELECT extractTextFromHTML('<![CDATA[<sender>John ]]> <![CDATA[Smith</sender>]]>');
SELECT extractTextFromHTML('<![CDATA[<sender>John ]]><![CDATA[Smith</sender>]]>');
SELECT extractTextFromHTML('<![CDATA[<sender>John ]]>]]><![CDATA[Smith</sender>]]>');
SELECT extractTextFromHTML('<![CDATA[<sender>John Smith</sender>]]>');
SELECT extractTextFromHTML('<![CDATA[<sender>John]]> <![CDATA[Smith</sender>]]>');
SELECT extractTextFromHTML('<![CDATA[]]]]><![CDATA[>]]>');
SELECT extractTextFromHTML('<![CDATA[Here is CDTATA.]]>');
SELECT extractTextFromHTML('<script>Here is script.</script>');
SELECT extractTextFromHTML('<style>Here is style.</style>');
SELECT extractTextFromHTML('Hello < world');
SELECT extractTextFromHTML('Hello <![CDATA[Hello <b>world</b>]]> world!');
SELECT extractTextFromHTML('Hello <![CDATA[Hello\tworld]]> world!');
SELECT extractTextFromHTML('Hello <u> World</u>');
SELECT extractTextFromHTML('Hello <u>World</u>');
SELECT extractTextFromHTML('Hello > world');
SELECT extractTextFromHTML('Hello');
SELECT extractTextFromHTML('Hello, world');
SELECT extractTextFromHTML('Hello, world');
SELECT extractTextFromHTML('Hello<!->world');
SELECT extractTextFromHTML('Hello<!>world');
SELECT extractTextFromHTML('Hello<![CDATA[Hello\tworld]]>world!');
SELECT extractTextFromHTML('Hello<>world');
SELECT extractTextFromHTML('Hello<script >World</script> goodbye');
SELECT extractTextFromHTML('Hello<script type="text/javascript">World</script> goodbye');
SELECT extractTextFromHTML('Hello<script:p type="text/javascript">World</script:p> goodbye');
SELECT extractTextFromHTML('Hello<script:p>World</script:p> goodbye');
SELECT extractTextFromHTML('Hello<script>World</script> goodbye');
SELECT extractTextFromHTML('Hello<scripta>World</scripta> goodbye');
SELECT extractTextFromHTML('Hello<style type="text/css">World <![CDAT[</style>]]> </style> goodbye');
SELECT extractTextFromHTML('Hello<style type="text/css">World <![CDATA[</style>]]> </style> goodbye');
SELECT extractTextFromHTML('Hello<style type="text/css">World <![CDATA[</style>]]> </stylea> goodbye');
SELECT extractTextFromHTML('Hello<style type="text/css">World <script>abc</script> </style> goodbye');
SELECT extractTextFromHTML('Hello<style type="text/css">World <script>abc</script> </stylea> goodbye');
SELECT extractTextFromHTML('Hello<style type="text/css">World</style> goodbye');
SELECT extractTextFromHTML('Hello<u> World</u>');
SELECT extractTextFromHTML('Hello<u>World</u>');
SELECT extractTextFromHTML('Hello<world');
SELECT extractTextFromHTML('Hello<world>');
SELECT extractTextFromHTML('This is a white space test.');
SELECT extractTextFromHTML('This is a complex test. <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\n "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><![CDATA[<script type="text/javascript">Hello, world</script> ]]><hello />world<![CDATA[ <style> ]]> hello</style>\n<script><![CDATA[</script>]]>hello</script>\n</html>');
SELECT extractTextFromHTML(stringColumn) FROM defaults;
SELECT extractURLParameter('?_', '\0');
SELECT extractURLParameter('?_', '\0_________________________________');
SELECT extractURLParameter('?abc=def', 'abc\0def');
SELECT extractURLParameter('?abc\0def=Hello', 'abc\0def');
SELECT extractURLParameter('http://com/?testq=aaa&q=111', 'q');
SELECT extractURLParameter('ZiqSZeh?', '\0');
SELECT f + 1 > f, f + 10 > f, 1 + f > f, 10 + f > f FROM decimal WHERE f > 0;
SELECT f + 1048575, f - 21, f - 84, f * 21, f * -21, f / 21, f / 84 FROM decimal WHERE f > 0;
SELECT f from array_of_tuples;
SELECT f.* FROM format('CSV', '1,2,"[1,2,3]","[[\'abc\'], [], [\'d\', \'e\']]"') AS f;
SELECT f.c1, f.c2, f.c3, f.c4 FROM format('CSV', '1,2,"[1,2,3]","[[\'abc\'], [], [\'d\', \'e\']]"') AS f;
SELECT f.id1 AS ID, d.name AS Name, sum(f.value) FROM remote('127.0.0.{1,2,3}', test_01383.fact) AS f LEFT JOIN test_01383.dimension AS d ON f.id1 = d.id1 WHERE f.id1 = f.id2 GROUP BY ID, Name ORDER BY ID;
select f.model_id from fact_cpc_clicks as f left join dim_model as d on f.model_id=d.model_id limit 10;
select f.model_id from {CLICKHOUSE_DATABASE:Identifier}.fact_cpc_clicks as f left join {CLICKHOUSE_DATABASE:Identifier}.dim_model as d on f.model_id=d.model_id limit 10;
SELECT f2 FROM merge(currentDatabase(), '^abc$') PREWHERE f1 = 'a' WHERE _table = 'abc';
SELECT fact_1_id, fact_2_id, fact_3_id, fact_4_id, SUM(sales_value) AS sales_value from grouping_sets GROUP BY GROUPING SETS ((fact_1_id, fact_2_id), (fact_3_id, fact_4_id)) ORDER BY fact_1_id, fact_2_id, fact_3_id, fact_4_id;
SELECT fact_1_id, fact_2_id, fact_3_id, SUM(sales_value) AS sales_value from grouping_sets GROUP BY GROUPING SETS ((fact_1_id, fact_2_id), (fact_1_id, fact_3_id)) ORDER BY fact_1_id, fact_2_id, fact_3_id;
SELECT fact_1_id, fact_2_id, fact_3_id, SUM(sales_value) AS sales_value from grouping_sets GROUP BY GROUPING SETS ((fact_1_id, fact_2_id), (fact_3_id), ()) ORDER BY fact_1_id, fact_2_id, fact_3_id;
SELECT fact_1_id, fact_3_id, sum(sales_value), count() from grouping_sets GROUP BY GROUPING SETS(fact_1_id, fact_3_id) ORDER BY fact_1_id, fact_3_id;
SELECT fact_3_id FROM grouping_sets GROUP BY GROUPING SETS ( ( 'wo\0ldworldwo\0ldworldwo\0ldworldwo\0ldworldwo\0ldworldwo\0ldworldwo\0ldworldwo\0ldworld'), ( NULL), ( fact_4_id), ( fact_3_id, fact_4_id)) ORDER BY fact_3_id ASC NULLS FIRST;
SELECT fact_3_id FROM grouping_sets GROUP BY GROUPING SETS ((fact_3_id, fact_4_id)) ORDER BY fact_3_id ASC;
SELECT fact_3_id, fact_4_id, count() FROM grouping_sets GROUP BY GROUPING SETS ( ( fact_3_id ), ( fact_3_id, fact_4_id)) ORDER BY fact_3_id, fact_4_id SETTINGS optimize_aggregation_in_order=1;
SELECT fact_3_id, fact_4_id, count() FROM grouping_sets GROUP BY GROUPING SETS ( ( fact_3_id, fact_4_id)) ORDER BY fact_3_id, fact_4_id SETTINGS optimize_aggregation_in_order=1;
SELECT fact_3_id, fact_4_id, count() FROM grouping_sets GROUP BY GROUPING SETS ( fact_3_id, fact_4_id) ORDER BY fact_3_id, fact_4_id SETTINGS optimize_aggregation_in_order=1;
select factorial(-1) = 1;
select factorial(0) = 1;
select factorial(10) = 3628800;
select factorial(100);
SELECT false and true;
SELECT false or true;
SELECT farmFingerprint64('123456');
SELECT farmFingerprint64(123456);
SELECT farmHash64(123456);
SELECT field, countIf(num_field > 6.0) FROM data PREWHERE (num_field>6.0) GROUP BY field;
SELECT field1 FROM alias10 WHERE field3 = '12345';
SELECT field1 FROM alias10__fuzz_13 WHERE arrayEnumerateDense(NULL, tuple('0.2147483646'), NULL) GROUP BY field1, arrayEnumerateDense(('0.02', '0.1', '0'), NULL) WITH TOTALS;
SELECT field1, field2 FROM alias10 WHERE EventDate='2000-01-01';
SELECT field1, field2 FROM alias_local10 WHERE EventDate='2000-01-01';
SELECT field1, field2, field3 FROM alias10 WHERE EventDate='2000-01-01';
SELECT field1, field2, field3 FROM alias10;
SELECT field1, field2, field3 FROM alias_local10 WHERE EventDate='2000-01-01';
SELECT field1, field2, field3 FROM alias_local10;
SELECT field2 FROM agg_view01747 WHERE field1 = 'test';
SELECT field2 FROM alias10 WHERE field3 = '12345';
SELECT field2, field3 FROM alias10 WHERE EventDate='2000-01-01';
SELECT field2, field3 FROM alias10;
SELECT field3 FROM alias10 WHERE EventDate='2000-01-01';
SELECT field3 FROM alias10 WHERE field3 = '12345';
SELECT field3 FROM alias10;
SELECT fields.name FROM (SELECT fields.name FROM test_table);
SELECT fields.name, fields.value FROM (SELECT fields.name FROM test_table);
SELECT file('nonexistent.txt');
SELECT file('nonexistent.txt', NULL);
SELECT file_segment_range_begin, file_segment_range_end, size FROM system.filesystem_cache ORDER BY file_segment_range_end, size;
SELECT file_segment_range_begin, file_segment_range_end, size FROM system.filesystem_cache;
select filesystemCapacity('__un_exists_disk');
select filesystemCapacity('default') >= filesystemAvailable('default') and filesystemAvailable('default') >= 0 and filesystemUnreserved('default') >= 0;
SELECT filesystemCapacity() >= filesystemAvailable() AND filesystemAvailable() >= 0 AND filesystemUnreserved() >= 0;
SELECT finalizeAggregation((SELECT sumState(number) FROM numbers(10)) * 10);
SELECT finalizeAggregation((SELECT sumState(number) FROM numbers(10)) + (SELECT sumState(number) FROM numbers(10)));
SELECT finalizeAggregation((SELECT sumState(number) FROM numbers(10)) + materialize((SELECT sumState(number) FROM numbers(10))));
SELECT finalizeAggregation(*) FROM (select initializeAggregation('sumMapState', [1, 2], [1, 2], [1, null]));
select finalizeAggregation(cast(quantileState(0)(arrayJoin([1,2,3])) as AggregateFunction(quantile(1), UInt8)));
SELECT finalizeAggregation(CAST(unhex('01'), 'AggregateFunction(any_respect_nulls, UInt64)'));
SELECT finalizeAggregation(CAST(unhex('02'), 'AggregateFunction(any_respect_nulls, Nullable(UInt64))'));
SELECT finalizeAggregation(countState(DISTINCT toString(number % 20))) FROM numbers_mt(100000);
SELECT finalizeAggregation(countState(DISTINCT toString(number % 20))) FROM remote('127.0.0.{1,2}', numbers_mt(100000));
SELECT finalizeAggregation(initializeAggregation('uniqExactState', initializeAggregation('uniqState', 0)));
SELECT finalizeAggregation(initializeAggregation('uniqExactState', toNullable('foo')));
SELECT finalizeAggregation(initializeAggregation('uniqExactState', toNullable(123)));
SELECT finalizeAggregation(materialize((SELECT sumState(number) FROM numbers(10)) * 10));
SELECT finalizeAggregation(materialize((SELECT sumState(number) FROM numbers(10)) + (SELECT sumState(number) FROM numbers(10))));
SELECT finalizeAggregation(materialize((SELECT sumState(number) FROM numbers(10))) * 10);
SELECT finalizeAggregation(materialize((SELECT sumState(number) FROM numbers(10))) + (SELECT sumState(number) FROM numbers(10)));
SELECT finalizeAggregation(materialize((SELECT sumState(number) FROM numbers(10))) + materialize((SELECT sumState(number) FROM numbers(10))));
select finalizeAggregation(uniqThetaIntersect(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[1,2]) as a, arrayReduce('uniqThetaState',[2,3,4]) as b );
select finalizeAggregation(uniqThetaIntersect(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[2,3,4]) as a, arrayReduce('uniqThetaState',[1,2]) as b );
select finalizeAggregation(uniqThetaIntersect(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[]) as a, arrayReduce('uniqThetaState',[]) as b );
select finalizeAggregation(uniqThetaIntersect(a,b)), finalizeAggregation(a),finalizeAggregation(b) from ( select (uniqThetaStateIf(number, number>0)) as a, (uniqThetaStateIf(number, number>5)) as b from (select number FROM system.numbers LIMIT 10) );
select finalizeAggregation(uniqThetaIntersect(uv2021,uv2022))/finalizeAggregation(uv2021),finalizeAggregation(uniqThetaIntersect(uv2021,uv2022)),finalizeAggregation(uv2021) from ( select uniqThetaMergeStateIf(uv,year='2021') as uv2021, uniqThetaMergeStateIf(uv,year='2022') as uv2022 from test1 );
select finalizeAggregation(uniqThetaIntersect(uv2021,uv2022))/finalizeAggregation(uv2021),finalizeAggregation(uniqThetaIntersect(uv2021,uv2022)),finalizeAggregation(uv2021) from ( select uniqThetaStateIf(uv,year='2021') as uv2021, uniqThetaStateIf(uv,year='2022') as uv2022 from test2 );
select finalizeAggregation(uniqThetaNot(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[1,2]) as a, arrayReduce('uniqThetaState',[2,3,4]) as b );
select finalizeAggregation(uniqThetaNot(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[2,3,4]) as a, arrayReduce('uniqThetaState',[1,2]) as b );
select finalizeAggregation(uniqThetaNot(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[]) as a, arrayReduce('uniqThetaState',[]) as b );
select finalizeAggregation(uniqThetaUnion(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[1,2]) as a, arrayReduce('uniqThetaState',[2,3,4]) as b );
select finalizeAggregation(uniqThetaUnion(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[2,3,4]) as a, arrayReduce('uniqThetaState',[1,2]) as b );
select finalizeAggregation(uniqThetaUnion(a, b)), finalizeAggregation(a), finalizeAggregation(b) from (select arrayReduce('uniqThetaState',[]) as a, arrayReduce('uniqThetaState',[]) as b );
SELECT first, second, result FROM ( SELECT s2ToGeo(geoToS2(longitude, latitude)) AS output_geo, tuple(roundBankers(longitude, 5), roundBankers(latitude, 5)) AS first, tuple(roundBankers(output_geo.1, 5), roundBankers(output_geo.2, 5)) AS second, if(first = second, 'ok', 'fail') AS result FROM s2_indexes ORDER BY s2_index );
select first_col from (select first_col, second_col as total from tp2 order by 1 desc);
select first_col from (select first_col, second_col as total from tp2 order by 2 desc);
select first_value(b) ignore nulls from test;
select first_value(b) respect nulls from test;
SELECT first_value(number) RESPECT NULLS IGNORE NULLS from numbers(1);
Select FIRST_VALUE_respect_nulls (number) IGNORE NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsOrNullState(number) as t FROM numbers(0));
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(dummy) as t FROM system.one);
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(dummy::Nullable(UInt8)) as t FROM system.one);
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(NULL) as t FROM system.one);
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(NULL::Nullable(UInt8)) as t FROM numbers(5));
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(NULL::Nullable(UInt8)) as t FROM system.one);
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(number) as t FROM numbers(0));
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(number) as t FROM numbers(5));
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(number::LowCardinality(Nullable(UInt8))) as t FROM numbers(0)) settings allow_suspicious_low_cardinality_types=1;
SELECT first_value_respect_nullsMerge(t) FROM (Select first_value_respect_nullsState(number::Nullable(UInt8)) as t FROM numbers(0));
SELECT first_value_respect_nullsMerge(t) FROM (Select first_valueState(number) as t from numbers(1));
SELECT first_value_respect_nullsOrNullMerge(t) FROM (Select first_value_respect_nullsOrNullState(number) as t FROM numbers(0));
SELECT first_valueIf (number, isNull(number)) RESPECT NULLS from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));
SELECT FIRST_VALUEIf (number, NOT isNull(number) AND (assumeNotNull(number) > 5)) RESPECT NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));
select firstLine('foo\nbar\nbaz');
select firstLine('foo\r\nbar\r\nbaz');
select firstLine('foo\rbar\rbaz');
select firstLine('foobarbaz');
SELECT firstSignificantSubdomain(arrayJoin(['http://usa.gov.com/cgi-bin/yabb.pl?password=qwerty', 'https://www2.pentagon.mil.net/index.phtml', 'ftp://stanford.edu.org/~ivanov/phd-thesis.SHTM']));
SELECT flatten([[[]]]);
SELECT flatten(arrayJoin([[[1, 2, 3], [4, 5]], [[6], [7, 8]]]));
SELECT flatten(arrayMap(x -> arrayMap(x -> arrayMap(x -> range(x), range(x)), range(x)), range(number))) FROM numbers(6) SETTINGS allow_experimental_analyzer=1;
SELECT flatten(arrayMap(x -> arrayMap(y -> arrayMap(z -> range(x), range(x)), range(x)), range(number))) FROM numbers(6);
SELECT flatten(arrayMap(x -> arrayMap(y -> arrayMap(z -> range(z), range(y)), range(x)), range(number))) FROM numbers(6);
SELECT flattenTuple(a) AS data FROM t_json_analyzer FORMAT JSONEachRow;
SELECT flattenTuple(t) AS ft, toTypeName(ft) FROM t_flatten_tuple;
SELECT floor(greatCircleDistance(33.3, 55.3, 33.3, 55.3)) AS distance;
SELECT floor(log2(1 + number) / log2(1.5)) AS k, count() AS c, quantileTiming(number % 10000) AS q FROM (SELECT * FROM system.numbers LIMIT 1000000) GROUP BY k ORDER BY k;
SELECT floor(sum(somenum), 1) FROM compression_codec_multiple;
SELECT floor(sum(somenum), 1) FROM compression_codec_multiple_log;
SELECT floor(sum(somenum), 1) FROM compression_codec_multiple_replicated1;
SELECT floor(sum(somenum), 1) FROM compression_codec_multiple_replicated2;
SELECT floor(sum(somenum), 1) FROM compression_codec_multiple_tiny_log;
SELECT foo FROM (SELECT anyLast(number) AS foo FROM numbers(1) GROUP BY number);
SELECT foo.a FROM (SELECT 1 AS a, 2 AS b) AS foo FULL JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.a = bar.b) AND (foo.b = bar.b) ORDER BY foo.a;
SELECT foo.a FROM (SELECT 1 AS a, 2 AS b) AS foo FULL JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.b = bar.a) AND (foo.b = bar.b) ORDER BY foo.a;
SELECT foo.a FROM (SELECT 1 AS a, 2 AS b) AS foo RIGHT JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.a = bar.b) AND (foo.b = bar.b) ORDER BY foo.a;
SELECT foo.a FROM (SELECT 1 AS a, 2 AS b) AS foo RIGHT JOIN (SELECT 1 AS a, 2 AS b) AS bar ON (foo.b = bar.a) AND (foo.b = bar.b) ORDER BY foo.a;
select format('', 'first');
select format('Hello {0} World {0}', materialize('first'), 'second') from system.numbers limit 2;
select format('Hello {0} World {1}', materialize('first'), materialize('second')) from system.numbers limit 2;
select format('Hello {1} World {0}', materialize('first'), materialize('second')) from system.numbers limit 1;
select format('Hello {1} World {1}', materialize('first'), materialize('second')) from system.numbers limit 3;
select format('Hellooooooooooooooooooooooooooooooooooo {0} Wooooooooooooooooooooooorld {0} {2}{2}', materialize('fiiiiiiiiiiirst'), 'second', materialize('third')) from system.numbers limit 2;
SELECT format('The answer to all questions is {0}.', 'foo');
SELECT format('The answer to all questions is {0}.', 42);
SELECT format('The answer to all questions is {0}.', materialize('foo'));
SELECT format('The answer to all questions is {0}.', materialize(42));
SELECT format('The answer to all questions is {0}.', materialize(NULL :: Nullable(UInt64)));
SELECT format('The answer to all questions is {0}.', NULL);
SELECT format('The {0} to all questions is {1} and {2}', 'Three ', 'arguments', ' test');
SELECT format('The {0} to all questions is {1} and {2}', 42, 144, 255);
SELECT format('The {0} to all questions is {1} and {2}', materialize(3 :: Int64), ' arguments test', ' with int type');
SELECT format('The {0} to all questions is {1} and {2}', materialize(42 :: Int32), materialize(144 :: UInt64), materialize(255 :: UInt32));
SELECT format('The {0} to all questions is {1}', '42', materialize(NULL :: Nullable(UInt64)));
SELECT format('The {0} to all questions is {1}', '42', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
SELECT format('The {0} to all questions is {1}', 'Two arguments ', 'test');
SELECT format('The {0} to all questions is {1}', 42, 144);
SELECT format('The {0} to all questions is {1}', 42, materialize(NULL :: Nullable(UInt64)));
SELECT format('The {0} to all questions is {1}', 42, materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
SELECT format('The {0} to all questions is {1}', materialize('Non-const'), materialize(' strings'));
SELECT format('The {0} to all questions is {1}', materialize(42 :: Int32), materialize(144 :: UInt64));
SELECT format('The {0} to all questions is {1}', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
SELECT format('The {0} to all questions is {1}', NULL, materialize(NULL :: Nullable(UInt64)));
SELECT format('The {0} to all questions is {1}', NULL, NULL);
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('122.233.64.201' :: IPv4));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :: IPv6));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14 05:50:12' :: DateTime('Europe/Amsterdam')));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14 05:50:12.123' :: DateTime64(3, 'Europe/Amsterdam')));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14' :: Date));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('2123-11-14' :: Date32));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: FixedString(3)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: LowCardinality(FixedString(3))));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: LowCardinality(Nullable(FixedString(3)))));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: Nullable(FixedString(3))));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :: UUID));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: LowCardinality(Nullable(String))));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: LowCardinality(String)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: Nullable(String)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: String));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('hallo' :: Enum('hallo' = 1)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize('{"foo": "bar"}' :: JSON));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize((42, 'foo') :: Tuple(Int32, String)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize((42, 43) :: Point));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: Int8));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: LowCardinality(Nullable(UInt32))));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: LowCardinality(UInt32)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(42.42 :: Float32));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(43 :: Int16));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(43.43 :: Float64));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(44 :: Int32));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(44.44 :: Decimal(2)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(45 :: Int64));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(46 :: Int128));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(47 :: Int256));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(48 :: UInt8));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(49 :: UInt16));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(50 :: UInt32));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(51 :: UInt64));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(52 :: UInt128));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(53 :: UInt256));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(['foo', 'bar'] :: Array(String)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize([(0,0),(10,0),(10,10),(0,10)] :: Ring));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize([[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]] :: Polygon));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]] :: MultiPolygon));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(false :: Bool));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(map(42, 'foo') :: Map(Int32, String)));
SELECT format('The {0} to all questions is {1}.', 'answer', materialize(true :: Bool));
SELECT format('The {0} to all questions is {1}.', attrs.k, attrs.v) FROM format_nested;
select format('{', '');
select format('{2 }', '');
select format('{{}}', materialize('first'), 'second');
SELECT format('{} {}', a, b) AS all FROM order_by_all ORDER BY all;
select format('{}', 'first');
select format('{}{}', 'a', 'b') == 'ab' from system.numbers limit 5;
select format('{}{}', 'a', 'b') == 'ab';
select format('{}{}', 'a', materialize('b')) == 'ab' from system.numbers limit 5;
select format('{}{}', 'a', materialize('b')) == 'ab';
select format('{}{}', 'a', materialize(toFixedString('b', 1))) == 'ab' from system.numbers limit 5;
select format('{}{}', 'a', materialize(toFixedString('b', 1))) == 'ab';
select format('{}{}', 'a', toFixedString('b', 1)) == 'ab' from system.numbers limit 5;
select format('{}{}', 'a', toFixedString('b', 1)) == 'ab';
select format('{}{}', 'first', toFixedString('second', 6));
select format('{}{}', materialize('a'), 'b') == 'ab' from system.numbers limit 5;
select format('{}{}', materialize('a'), 'b') == 'ab';
select format('{}{}', materialize('a'), materialize('b')) == 'ab' from system.numbers limit 5;
select format('{}{}', materialize('a'), materialize('b')) == 'ab';
select format('{}{}', materialize('a'), materialize(toFixedString('b', 1))) == 'ab' from system.numbers limit 5;
select format('{}{}', materialize('a'), materialize(toFixedString('b', 1))) == 'ab';
select format('{}{}', materialize('a'), toFixedString('b', 1)) == 'ab' from system.numbers limit 5;
select format('{}{}', materialize('a'), toFixedString('b', 1)) == 'ab';
select format('{}{}', materialize(toFixedString('a', 1)), 'b') == 'ab' from system.numbers limit 5;
select format('{}{}', materialize(toFixedString('a', 1)), 'b') == 'ab';
select format('{}{}', materialize(toFixedString('a', 1)), materialize('b')) == 'ab' from system.numbers limit 5;
select format('{}{}', materialize(toFixedString('a', 1)), materialize('b')) == 'ab';
select format('{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1))) == 'ab' from system.numbers limit 5;
select format('{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1))) == 'ab';
select format('{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1)) == 'ab' from system.numbers limit 5;
select format('{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1)) == 'ab';
select format('{}{}', toFixedString('a', 1), 'b') == 'ab' from system.numbers limit 5;
select format('{}{}', toFixedString('a', 1), 'b') == 'ab';
select format('{}{}', toFixedString('a', 1), materialize('b')) == 'ab' from system.numbers limit 5;
select format('{}{}', toFixedString('a', 1), materialize('b')) == 'ab';
select format('{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1))) == 'ab' from system.numbers limit 5;
select format('{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1))) == 'ab';
select format('{}{}', toFixedString('a', 1), toFixedString('b', 1)) == 'ab' from system.numbers limit 5;
select format('{}{}', toFixedString('a', 1), toFixedString('b', 1)) == 'ab';
select format('{}{}{}', 'a', 'b', 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', 'b', 'c') == 'abc';
select format('{}{}{}', 'a', 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', 'b', materialize('c')) == 'abc';
select format('{}{}{}', 'a', 'b', materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', 'b', materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', 'a', 'b', toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', 'b', toFixedString('c', 1)) == 'abc';
select format('{}{}{}', 'a', materialize('b'), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', materialize('b'), 'c') == 'abc';
select format('{}{}{}', 'a', materialize('b'), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', materialize('b'), materialize('c')) == 'abc';
select format('{}{}{}', 'a', materialize('b'), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', materialize('b'), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', 'a', materialize('b'), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', materialize('b'), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', 'a', materialize(toFixedString('b', 1)), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', materialize(toFixedString('b', 1)), 'c') == 'abc';
select format('{}{}{}', 'a', materialize(toFixedString('b', 1)), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', materialize(toFixedString('b', 1)), materialize('c')) == 'abc';
select format('{}{}{}', 'a', materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', 'a', materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', 'a', toFixedString('b', 1), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', toFixedString('b', 1), 'c') == 'abc';
select format('{}{}{}', 'a', toFixedString('b', 1), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', toFixedString('b', 1), materialize('c')) == 'abc';
select format('{}{}{}', 'a', toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', 'a', toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', 'a', toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', materialize('a'), 'b', 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), 'b', 'c') == 'abc';
select format('{}{}{}', materialize('a'), 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), 'b', materialize('c')) == 'abc';
select format('{}{}{}', materialize('a'), 'b', materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), 'b', materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', materialize('a'), 'b', toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), 'b', toFixedString('c', 1)) == 'abc';
select format('{}{}{}', materialize('a'), materialize('b'), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), materialize('b'), 'c') == 'abc';
select format('{}{}{}', materialize('a'), materialize('b'), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), materialize('b'), materialize('c')) == 'abc';
select format('{}{}{}', materialize('a'), materialize('b'), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), materialize('b'), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', materialize('a'), materialize('b'), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), materialize('b'), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', materialize('a'), materialize(toFixedString('b', 1)), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), materialize(toFixedString('b', 1)), 'c') == 'abc';
select format('{}{}{}', materialize('a'), materialize(toFixedString('b', 1)), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), materialize(toFixedString('b', 1)), materialize('c')) == 'abc';
select format('{}{}{}', materialize('a'), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', materialize('a'), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', materialize('a'), toFixedString('b', 1), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), toFixedString('b', 1), 'c') == 'abc';
select format('{}{}{}', materialize('a'), toFixedString('b', 1), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), toFixedString('b', 1), materialize('c')) == 'abc';
select format('{}{}{}', materialize('a'), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', materialize('a'), toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize('a'), toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), 'b', 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), 'b', 'c') == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), 'b', materialize('c')) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), 'b', materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), 'b', materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), 'b', toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), 'b', toFixedString('c', 1)) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize('b'), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize('b'), 'c') == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize('b'), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize('b'), materialize('c')) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize('b'), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize('b'), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize('b'), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize('b'), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), 'c') == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), materialize('c')) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1), 'c') == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1), materialize('c')) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', materialize(toFixedString('a', 1)), toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', toFixedString('a', 1), 'b', 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), 'b', 'c') == 'abc';
select format('{}{}{}', toFixedString('a', 1), 'b', materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), 'b', materialize('c')) == 'abc';
select format('{}{}{}', toFixedString('a', 1), 'b', materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), 'b', materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', toFixedString('a', 1), 'b', toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), 'b', toFixedString('c', 1)) == 'abc';
select format('{}{}{}', toFixedString('a', 1), materialize('b'), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), materialize('b'), 'c') == 'abc';
select format('{}{}{}', toFixedString('a', 1), materialize('b'), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), materialize('b'), materialize('c')) == 'abc';
select format('{}{}{}', toFixedString('a', 1), materialize('b'), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), materialize('b'), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', toFixedString('a', 1), materialize('b'), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), materialize('b'), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1)), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1)), 'c') == 'abc';
select format('{}{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1)), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1)), materialize('c')) == 'abc';
select format('{}{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1)), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), materialize(toFixedString('b', 1)), toFixedString('c', 1)) == 'abc';
select format('{}{}{}', toFixedString('a', 1), toFixedString('b', 1), 'c') == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), toFixedString('b', 1), 'c') == 'abc';
select format('{}{}{}', toFixedString('a', 1), toFixedString('b', 1), materialize('c')) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), toFixedString('b', 1), materialize('c')) == 'abc';
select format('{}{}{}', toFixedString('a', 1), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), toFixedString('b', 1), materialize(toFixedString('c', 1))) == 'abc';
select format('{}{}{}', toFixedString('a', 1), toFixedString('b', 1), toFixedString('c', 1)) == 'abc' from system.numbers limit 5;
select format('{}{}{}', toFixedString('a', 1), toFixedString('b', 1), toFixedString('c', 1)) == 'abc';
select format('{}}', '');
SELECT format, format_value, c1, c2, c3, c4 FROM format('CSV' AS format, '1,2,"[1,2,3]","[[\'abc\'], [], [\'d\', \'e\']]"' AS format_value);
SELECT format, length(entries.query_id) FROM system.asynchronous_inserts WHERE database = currentDatabase() AND table = 't_async_inserts_flush' ORDER BY format;
SELECT formatDateTime((SELECT date FROM Dates), '%H%i%S', number % 2 ? 'America/Los_Angeles' : 'Europe/Amsterdam') FROM numbers(5);
SELECT formatDateTime((SELECT materialize(date) FROM Dates), '%H%i%S', number % 2 ? '' : 'Europe/Amsterdam') FROM numbers(5);
SELECT formatDateTime((SELECT materialize(date) FROM Dates), '%H%i%S', number % 2 ? 'America/Los_Angeles' : 'Europe/Amsterdam') FROM numbers(5);
SELECT formatDateTime();
SELECT formatDateTime(FROM_UNIXTIME(123), '%Y-%m-%d %R:%S', 'UTC');
SELECT formatDateTime(FROM_UNIXTIME(123456789), '%Y-%m-%d %R:%S', 'UTC');
SELECT formatDateTime(FROM_UNIXTIME(6457477432), '%Y-%m-%d %R:%S', 'UTC');
SELECT formatDateTime(toDate('2010-01-01'), '%G');
SELECT formatDateTime(toDate('2010-01-03'), '%G');
SELECT formatDateTime(toDate('2010-01-04'), '%G');
SELECT formatDateTime(toDate('2010-01-04'), '%Q');
SELECT formatDateTime(toDate('2010-04-30'), '%Q');
SELECT formatDateTime(toDate('2010-07-31'), '%Q');
SELECT formatDateTime(toDate('2010-10-07'), '%Q');
SELECT formatDateTime(toDate('2018-01-01'), '%F %T');
SELECT formatDateTime(toDate('2018-12-31'), '%G');
SELECT formatDateTime(toDate('2019-01-01'), '%G');
select formatDateTime(toDate('2022-12-08 18:11:29', 'UTC'), '%F %T.%f');
SELECT formatDateTime(toDate32('1927-01-01'), '%F %T');
select formatDateTime(toDate32('2010-01-04'), '%f') SETTINGS formatdatetime_f_prints_single_zero = 0;
select formatDateTime(toDate32('2010-01-04'), '%f') SETTINGS formatdatetime_f_prints_single_zero = 1;
select formatDateTime(toDate32('2022-12-08 18:11:29', 'UTC'), '%F %T.%f');
SELECT formatDateTime(toDateTime('1970-01-01 00:00:00', 'Asia/Kolkata'), '%z');
SELECT formatDateTime(toDateTime('2000-12-31 00:33:44'), '%j'), formatDateTime(toDate32('2000-12-31'), '%j');
SELECT formatDateTime(toDateTime('2000-12-31 00:33:44'), '%k'), formatDateTime(toDate32('2000-12-31'), '%k');
select formatDateTime(toDateTime('2010-01-04 12:34:56'), '%f') SETTINGS formatdatetime_f_prints_single_zero = 0;
select formatDateTime(toDateTime('2010-01-04 12:34:56'), '%f') SETTINGS formatdatetime_f_prints_single_zero = 1;
SELECT formatDateTime(toDateTime('2018-01-01 00:33:44'), '%j'), formatDateTime(toDate32('2018-01-01'), '%j');
SELECT formatDateTime(toDateTime('2018-01-01 22:33:44'), '%u'), formatDateTime(toDateTime('2018-01-07 22:33:44'), '%u'), formatDateTime(toDate32('2018-01-01'), '%u'), formatDateTime(toDate32('2018-01-07'), '%u');
SELECT formatDateTime(toDateTime('2018-01-01 22:33:44'), '%w'), formatDateTime(toDateTime('2018-01-07 22:33:44'), '%w'), formatDateTime(toDate32('2018-01-01'), '%w'), formatDateTime(toDate32('2018-01-07'), '%w');
SELECT formatDateTime(toDateTime('2018-01-02 00:33:44'), '%I');
SELECT formatDateTime(toDateTime('2018-01-02 00:33:44'), '%p'), formatDateTime(toDateTime('2018-01-02'), '%p');
SELECT formatDateTime(toDateTime('2018-01-02 02:33:44'), '%H');
SELECT formatDateTime(toDateTime('2018-01-02 11:33:44'), '%I');
SELECT formatDateTime(toDateTime('2018-01-02 11:33:44'), '%p');
SELECT formatDateTime(toDateTime('2018-01-02 12:33:44'), '%p');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%%'), formatDateTime(toDate32('2018-01-02'), '%%');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%b'), formatDateTime(toDate32('2018-01-02'), '%b');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%c'), formatDateTime(toDate32('2018-01-02'), '%c');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%C'), formatDateTime(toDate32('2018-01-02'), '%C');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%d'), formatDateTime(toDate32('2018-01-02'), '%d');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%D'), formatDateTime(toDate32('2018-01-02'), '%D');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%e'), formatDateTime(toDate32('2018-01-02'), '%e');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%f'), formatDateTime(toDate32('2018-01-02'), '%f');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%F'), formatDateTime(toDate32('2018-01-02'), '%F');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%h'), formatDateTime(toDate32('2018-01-02'), '%h');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%H'), formatDateTime(toDate32('2018-01-02'), '%H');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%i'), formatDateTime(toDate32('2018-01-02'), '%i');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%I'), formatDateTime(toDate32('2018-01-02'), '%I');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%M'), formatDateTime(toDate32('2018-01-02'), '%M') SETTINGS formatdatetime_parsedatetime_m_is_month_name = 0;
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%M'), formatDateTime(toDate32('2018-01-02'), '%M') SETTINGS formatdatetime_parsedatetime_m_is_month_name = 1;
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%m'), formatDateTime(toDate32('2018-01-02'), '%m');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%n'), formatDateTime(toDate32('2018-01-02'), '%n');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%r'), formatDateTime(toDate32('2018-01-02'), '%r');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%R'), formatDateTime(toDate32('2018-01-02'), '%R');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%S'), formatDateTime(toDate32('2018-01-02'), '%S');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%t'), formatDateTime(toDate32('2018-01-02'), '%t');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%T'), formatDateTime(toDate32('2018-01-02'), '%T');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%W'), formatDateTime(toDate32('2018-01-02'), '%W');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%y'), formatDateTime(toDate32('2018-01-02'), '%y');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%Y'), formatDateTime(toDate32('2018-01-02'), '%Y');
SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), 'no formatting pattern'), formatDateTime(toDate32('2018-01-02'), 'no formatting pattern');
SELECT formatDateTime(toDateTime('2020-01-01 01:00:00', 'Europe/Moscow'), '%z');
SELECT formatDateTime(toDateTime('2020-01-01 01:00:00', 'US/Samoa'), '%z');
SELECT formatDateTime(toDateTime('2020-01-01 01:00:00', 'UTC'), '%z');
SELECT formatDateTime(toDateTime('2020-10-15 00:00:00', 'Asia/Istanbul'), '%Y-%m-%d %R:%S') as formatted_simple FROM test_datetime;
SELECT formatDateTime(toDateTime('2020-10-15 00:00:00', 'Asia/Istanbul'), '%Y-%m-%dT%R:%SZ', 'UTC') as formatted_iso FROM test_datetime;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%c') settings formatdatetime_format_without_leading_zeros = 1;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%h') settings formatdatetime_format_without_leading_zeros = 0;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%h') settings formatdatetime_format_without_leading_zeros = 1;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%k') settings formatdatetime_format_without_leading_zeros = 0;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%k') settings formatdatetime_format_without_leading_zeros = 1;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%l') settings formatdatetime_format_without_leading_zeros = 0;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%l') settings formatdatetime_format_without_leading_zeros = 1;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%m') settings formatdatetime_format_without_leading_zeros = 0;
select formatDateTime(toDateTime('2022-01-08 02:11:29', 'UTC'), '%m') settings formatdatetime_format_without_leading_zeros = 1;
select formatDateTime(toDateTime('2022-12-08 18:11:29', 'UTC'), '%F %T.%f');
select formatDateTime(toDateTime64('1900-01-01 00:00:00.000', 3, 'UTC'), '%F %T.%f');
select formatDateTime(toDateTime64('1962-12-08 18:11:29.123', 3, 'UTC'), '%F %T.%f');
SELECT formatDateTime(toDateTime64('1969-12-12 12:12:12', 0, 'Asia/Istanbul'), '%C');
SELECT formatDateTime(toDateTime64('1969-12-12 12:12:12', 6, 'Asia/Istanbul'), '%C');
select formatDateTime(toDateTime64('1969-12-31 23:59:59.999', 3, 'UTC'), '%F %T.%f');
select formatDateTime(toDateTime64('1970-01-01 00:00:00.000', 3, 'UTC'), '%F %T.%f');
select formatDateTime(toDateTime64('1970-01-01 00:00:00.001', 3, 'UTC'), '%F %T.%f');
SELECT formatDateTime(toDateTime64('1989-12-12 12:12:12', 0, 'Asia/Istanbul'), '%C');
SELECT formatDateTime(toDateTime64('1989-12-12 12:12:12', 6, 'Asia/Istanbul'), '%C');
select formatDateTime(toDateTime64('2010-01-04 12:34:56', 0), '%f') SETTINGS formatdatetime_f_prints_single_zero = 0;
select formatDateTime(toDateTime64('2010-01-04 12:34:56', 0), '%f') SETTINGS formatdatetime_f_prints_single_zero = 1;
select formatDateTime(toDateTime64('2010-01-04 12:34:56.123', 3), '%f') SETTINGS formatdatetime_f_prints_single_zero = 0;
select formatDateTime(toDateTime64('2010-01-04 12:34:56.123', 3), '%f') SETTINGS formatdatetime_f_prints_single_zero = 1;
select formatDateTime(toDateTime64('2010-01-04 12:34:56.123456', 6), '%f') SETTINGS formatdatetime_f_prints_single_zero = 0;
select formatDateTime(toDateTime64('2010-01-04 12:34:56.123456789', 9), '%f') SETTINGS formatdatetime_f_prints_single_zero = 0;
select formatDateTime(toDateTime64('2010-01-04 12:34:56.123456789', 9), '%f') SETTINGS formatdatetime_f_prints_single_zero = 1;
SELECT formatDateTime(toDateTime64('2019-09-16 19:20:12', 0, 'Asia/Istanbul'), '%C');
select formatDateTime(toDateTime64('2022-12-08 18:11:29.1234', 0, 'UTC'), '%F %T.%f');
select formatDateTime(toDateTime64('2022-12-08 18:11:29.1234', 1, 'UTC'), '%F %T.%f');
select formatDateTime(toDateTime64('2022-12-08 18:11:29.1234', 9, 'UTC'), '%F %T.%f');
SELECT formatDateTime(toDateTime64('2105-12-12 12:12:12', 0, 'Asia/Istanbul'), '%C');
SELECT formatDateTime(toDateTime64('2105-12-12 12:12:12', 6, 'Asia/Istanbul'), '%C');
SELECT formatDateTime(toDateTime64('2205-01-12 12:12:12', 6, 'Asia/Istanbul'), '%C');
SELECT formatDateTime(toDateTime64('2205-12-12 12:12:12', 0, 'Asia/Istanbul'), '%C');
SELECT formatQuery('');
SELECT formatQuery('CREATE TABLE default.no_prop_table(`some_column` UInt64) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 8192');
SELECT formatQuery('INSERT INTO tab VALUES (\'\') (\'test\')');
SELECT formatQuery('SELECT 1');
SELECT formatQuery('select 1;') == formatQuery('SeLeCt 1');
SELECT formatQuery('SELECT 1;');
SELECT formatQuery('SeLeCt 1;');
SELECT formatQuery('SELECT any (number) RESPECT NULLS from numbers(1)');
SELECT formatQuery('SELECT first_value(number) IGNORE NULLS from numbers(1)');
SELECT formatQuery('SELECT LAST_VALUE(number) RESPECT NULLS from numbers(1)');
SELECT formatQuerySingleLine('');
SELECT formatQuerySingleLine('CREATE TABLE default.no_prop_table(`some_column` UInt64) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 8192');
SELECT formatQuerySingleLine('INSERT INTO tab VALUES (\'\') (\'test\')');
SELECT formatQuerySingleLine('SELECT 1');
SELECT formatQuerySingleLine('select 1;') == formatQuerySingleLine('SeLeCt 1');
SELECT formatQuerySingleLine('SELECT 1;');
SELECT formatQuerySingleLine('SeLeCt 1;');
SELECT formatQuerySingleLine('SELECT v FROM t1 SETTINGS additional_table_filters = {\'default.t1\': \'s\'}');
SELECT formatQuerySingleLine('set additional_table_filters = {\'kjsnckjn\': \'ksanmn\', \'dkm\': \'dd\'}');
SELECT formatReadableTimeDelta(-(1 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400));
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 30.5 * 86400 + 365 * 86400));
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400));
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400), 'days');
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400), 'hours');
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400), 'minutes');
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400), 'months');
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400), 'second');
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400), 'seconds');
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400 + 365 * 86400), 'years');
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 30.5 * 86400));
SELECT formatReadableTimeDelta(-(1 + 60 + 3600 + 86400 + 365 * 86400));
SELECT formatReadableTimeDelta(-(1 + 60 + 86400 + 30.5 * 86400 + 365 * 86400));
SELECT formatReadableTimeDelta(0x1000000000000000);
SELECT formatReadableTimeDelta(1e100);
SELECT formatReadableTimeDelta(1e100, 'days');
SELECT formatReadableTimeDelta(1e100, 'hours');
SELECT formatReadableTimeDelta(1e100, 'minutes');
SELECT formatReadableTimeDelta(1e100, 'months');
SELECT formatReadableTimeDelta(1e100, 'seconds');
SELECT formatReadableTimeDelta(arrayJoin([inf, -inf, nan]));
select formatRow('CSVWithNamesAndTypes', number, toDate(number)) from numbers(5);
select formatRow('JSONCompactEachRowWithNamesAndTypes', number, toDate(number)) from numbers(5);
SELECT formatRow('RawBLOB', [[[33]], []]);
select formatRow('TSVWithNamesAndTypes', number, toDate(number)) from numbers(5);
select formatRow('XML', number, toDate(number)) from numbers(5);
SELECT fourth_column FROM {CLICKHOUSE_DATABASE:Identifier}.dict1 WHERE key_column = 14;
SELECT FROM_DAYS(1);
SELECT FROM_UNIXTIME(1232456, '%Y-%m-%d', 'UTC');
SELECT FROM_UNIXTIME(1234356, '%Y-%m-%d %R:%S', 'UTC');
SELECT FROM_UNIXTIME(5345345, '%C', 'UTC');
SELECT FROM_UNIXTIME(645123, '%H', 'UTC');
SELECT FROM_UNIXTIME(toDateTime('2000-12-31 00:33:44'), '%j'), FROM_UNIXTIME(toDate32('2000-12-31'), '%j');
SELECT FROM_UNIXTIME(toDateTime('2000-12-31 00:33:44'), '%k'), FROM_UNIXTIME(toDate32('2000-12-31'), '%k');
SELECT FROM_UNIXTIME(toDateTime('2018-01-01 00:33:44'), '%j'), FROM_UNIXTIME(toDate32('2018-01-01'), '%j');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 00:33:44'), '%I');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 00:33:44'), '%p'), FROM_UNIXTIME(toDate32('2018-01-02'), '%p');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 02:33:44'), '%H');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 11:33:44'), '%I');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 11:33:44'), '%p');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 12:33:44'), '%p');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%a'), FROM_UNIXTIME(toDate32('2018-01-02'), '%a');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%b'), FROM_UNIXTIME(toDate32('2018-01-02'), '%b');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%c'), FROM_UNIXTIME(toDate32('2018-01-02'), '%c');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%C'), FROM_UNIXTIME(toDate32('2018-01-02'), '%C');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%d'), FROM_UNIXTIME(toDate32('2018-01-02'), '%d');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%D'), FROM_UNIXTIME(toDate32('2018-01-02'), '%D');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%e'), FROM_UNIXTIME(toDate32('2018-01-02'), '%e');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%F'), FROM_UNIXTIME(toDate32('2018-01-02'), '%F');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%h'), FROM_UNIXTIME(toDate32('2018-01-02'), '%h');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%H'), FROM_UNIXTIME(toDate32('2018-01-02'), '%H');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%i'), FROM_UNIXTIME(toDate32('2018-01-02'), '%i');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%I'), FROM_UNIXTIME(toDate32('2018-01-02'), '%I');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%m'), FROM_UNIXTIME(toDate32('2018-01-02'), '%m');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%M'), FROM_UNIXTIME(toDate32('2018-01-02'), '%M');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%n'), FROM_UNIXTIME(toDate32('2018-01-02'), '%n');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%r'), FROM_UNIXTIME(toDate32('2018-01-02'), '%r');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%R'), FROM_UNIXTIME(toDate32('2018-01-02'), '%R');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%S'), FROM_UNIXTIME(toDate32('2018-01-02'), '%S');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%t'), FROM_UNIXTIME(toDate32('2018-01-02'), '%t');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%T'), FROM_UNIXTIME(toDate32('2018-01-02'), '%T');
SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%W'), FROM_UNIXTIME(toDate32('2018-01-02'), '%W');
SELECT fromDaysSinceYearZero();
SELECT fromDaysSinceYearZero(NULL), fromDaysSinceYearZero32(NULL);
SELECT fromDaysSinceYearZero32(2147483648);
SELECT fromDaysSinceYearZero32(3);
SELECT fromModifiedJulianDay(-1);
SELECT fromModifiedJulianDay(-678942);
SELECT fromModifiedJulianDay(0);
SELECT fromModifiedJulianDay(59154);
SELECT fromModifiedJulianDay(9223372036854775807 :: Int64);
SELECT fromModifiedJulianDay(CAST(NULL, 'Nullable(Int64)'));
SELECT fromModifiedJulianDay(d) FROM fromModifiedJulianDay_test;
SELECT fromModifiedJulianDay(NULL);
SELECT fromModifiedJulianDayOrNull(-678942);
SELECT fromModifiedJulianDayOrNull(2973484);
SELECT fromModifiedJulianDayOrNull(59154);
SELECT fromModifiedJulianDayOrNull(NULL);
select fromUnixTimestamp64Milli(toInt64(-1), 'Europe/Amsterdam');
select fromUnixTimestamp64Milli(toInt64(-1), 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'a', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'aa', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'aaa', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'C', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'CC', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'CCC', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'D', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'd', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'DD', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'dd', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'DDD', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'ddd', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'e', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'E', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'ee', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'EE', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'EEE', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'EEEE', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'EEEEE', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'GG', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'GGG', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'GGGG', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'GGGGG', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'h', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'H', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'hh', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'HH', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'hhh', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'HHH', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'K', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'k', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'KK', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'kk', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'KKK', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'kkk', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'M', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'm', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'MM', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'mm', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'MMM', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'mmm', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'MMMM', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 's', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'S', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'ss', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'SS', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'sss', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'w', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'x', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'Y', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'y', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'YY', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'yy', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'YYY', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'yyy', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'YYYY', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'yyyy', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'YYYYY', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'yyyyy', 'UTC');
SELECT fromUnixTimestampInJodaSyntax(1669804872, 'zzzz', 'UTC');
SELECT fs, replaceAll(fs, '\0', '*') FROM replaceall ORDER BY fs ASC;
SELECT func(1)(2)(3);
SELECT fuzzBits(toFixedString('', 200), 0.99) from numbers(1) FORMAT Null;
SELECT fuzzBits(toFixedString('', 200), 0.99) from numbers(128) FORMAT Null;
SELECT fuzzBits(toFixedString('', 200), 0.99) from numbers(60000) FORMAT Null;
SELECT fuzzBits(toString('string'), 1);
select g % 2 as gg, sum(s) from table_01356_view_threads group by gg order by gg;
SELECT g + 21, g - 21, g - 84, g * 21, g * -21, g / 21, g / 84, intDiv(g, 21), intDivOrZero(g, 84) FROM decimal WHERE g > 0;
SELECT g = 10000, (g - g + 10000) == 10000 FROM decimal WHERE a = 42;
SELECT g = 30000 FROM decimal WHERE a = 42;
SELECT g > toFloat32(0) FROM decimal ORDER BY g;
select g, s from (select g, sum(number) as s from numbers(4) group by bitAnd(number, 1) as g with totals order by g) array join [1, 2] as a format JSON;
select g, s from (select g, sum(number) as s from numbers(4) group by bitAnd(number, 1) as g with totals order by g) array join [1, 2] as a format Pretty;
select g, s from (select g, sum(number) as s from numbers(4) group by bitAnd(number, 1) as g with totals order by g) array join [1, 2] as a format TSV;
SELECT gccMurmurHash('\x01');
SELECT gccMurmurHash('foo');
SELECT gccMurmurHash(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2))));
SELECT gccMurmurHash(1);
SELECT gccMurmurHash(1, 2, 3);
SELECT gccMurmurHash(1, 3, 2);
select gcd(-2147483648, 1);
select gcd(-256, 64);
SELECT gcd(-9223372036854775806, -9223372036854775806);
select gcd(1, 1);
select gcd(1, toLowCardinality(val)) from (select arrayJoin([1]) as val);
select gcd(11, 121);
select gcd(15, 49);
select gcd(2147483647, 2147483646);
select gcd(255, 254);
select gcd(255, 510);
select gcd(255, 512);
select gcd(255, 515);
select gcd(4, 2);
select gcd(4611686011984936962, 2147483647);
select generateRandomStructure(5, 4);
select generateRandomStructure(5, 42);
select generateRandomStructure(5, 42, 42);
SELECT generateUUIDv4() = generateUUIDv4(1);
SELECT generateUUIDv4(1) = generateUUIDv4(1);
SELECT generateUUIDv4(1) = generateUUIDv4(2);
SELECT geoDistance(0., 0., -inf, 1.);
SELECT geoDistance(0., 0., 0., 1.);
SELECT geoDistance(0., 0., 0., 90.);
SELECT geoDistance(0., 0., 90., 0.);
SELECT geoDistance(0., 89., 0., 90.);
select geohashEncode(-181.0, -91.0);
select geohashEncode(-5.60302734375, 42.593994140625);
select geohashEncode(-5.60302734375, 42.593994140625, 0);
select geohashEncode(-5.60302734375, materialize(42.593994140625), 0);
select geohashEncode(materialize(-5.60302734375), 42.593994140625, 0);
select geohashEncode(materialize(-5.60302734375), materialize(42.593994140625), 0);
select geohashEncode(materialize(-5.60302734375), materialize(42.593994140625), materialize(0));
SELECT geohashesInBox();
SELECT geohashesInBox(1., 2., 3., 4., 1);
SELECT geohashesInBox(1., 2., 3., 4., materialize(3));
SELECT geohashesInBox(1., 2., 3., materialize(4.), 2);
SELECT geohashesInBox(1., 2., materialize(3.), 4., 1);
SELECT geohashesInBox(1., materialize(2.), 3., 4., 3);
SELECT geohashesInBox(100.0000991821289, 100.0000991821289, 1000.0001220703125, 1000.0001220703125, 0);
SELECT geohashesInBox(materialize(1.), 2., 3., 4., 2);
select geoToH3(37.63098076, 55.77922738, 15);
select geoToH3(37.63098076, 55.77922738, 24);
select geoToH3(lon, lat, resolution) AS k from table1 order by lat, lon, k;
select geoToH3(lon, lat, resolution) AS k, count(*) from table1 group by k order by k;
SELECT geoToH3(longitude, latitude, toUInt8(8)) AS h3Index FROM data_table ORDER BY 1;
SELECT geoToH3(longitude, latitude, toUInt8(longitude - longitude + 8)) AS h3Index FROM data_table ORDER BY 1;
SELECT getMacro('test');
select getServerPort('tcp_port');
select getServerPort('unknown');
SELECT getSetting('custom_a') as v, toTypeName(v);
SELECT getSetting('custom_b') as v, toTypeName(v);
SELECT getSetting('custom_c') as v, toTypeName(v);
SELECT getSetting('custom_compound.identifier.v1') as v, toTypeName(v);
SELECT getSetting('custom_d') as v, toTypeName(v);
SELECT getSetting('custom_e') as v, toTypeName(v) SETTINGS custom_e = -0.333;
SELECT getSetting('custom_e') as v, toTypeName(v);
SELECT getSetting('custom_f') as v, toTypeName(v) SETTINGS custom_f = 'word';
SELECT getSetting('custom_f') as v, toTypeName(v);
SELECT getSetting('custom_null') as v, toTypeName(v) SETTINGS custom_null = NULL;
SELECT getSetting('custom_null') as v, toTypeName(v);
SELECT getSetting('SQL_AUTO_IS_NULL');
SELECT getSizeOfEnumType(CAST('b' AS Enum16('a' = 1, 'b' = 2, 'x' = 10)));
SELECT getSizeOfEnumType(CAST(1 AS Enum8('a' = 1, 'b' = 2)));
SELECT getSubcolumn([1, 2, 3], materialize('size0'));
SELECT getSubcolumn(n, 's') FROM t_get_subcolumn;
SELECT getSubcolumn(n, 'size0') FROM t_get_subcolumn;
SELECT getSubcolumn(n, 'u') FROM t_get_subcolumn;
select getTypeSerializationStreams('Array(Int8)');
select getTypeSerializationStreams('LowCardinality(String)');
select getTypeSerializationStreams('Map(String, Int64)');
select getTypeSerializationStreams('Nullable(String)');
select getTypeSerializationStreams('Tuple(String, Int64, Float64)');
select getTypeSerializationStreams([1,2,3]);
select getTypeSerializationStreams(map('a', 1, 'b', 2));
select getTypeSerializationStreams(tuple('a', 1, 'b', 2));
SELECT globalIn([''], [NULL]);
SELECT globalNotIn(['"wh'], [NULL]);
SELECT granularity FROM system.data_skipping_indices WHERE database = currentDatabase() AND table = 'tab' AND name = 'idx';
SELECT greatCircleAngle(0, -9223372036854775808, number, number) FROM numbers(3) FORMAT Null;
SELECT greatCircleAngle(1048575, 257, -9223372036854775808, 1048576) - NULL, bar(7, -inf, 1024);
SELECT greatCircleDistance(0., 0., 0., 1.);
SELECT greatCircleDistance(0., 0., 0., 90.);
SELECT greatCircleDistance(0., 0., 90., 0.);
SELECT greatCircleDistance(0., 89., 0, 90.);
SELECT GREATEST('B','A','C');
SELECT greatest('hello', 'world');
SELECT greatest('hello', 'world', 'z');
SELECT greatest('world');
SELECT Greatest();
SELECT greatest(-1, 1, 4294967295);
SELECT GREATEST(1, 2);
SELECT greatest(1, inf);
SELECT greatest(1, inf, nan);
SELECT greatest(1, inf, nan, NULL);
SELECT greatest(1.5, 1.0::Decimal32(5));
SELECT GREATEST(2,0);
SELECT GREATEST(34.0,3.0,5.0,767.0);
SELECT greatest([[[], []]], [[[]]], [[[]], [[]]]);
SELECT greatest([], ['hello'], ['world']);
SELECT greatest([], [NULL]);
SELECT GREATEST([NULL], [0]);
SELECT greatest(a, 0), greatest(b, 0), greatest(g, 0) FROM decimal ORDER BY a;
SELECT greatest(now(), now() + 10) - now();
SELECT greatest(today(), yesterday() + 10) - today();
SELECT groupArray('5'::UInt8)(number) FROM numbers(10);
SELECT groupArray(2 + 3)(number) FROM numbers(10);
select groupArray(a) as b, b[1] from (select (1, 2) as a);
select groupArray(a) from testv;
SELECT groupArray(dictHas('db_01501.cache_dict', toUInt64(number))) from numbers(10);
SELECT groupArray(DISTINCT toString(number % 10)) FROM numbers_mt(50000) GROUP BY number ORDER BY number LIMIT 10 SETTINGS max_threads = 2, max_block_size = 2000;
SELECT groupArray(dt) from date_datetime_key_condition WHERE dt < toDate('2019-01-02') OR dt > toDate('2021-01-02');
SELECT groupArray(dt) from date_datetime_key_condition WHERE dt < toDate('2020-01-02');
SELECT groupArray(dt) from date_datetime_key_condition WHERE dt < toDate('2021-01-02');
SELECT groupArray(dt) from date_datetime_key_condition WHERE dt > toDate('2019-01-02') OR dt <= toDate('2021-01-02');
SELECT groupArray(dt) from date_datetime_key_condition WHERE dt > toDate('2021-01-02');
SELECT groupArray(dt) from date_datetime_key_condition WHERE dt >= toDate('2019-01-02') AND dt < toDate('2021-01-02');
SELECT groupArray(dt) from date_datetime_key_condition WHERE dt >= toDate('2020-01-02');
SELECT groupArray(dummy), count() FROM remote('127.0.0.{2,3}', system.one);
select groupArray(groupArray(number)) over (rows unbounded preceding) as x from remote('127.0.0.{1,2}', '', t_01568) group by mod(number, 3) order by x settings distributed_group_by_no_merge=1;
select groupArray(groupArray(number)) over (rows unbounded preceding) as x from remote('127.0.0.{1,2}', '', t_01568) group by mod(number, 3) order by x settings distributed_group_by_no_merge=2;
SELECT groupArray(name) FROM system.columns WHERE database = currentDatabase() AND table = 'test';
SELECT groupArray(NULL)(number) FROM numbers(10);
SELECT groupArray(NULL);
SELECT groupArray(number) FROM numbers(10) WHERE number = -1 GROUP BY number WITH TOTALS FORMAT Vertical;
SELECT groupArray(number) FROM numbers(10) WHERE number = -1 WITH TOTALS FORMAT Vertical;
select groupArray(number) over () from numbers(3);
select groupArray(s) from (select sum(n) s from (select toDecimal128(1, 10) as n));
select groupArray(s) from (select sum(n) s from (select toDecimal128(number, 10) as n from numbers(1000)));
select groupArray(s) from (select sum(n) s from (select toDecimal32(1, 2) as n));
select groupArray(s) from (select sum(n) s from (select toDecimal32(number, 2) as n from numbers(1000)));
select groupArray(s) from (select sum(n) s from (select toDecimal64(1, 5) as n));
select groupArray(s) from (select sum(n) s from (select toDecimal64(number, 5) as n from numbers(1000)));
SELECT groupArray(toString(dummy)), count() FROM remote('127.0.0.{2,3}', system.one);
SELECT groupArray(x) from (SELECT number as x FROM numbers(3) ORDER BY exp(x), x) SETTINGS allow_experimental_analyzer=1;
SELECT groupArray(x) from (SELECT number as x FROM numbers(3) ORDER BY exp(x), x);
SELECT groupArray(x) from (SELECT number as x FROM numbers(3) ORDER BY x, exp(exp(x))) SETTINGS allow_experimental_analyzer=1;
SELECT groupArray(x) from (SELECT number as x FROM numbers(3) ORDER BY x, exp(exp(x)));
SELECT groupArray(x) from (SELECT number as x FROM numbers(3) ORDER BY x, exp(x)) SETTINGS allow_experimental_analyzer=1;
SELECT groupArray(x) from (SELECT number as x FROM numbers(3) ORDER BY x, exp(x));
SELECT groupArrayInsertAt('-')(toString(number), number * 2) FROM (SELECT * FROM system.numbers LIMIT 10);
SELECT groupArrayInsertAt([123])(range(number), number * 2) FROM (SELECT * FROM system.numbers LIMIT 10);
SELECT groupArrayInsertAt([2, 2], 10)([1, 1], 2);
SELECT groupArrayInsertAt(toString(number), number * 2) FROM (SELECT * FROM system.numbers LIMIT 10);
select groupArrayLast(100)((number+1)::String) state from remote('127.{1,1}', view(select * from numbers(10)));
select groupArrayLast(100)([number+1]) state from remote('127.{1,1}', view(select * from numbers(10)));
select groupArrayLast(100)(number+1) state from remote('127.{1,1}', view(select * from numbers(10)));
select groupArrayLast(3)((number+1)::String) from numbers(10);
select groupArrayLast(3)((number+1)::String) state from remote('127.{1,1}', view(select * from numbers(10)));
select groupArrayLast(3)([number+1]) state from remote('127.{1,1}', view(select * from numbers(10)));
select groupArrayLast(3)(number+1) from numbers(10);
select groupArrayLast(3)(number+1) from numbers(5);
select groupArrayLastArray(3)(['1','2','3','4','5','6']);
SELECT groupArrayMerge(1048577)(y * 1048576) FROM (SELECT groupArrayState(9223372036854775807)(x) AS y FROM (SELECT 1048576 AS x)) FORMAT Null;
SELECT groupArrayMerge(2)(y * 5) FROM (SELECT groupArrayState(2)(x) AS y FROM (SELECT 1 AS x));
SELECT groupArrayMerge(9223372036854775807)(y * 1048576) FROM (SELECT groupArrayState(9223372036854775807)(x) AS y FROM (SELECT 1048576 AS x)) FORMAT Null;
SELECT groupArrayMerge(y * 5) FROM (SELECT groupArrayState(x) AS y FROM (SELECT 1 AS x));
SELECT groupArrayMovingAvg ( toInt64 ( 0 ) ) ( toDecimal32 ( 1 , 1 ) );
SELECT groupArrayMovingAvg(10)(1) FROM remote('127.0.0.{1,2}', numbers(100));
SELECT groupArrayMovingAvg(100)(toDecimal32(1, 9)) FROM numbers(300);
SELECT groupArrayMovingAvg(256)(-1) FROM numbers(300);
SELECT groupArrayMovingAvg(256)(1) FROM numbers(300);
SELECT groupArrayMovingAvg(256)(1) FROM remote('127.0.0.{1,2}', numbers(1000));
SELECT groupArrayMovingAvg(256)(toDecimal128(-1, 1)) FROM numbers(300);
SELECT groupArrayMovingAvg(256)(toDecimal32(1, 9)) FROM numbers(300);
SELECT groupArrayMovingAvg(257)(-9223372036854775808), groupArrayMovingAvg(1048575)(18446744073709551615), groupArrayMovingAvg(9223372036854775807)(number * 9223372036854775807) FROM remote('127.0.0.{1..2}', numbers(3));
SELECT groupArrayMovingSum(0)(1) FROM numbers(100);
SELECT groupArrayMovingSum(10)(1) FROM numbers(100);
SELECT groupArrayMovingSum(10)(number) FROM numbers(100);
SELECT groupArrayMovingSum(256)(-1) FROM numbers(300);
SELECT groupArrayMovingSum(256)(-1) FROM remote('127.0.0.{1,2}', numbers(200));
SELECT groupArrayMovingSum(256)(1) FROM remote('127.0.0.{1,2}', numbers(1000));
SELECT groupArrayMovingSum(256)(toDecimal32(1, 1)) FROM numbers(300);
SELECT groupArrayMovingSum(256)(toDecimal32(1, 9)) FROM numbers(300);
SELECT groupArrayMovingSum(256)(toDecimal32(100000000, 1)) FROM numbers(300);
SELECT groupArrayMovingSum(256)(toDecimal32(1000000000, 1)) FROM numbers(300);
SELECT groupArrayMovingSum(256)(toDecimal64(-1, 1)) FROM numbers(300);
SELECT groupArrayMovingSum(257)(-9223372036854775808), groupArrayMovingSum(1)(10.000100135803223, [NULL, NULL], NULL), groupArrayMovingSum(NULL)(NULL) FROM numbers(1023) FORMAT Null;
SELECT groupArrayMovingSum(257)(-9223372036854775808), groupArrayMovingSum(1048575)(18446744073709551615), groupArrayMovingSum(9223372036854775807)(number * 9223372036854775807) FROM remote('127.0.0.{1..2}', numbers(3));
select groupArrayResample(-9223372036854775808, 9223372036854775807, 9223372036854775807)(number, toInt64(number)) FROM numbers(7);
select groupArrayResample(0, 20, 1)(number, number % 20) from numbers(50);
SELECT groupBitmap( uid ) AS user_num FROM bitmap_test;
SELECT groupBitmapAnd(bitmapBuild([toInt32(1)])), groupBitmapOr(bitmapBuild([toInt32(1)])), groupBitmapXor(bitmapBuild([toInt32(1)])) FROM cluster(test_cluster_two_shards, numbers(10));
SELECT groupBitmapAnd(y) FROM (SELECT groupBitmapAndState(z) y FROM ( SELECT groupBitmapState(u) AS z FROM ( SELECT 123 AS u ) AS a1 ) AS a2);
SELECT groupBitmapAnd(z) FROM ( SELECT minState(u) AS z FROM ( SELECT 123 AS u ) AS a1 ) AS a2;
SELECT groupBitmapAnd(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');
SELECT groupBitmapAnd(z) y FROM ( SELECT groupBitmapState(u) AS z FROM ( SELECT 123 AS u ) AS a1 );
SELECT groupBitmapMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');
SELECT groupBitmapOr(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');
SELECT groupBitmapXor(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');
SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table GROUP BY CUBE (id, value) ORDER BY grouping_id, grouping_value;
SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table GROUP BY GROUPING SETS ((id), (value)) ORDER BY grouping_id, grouping_value;
SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table GROUP BY GROUPING SETS (id, value) ORDER BY grouping_id, grouping_value;
SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table GROUP BY id, value ORDER BY grouping_id, grouping_value;
SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table GROUP BY ROLLUP (id, value) ORDER BY grouping_id, grouping_value;
SELECT grouping, item, runningAccumulate(state, grouping) FROM ( SELECT number % 6 AS grouping, number AS item, sumState(number) AS state FROM (SELECT number FROM system.numbers LIMIT 30) GROUP BY grouping, item ORDER BY grouping, item );
SELECT groupUniqArray(*) FROM VALUES(NULL);
SELECT groupUniqArray(*) FROM VALUES(toNullable(0));
SELECT groupUniqArray(d), groupUniqArray(dt) FROM grop_uniq_array_date;
select groupUniqArray(v) from values('id int, v Array(int)', (1, [2]), (1, [])) group by id;
SELECT groupUniqArrayArrayMerge(x) from (select groupUniqArrayArrayState([]) as x);
SELECT groupUniqArrayForEachMerge(x) from (select groupUniqArrayForEachStateArray([[1],[1],[1]]) as x);
SELECT groupUniqArrayMerge(x) from (select groupUniqArrayStateArray([]) as x);
SELECT groupUniqArrayMerge(y * 5) FROM (SELECT groupUniqArrayState(x) AS y FROM (SELECT 1 AS x));
SELECT grp_aggreg FROM data_02295 GROUP BY a, grp_aggreg ORDER BY a SETTINGS optimize_aggregation_in_order = 1 FORMAT JSONEachRow;
SELECT grp_aggreg FROM data_02295 GROUP BY a, grp_aggreg WITH TOTALS ORDER BY a SETTINGS optimize_aggregation_in_order = 0 FORMAT JSONEachRow;
SELECT grp_aggreg FROM data_02295 GROUP BY a, grp_aggreg WITH TOTALS ORDER BY a SETTINGS optimize_aggregation_in_order = 1 FORMAT JSONEachRow;
SELECT h + 21, h - 21, h - 84, h * 21, h * -21, h / 21, h / 84, intDiv(h, 21), intDivOrZero(h, 84) FROM decimal WHERE h > 0;
SELECT h + h, h - h, h * h, h / h, intDiv(h, h), intDivOrZero(h, h) FROM decimal WHERE h > 0;
SELECT h = 10000000000 FROM decimal WHERE a = 42;
SELECT h3Distance(stringToH3(start), stringToH3(end)) FROM h3_indexes ORDER BY id;
SELECT h3EdgeLengthKm(1);
SELECT h3EdgeLengthKm(10);
SELECT h3EdgeLengthKm(11);
SELECT h3EdgeLengthKm(12);
SELECT h3EdgeLengthKm(13);
SELECT h3EdgeLengthKm(14);
SELECT h3EdgeLengthKm(15);
SELECT h3EdgeLengthKm(2);
SELECT h3EdgeLengthKm(3);
SELECT h3EdgeLengthKm(4);
SELECT h3EdgeLengthKm(5);
SELECT h3EdgeLengthKm(6);
SELECT h3EdgeLengthKm(7);
SELECT h3EdgeLengthKm(8);
SELECT h3EdgeLengthKm(9);
SELECT h3EdgeLengthM(2) * 180 / pi() / 6371007.180918475 - h3EdgeAngle(2);
SELECT h3EdgeLengthM(4);
SELECT h3GetBaseCell(0xFFFFFFFFFFFFFF) FORMAT Null;
SELECT h3GetBaseCell(arrayJoin([579205133326352383,589753847883235327,594082350283882495]));
SELECT h3GetDestinationIndexFromUnidirectionalEdge(599686042433355773);
SELECT h3GetDestinationIndexFromUnidirectionalEdge(stringToH3('85283473ffffff'));
SELECT h3GetFaces(arrayJoin([stringToH3('8f28308280f18f2'),stringToH3('821c07fffffffff'),stringToH3('0x8f28308280f18f2L'),stringToH3('0x821c07fffffffffL')]));
SELECT h3GetIndexesFromUnidirectionalEdge(1248204388774707199);
SELECT h3GetIndexesFromUnidirectionalEdge(599686042433355775);
SELECT h3GetIndexesFromUnidirectionalEdge(stringToH3('85283473ffffff'));
SELECT h3GetOriginIndexFromUnidirectionalEdge(1248204388774707197);
SELECT h3GetOriginIndexFromUnidirectionalEdge(1248204388774707199);
SELECT h3GetOriginIndexFromUnidirectionalEdge(599686042433355775);
SELECT h3GetOriginIndexFromUnidirectionalEdge(stringToH3('85283473ffffff'));
SELECT h3GetPentagonIndexes(20) AS indexes;
SELECT h3GetPentagonIndexes(arrayJoin([0,1,2,3,4,5,6,7,8,9,10]));
SELECT h3GetPentagonIndexes(resolution) AS indexes from table1 order by indexes;
SELECT h3GetRes0Indexes(3);
SELECT h3GetResolution(0xFFFFFFFFFFFFFF) FORMAT Null;
SELECT h3GetResolution(621807531097128959);
SELECT h3GetResolution(644325529233966508);
SELECT h3GetUnidirectionalEdge(stringToH3('85283473ffffff'), stringToH3('852\03477fffffff'));
select h3GetUnidirectionalEdge(stringToH3('85283473fffffff'), stringToH3('85283473fffffff'));
select h3GetUnidirectionalEdge(stringToH3('85283473fffffff'), stringToH3('85283477fffffff'));
SELECT h3GetUnidirectionalEdgeBoundary(1248204388774707199);
SELECT h3GetUnidirectionalEdgeBoundary(599686042433355773);
SELECT h3GetUnidirectionalEdgeBoundary(stringToH3('85283473ffffff'));
SELECT h3GetUnidirectionalEdgesFromHexagon(1248204388774707199);
SELECT h3GetUnidirectionalEdgesFromHexagon(599686042433355773);
SELECT h3GetUnidirectionalEdgesFromHexagon(stringToH3('85283473ffffff'));
SELECT h3HexAreaKm2(1);
SELECT h3HexAreaKm2(10);
SELECT h3HexAreaKm2(11);
SELECT h3HexAreaKm2(12);
SELECT h3HexAreaKm2(13);
SELECT h3HexAreaKm2(14);
SELECT h3HexAreaKm2(15);
SELECT h3HexAreaKm2(2);
SELECT h3HexAreaKm2(3);
SELECT h3HexAreaKm2(4);
SELECT h3HexAreaKm2(5);
SELECT h3HexAreaKm2(6);
SELECT h3HexAreaKm2(7);
SELECT h3HexAreaKm2(8);
SELECT h3HexAreaKm2(9);
SELECT h3HexAreaM2(13);
SELECT h3HexRing(0xFFFFFFFFFFFFFF, toUInt16(10)) FORMAT Null;
SELECT h3HexRing(579205132326352334, toUInt16(1)) as hexRing;
SELECT h3HexRing(arrayJoin([579205133326352383]), arrayJoin([toUInt16(1),toUInt16(2),toUInt16(3)]));
SELECT h3IndexesAreNeighbors(617420388351344639, 617420388351344639);
SELECT h3IndexesAreNeighbors(617420388351344639, 617420388352655359);
SELECT h3IndexesAreNeighbors(617420388351344639, arrayJoin([617420388352655359, 617420388351344639, 617420388352917503]));
SELECT h3IsPentagon(arrayJoin([stringToH3('8f28308280f18f2'),stringToH3('821c07fffffffff'),stringToH3('0x8f28308280f18f2L'),stringToH3('0x821c07fffffffffL')]));
SELECT h3IsPentagon(h3_index) FROM h3_indexes ORDER BY h3_index;
SELECT h3IsResClassIII(arrayJoin([579205133326352383,589753847883235327,594082350283882495]));
SELECT h3IsResClassIII(h3_index) FROM h3_indexes ORDER BY h3_index;
SELECT h3IsValid(100000000000000000);
SELECT h3IsValid(621807531097128959);
SELECT h3IsValid(Cast(0, 'UInt64'));
SELECT h3kRing(0xFFFFFFFFF, 1000) FORMAT Null;
SELECT h3kRing(0xFFFFFFFFFFFFFF, 1000) FORMAT Null;
SELECT h3kRing(0xFFFFFFFFFFFFFF, toUInt16(10)) FORMAT Null;
SELECT h3kRing(581276613233082367, -1);
SELECT h3kRing(581276613233082367, 0);
SELECT h3kRing(581276613233082367, nan);
SELECT h3kRing(581276613233082367, toUInt16(0));
SELECT h3kRing(arrayJoin([579205133326352383]), arrayJoin([toUInt16(1),toUInt16(2),toUInt16(3)]));
SELECT h3kRing(toUInt64(0xFFFFFFFF), 1000) FORMAT Null;
SELECT h3Line(0xffffffffffffff, 0xffffffffffffff);
SELECT h3Line(arrayJoin([stringToH3('85283473fffffff')]), arrayJoin([stringToH3('8528342bfffffff')]));
SELECT h3NumHexagons(1);
SELECT h3NumHexagons(10);
SELECT h3NumHexagons(11);
SELECT h3NumHexagons(12);
SELECT h3NumHexagons(13);
SELECT h3NumHexagons(14);
SELECT h3NumHexagons(15);
SELECT h3NumHexagons(16);
SELECT h3NumHexagons(2);
SELECT h3NumHexagons(3);
SELECT h3NumHexagons(4);
SELECT h3NumHexagons(5);
SELECT h3NumHexagons(6);
SELECT h3NumHexagons(7);
SELECT h3NumHexagons(8);
SELECT h3NumHexagons(9);
SELECT h3NumHexagons(arrayJoin([1,2,3]));
SELECT h3ToCenterChild(577023702256844799, arrayJoin([1,2,3]));
SELECT h3ToCenterChild(h3_index,res) FROM h3_indexes ORDER BY id;
SELECT h3ToChildren(599405990164561919, arrayJoin([6,5]));
SELECT h3ToGeo(0xFFFFFFFFFFFFFF) FORMAT Null;
SELECT h3ToParent(599405990164561919, 0);
SELECT h3ToParent(599405990164561919, arrayJoin([0,1]));
select h3ToParent(641573946153969375, arrayJoin([1,2]));
SELECT h3ToString(arrayJoin([579205133326352383,589753847883235327,594082350283882495]));
SELECT h3UnidirectionalEdgeIsValid(1248204388774707197) as edge;
SELECT h3UnidirectionalEdgeIsValid(stringToH3('85283473ffffff')) as edge;
SELECT halfMD5(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2))));
SELECT halfMD5(1, 2, 3);
SELECT halfMD5(1, 3, 2);
SELECT has(['a', 'b'], 'a');
SELECT has(['a', 'b'], 'b');
SELECT has(['a', 'b'], 'c');
SELECT has(['a', 'b'], materialize('a'));
SELECT has(['a', 'b'], materialize('b'));
SELECT has(['a', 'b'], materialize('c'));
SELECT has(['a', 'b'], NULL);
SELECT has(['a', NULL, 'b'], 'a');
SELECT has(['a', NULL, 'b'], 'b');
SELECT has(['a', NULL, 'b'], 'c');
SELECT has(['a', NULL, 'b'], materialize('a'));
SELECT has(['a', NULL, 'b'], materialize('b'));
SELECT has(['a', NULL, 'b'], materialize('c'));
SELECT has(['a', NULL, 'b'], NULL);
SELECT has(['a',NULL,'def','ghij'], 'a');
SELECT has(['a',NULL,'def','ghij'], 'def');
SELECT has(['a',NULL,'def','ghij'], 'ghij');
SELECT has(['a',NULL,'def','ghij'], col1) FROM test1_00395;
SELECT has(['a',NULL,'def','ghij'], NULL);
SELECT has([(1, 2), (3, 4)], (toUInt16(3), 4));
SELECT has([(a, b), (c, d)], (a, b)) FROM (SELECT 1 AS a, 2 AS b, 3 AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (a, b)) FROM (SELECT materialize(1) AS a, 2 AS b, 3 AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (a, b)) FROM (SELECT materialize(1) AS a, 2 AS b, materialize(3) AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (a, b)) FROM (SELECT materialize(1) AS a, materialize(2) AS b, materialize(3) AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (a, b)) FROM (SELECT number + 1 AS a, number + 2 AS b, number + 3 AS c, number + 4 AS d FROM system.numbers LIMIT 2);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT 1 AS a, 2 AS b, 2 AS c, 2 AS d);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT 1 AS a, 2 AS b, 3 AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT materialize(1) AS a, 2 AS b, 2 AS c, 2 AS d);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT materialize(1) AS a, 2 AS b, 3 AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT materialize(1) AS a, 2 AS b, materialize(2) AS c, 2 AS d);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT materialize(1) AS a, 2 AS b, materialize(3) AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT materialize(1) AS a, materialize(2) AS b, materialize(2) AS c, 2 AS d);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT materialize(1) AS a, materialize(2) AS b, materialize(3) AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT number + 1 AS a, number + 2 AS b, number + 2 AS c, number + 2 AS d FROM system.numbers LIMIT 2);
SELECT has([(a, b), (c, d)], (b, c)) FROM (SELECT number + 1 AS a, number + 2 AS b, number + 3 AS c, number + 4 AS d FROM system.numbers LIMIT 2);
SELECT has([(a, b), (c, d)], (c, d)) FROM (SELECT 1 AS a, 2 AS b, 3 AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (c, d)) FROM (SELECT materialize(1) AS a, 2 AS b, 3 AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (c, d)) FROM (SELECT materialize(1) AS a, 2 AS b, materialize(3) AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (c, d)) FROM (SELECT materialize(1) AS a, materialize(2) AS b, materialize(3) AS c, 4 AS d);
SELECT has([(a, b), (c, d)], (c, d)) FROM (SELECT number + 1 AS a, number + 2 AS b, number + 3 AS c, number + 4 AS d FROM system.numbers LIMIT 2);
select has([0 as x], materialize(x));
select has([0 as x], x);
SELECT has([1, -1], 1);
SELECT has([1, -1], 1000);
SELECT has([1, -1], materialize(1));
SELECT has([1, -1], materialize(1000));
SELECT has([1, 2, 3], 3.0);
SELECT has([1, 2, 3], materialize(3.0));
SELECT has([1, 2.0, 3], 2);
SELECT has([1, 2.0, 3], materialize(2));
SELECT has([1, 2.1, 3], 2);
SELECT has([1, 2.1, 3], materialize(2));
SELECT has([1,NULL,2,3], 1);
SELECT has([1,NULL,2,3], 2);
SELECT has([1,NULL,2,3], 3);
SELECT has([1,NULL,2,3], 4);
SELECT has([1,NULL,2,3], col1) FROM test1_00395;
SELECT has([1,NULL,2,3], NULL);
SELECT has([111, 222], 111);
SELECT has([111, 222], 222);
SELECT has([111, 222], 333);
SELECT has([111, 222], materialize(111));
SELECT has([111, 222], materialize(222));
SELECT has([111, 222], materialize(333));
SELECT has([111, 222], NULL);
SELECT has([111, NULL, 222], 111);
SELECT has([111, NULL, 222], 222);
SELECT has([111, NULL, 222], 333);
SELECT has([111, NULL, 222], materialize(111));
SELECT has([111, NULL, 222], materialize(222));
SELECT has([111, NULL, 222], materialize(333));
SELECT has([111, NULL, 222], NULL);
SELECT has([null, 'str1', 'str2'], 'str1');
select has([toString(0) as x], materialize(x));
select has([toString(0) as x], x);
select has([toString(0)], toString(number % 3)) from system.numbers limit 10;
select has([toString(0)], toString(number)) from system.numbers limit 10;
select has([toUInt64(0)], number) from system.numbers limit 10;
select has([toUInt64(0)], toUInt64(number % 3)) from system.numbers limit 10;
SELECT has([x], 10) FROM (SELECT CAST(10 AS Enum8('hello' = 1, 'world' = 2, 'abc' = 10)) AS x);
SELECT has(a, toDecimal128(0.1, 3)) FROM decimal;
SELECT has(a, toDecimal32(0.1, 2)) FROM decimal;
SELECT has(a, toDecimal32(0.1, 3)), has(a, toDecimal32(1.0, 3)) FROM decimal;
SELECT has(a, toDecimal32(0.1, 4)) FROM decimal;
SELECT has(a, toDecimal64(0.1, 3)) FROM decimal;
SELECT has(b, toDecimal128(0.4, 3)) FROM decimal;
SELECT has(b, toDecimal32(0.4, 3)) FROM decimal;
SELECT has(b, toDecimal64(0.4, 2)) FROM decimal;
SELECT has(b, toDecimal64(0.4, 3)), has(b, toDecimal64(1.0, 3)) FROM decimal;
SELECT has(b, toDecimal64(0.4, 4)) FROM decimal;
SELECT has(c, toDecimal128(0.7, 2)) FROM decimal;
SELECT has(c, toDecimal128(0.7, 3)), has(c, toDecimal128(1.0, 3)) FROM decimal;
SELECT has(c, toDecimal128(0.7, 4)) FROM decimal;
SELECT has(c, toDecimal32(0.7, 3)) FROM decimal;
SELECT has(c, toDecimal64(0.7, 3)) FROM decimal;
SELECT has(col1, NULL) FROM test1_00395;
SELECT has(col1, 'a') FROM test1_00395;
SELECT has(col1, 'bc') FROM test1_00395;
SELECT has(col1, 'def') FROM test1_00395;
SELECT has(col1, 'ghij') FROM test1_00395;
SELECT has(col1, 2) FROM test1_00395;
SELECT has(col1, 3) FROM test1_00395;
SELECT has(col1, 4) FROM test1_00395;
SELECT has(col1, 5) FROM test1_00395;
SELECT has(col1, 7) FROM test1_00395;
SELECT has(col1, NULL) FROM test1_00395;
SELECT has(col1,col2) FROM test1_00395;
SELECT has(map('K0', 'V0'), 'K0') FROM system.one;
SELECT has(map('K0', 'V0'), 'K1') FROM system.one;
SELECT has(materialize(['a', 'b']), 'a');
SELECT has(materialize(['a', 'b']), 'b');
SELECT has(materialize(['a', 'b']), 'c');
SELECT has(materialize(['a', 'b']), materialize('a'));
SELECT has(materialize(['a', 'b']), materialize('b'));
SELECT has(materialize(['a', 'b']), materialize('c'));
SELECT has(materialize(['a', 'b']), NULL);
SELECT has(materialize(['a', NULL, 'b']), 'a');
SELECT has(materialize(['a', NULL, 'b']), 'b');
SELECT has(materialize(['a', NULL, 'b']), 'c');
SELECT has(materialize(['a', NULL, 'b']), materialize('a'));
SELECT has(materialize(['a', NULL, 'b']), materialize('b'));
SELECT has(materialize(['a', NULL, 'b']), materialize('c'));
SELECT has(materialize(['a', NULL, 'b']), NULL);
select has(materialize([0 as x]), materialize(x));
select has(materialize([0 as x]), x);
SELECT has(materialize([1, -1]), 1);
SELECT has(materialize([1, -1]), 1000);
SELECT has(materialize([1, -1]), materialize(1));
SELECT has(materialize([1, -1]), materialize(1000));
SELECT has(materialize([1, 2, 3]), 3.0);
SELECT has(materialize([1, 2, 3]), materialize(3.0));
SELECT has(materialize([1, 2.0, 3]), 2);
SELECT has(materialize([1, 2.0, 3]), materialize(2));
SELECT has(materialize([1, 2.1, 3]), 2);
SELECT has(materialize([1, 2.1, 3]), materialize(2));
SELECT has(materialize([111, 222]), 111);
SELECT has(materialize([111, 222]), 222);
SELECT has(materialize([111, 222]), 333);
SELECT has(materialize([111, 222]), materialize(111));
SELECT has(materialize([111, 222]), materialize(222));
SELECT has(materialize([111, 222]), materialize(333));
SELECT has(materialize([111, 222]), NULL);
SELECT has(materialize([111, NULL, 222]), 111);
SELECT has(materialize([111, NULL, 222]), 222);
SELECT has(materialize([111, NULL, 222]), 333);
SELECT has(materialize([111, NULL, 222]), materialize(111));
SELECT has(materialize([111, NULL, 222]), materialize(222));
SELECT has(materialize([111, NULL, 222]), materialize(333));
SELECT has(materialize([111, NULL, 222]), NULL);
select has(materialize([toString(0) as x]), materialize(x));
select has(materialize([toString(0) as x]), x);
select has(materialize([toString(0)]), toString(number % 3)) from system.numbers limit 10;
select has(materialize([toString(0)]), toString(number)) from system.numbers limit 10;
select has(materialize([toUInt64(0)]), number) from system.numbers limit 10;
select has(materialize([toUInt64(0)]), toUInt64(number % 3)) from system.numbers limit 10;
SELECT has(value, 'K0') FROM test_map;
SELECT has(value, 'K1') FROM test_map;
select hasAll(['a', 'b'], ['a', 'c']);
select hasAll(['a'], ['a']);
SELECT hasAll([(1, 2), (3, 4)], [(toNullable(1), toUInt64(2)), (toUInt16(3), 4)]);
select hasAll([-128, 1.0, 512], [1.0, 513]);
select hasAll([-128, 1.0, 512], [1.0]);
select hasAll([1, 2, 3, 4], [1, 3, 5]);
select hasAll([1, 2, 3, 4], [1, 3]);
select hasAll([1, Null], [Null]);
select hasAll([1], []);
select hasAll([1], [Null]);
select hasAll([1], emptyArrayUInt8());
SELECT hasAll([['Hello, world']], [['Hello', 'world'], ['Hello, world']]);
select hasAll([[1, 2], [3, 4]], [[1, 2], [1, 2]]);
select hasAll([[1, 2], [3, 4]], [[1, 2], [3, 5]]);
select hasAll([], [1]);
select hasAll([], []);
select hasAll([], [NULL]);
select hasAll([Null], [Null, 1]);
select hasAll([Null], [Null]);
select hasAny(['a', 'b'], ['a', 'c']);
select hasAny(['a'], ['a']);
SELECT hasAny([(1, 2), (3, 4)], [(toUInt16(3), 4)]);
select hasAny([(toInt16(3), toInt16(3))],[(toInt16(3), toInt16(3))]);
select hasAny([(toUInt8(3), toUInt8(3))],[(toInt16(3), toInt16(3))]);
select hasAny([-128, 1., 512], [1.]);
select hasAny([-128, 1.0, 512], [.3]);
select hasAny([1, 2, 3, 4], [1, 3, 5]);
select hasAny([1, 2, 3, 4], [1, 3]);
select hasAny([1, 2, 3, 4], [5, 6]);
select hasAny([1, Null], [Null]);
select hasAny([1], ['a']);
select hasAny([1], []);
select hasAny([1], [Null]);
select hasAny([1], emptyArrayUInt8());
SELECT hasAny([['Hello, world']], [[[]]]);
select hasAny([[1, 2], [3, 4]], [[1, 2], [3, 5]]);
select hasAny([[1, 2], [3, 4]], [[1, 3], [4, 2]]);
select hasAny([], [1]);
select hasAny([], []);
select hasAny([], [NULL]);
select hasAny([Null], [Null, 1]);
select hasAny([Null], [Null]);
SELECT hasColumnInTable('localhost', currentDatabase(), 'has_column_in_table', 'i');
SELECT hasColumnInTable('localhost', currentDatabase(), 'has_column_in_table', 'nest');
SELECT hasColumnInTable('localhost', currentDatabase(), 'has_column_in_table', 'nest.not_existing');
SELECT hasColumnInTable('localhost', currentDatabase(), 'has_column_in_table', 'nest.x');
SELECT hasColumnInTable('localhost', currentDatabase(), 'has_column_in_table', 'nest.y');
SELECT hasColumnInTable('localhost', currentDatabase(), 'has_column_in_table', 'not_existing');
SELECT hasColumnInTable('localhost', currentDatabase(), 'has_column_in_table', 's');
SELECT hasColumnInTable('system', 'one', '');
SELECT hasColumnInTable(currentDatabase(), 'has_column_in_table', 'nest.not_existing');
SELECT hasColumnInTable(currentDatabase(), 'has_column_in_table', 'nest.x');
SELECT hasColumnInTable(currentDatabase(), 'has_column_in_table', 'nest.y');
SELECT hasColumnInTable(currentDatabase(), 'has_column_in_table', 'not_existing');
SELECT hasColumnInTable(currentDatabase(), 'has_column_in_table', 's');
select hasSubsequence('ClickHouse - столбцовая система управления базами данных', '');
select hasSubsequence('ClickHouse - столбцовая система управления базами данных', 'C');
select hasSubsequence('ClickHouse - столбцовая система управления базами данных', 'house');
select hasSubsequence('ClickHouse - столбцовая система управления базами данных', 'система');
select hasSubsequence('ClickHouse - столбцовая система управления базами данных', 'Система');
select hasSubsequence('ClickHouse - столбцовая система управления базами данных', 'ссубд');
select hasSubsequence('ClickHouse - столбцовая система управления базами данных', materialize('два стула'));
select hasSubsequence('ClickHouse - столбцовая система управления базами данных', materialize('стул'));
select hasSubsequence('garbage', '');
select hasSubsequence('garbage', 'a');
select hasSubsequence('garbage', 'ab');
select hasSubsequence('garbage', 'arbw');
select hasSubsequence('garbage', 'arg');
select hasSubsequence('garbage', 'ARG');
select hasSubsequence('garbage', 'be');
select hasSubsequence('garbage', 'e');
select hasSubsequence('garbage', 'g');
select hasSubsequence('garbage', 'G');
select hasSubsequence('garbage', 'garbage');
select hasSubsequence('garbage', 'garbage1');
select hasSubsequence('garbage', 'gr');
select hasSubsequence('garbage', 'gra');
select hasSubsequence('garbage', 'rga');
select hasSubsequence('garbage', materialize(''));
select hasSubsequence('garbage', materialize('arbw'));
select hasSubsequence('garbage', materialize('arg'));
select hasSubsequence('garbage'::Nullable(String), 'a');
select hasSubsequence('garbage'::Nullable(String), 'arg'::Nullable(String));
select hasSubsequence(materialize('ClickHouse - столбцовая система управления базами данных'), 'суббд');
select hasSubsequence(materialize('ClickHouse - столбцовая система управления базами данных'), 'субд');
select hasSubsequence(materialize('ClickHouse - столбцовая система управления базами данных'), materialize('два ореха'));
select hasSubsequence(materialize('ClickHouse - столбцовая система управления базами данных'), materialize('орех'));
select hasSubsequence(materialize('garbage'), '');
select hasSubsequence(materialize('garbage'), 'arbw');
select hasSubsequence(materialize('garbage'), 'arg');
select hasSubsequence(materialize('garbage'), materialize(''));
select hasSubsequence(materialize('garbage'), materialize('arg'));
select hasSubsequence(materialize('garbage'), materialize('garbage1'));
select hasSubsequence(materialize('garbage'::Nullable(String)), materialize('arg'::Nullable(String)));
select hasSubsequence(Null, 'a');
select hasSubsequence(Null, Null);
select hasSubsequence(Null::Nullable(String), 'arg'::Nullable(String));
select hasSubsequenceCaseInsensitive('garbage', 'ARG');
select hasSubsequenceCaseInsensitive('garbage', 'w');
select hasSubsequenceCaseInsensitive('GARGAGE', 'arg');
select hasSubsequenceCaseInsensitive(materialize('garbage'), materialize('ARG'));
select hasSubsequenceCaseInsensitive(materialize('garbage'), materialize('w'));
select hasSubsequenceCaseInsensitive(materialize('GARGAGE'), materialize('arg'));
select hasSubsequenceCaseInsensitiveUTF8('для онлайн обработки аналитических запросов (OLAP)', 'oltp');
select hasSubsequenceCaseInsensitiveUTF8('для онлайн обработки аналитических запросов (OLAP)', 'оОоОоO');
select hasSubsequenceCaseInsensitiveUTF8('для онлайн обработки аналитических запросов (OLAP)', 'я раб');
select hasSubsequenceCaseInsensitiveUTF8('для онлайн обработки аналитических запросов (OLAP)', materialize('добро)'));
select hasSubsequenceCaseInsensitiveUTF8('для онлайн обработки аналитических запросов (OLAP)', materialize('зло()'));
select hasSubsequenceCaseInsensitiveUTF8(materialize('для онлайн обработки аналитических запросов (OLAP)'), 'work');
select hasSubsequenceCaseInsensitiveUTF8(materialize('для онлайн обработки аналитических запросов (OLAP)'), 'работа');
select hasSubsequenceCaseInsensitiveUTF8(materialize('для онлайн обработки аналитических запросов (OLAP)'), materialize('аналитика для аналитиков'));
select hasSubsequenceCaseInsensitiveUTF8(materialize('для онлайн обработки аналитических запросов (OLAP)'), materialize('аналитика'));
select hasSubstr(['a', 'b'], ['a', 'c']);
select hasSubstr(['a', 'c', 'b'], ['a', 'c']);
select hasSubstr(['a'], ['a']);
select hasSubstr([-128, 1., 512], [1.]);
select hasSubstr([-128, 1.0, 512], [.3]);
select hasSubstr([1, 2, 3, 4], [1, 3, 5]);
select hasSubstr([1, 2, 3, 4], [1, 3]);
select hasSubstr([1, Null, 3, 4, Null, 5, 7], [3, 4, Null]);
select hasSubstr([1, Null], [3, 4, Null]);
select hasSubstr([1, Null], [Null]);
select hasSubstr([1], ['a']);
select hasSubstr([1], []);
select hasSubstr([1], [Null]);
select hasSubstr([1], emptyArrayUInt8());
select hasSubstr([[1, 2], [3, 4], [5, 8]], [[1, 2], [5, 8]]);
select hasSubstr([[1, 2], [3, 4], [5, 8]], [[3, 4], [5, 8]]);
select hasSubstr([], [1]);
select hasSubstr([], []);
select hasSubstr([], [NULL]);
select hasSubstr([Null], [Null, 1]);
select hasSubstr([Null], [Null]);
SELECT hasToken('', '');
SELECT hasToken('Hello', '');
SELECT hasTokenCaseInsensitive('K(G', '');
SELECT hasTokenCaseInsensitiveOrNull('', '');
SELECT hasTokenCaseInsensitiveOrNull('Hello', '');
SELECT hasTokenOrNull('Hello', '');
SELECT hex($$����$$);
SELECT hex('\a\b\f\n\r\t\v\\\'\"\?\xAA');
SELECT hex(-123.978);
SELECT hex(0.000578);
SELECT hex(1.0);
SELECT hex(1.234567890123456789012345678901::Decimal(60, 30));
SELECT hex(101.);
SELECT hex(1e+100);
SELECT hex(1e+18);
SELECT hex(1e-20);
select hex(avgState(number)) == hex(toString(avgState(number))) from numbers(99);
select hex(avgState(number)) from numbers(10);
SELECT hex(bitRotateLeft(0x8000000000000001, 1));
SELECT hex(bitRotateRight(0x8000000000000001, 1));
SELECT hex(BLAKE3('test_2'));
SELECT hex(BLAKE3('test_3'));
SELECT hex(CAST(countState() AS String)) FROM (SELECT * FROM system.numbers LIMIT 10);
SELECT hex(CAST(x, 'AggregateFunction(sum, Decimal(50, 10))')) FROM (SELECT arrayReduce('sumState', [toDecimal256('0.0000010.000001', 10)]) AS x) GROUP BY x;
SELECT hex(CRC32IEEE('foo'));
SELECT hex(CRC64('foo'));
SELECT hex(INET6_ATON('2a02:6b8::11'));
SELECT hex(IPv4ToIPv6(addr)) FROM addresses ORDER BY addr ASC;
SELECT hex(lowerUTF8('\xFF'));
SELECT hex(maxIntersectionsState(*)) FROM VALUES((1, 3), (3, 5));
SELECT hex(MD4('test'));
SELECT hex(MD5('test'));
SELECT hex(murmurHash3_128('\x01'));
SELECT hex(murmurHash3_128('foo'));
SELECT hex(murmurHash3_128('foo', 'foo'));
SELECT hex(murmurHash3_128('foo', 'foo', 'foo'));
SELECT hex(reinterpretAsFixedString(toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0')));
SELECT hex(SHA1('test'));
SELECT hex(SHA224('test'));
SELECT hex(SHA256('abc'));
SELECT hex(SHA256('test'));
SELECT hex(SHA256(s)) FROM defaults;
SELECT hex(SHA384('test'));
SELECT hex(SHA512('abc'));
SELECT hex(SHA512('test'));
SELECT hex(SHA512(s)) FROM defaults;
SELECT hex(SHA512_256(''));
SELECT hex(SHA512_256('abc'));
SELECT hex(SHA512_256('test'));
SELECT hex(SHA512_256(s)) FROM defaults;
SELECT hex(sipHash128('\x01'));
SELECT hex(sipHash128('foo'));
SELECT hex(sipHash128('foo', 'foo'));
SELECT hex(sipHash128('foo', 'foo', 'foo'));
SELECT hex(sipHash128());
SELECT hex(sipHash128(1, 2, 3));
SELECT hex(sipHash128(tuple(*))) FROM sipHashKeyed_test;
SELECT hex(sipHash128Keyed((2::UInt64, 2::UInt64), val)) FROM sipHashKeyed_keys ORDER by val;
SELECT hex(sipHash128Keyed((key0, key1), 4::UInt64)) FROM sipHashKeyed_keys ORDER by key0;
SELECT hex(sipHash128Keyed((key0, key1), val)) FROM sipHashKeyed_keys ORDER by key0;
SELECT hex(sipHash128Keyed((toUInt64(0), toUInt64(0)), 1, 'test'));
SELECT hex(sipHash128Keyed((toUInt64(0), toUInt64(0)), a, b)) FROM sipHashKeyed_test;
SELECT hex(sipHash128Keyed((toUInt64(0), toUInt64(0)), tuple(*))) FROM sipHashKeyed_test;
SELECT hex(sipHash128Keyed());
SELECT hex(sipHash128Keyed(key, 4::UInt64)) FROM tab;
SELECT hex(sipHash128Keyed(key, val)) FROM sipHashKeyed_keys ORDER by key;
SELECT hex(sipHash128Keyed(key, val)) FROM tab;
SELECT hex(sipHash128Reference(tuple(*))) FROM sipHashKeyed_test;
SELECT hex(sipHash128ReferenceKeyed((2::UInt64, 2::UInt64), val)) FROM sipHashKeyed_keys ORDER by val;
SELECT hex(sipHash128ReferenceKeyed((key0, key1), 4::UInt64)) FROM sipHashKeyed_keys ORDER by key0;
SELECT hex(sipHash128ReferenceKeyed((key0, key1), val)) FROM sipHashKeyed_keys ORDER by key0;
SELECT hex(sipHash128ReferenceKeyed((toUInt64(0), toUInt64(0)), 1, 'test'));
SELECT hex(sipHash128ReferenceKeyed((toUInt64(0), toUInt64(0)), a, b)) FROM sipHashKeyed_test;
SELECT hex(sipHash128ReferenceKeyed((toUInt64(0), toUInt64(0)), tuple(*))) FROM sipHashKeyed_test;
SELECT hex(sipHash128ReferenceKeyed(key, 4::UInt64)) FROM tab;
SELECT hex(sipHash128ReferenceKeyed(key, val)) FROM sipHashKeyed_keys ORDER by key;
select hex(sipHash64Keyed((toUInt64(506097522914230528), toUInt64(1084818905618843912)), char(0)));
select hex(sipHash64Keyed((toUInt64(506097522914230528), toUInt64(1084818905618843912)), char(0, 1)));
select hex(sipHash64Keyed((toUInt64(506097522914230528), toUInt64(1084818905618843912)), char(0, 1, 2)));
select hex(sipHash64Keyed((toUInt64(506097522914230528), toUInt64(1084818905618843912)), char(0, 1, 2, 3)));
select hex(sipHash64Keyed((toUInt64(506097522914230528), toUInt64(1084818905618843912)), char(0, 1, 2, 3, 4)));
select hex(sipHash64Keyed((toUInt64(506097522914230528), toUInt64(1084818905618843912)), char(0, 1, 2, 3, 4, 5)));
select hex(sipHash64Keyed());
SELECT hex(sumMapFilteredState([1, 2])([1, 2, 3], [10, 10, 10]));
SELECT hex(sumMappedArraysState([CAST('0.1', 'Decimal(3)'), CAST('1', 'Decimal(3)')], [CAST('1.2', 'Decimal(3)'), CAST('2', 'Decimal(3)')]));
SELECT hex(toDecimal128(99.67, 2));
SELECT hex(toDecimal128(number, 9)) FROM numbers(120, 2);
SELECT hex(toDecimal32(0.000578, 6));
SELECT hex(toDecimal32(1., 2));
SELECT hex(toDecimal32(1.0, 2));
SELECT hex(toDecimal32(number, 3)) FROM numbers(200, 2);
SELECT hex(toDecimal64(-123.978, 3));
SELECT hex(toDecimal64(number, 5)) FROM numbers(202, 2);
SELECT hex(toFloat32(99.67));
SELECT hex(toFloat32(number)) FROM numbers(200, 2);
SELECT hex(toFloat64(number)) FROM numbers(202, 2);
SELECT hex(toInt128(-100000000000)) AS res;
SELECT hex(toInt128(100000000000)) AS res;
SELECT hex(toInt16(-100)) AS res;
SELECT hex(toInt16(100)) AS res;
SELECT hex(toInt256(-100000000000)) AS res;
SELECT hex(toInt256(100000000000)) AS res;
SELECT hex(toInt32(-100)) AS res;
SELECT hex(toInt32(100)) AS res;
SELECT hex(toInt64(-100)) AS res;
SELECT hex(toInt64(100)) AS res;
SELECT hex(toInt8(-100)) AS res;
SELECT hex(toInt8(100)) AS res;
SELECT hex(toString(countState())) FROM (SELECT * FROM system.numbers LIMIT 10);
SELECT hex(toString(initializeAggregation('anyLastState', initializeAggregation('uniqState', 0))));
SELECT hex(toString(initializeAggregation('anyState', initializeAggregation('uniqState', 0))));
SELECT hex(toString(initializeAggregation('maxState', initializeAggregation('uniqState', 0))));
SELECT hex(toString(initializeAggregation('quantileState', 0)));
SELECT hex(toString(initializeAggregation('uniqState', initializeAggregation('quantileState', 0))));
SELECT hex(toString(initializeAggregation('uniqState', initializeAggregation('uniqState', 0))));
SELECT hex(toString(uniqExactState(x))) FROM (SELECT quantileState(number) AS x FROM numbers(1000));
SELECT hex(toString(uniqExactState(x))) FROM (SELECT uniqState(number) AS x FROM numbers(1000));
SELECT hex(toString(uniqState(toNullable(1)))) WITH TOTALS;
SELECT hex(toString(uniqState(x))) FROM (SELECT toNullable(1) AS x) WITH TOTALS;
SELECT hex(toString(uniqStateForEach([1, NULL]))) WITH TOTALS;
SELECT hex(toString(uniqStateForEach([1, NULL])));
SELECT hex(toString(uniqStateForEachState([1, NULL]))) WITH TOTALS;
SELECT hex(toString(uniqStateForEachState([1, NULL])));
SELECT hex(toUInt128(100000000000)) AS res;
SELECT hex(toUInt256(100000000000)) AS res;
SELECT hex(unhex('02010A00000000000000020A00000000000000')::AggregateFunction(1, sumMapFiltered([1, 2]), Array(UInt8), Array(UInt8)));
SELECT hex(upperUTF8('\xFF'));
select hex(uuid5_old), subitem from badFixedStringSort ORDER BY uuid5_old, subitem;
select hex(UUIDStringToNum('00112233-4455-6677-8899-aabbccddeeff', 1));
select hex(UUIDStringToNum('00112233-4455-6677-8899-aabbccddeeff', 2));
SELECT hex(UUIDStringToNum('01234567-89ab-cdef-0123-456789abcdef'));
SELECT hex(UUIDStringToNum(materialize('01234567-89ab-cdef-0123-456789abcdef')));
SELECT hex(xxHash32('')) = upper('02cc5d05');
SELECT hex(xxHash32('ABC')) = upper('80712ed5');
SELECT hex(xxHash64('')) = upper('ef46db3751d8e999');
SELECT hex(xxHash64('ABC')) = upper('e66ae7354fcfee98');
SELECT hex(xxHash64('xxhash')) = upper('32dd38952c4bc720');
SELECT hierarchical_index_bytes_allocated > 0 FROM system.dictionaries WHERE name = 'hierarchy_flat_dictionary_index' AND database = currentDatabase();
SELECT hierarchical_index_bytes_allocated > 0 FROM system.dictionaries WHERE name = 'hierarchy_hashed_array_dictionary_index' AND database = currentDatabase();
SELECT hierarchical_index_bytes_allocated > 0 FROM system.dictionaries WHERE name = 'hierarchy_hashed_dictionary_index' AND database = currentDatabase();
SELECT histogram(10)(-2);
select histogram(2)(num) from histogram;
select histogram(5)(number) from (select * from system.numbers limit 20);
select histogram(5)(number-10) from (select * from system.numbers limit 20);
select histogramIf(3)(number, number > 11) from (select * from system.numbers limit 10);
select hiveHash('874293087');
select hiveHash('abc');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, INTERVAL '3' DAY, 'US/Samoa');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 DAY, INTERVAL 3 DAY, 'US/Samoa');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 HOUR, INTERVAL 3 HOUR, 'US/Samoa');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 MINUTE, INTERVAL 3 MINUTE, 'US/Samoa');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 MONTH, INTERVAL 3 MONTH, 'US/Samoa');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 QUARTER, INTERVAL 3 QUARTER, 'US/Samoa');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 SECOND, INTERVAL 3 SECOND, 'US/Samoa');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 WEEK, INTERVAL 3 WEEK, 'US/Samoa');
SELECT hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 YEAR, INTERVAL 3 YEAR, 'US/Samoa');
SELECT hopEnd(hop(toDateTime('2019-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, INTERVAL '3' DAY, 'US/Samoa'));
SELECT hopEnd(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, INTERVAL '3' DAY, 'US/Samoa');
SELECT hopStart(hop(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, INTERVAL '3' DAY, 'US/Samoa'));
SELECT hopStart(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, INTERVAL '3' DAY, 'US/Samoa');
select hostname from system.query_log where query like 'select \'02095_system_logs_hostname%' and current_database = currentDatabase() and event_date >= yesterday() LIMIT 1 FORMAT Null;
SELECT hostname() = hostName();
select hostName() h, count() from cluster(test_cluster_two_shards, system.one) group by h;
select hostName(), hostname from system.query_thread_log where query like 'select \'02095_system_logs_hostname%' and current_database = currentDatabase() and event_date >= yesterday() LIMIT 1 FORMAT Null;
select hostname();
select hypot(-1, 1) = sqrt(2);
select hypot(0, 1) = 1;
select hypot(1, 0) = 1;
select hypot(1, 1) = sqrt(2);
select hypot(3, 4) = 5;
SELECT i + 21, i - 21, i - 84, i * 21, i * -21, i / 21, i / 84, intDiv(i, 21), intDivOrZero(i, 84) FROM decimal WHERE i > 0;
SELECT i + i, i - i FROM decimal WHERE i > 0;
SELECT i + i, i - i, i * i, i / i, intDiv(i, i), intDivOrZero(i, i) FROM decimal WHERE i > 0;
select i from a where _part_offset = 1 order by i settings max_rows_to_read = 2;
select i from a where _part_offset = 2 order by i settings max_rows_to_read = 2;
select i from a where _part_offset = 3 order by i settings max_rows_to_read = 2;
select i from a where _part_offset = 4 order by i settings max_rows_to_read = 1;
select i from a where _part_offset not in (1, 4) order by i settings max_rows_to_read = 4;
SELECT i FROM generateRandom('i Array(Nullable(Enum8(\'hello\' = 1, \'world\' = 5)))', 1025, 65535, 9223372036854775807) LIMIT 10;
select i from t prewhere j = 4;
SELECT i, col1 FROM ( SELECT i, a AS col1, a AS col2 FROM tab ORDER BY i WITH FILL INTERPOLATE (col1 AS col1+col2, col2) );
select i, s from ttl order by i;
select i, s, t from ttl order by i;
SELECT i8, t_i8 FROM t64 WHERE i8 != t_i8;
SELECT id % 10, sum(length(col1)), sumArray(arrayMap(x -> length(x), col1.n.b)) FROM nested GROUP BY id % 10;
SELECT id % 3 AS k, sum(u) FROM t_sparse_full WHERE u != 0 GROUP BY k ORDER BY k;
SELECT id % 7, sum(u) FROM t_sparse GROUP BY id % 7 ORDER BY id % 7;
SELECT id + length(value) FROM test_table;
SELECT id AS id FROM test_table;
SELECT id AS id2, name AS value FROM merge_tree_in_subqueries WHERE (id, num) IN (SELECT number, number + 6 FROM system.numbers LIMIT 10) ORDER BY id;
SELECT id AS id2, name AS value FROM merge_tree_in_subqueries WHERE (value, id2) IN (SELECT 'test' || toString(number), number FROM system.numbers LIMIT 2, 3) ORDER BY id;
SELECT id AS id2, name AS value FROM merge_tree_in_subqueries WHERE num IN (SELECT number FROM system.numbers LIMIT 10) ORDER BY id;
SELECT id AS id_alias, arrayMap(x -> x + arrayMap(y -> x + y + id_alias, [1])[1], [1,2,3]) FROM test_table;
SELECT id as shift_right_bit,'Hel' as arg,bin(bitShiftLeft('Hel', id)) as string_res FROM test_bit_shift_left_string_integer;
SELECT id as shift_right_bit,'Hel' as arg,bin(bitShiftRight('Hel', id)) as string_res FROM test_bit_shift_right_string_integer;
SELECT id as shift_right_bit,'Hello' as arg,bin(bitShiftLeft('Hello', id)) as string_res FROM test_bit_shift_left_string_integer;
SELECT id as shift_right_bit,'Hello' as arg,bin(bitShiftRight('Hello', id)) as string_res FROM test_bit_shift_right_string_integer;
select id from ( select distinct id from remote('127.0.0.1,127.0.0.2', currentDatabase(),t_distinct_limit) limit 10 ) order by id;
SELECT id FROM (SELECT * FROM (SELECT * FROM test_table));
SELECT id FROM (SELECT * FROM test_table UNION ALL SELECT * FROM test_table);
SELECT id FROM (SELECT * FROM test_table);
SELECT id FROM (SELECT 1 AS id UNION ALL SELECT 1);
SELECT id FROM (SELECT arrayJoin([1, 2, 3]) AS id) WHERE id = 1;
SELECT id FROM (SELECT id FROM test_table EXCEPT SELECT id FROM test_table);
SELECT id FROM (SELECT id FROM test_table INTERSECT SELECT id FROM test_table);
SELECT id FROM (SELECT id FROM test_table UNION ALL SELECT id FROM test_table);
SELECT id FROM (SELECT id FROM test_table UNION DISTINCT SELECT id FROM test_table);
SELECT id FROM (SELECT id, value FROM (SELECT id, value FROM test_table));
SELECT id FROM (SELECT id, value FROM test_table UNION ALL SELECT id, value FROM test_table);
SELECT id FROM (SELECT id, value FROM test_table);
SELECT id FROM (SELECT item_id AS id FROM t GROUP BY id WITH TOTALS) l FULL JOIN (SELECT item_id AS id FROM t GROUP BY id WITH TOTALS ORDER BY item_id) r USING (id);
SELECT id FROM (SELECT item_id AS id FROM t GROUP BY id WITH TOTALS) l INNER JOIN (SELECT item_id AS id FROM t GROUP BY id WITH TOTALS) r USING (id);
SELECT id FROM join_on_disk lhs LEFT JOIN (SELECT id FROM join_on_disk GROUP BY id) rhs USING (id) FORMAT Null;
select id from lc_test;
SELECT ID FROM m INNER JOIN b USING(key) GROUP BY ID;
SELECT ID FROM readonly00542 ORDER BY ID;
select id from remote('127.0.0.{1,3}', currentDatabase(), sample_prewhere) SAMPLE 1 where toDateTime(time) = '2019-07-20 00:00:00';
SELECT id FROM s WHERE pointInPolygon((lng,lat), (select shape from p where polygon_id = 8));
SELECT id FROM t ANY LEFT JOIN joint ON t.id = joint.id;
select id from table1 where id % 200 < 0 order by id;
select id from table1 where id % 200 = 2 OR id % 200 = -2 order by id;
select id from table1 where id % 200 > 0 order by id;
SELECT id FROM tableMergeTree_00968 WHERE id IN (SELECT number FROM tableFile_00968) ORDER BY id;
SELECT id FROM test_bf_indexOf WHERE '0' = indexOf(ary, 'value1') ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE 0 < indexOf(ary, 'value1') ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE 0 <= indexOf(ary, 'value1') ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE 1 < indexOf(ary, 'value1') ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE 1 <= indexOf(ary, 'value1') ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE 2 <= indexOf(ary, 'value1') ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') != 0 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') != 1 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') < '1' ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') < toDecimal128(1, 2) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') = '0' ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') = 0 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') = 1 OR indexOf(ary, 'value3') = 1 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') = 1 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') = 2 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') = toDecimal32(0, 2) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') > '0' ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') > 0 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') > 1 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') > toDecimal32(0, 2) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') >= 0 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') >= 1 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') >= 2 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') in (0) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') in (1) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') in (2) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') not in (0) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') not in (1) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value1') not in (2) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value2') != 0 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value2') != 2 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value2') = 0 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value2') = 2 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value3') != 0 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value3') != 1 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value3') = 0 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value3') = 1 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE indexOf(ary, 'value3') = 2 ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE not(indexOf(ary, 'value1') == 0) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE not(indexOf(ary, 'value1') == 1) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE not(indexOf(ary, 'value1') == 2) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE not(indexOf(ary, 'value1')) ORDER BY id FORMAT TSV;
SELECT id FROM test_bf_indexOf WHERE toDecimal128(0, 2) = indexOf(ary, 'value1') ORDER BY id FORMAT TSV;
SELECT id FROM test_table EXCEPT SELECT id FROM test_table;
SELECT id FROM test_table INTERSECT SELECT id FROM test_table;
SELECT id FROM test_table UNION ALL SELECT id FROM test_table;
SELECT id FROM test_table UNION DISTINCT SELECT id FROM test_table;
SELECT id FROM test_table WHERE value_ipv4 IN (SELECT value_ipv4 FROM test_table);
SELECT id FROM test_table WHERE value_ipv6 IN (SELECT value_ipv6 FROM test_table);
SELECT id FROM test_table;
SELECT id FROM test_table_join_1, test_table_join_2;
SELECT id IN toDecimal64(257, NULL) FROM test_table;
SELECT id IS NULL, n IS NULL, n IS NOT NULL FROM t_func_to_subcolumns;
SELECT id, CASE id WHEN 1 THEN 'Z' ELSE 'X' END x FROM (SELECT 1 as id);
SELECT id, CASE id WHEN 1 THEN 'Z' END x FROM (SELECT 1 as id);
SELECT id, 3.4 < intervalLengthSum(start, end) AND intervalLengthSum(start, end) < 3.6, toTypeName(intervalLengthSum(start, end)) FROM fl_interval GROUP BY id ORDER BY id;
SELECT id, `n.a`, `n.b`, toTypeName(`n.b`) FROM t_nested_modify ORDER BY id;
SELECT id, alias_value_1, alias_value_2 FROM test_table;
SELECT id, amount FROM ids INNER JOIN discounts_dict ON id = advertiser_id ORDER BY id, amount SETTINGS join_algorithm = 'default';
SELECT id, amount FROM ids INNER JOIN discounts_dict ON id = advertiser_id ORDER BY id, amount SETTINGS join_algorithm = 'direct';
SELECT id, amount FROM ids INNER JOIN discounts_dict ON id = advertiser_id ORDER BY id, amount SETTINGS join_algorithm = 'direct,hash';
SELECT id, any(value1), any(value2) FROM test_table_float_values GROUP BY id ORDER BY id;
SELECT id, any(value1), any(value2) FROM test_table_nullable_float_values GROUP BY id ORDER BY id;
SELECT id, any(value1), any(value2), any(value3) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, any(value1), any(value2), any(value3), any(value4) FROM test_table_nullable_signed_values GROUP BY id ORDER BY id;
SELECT id, any(value1), any(value2), any(value3), any(value4) FROM test_table_nullable_unsigned_values GROUP BY id ORDER BY id;
SELECT id, any(value1), any(value2), any(value3), any(value4) FROM test_table_signed_values GROUP BY id ORDER BY id;
SELECT id, any(value1), any(value2), any(value3), any(value4) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, anyLast(value1), anyLast(value2) FROM test_table_float_values GROUP BY id ORDER BY id;
SELECT id, anyLast(value1), anyLast(value2) FROM test_table_nullable_float_values GROUP BY id ORDER BY id;
SELECT id, anyLast(value1), anyLast(value2), anyLast(value3) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, anyLast(value1), anyLast(value2), anyLast(value3), anyLast(value4) FROM test_table_nullable_signed_values GROUP BY id ORDER BY id;
SELECT id, anyLast(value1), anyLast(value2), anyLast(value3), anyLast(value4) FROM test_table_nullable_unsigned_values GROUP BY id ORDER BY id;
SELECT id, anyLast(value1), anyLast(value2), anyLast(value3), anyLast(value4) FROM test_table_signed_values GROUP BY id ORDER BY id;
SELECT id, anyLast(value1), anyLast(value2), anyLast(value3), anyLast(value4) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, arr.k1, arr.k2.k3, arr.k2.k4, arr.k2.k5 FROM t_json_array ORDER BY id;
SELECT id, arr.k1.k2, arr.k1.k3, arr.k1.k4, arr.k5.k6 FROM t_json_array ORDER BY id;
SELECT id, arrayJoin(value_1) AS a, a FROM test_table;
SELECT id, arrayJoin(value_1) FROM test_table;
SELECT id, ary[indexOf(ary, 'value1')] FROM test_bf_indexOf WHERE ary[indexOf(ary, 'value1')] = 'value1' ORDER BY id FORMAT TSV;
SELECT id, ary[indexOf(ary, 'value2')] FROM test_bf_indexOf WHERE ary[indexOf(ary, 'value2')] = 'value2' ORDER BY id FORMAT TSV;
SELECT id, ary[indexOf(ary, 'value3')] FROM test_bf_indexOf WHERE ary[indexOf(ary, 'value3')] = 'value3' ORDER BY id FORMAT TSV;
SELECT id, avg(value1), avg(value2) FROM test_table_float_values GROUP BY id ORDER BY id;
SELECT id, avg(value1), avg(value2) FROM test_table_nullable_float_values GROUP BY id ORDER BY id;
SELECT id, avg(value1), avg(value2), avg(value3) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, avg(value1), avg(value2), avg(value3), avg(value4) FROM test_table_nullable_signed_values GROUP BY id ORDER BY id;
SELECT id, avg(value1), avg(value2), avg(value3), avg(value4) FROM test_table_nullable_unsigned_values GROUP BY id ORDER BY id;
SELECT id, avg(value1), avg(value2), avg(value3), avg(value4) FROM test_table_signed_values GROUP BY id ORDER BY id;
SELECT id, avg(value1), avg(value2), avg(value3), avg(value4) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, avgWeighted(value1, weight), avgWeighted(value2, weight) FROM test_table_float_values GROUP BY id ORDER BY id;
SELECT id, avgWeighted(value1, weight), avgWeighted(value2, weight) FROM test_table_nullable_float_values GROUP BY id ORDER BY id;
SELECT id, count(value), count(value_nullable) FROM test_table GROUP BY id ORDER BY id;
SELECT id, d FROM t_mutations_nondeterministic ORDER BY id;
SELECT id, data FROM type_json_dst ORDER BY id;
SELECT id, data, toTypeName(data) FROM t_json_2 ORDER BY id;
SELECT id, data, toTypeName(data) FROM t_json_null ORDER BY id;
SELECT id, data, toTypeName(data) FROM t_object_convert ORDER BY id;
SELECT id, data, toTypeName(data) FROM t_object_convert2 ORDER BY id;
SELECT id, data.a, data.s FROM t_json_field ORDER BY id;
SELECT id, data.a, data.s, data.b FROM t_json_field ORDER BY id;
SELECT id, data.a, data.s, data.b, data.t FROM t_json_field ORDER BY id;
SELECT id, data.k1 FROM t_json_2 ORDEr BY id;
SELECT id, data.k1 FROM t_json_2 ORDER BY id;
SELECT id, data.k1, data.k2, data.k3 FROM t_json_2 ORDER BY id;
SELECT id, data.k1, data.k2, data.k3 FROM t_json_null ORDER BY id;
SELECT id, data.k1, data.k2.k3, data.k2.k4, data.k5 FROM t_json ORDER BY id;
SELECT id, data.k1.k2, data.k1.k3, data.k1.k4 FROM t_json_2 ORDER BY id;
SELECT id, data.k1.k2, data.k1.k3, data.k1.k4 FROM t_json_null ORDER BY id;
SELECT id, data.k1.k2, data.k1.k3.k4 FROM t_json ORDER BY id;
SELECT id, data.name, data.value FROM t_json ORDER BY id;
SELECT id, data.x, data.y FROM t_object_convert ORDER BY id;
SELECT id, date, name FROM (SELECT id, date, name FROM test_join GROUP BY id, name, date) js1 FULL OUTER JOIN (SELECT id, date, name FROM test_join GROUP BY id, name, date) js2 USING (id, name, date) ORDER BY id, name;
SELECT id, finalizeAggregation(v) FROM t_mutations_nondeterministic ORDER BY id;
SELECT id, flag FROM test t1 INNER JOIN (SELECT DISTINCT id FROM test) AS t2 ON t1.id = t2.id WHERE flag = 0 and t = 1 AND id NOT IN (SELECT 1 WHERE 0) ORDER BY id;
SELECT id, haystack, 'l', replacement, replaceAll('Hello World', 'l', replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, 'l', replacement, replaceAll(haystack, 'l', replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, 'l', replacement, replaceOne('Hello World', 'l', replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, 'l', replacement, replaceOne(haystack, 'l', replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, 'l', replacement, replaceRegexpAll('Hello World', 'l', replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, 'l', replacement, replaceRegexpAll(haystack, 'l', replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, 'l', replacement, replaceRegexpOne('Hello World', 'l', replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, 'l', replacement, replaceRegexpOne(haystack, 'l', replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, needle, 'x', replaceAll('Hello World', needle, 'x') FROM test_tab ORDER BY id;
SELECT id, haystack, needle, 'x', replaceAll(haystack, needle, 'x') FROM test_tab ORDER BY id;
SELECT id, haystack, needle, 'x', replaceOne('Hello World', needle, 'x') FROM test_tab ORDER BY id;
SELECT id, haystack, needle, 'x', replaceOne(haystack, needle, 'x') FROM test_tab ORDER BY id;
SELECT id, haystack, needle, 'x', replaceRegexpAll('Hello World', needle, 'x') FROM test_tab ORDER BY id;
SELECT id, haystack, needle, 'x', replaceRegexpAll(haystack, needle, 'x') FROM test_tab ORDER BY id;
SELECT id, haystack, needle, 'x', replaceRegexpOne('Hello World', needle, 'x') FROM test_tab ORDER BY id;
SELECT id, haystack, needle, 'x', replaceRegexpOne(haystack, needle, 'x') FROM test_tab ORDER BY id;
select id, haystack, needle, ilike(haystack, needle) from non_const_needle order by id;
select id, haystack, needle, like(haystack, needle) from non_const_needle order by id;
select id, haystack, needle, match(haystack, needle) from non_const_needle order by id;
select id, haystack, needle, not ilike(haystack, needle) from non_const_needle order by id;
select id, haystack, needle, not like(haystack, needle) from non_const_needle order by id;
SELECT id, haystack, needle, replacement, replaceAll('Hello World', needle, replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, needle, replacement, replaceAll(haystack, needle, replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, needle, replacement, replaceOne('Hello World', needle, replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, needle, replacement, replaceOne(haystack, needle, replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, needle, replacement, replaceRegexpAll('Hello World', needle, replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, needle, replacement, replaceRegexpAll(haystack, needle, replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, needle, replacement, replaceRegexpOne('Hello World', needle, replacement) FROM test_tab ORDER BY id;
SELECT id, haystack, needle, replacement, replaceRegexpOne(haystack, needle, replacement) FROM test_tab ORDER BY id;
select id, id2, val, val2, created from ( SELECT toUInt64(arrayJoin(range(50))) AS id2 ) js1 SEMI LEFT JOIN joinbug_join using id2;
SELECT id, intervalLengthSum(start, end), toTypeName(intervalLengthSum(start, end)) FROM date_interval GROUP BY id ORDER BY id;
SELECT id, intervalLengthSum(start, end), toTypeName(intervalLengthSum(start, end)) FROM dt_interval GROUP BY id ORDER BY id;
SELECT id, intervalLengthSum(start, end), toTypeName(intervalLengthSum(start, end)) FROM interval GROUP BY id ORDER BY id;
SELECT id, JSON_QUERY(json, '$.friends[0 to 2]') FROM 01889_sql_json ORDER BY id;
SELECT id, JSON_VALUE(json, '$.friends[0]') FROM 01889_sql_json ORDER BY id;
SELECT id, L1Norm(materialize([5., 6.])) FROM vec1;
SELECT id, L1Norm(materialize([5., 6.])) FROM vec1d;
SELECT id, L1Norm(materialize([5., 6.])) FROM vec1f;
SELECT id, L1Norm(v), L2Norm(v), L2SquaredNorm(v), LpNorm(v, 2.7), LinfNorm(v) FROM vec1;
SELECT id, L1Norm(v), L2Norm(v), L2SquaredNorm(v), LpNorm(v, 2.7), LinfNorm(v) FROM vec1d;
SELECT id, L1Norm(v), L2Norm(v), L2SquaredNorm(v), LpNorm(v, 2.7), LinfNorm(v) FROM vec1f;
SELECT id, left.n IS NULL, right.n IS NULL FROM t_func_to_subcolumns AS left FULL JOIN (SELECT 1 AS id, 'qqq' AS n UNION ALL SELECT 3 AS id, 'www') AS right USING(id);
SELECT id, lookup_key, dictHas('test_dictionary', lookup_key) FROM test_lookup_table ORDER BY id ASC;
SELECT id, m.size0 FROM map_subcolumns;
SELECT id, map FROM map_containsKeyLike_test WHERE mapContainsKeyLike(map, '1-%') = 1;
SELECT id, map FROM map_containsKeyLike_test WHERE mapContainsKeyLike(map, '3-%') = 0 order by id;
SELECT id, mapExtractKeyLike(map, '5-K1') FROM map_extractKeyLike_test ORDER BY id;
SELECT id, mapExtractKeyLike(map, 'P1%') FROM map_extractKeyLike_test ORDER BY id;
SELECT id, max(value1), max(value2) FROM test_table_nullable_float_values GROUP BY id ORDER BY id;
SELECT id, max(value1), max(value2), max(value3) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, max(value1), max(value2), max(value3), max(value4) FROM test_table_nullable_signed_values GROUP BY id ORDER BY id;
SELECT id, max(value1), max(value2), max(value3), max(value4) FROM test_table_nullable_unsigned_values GROUP BY id ORDER BY id;
SELECT id, max(value1), max(value2), max(value3), max(value4) FROM test_table_signed_values GROUP BY id ORDER BY id;
SELECT id, max(value1), max(value2), max(value3), max(value4) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, min(value1), min(value2) FROM test_table_float_values GROUP BY id ORDER BY id;
SELECT id, min(value1), min(value2) FROM test_table_nullable_float_values GROUP BY id ORDER BY id;
SELECT id, min(value1), min(value2), min(value3) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, min(value1), min(value2), min(value3), min(value4) FROM test_table_nullable_signed_values GROUP BY id ORDER BY id;
SELECT id, min(value1), min(value2), min(value3), min(value4) FROM test_table_nullable_unsigned_values GROUP BY id ORDER BY id;
SELECT id, min(value1), min(value2), min(value3), min(value4) FROM test_table_signed_values GROUP BY id ORDER BY id;
SELECT id, min(value1), min(value2), min(value3), min(value4) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, n FROM t_mutations_subcolumns;
SELECT id, n, obj.k4 FROM t_missed_subcolumns ORDER BY id FORMAT JSONEachRow;
SELECT id, name FROM f LEFT ARRAY JOIN d_ids as id LEFT JOIN d ON d.id = id ORDER BY id;
SELECT id, name FROM merge_tree_in_subqueries WHERE (id, name) IN (3, 'test3') SETTINGS allow_experimental_parallel_reading_from_replicas=2;
SELECT id, query, formatQuery(query) FROM some_invalid ORDER BY id;
SELECT id, query, formatQueryOrNull(query) FROM some_invalid ORDER BY id;
SELECT id, query, formatQuerySingleLine(query) FROM some_invalid ORDER BY id;
SELECT id, query, formatQuerySingleLineOrNull(query) FROM some_invalid ORDER BY id;
SELECT id, sum(value1), sum(value2) FROM test_table_float_values GROUP BY id ORDER BY id;
SELECT id, sum(value1), sum(value2) FROM test_table_nullable_float_values GROUP BY id ORDER BY id;
SELECT id, sum(value1), sum(value2), sum(value3) FROM test_table_null_specifics GROUP BY id ORDER BY id;
SELECT id, sum(value1), sum(value2), sum(value3), sum(value4) FROM test_table_nullable_signed_values GROUP BY id ORDER BY id;
SELECT id, sum(value1), sum(value2), sum(value3), sum(value4) FROM test_table_nullable_unsigned_values GROUP BY id ORDER BY id;
SELECT id, sum(value1), sum(value2), sum(value3), sum(value4) FROM test_table_unsigned_values GROUP BY id ORDER BY id;
SELECT id, sum(value1), sum(value2), sum(value3), sum(value4)FROM test_table_signed_values GROUP BY id ORDER BY id;
SELECT Id, Timestamp FROM remote('localhost,127.0.0.1,127.0.0.2',currentDatabase(),'test5346') FINAL ORDER BY Timestamp;
SELECT Id, Timestamp FROM remote('localhost,127.0.0.1,127.0.0.2',currentDatabase(),'test5346') FINAL ORDER BY identity(Timestamp);
SELECT id, timestamp, payload FROM events WHERE (organisation_id = reinterpretAsUUID(1)) AND (session_id = reinterpretAsUUID(0)) ORDER BY timestamp, payload, id ASC;
SELECT id, toTypeName(id), value, toTypeName(value), d.id, toTypeName(d.id) , d.values, toTypeName(d.values) FROM ( SELECT 1 AS id, 2 AS value ) a SEMI LEFT JOIN ( SELECT 1 AS id, 3 AS values ) AS d USING id;
SELECT id, toTypeName(id), value, toTypeName(value), d.id, toTypeName(d.id) , d.values, toTypeName(d.values) FROM ( SELECT toLowCardinality(1) AS id, toLowCardinality(2) AS value ) a SEMI LEFT JOIN ( SELECT toLowCardinality(1) AS id, toLowCardinality(3) AS values ) AS d USING id;
SELECT id, toTypeName(id), value, toTypeName(value), d.id, toTypeName(d.id) FROM ( SELECT toLowCardinality(1) AS id, toLowCardinality(2) AS value ) a SEMI LEFT JOIN ( SELECT toLowCardinality(1) AS id, toLowCardinality(3) AS values ) AS d USING id;
SELECT id, toTypeName(id), value, toTypeName(value), d.values, toTypeName(d.values) FROM ( SELECT 1 AS id, 2 AS value ) a SEMI LEFT JOIN ( SELECT 1 AS id, 3 AS values ) AS d USING id;
SELECT id, toTypeName(id), value, toTypeName(value), d.values, toTypeName(d.values) FROM ( SELECT toLowCardinality(1) AS id, toLowCardinality(2) AS value ) a SEMI LEFT JOIN ( SELECT toLowCardinality(1) AS id, toLowCardinality(3) AS values ) AS d USING id;
SELECT id, u FROM t_sparse_full ORDER BY id, u LIMIT 4 SETTINGS optimize_read_in_order = 0;
SELECT id, u FROM t_sparse_full ORDER BY id, u LIMIT 4;
SELECT id, u, s FROM (SELECT number * 2 AS u FROM numbers(10)) AS t1 FULL JOIN t_sparse_full USING(u) ORDER BY id, u, s LIMIT 5;
SELECT id, u, s FROM (SELECT number * 2 AS u FROM numbers(10)) AS t1 INNER JOIN t_sparse_full USING(u) ORDER BY id, u, s LIMIT 5;
SELECT id, u, s FROM (SELECT u FROM t_sparse_full) AS t1 FULL JOIN t_sparse_full USING(u) ORDER BY id, u, s LIMIT 5;
SELECT id, u, s FROM remote('127.0.0.{1,2}', currentDatabase(), t_sparse_full) ORDER BY id, u, s LIMIT 5;
SELECT id, u, s FROM t_sparse_full FULL JOIN ( SELECT number * 3 AS u FROM numbers(10) ) AS t1 USING(u) ORDER BY id, u, s LIMIT 5;
SELECT id, u, s FROM t_sparse_full INNER JOIN ( SELECT number * 3 AS u FROM numbers(10) ) AS t1 USING(u) ORDER BY id, u, s LIMIT 5;
SELECT id, u, s FROM t_sparse_full ORDER BY u DESC LIMIT 3;
SELECT id, u, s FROM t_sparse_full WHERE u != 0 ORDER BY u DESC LIMIT 3;
SELECT id, v BETWEEN now() - INTERVAL 10 MINUTE AND now() FROM t_mutations_nondeterministic;
SELECT id, v FROM t_mutations_nondeterministic ORDER BY id;
SELECT id, value FROM test_materialized_view ORDER BY id;
SELECT id, value FROM test_table ARRAY JOIN [1, 2, 3] AS value;
SELECT id, value FROM test_table FINAL ORDER BY id;
SELECT id, value FROM test_table ORDER BY id;
SELECT id, value FROM test_table WHERE 0 IN (SELECT 1);
SELECT id, value FROM test_table WHERE id IN (SELECT 1);
SELECT id, value FROM test_table WHERE id IN (SELECT 2);
SELECT id, value FROM test_table WHERE id IN (SELECT id FROM test_table_for_in UNION DISTINCT SELECT id FROM test_table_for_in);
SELECT id, value FROM test_table WHERE id IN (SELECT id FROM test_table_for_in);
SELECT id, value FROM test_table WHERE id IN special_set_table;
SELECT id, value FROM test_table WHERE id IN test_table_for_in;
SELECT id, value FROM test_table;
SELECT id, value, _database, _table FROM 02563_db.test_merge_table ORDER BY id;
SELECT id, value, alias_value FROM test_table;
SELECT id, value, test_table.value_array FROM test_table ARRAY JOIN value_array;
SELECT id, value, value_1 FROM test_table ARRAY JOIN [1, 2, 3] AS value_1;
SELECT id, value, value_1, value_2 FROM test_table ARRAY JOIN [[1, 2, 3]] AS value_1 ARRAY JOIN value_1 AS value_2;
SELECT id, value, value_array AS value_array_array_alias FROM test_table ARRAY JOIN value_array_array_alias;
SELECT id, value, value_array AS value_array_array_alias, value_array_array_alias_element FROM test_table ARRAY JOIN value_array_array_alias AS value_array_array_alias_element;
SELECT id, value, value_array, value_array_element FROM test_table ARRAY JOIN value_array AS value_array_element;
SELECT id, value, value_array_array, value_array_array_inner_element, value_array_array_inner_element, value_array_array_inner_inner_element FROM test_table ARRAY JOIN value_array_array AS value_array_array_inner_element ARRAY JOIN value_array_array_inner_element AS value_array_array_inner_inner_element;
SELECT id, value_array, value FROM test_table ARRAY JOIN value_array AS value;
SELECT id, value_element, value FROM test_table ARRAY JOIN [[1,2,3]] AS value_element ARRAY JOIN value_element AS value;
SELECT id, yago FROM ( SELECT item_id AS id FROM t GROUP BY id ) AS ll FULL OUTER JOIN ( SELECT item_id AS id, arrayJoin([111, 222, 333, 444]), SUM(price_sold) AS yago FROM t GROUP BY id WITH TOTALS ORDER BY id ) AS rr USING (id);
SELECT id, yago FROM ( SELECT item_id AS id FROM t GROUP BY id ) AS ll FULL OUTER JOIN ( SELECT item_id AS id, arrayJoin(emptyArrayInt32()), SUM(price_sold) AS yago FROM t GROUP BY id WITH TOTALS ORDER BY id ) AS rr USING (id);
SELECT id, yago FROM ( SELECT item_id AS id, arrayJoin([111, 222, 333]) FROM t GROUP BY id WITH TOTALS ORDER BY id ) AS ll FULL OUTER JOIN ( SELECT item_id AS id, arrayJoin([111, 222, 333, 444]), SUM(price_sold) AS yago FROM t GROUP BY id WITH TOTALS ORDER BY id ) AS rr USING (id);
SELECT id, yago FROM ( SELECT item_id AS id, arrayJoin([111, 222, 333]) FROM t GROUP BY id WITH TOTALS ORDER BY id ) AS ll FULL OUTER JOIN ( SELECT item_id AS id, SUM(price_sold) AS yago FROM t GROUP BY id ) AS rr USING (id);
SELECT id, yago FROM ( SELECT item_id AS id, arrayJoin(emptyArrayInt32()) FROM t GROUP BY id WITH TOTALS ORDER BY id ) AS ll FULL OUTER JOIN ( SELECT item_id AS id, SUM(price_sold) AS yago FROM t GROUP BY id ) AS rr USING (id);
SELECT id, yago, recent FROM ( SELECT item_id AS id, SUM(price_sold) AS recent FROM t WHERE (date BETWEEN '2019-12-16' AND '2020-03-08') GROUP BY id WITH TOTALS ORDER BY id ) ll FULL JOIN ( SELECT item_id AS id, SUM(price_sold) AS yago FROM t WHERE (date BETWEEN '2018-12-17' AND '2019-03-10') GROUP BY id WITH TOTALS ORDER BY id ) rr USING (id);
SELECT id,a,_block_number,_part from test ORDER BY id;
SELECT id0, id1 FROM uuid;
select id1 from mt all inner join (select id2 as id1 from mt) as t using (id1) order by id1 settings optimize_use_projections = 1;
SELECT id1, val, key1, b, x FROM t1 ALL RIGHT JOIN tj ON t1.id1 == tj.key1 AND t1.id2 == tj.key2 ORDER BY key1 FORMAT TSVWithNames;
select id2 as id1 from mt all inner join (select id1 from mt) as t using (id1) order by id1 settings optimize_use_projections = 1;
SELECT id_1, value_1, id as id_1, value as value_1 FROM test_table;
SELECT id_alias_2, id AS id_alias, id_alias as id_alias_2 FROM test_table;
select identity((1, 2)) in ((1, 2), (3, 4));
select identity((1, 2)) in (1, 2);
select identity((1, 2)) in (select (1, 2));
select identity((1, 2)) in (select 1, 2);
SELECT identity(1 AS a) AS b, a, b;
SELECT identity(CharID) AS x FROM distributed_tbl WHERE (Date = toDate('2016-03-01')) AND (User = 1486392) AND (x = 0);
select identity(tuple(1)) in (select tuple(1));
select identity(tuple(1)) in (tuple(0), tuple(2));
select identity(tuple(1)) in (tuple(1), tuple(2));
SELECT idna, idnaEncode(idna) AS ascii FROM tab;
SELECT idna, idnaEncode(idna) AS ascii, tryIdnaEncode(ascii) AS ascii_try, idnaDecode(ascii) AS original, idnaDecode(ascii_try) AS original_try FROM tab;
SELECT idnaDecode('');
SELECT idnaDecode(NULL);
SELECT idnaEncode('');
SELECT idnaEncode('ﻱa');
SELECT idnaEncode();
SELECT idnaEncode(NULL);
SELECT if ((SELECT count(*) FROM system.contributors) > 200, 'ok', 'fail');
SELECT if (count() > 0, 'HAVE PARTS', 'NO PARTS'), _state FROM system.parts WHERE database = currentDatabase() AND table = 'data_01660' GROUP BY _state ORDER BY _state;
SELECT if();
select if(0, [cast(materialize(2.0),'Decimal(18,10)')], [cast(materialize(1.0),'Decimal(18,0)')]);
select if(0, [cast(materialize(2.0),'Decimal(18,10)')], [cast(materialize(1.0),'Decimal(18,10)')]);
select if(0, [cast(materialize(2.0),'Decimal(38,0)')], [cast(materialize(1.0),'Decimal(38,18)')]);
select if(0, [cast(materialize(2.0),'Decimal(38,18)')], [cast(materialize(1.0),'Decimal(38,18)')]);
select if(0, [cast(materialize(2.0),'Decimal(9,0)')], [cast(materialize(1.0),'Decimal(9,3)')]);
select if(0, [cast(materialize(2.0),'Decimal(9,3)')], [cast(materialize(1.0),'Decimal(9,3)')]);
select if(0, toLowCardinality('a'), 'b');
select if(0, toLowCardinality('a'), NULL);
select if(0, toLowCardinality('a'), toLowCardinality('b'));
SELECT if(0, tuple(0), tuple(1)) AS x GROUP BY x;
select if(0, y, 42) from test;
SELECT if(1 = 0, NULL, toNullable(toUInt8(0))) AS x, toTypeName(x);
SELECT if(1 = 0, toNullable(toUInt8(0)), NULL) AS x, toTypeName(x);
SELECT if(1 = 1, NULL, toNullable(toUInt8(0))) AS x, toTypeName(x);
SELECT if(1 = 1, toNullable(toUInt8(0)), NULL) AS x, toTypeName(x);
SELECT if(1, 0, throwIf(1, 'Executing FALSE branch'));
select if(1, 42, y) from test;
select if(1, [cast(materialize(2.0),'Decimal(18,0)')], [cast(materialize(1.0),'Decimal(18,10)')]);
select if(1, [cast(materialize(2.0),'Decimal(18,10)')], [cast(materialize(1.0),'Decimal(18,10)')]);
select if(1, [cast(materialize(2.0),'Decimal(38,18)')], [cast(materialize(1.0),'Decimal(38,18)')]);
select if(1, [cast(materialize(2.0),'Decimal(38,18)')], [cast(materialize(1.0),'Decimal(38,8)')]);
select if(1, [cast(materialize(2.0),'Decimal(9,3)')], [cast(materialize(1.0),'Decimal(9,0)')]);
select if(1, [cast(materialize(2.0),'Decimal(9,3)')], [cast(materialize(1.0),'Decimal(9,3)')]);
select if(1, toLowCardinality('a'), 'b');
select if(1, toLowCardinality('a'), NULL);
select if(1, toLowCardinality('a'), toLowCardinality('b'));
SELECT IF(2, NULL, 0.00009999999747378752), IF(104, 1048576, NULL), c1.key, IF(1, NULL, NULL), c2.key FROM codecTest AS c1 , codecTest AS c2 WHERE ignore(IF(255, -2, NULL), arrayJoin([65537]), IF(3, 1024, 9223372036854775807)) AND IF(NULL, 256, NULL) AND (IF(NULL, '1048576', NULL) = (c1.key - NULL)) LIMIT 65535;
select IF(3>2, 1, 0);
SELECT if(action = 'bonus', sport_amount, 0) * 100 FROM (SELECT message AS action, cast(message, 'Float64') AS sport_amount FROM test_table);
SELECT if(b = 0, 0, a / b) from nullable_division;
SELECT if(b = 0, 0, intDiv(a, b)) from nullable_division;
SELECT if(b = 0, 0, intDiv(x, b)) from nullable_division;
SELECT if(b = 0, 0, x / b) from nullable_division;
select if(cast(cast(0, 'UInt8'), 'UInt8'), y, 42) from test;
SELECT if(CAST(NULL AS Nullable(UInt8)), '2.55', NULL) AS x;
SELECT if(empty(''), 0, throwIf(1, 'Executing FALSE branch'));
SELECT if(explain like '%ReadType: Default%', 'Ok', 'Error: ' || explain) FROM ( EXPLAIN PLAN actions = 1 SELECT timestamp, value FROM mytable FINAL WHERE key = 5 ORDER BY timestamp DESC ) WHERE explain like '%ReadType%';
SELECT if(explain like '%ReadType: InOrder%', 'Ok', 'Error: ' || explain) FROM ( EXPLAIN PLAN actions = 1 SELECT timestamp, value FROM mytable FINAL WHERE key = 5 ORDER BY timestamp SETTINGS enable_vertical_final = 0 ) WHERE explain like '%ReadType%';
select if(if(number > 0, intDiv(42, number), 0), intDiv(42, number), 8) from numbers(5);
select if(in(dummy, tuple(0, 1)), 'ok', 'ok') from remote('localhost', system.one);
select if(isNull(x), Null, 42 / x) from (select CAST(materialize(Null), 'Nullable(Decimal32(2))') as x);
select if(isNull(x), Null, intDiv(42, x)) from (select CAST(materialize(Null), 'Nullable(Int64)') as x);
select if(isNull(x), Null, x / 0) from (select CAST(materialize(Null), 'Nullable(Decimal32(2))') as x);
SELECT if(materialize(0), extract(materialize(CAST('aaaaaa', 'LowCardinality(String)')), '\\w'), extract(materialize(CAST('bbbbb', 'LowCardinality(String)')), '\\w*')) AS res FROM numbers(2);
select if(materialize(0), materialize(toLowCardinality('a')), materialize('b'));
select if(materialize(0), materialize(toLowCardinality('a')), materialize(toLowCardinality('b')));
select if(materialize(0), materialize(toLowCardinality('a')), NULL);
SELECT if(materialize(1) > 0, CAST(NULL, 'Nullable(Decimal(18, 4))'), materialize(CAST(2, 'Nullable(Decimal(9, 4))')));
SELECT if(materialize(1) > 0, CAST(NULL, 'Nullable(Int64)'), materialize(toInt32(1)));
SELECT if(materialize(1) > 0, materialize(CAST(2, 'Nullable(Decimal(9, 4))')), CAST(NULL, 'Nullable(Decimal(18, 4))'));
SELECT if(materialize(1) > 0, materialize(toInt32(1)), CAST(NULL, 'Nullable(Int64)'));
select if(materialize(1), -1234567890123456789, 1234567890123456789);
SELECT if(materialize(isFinite(toUInt64OrZero(toNullable('123')))), 1, 0);
select if(number != 0, 5 * (1 + intDiv(100, number)), toInt32(exp(log(throwIf(number) + 10)))) from numbers(5);
SELECT if(number % 10 = 0, 1, 0) AS dummy, sum(dummy) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW);
SELECT if(number % 2 = 0, [toUUID('00000000-e1fe-11e9-bb8f-853d60c00749')], [toUUID('11111111-e1fe-11e9-bb8f-853d60c00749')]) FROM numbers(5);
select if(number % 2, 5 * (1 + intDiv(100, number + 1)), 3 + 10 * intDiv(100, intDiv(100, number + 1))) from numbers(10);
SELECT if(number % 2, 9223372036854775806, -9223372036854775808) AS res FROM numbers(2);
SELECT if(number % 2, 9223372036854775806, materialize(-9223372036854775808)) AS res FROM numbers(2);
SELECT if(number % 2, [9223372036854775806], [2, 65537, -9223372036854775808]) AS res FROM numbers(2);
SELECT if(number % 2, [9223372036854775806], materialize([2, 65537, -9223372036854775808])) AS res FROM numbers(2);
SELECT if(number % 2, [[9223372036854775806]], [[2, 65537, -9223372036854775808]]) AS res FROM numbers(2);
SELECT if(number % 2, [[9223372036854775806]], materialize([[2, 65537, -9223372036854775808]])) AS res FROM numbers(2);
SELECT if(number % 2, materialize(9223372036854775806), -9223372036854775808) AS res FROM numbers(2);
SELECT if(number % 2, materialize(9223372036854775806), materialize(-9223372036854775808)) AS res FROM numbers(2);
SELECT if(number % 2, materialize([9223372036854775806]), [2, 65537, -9223372036854775808]) AS res FROM numbers(2);
SELECT if(number % 2, materialize([9223372036854775806]), materialize([2, 65537, -9223372036854775808])) AS res FROM numbers(2);
SELECT if(number % 2, materialize([[9223372036854775806]]), [[2, 65537, -9223372036854775808]]) AS res FROM numbers(2);
SELECT if(number % 2, materialize([[9223372036854775806]]), materialize([[2, 65537, -9223372036854775808]])) AS res FROM numbers(2);
select if(number % 2, materialize(toLowCardinality('a')), materialize('b')) from numbers(2);
select if(number % 2, materialize(toLowCardinality('a')), materialize(toLowCardinality('a'))) from numbers(2);
select if(number % 2, materialize(toLowCardinality('a')), NULL) from numbers(2);
SELECT if(number % 2, NULL, toNullable(1)) FROM numbers(2);
SELECT if(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 2)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;
SELECT if(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 5)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;
select if(number % 2, toLowCardinality('a'), 'b') from numbers(2);
select if(number % 2, toLowCardinality('a'), NULL) from numbers(2);
select if(number % 2, toLowCardinality('a'), toLowCardinality('b')) from numbers(2);
select if(number % 2, toLowCardinality(number), NULL) from numbers(2);
select if(number % 2, toLowCardinality(number), toLowCardinality(number + 1)) from numbers(2);
SELECT if(number % 2, toNullable(1), NULL) FROM numbers(2);
SELECT if(number % 2, tuple(0, 'Hello'), tuple(1, 'World')) AS x, count() FROM (SELECT number FROM system.numbers LIMIT 10) GROUP BY x ORDER BY x;
select if(number % 5 == 0, Null, repeat(toString(number), 2)) from numbers(20);
select if(number % 5 == 0, Null, toDateOrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toDateTimeOrZero(toString(number * 10000), 'UTC')) from numbers(20);
select if(number % 5 == 0, Null, toDecimal128OrZero(toString(number), 5)) from numbers(20);
select if(number % 5 == 0, Null, toDecimal256OrZero(toString(number), 5)) from numbers(20);
select if(number % 5 == 0, Null, toDecimal32OrZero(toString(number), 5)) from numbers(20);
select if(number % 5 == 0, Null, toDecimal64OrZero(toString(number), 5)) from numbers(20);
select if(number % 5 == 0, Null, toFixedString(toString(number + 10), 2)) from numbers(20);
select if(number % 5 == 0, Null, toFloat32OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toFloat64OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toInt128OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toInt256OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toInt32OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toInt64OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toInt8OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toUInt128OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toUInt256OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toUInt32OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toUInt64OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, Null, toUInt8OrZero(toString(number))) from numbers(20);
select if(number % 5 == 0, range(number), range(number + 1)) from numbers(20);
select if(number % 5 == 0, repeat(toString(number), 2), Null) from numbers(20);
select if(number % 5 == 0, repeat(toString(number), 2), repeat(toString(number + 1), 2)) from numbers(20);
select if(number % 5 == 0, replicate(toString(number), range(number)), replicate(toString(number), range(number + 1))) from numbers(20);
select if(number % 5 == 0, toDateOrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toDateOrZero(toString(number)), toDateOrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toDateTimeOrZero(toString(number * 10000), 'UTC'), Null) from numbers(20);
select if(number % 5 == 0, toDateTimeOrZero(toString(number * 10000), 'UTC'), toDateTimeOrZero(toString((number + 1) * 10000), 'UTC')) from numbers(20);
select if(number % 5 == 0, toDecimal128OrZero(toString(number), 5), Null) from numbers(20);
select if(number % 5 == 0, toDecimal128OrZero(toString(number), 5), toDecimal128OrZero(toString(number + 1), 5)) from numbers(20);
select if(number % 5 == 0, toDecimal256OrZero(toString(number), 5), Null) from numbers(20);
select if(number % 5 == 0, toDecimal256OrZero(toString(number), 5), toDecimal256OrZero(toString(number + 1), 5)) from numbers(20);
select if(number % 5 == 0, toDecimal32OrZero(toString(number), 5), Null) from numbers(20);
select if(number % 5 == 0, toDecimal32OrZero(toString(number), 5), toDecimal32OrZero(toString(number + 1), 5)) from numbers(20);
select if(number % 5 == 0, toDecimal64OrZero(toString(number), 5), Null) from numbers(20);
select if(number % 5 == 0, toDecimal64OrZero(toString(number), 5), toDecimal64OrZero(toString(number + 1), 5)) from numbers(20);
select if(number % 5 == 0, toFixedString(toString(number + 10), 2), Null) from numbers(20);
select if(number % 5 == 0, toFixedString(toString(number + 10), 2), toFixedString(toString(number + 11), 2)) from numbers(20);
select if(number % 5 == 0, toFloat32OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toFloat32OrZero(toString(number)), toFloat32OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toFloat64OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toFloat64OrZero(toString(number)), toFloat64OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toInt128OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toInt128OrZero(toString(number)), toInt128OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toInt256OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toInt256OrZero(toString(number)), toInt256OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toInt32OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toInt32OrZero(toString(number)), toInt32OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toInt64OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toInt64OrZero(toString(number)), toInt64OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toInt8OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toInt8OrZero(toString(number)), toInt8OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toUInt128OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toUInt128OrZero(toString(number)), toUInt128OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toUInt256OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toUInt256OrZero(toString(number)), toUInt256OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toUInt32OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toUInt32OrZero(toString(number)), toUInt32OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toUInt64OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toUInt64OrZero(toString(number)), toUInt64OrZero(toString(number + 1))) from numbers(20);
select if(number % 5 == 0, toUInt8OrZero(toString(number)), Null) from numbers(20);
select if(number % 5 == 0, toUInt8OrZero(toString(number)), toUInt8OrZero(toString(number + 1))) from numbers(20);
select if(number % 5, Null, repeat(toString(number), 2)) from numbers(20);
select if(number % 5, Null, toDateOrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toDateTimeOrZero(toString(number * 10000), 'UTC')) from numbers(20);
select if(number % 5, Null, toDecimal128OrZero(toString(number), 5)) from numbers(20);
select if(number % 5, Null, toDecimal256OrZero(toString(number), 5)) from numbers(20);
select if(number % 5, Null, toDecimal32OrZero(toString(number), 5)) from numbers(20);
select if(number % 5, Null, toDecimal64OrZero(toString(number), 5)) from numbers(20);
select if(number % 5, Null, toFixedString(toString(number + 10), 2)) from numbers(20);
select if(number % 5, Null, toFloat32OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toFloat64OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toInt128OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toInt256OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toInt32OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toInt64OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toInt8OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toUInt128OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toUInt256OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toUInt32OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toUInt64OrZero(toString(number))) from numbers(20);
select if(number % 5, Null, toUInt8OrZero(toString(number))) from numbers(20);
select if(number < 0, toFixedString(materialize('123'), 2), NULL) from numbers(2);
select if(number = 0, 0, toDecimal32(42, 2) / number) from numbers(5);
select if(number > 0, 42 / toDecimal32(number, 2), 0) from numbers(5);
select if(number > 0, intDiv(42, number), 0), if(number = 0, 0, intDiv(42, number)) from numbers(5);
select if(number > 0, intDiv(42, number), 1) from numbers(5);
select if(number > 0, intDiv(number + 100, number), throwIf(number)) from numbers(10);
select if(number >= 0, if(number != 0, intDiv(1, number), 1), 1) from numbers(5);
select if(number%4 ==1 or number%8==7, null, number) as offset, if(number%4==2 or number%8==7, null, number) as length,if(number%4 ==3, null, 'Hello') as s, subString(bin(s), offset, length), bin(bitSlice(s, offset , length)) from numbers(16);
select if(number%4 ==1 or number%8==7, null, number) as offset, if(number%4==2 or number%8==7, null, number) as length,if(number%4 ==3, null, toFixedString('Hello', 6)) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset , length)) from numbers(16);
select if(SrcAS in (select SrcAS from flows group by SrcAS order by sum(Bytes) desc limit 10) , SrcAS, 33) as SrcAS from flows where 2 == 2 order by SrcAS;
select if(t0.country is null ,t2.country,t0.country) "country" from without_nullable t0 right outer join with_nullable t2 on t0.country=t2.country;
select if(toLowCardinality(number) % 2, number, number + 1) from numbers(10);
SELECT if(toUInt8(0), NULL, toNullable(toUInt8(0))) AS x, if(x = 0, 'ok', 'fail');
SELECT if(toUInt8(0), toNullable(toUInt8(0)), NULL) AS x, if(x = 0, 'fail', 'ok');
select if(toUInt8(0), y, 42) from test;
select if(toUInt8(1), 42, y) from test;
SELECT if(toUInt8(1), NULL, toNullable(toUInt8(0))) AS x, if(x = 0, 'fail', 'ok');
SELECT if(toUInt8(1), toNullable(toUInt8(0)), NULL) AS x, if(x = 0, 'ok', 'fail');
select if(toUInt8(toUInt8(0)), y, 42) from test;
select if(true, if(lowerUTF8(arr.key) = 'a', 1, 2), 3) as x from t left array join arr;
SELECT if(x = 0, 'fail', 'ok') FROM (SELECT CAST(NULL, 'Nullable(UInt8)') AS x);
SELECT if(x = 0, 'fail', 'ok') FROM (SELECT if(toUInt8(0), toNullable(toUInt8(0)), NULL) AS x);
SELECT if(x = 0, 'fail', 'ok') FROM (SELECT if(toUInt8(1), NULL, toNullable(toUInt8(0))) AS x);
SELECT if(x = 0, 'fail', 'ok') FROM (SELECT materialize(CAST(NULL, 'Nullable(UInt8)')) AS x);
SELECT if(x = 0, 'ok', 'fail') FROM (SELECT if(toUInt8(0), NULL, toNullable(toUInt8(0))) AS x);
SELECT if(x = 0, 'ok', 'fail') FROM (SELECT if(toUInt8(1), toNullable(toUInt8(0)), NULL) AS x);
SELECT if(x = 0, 'ok', 'fail') FROM (SELECT toNullable(toUInt8(0)) AS x);
SELECT if(xxx = 'x', ([2], 3), ([3], 4)) FROM agg_table;
SELECT if(xxx = 'x', ([2], 3), ([3], 4, 'q', 'w', 7)) FROM agg_table;
SELECT if(y = 0, 0, a / y) from nullable_division;
SELECT if(y = 0, 0, intDiv(a, y)) from nullable_division;
SELECT if(y = 0, 0, intDiv(x, y)) from nullable_division;
SELECT if(y = 0, 0, x % y) from nullable_division;
SELECT ifNotFinite(-1 / 0, 2);
SELECT ifNotFinite(-1.0, 2);
SELECT ifNotFinite(1, 2);
SELECT ifNotFinite(12345678901234567890, -12345678901234567890);
SELECT ifNotFinite(log(0), NULL);
SELECT ifNotFinite(nan, 2);
SELECT ifNotFinite(round(1 / number, 2), 111) FROM numbers(10);
SELECT ifNotFinite(sqrt(-1), -42);
SELECT ifNull('x', 'y') AS res, toTypeName(res);
SELECT ifNull('x', toNullable('y')) AS res, toTypeName(res);
SELECT ifNull(1, NULL) AS res, toTypeName(res);
SELECT ifNull(materialize('x'), materialize('y')) AS res, toTypeName(res);
SELECT ifNull(materialize('x'), toNullable('y')) AS res, toTypeName(res);
SELECT ifNull(NULL, 1) AS res, toTypeName(res);
SELECT ifNull(NULL, NULL) AS res, toTypeName(res);
SELECT ifNull(NULL, toDecimal32(3, 0)), ifNull(NULL, toDecimal64(3, 0)), ifNull(NULL, toDecimal128(3, 0));
SELECT ifNull(NULL, toNullable(toDecimal32(4, 0))), ifNull(NULL, toNullable(toDecimal64(4, 0))), ifNull(NULL, toNullable(toDecimal128(4, 0)));
SELECT ifNull(nullIf(toString(number), '1'), nullIf(toString(-number), '-3')) AS res, toTypeName(res) FROM system.numbers LIMIT 5;
SELECT IFNULL(NULLIF(toString(number), '1'), NULLIF(toString(-number), '-3')) AS res, toTypeName(res) FROM system.numbers LIMIT 5;
SELECT ifNull(nullIf(toString(number), '1'), toString(-number)) AS res, toTypeName(res) FROM system.numbers LIMIT 5;
SELECT ifNull(toDecimal32(1, 0), NULL), ifNull(toDecimal64(1, 0), NULL), ifNull(toDecimal128(1, 0), NULL);
SELECT ifNull(toNullable('x'), 'y') AS res, toTypeName(res);
SELECT ifNull(toNullable('x'), materialize('y')) AS res, toTypeName(res);
SELECT ifNull(toNullable('x'), toNullable('y')) AS res, toTypeName(res);
SELECT ifNull(toNullable(toDecimal32(2, 0)), NULL), ifNull(toNullable(toDecimal64(2, 0)), NULL), ifNull(toNullable(toDecimal128(2, 0)), NULL);
SELECT ifNull(toString(number), nullIf(toString(-number), '-3')) AS res, toTypeName(res) FROM system.numbers LIMIT 5;
SELECT ifNull(toString(number), toString(-number)) AS res, toTypeName(res) FROM system.numbers LIMIT 5;
SELECT ignore(*) FROM ( SELECT uId, user.id as `uuu` FROM order LEFT ANY JOIN user ON uId = `uuu` );
SELECT ignore(*) FROM order LEFT ANY JOIN user ON uId = user.id LEFT ANY JOIN product ON pId = product.id;
SELECT ignore(10, ignore(*), ignore(ignore(-2, 1025, *)), NULL, *), * FROM lc_null_int8_defnull AS values;
select ignore(_part) from tab_00712_1 prewhere b = 2;
SELECT ignore(addDays((CAST((96.338) AS DateTime)), -3));
SELECT ignore(addDays(toDate(0), -1));
SELECT ignore(addDays(toDateTime(0), -1));
SELECT ignore(blockSerializedSize((1, 1)));
SELECT ignore(CAST((arrayMap(k -> toString(k), mapKeys(uniqMapMerge(uniq_tags_ids) AS m)), mapValues(m)), 'Map(String, UInt32)')) FROM segfault_mv;
select ignore(date), s3 from t1 where s2='bbb';
SELECT ignore(finalizeAggregation(Users)) FROM (SELECT FlightDate, Carrier, uniqState(FlightNum) AS Users FROM ontime GROUP BY FlightDate, Carrier LIMIT 1);
SELECT ignore(groupArray(number), 'test memory profiler') FROM numbers(10000000) SETTINGS log_comment = '01092_memory_profiler';
SELECT ignore(lcm(-256, 9223372036854775807));
SELECT ignore(lcm(256, -9223372036854775807));
SELECT ignore(number) FROM numbers(256) ORDER BY arrayFilter(x -> materialize(255), materialize(['257'])) LIMIT 1;
SELECT ignore(rand() AS k), ignore(max(toString(number))) FROM numbers_10k_log GROUP BY k LIMIT 1;
SELECT ignore(subtractDays((CAST((-5263074.47) AS DateTime)), -737895));
SELECT ignore(subtractDays(toDate(0), 1));
SELECT ignore(subtractDays(toDateTime(0), 1));
SELECT ignore(toDateTime64(1111111111222, 3, 'Asia/Istanbul'));
SELECT ignore(toLowCardinality(1), toLowCardinality(2), 3);
select ignore(x) from (select groupArray(number) x from numbers(3355443)) group by x format Null;
SELECT ignore(x), count() FROM (SELECT number AS x FROM system.numbers LIMIT 1000 UNION ALL SELECT number AS x FROM system.numbers LIMIT 1000) GROUP BY x WITH TOTALS LIMIT 10 FORMAT JSONCompact;
SELECT ignore(x), count() FROM (SELECT number AS x FROM system.numbers LIMIT 1000 UNION ALL SELECT number AS x FROM system.numbers LIMIT 1000) GROUP BY x WITH TOTALS ORDER BY x LIMIT 10 FORMAT JSONCompact;
select in((1, 1, 1, 1));
SELECT indexOf(a, toDecimal128(0.1, 3)) FROM decimal;
SELECT indexOf(a, toDecimal32(0.1, 2)) FROM decimal;
SELECT indexOf(a, toDecimal32(0.1, 3)), indexOf(a, toDecimal32(1.0, 3)) FROM decimal;
SELECT indexOf(a, toDecimal32(0.1, 4)) FROM decimal;
SELECT indexOf(a, toDecimal64(0.1, 3)) FROM decimal;
SELECT indexOf(b, toDecimal128(0.4, 3)) FROM decimal;
SELECT indexOf(b, toDecimal32(0.4, 3)) FROM decimal;
SELECT indexOf(b, toDecimal64(0.4, 2)) FROM decimal;
SELECT indexOf(b, toDecimal64(0.4, 4)) FROM decimal;
SELECT indexOf(b, toDecimal64(0.5, 3)), indexOf(b, toDecimal64(1.0, 3)) FROM decimal;
SELECT indexOf(c, toDecimal128(0.7, 2)) FROM decimal;
SELECT indexOf(c, toDecimal128(0.7, 4)) FROM decimal;
SELECT indexOf(c, toDecimal128(0.9, 3)), indexOf(c, toDecimal128(1.0, 3)) FROM decimal;
SELECT indexOf(c, toDecimal32(0.7, 3)) FROM decimal;
SELECT indexOf(c, toDecimal64(0.7, 3)) FROM decimal;
SELECT INET_ATON('192.168.0.1');
SELECT INET_NTOA(toUInt32(1337));
SELECT inf as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=0;
SELECT inf as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=1;
SELECT inf;
SELECT Inf;
SELECT INF;
SELECT info FROM (SELECT 1 AS info);
select initcap('');
select initcap('42oK');
select initcap('CRC32IEEE is the best function');
select initcap('hello world');
select initcap('Hello');
select initcap('hello');
select initcap('yeah, well, i`m gonna go build my own theme park');
select initcapUTF8('');
select initcapUTF8('Hello');
select initcapUTF8('We dont support cases when lowercase and uppercase characters occupy different number of bytes in UTF-8. As an example, this happens for ß and ẞ.');
select initcapUTF8('yeah, well, i`m gonna go build my own theme park');
select initcapUTF8('ätsch, bätsch');
select initcapUTF8('привет, как дела?');
SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [-1, 10, null]);
SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [-1, null, 10]);
SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [-1, null, null]);
SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [null, null, null]);
select initializeAggregation('sumMap', [1, 2], [1, 2], [1, null]);
SELECT initializeAggregation('uniqExactState', toNullable('foo')) = arrayReduce('uniqExactState', [toNullable('foo')]);
SELECT initializeAggregation('uniqExactState', toNullable(123)) = arrayReduce('uniqExactState', [toNullable(123)]);
select initializeAggregation('uniqStateForEach', [1, 2]);
select initializeAggregation('uniqStateForEachMapForEach', [map(1, [2])]);
select initializeAggregation('uniqStateMap', map(1, 2));
select INSTR('hello', 'e');
select INSTR('hELlo', 'L');
SELECT intDiv((5,4), 2);
SELECT intDiv(-1, number) FROM numbers(1, 10);
select intDiv(-9223372036854775808, 18446744073709551615);
select intDiv(-9223372036854775808, 255);
select intDiv(-9223372036854775808, 4294967295);
select intDiv(-9223372036854775808, 65535);
SELECT intDiv(1, 0.3);
SELECT intDiv(1, CAST(1, 'Nullable(Decimal(7, 2))'));
SELECT intDiv(1, CAST(1, 'Nullable(Float32)'));
SELECT intDiv(1, CAST(1, 'Nullable(UInt32)'));
SELECT intDiv(1, CAST(materialize(1), 'Nullable(Decimal(7, 2))'));
SELECT intDiv(1, CAST(materialize(1), 'Nullable(Float32)'));
SELECT intDiv(1, CAST(materialize(1), 'Nullable(UInt32)'));
SELECT intDiv(1, CAST(materialize(NULL), 'Nullable(Decimal(7, 2))'));
SELECT intDiv(1, CAST(materialize(NULL), 'Nullable(Float32)'));
SELECT intDiv(1, CAST(materialize(NULL), 'Nullable(UInt32)'));
SELECT intDiv(1, CAST(NULL, 'Nullable(Decimal(7, 2))'));
SELECT intDiv(1, CAST(NULL, 'Nullable(Float32)'));
SELECT intDiv(1, CAST(NULL, 'Nullable(UInt32)'));
SELECT intDiv(1.0, 0.3);
SELECT intDiv(10, 4);
SELECT intDiv(10, 4.);
SELECT intDiv(10., 4);
SELECT intDiv(10., 4.);
SELECT intDiv(9223372036854775807, 0.9998999834060669);
SELECT intDiv(b, c) FROM test_filter PREWHERE c != 0 WHERE b%2 != 0;
SELECT intDiv(b, c) FROM test_filter PREWHERE c != 0;
SELECT intDiv(materialize(1), CAST(1, 'Nullable(Decimal(7, 2))'));
SELECT intDiv(materialize(1), CAST(1, 'Nullable(Float32)'));
SELECT intDiv(materialize(1), CAST(1, 'Nullable(UInt32)'));
SELECT intDiv(materialize(1), CAST(materialize(1), 'Nullable(Decimal(7, 2))'));
SELECT intDiv(materialize(1), CAST(materialize(1), 'Nullable(Float32)'));
SELECT intDiv(materialize(1), CAST(materialize(1), 'Nullable(UInt32)'));
SELECT intDiv(materialize(1), CAST(materialize(NULL), 'Nullable(Decimal(7, 2))'));
SELECT intDiv(materialize(1), CAST(materialize(NULL), 'Nullable(Float32)'));
SELECT intDiv(materialize(1), CAST(materialize(NULL), 'Nullable(UInt32)'));
SELECT intDiv(materialize(1), CAST(NULL, 'Nullable(Decimal(7, 2))'));
SELECT intDiv(materialize(1), CAST(NULL, 'Nullable(Float32)'));
SELECT intDiv(materialize(1), CAST(NULL, 'Nullable(UInt32)'));
select intDiv(materialize(toInt32(1)), -0x100000000);
select intDiv(materialize(toInt32(1)), -9223372036854775808);
select intDiv(materialize(toInt32(1)), 0x100000000);
SELECT intDiv(number, -number) FROM numbers(1, 10);
SELECT intDiv(number, 2) AS k, count(), argMax(toString(number), number) FROM (SELECT * FROM remote('127.0.0.{2,3}', currentDatabase(), numbers500k) ORDER BY number) GROUP BY k WITH TOTALS ORDER BY k LIMIT 10;
SELECT intDiv(number, 2) AS k, count(), argMax(toString(number), number) FROM (SELECT number FROM system.numbers LIMIT 500000) GROUP BY k WITH TOTALS ORDER BY k LIMIT 10;
SELECT intDiv(number, NULL) AS k FROM (SELECT * FROM remote('127.0.0.{2,3}', currentDatabase(), numbers500k) PREWHERE 31 WHERE 65537 > 0 ORDER BY number DESC NULLS FIRST) GROUP BY GROUPING SETS ((k)) WITH TOTALS ORDER BY k ASC NULLS LAST LIMIT 2147483648;
select intDiv(toInt128(-1), toInt128(-1)) x, intDiv(toInt256(-1), toInt128(-1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toInt16(-1)) x, intDiv(toInt256(-1), toInt16(-1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toInt256(-1)) x, intDiv(toInt256(-1), toInt256(-1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toInt32(-1)) x, intDiv(toInt256(-1), toInt32(-1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toInt64(-1)) x, intDiv(toInt256(-1), toInt64(-1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toInt8(-1)) x, intDiv(toInt256(-1), toInt8(-1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toUInt16(1)) x, intDiv(toInt256(-1), toUInt16(1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toUInt256(1)) x, intDiv(toInt256(-1), toUInt256(1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toUInt32(1)) x, intDiv(toInt256(-1), toUInt32(1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toUInt64(1)) x, intDiv(toInt256(-1), toUInt64(1)) y, toTypeName(x), toTypeName(y);
select intDiv(toInt128(-1), toUInt8(1)) x, intDiv(toInt256(-1), toUInt8(1)) y, toTypeName(x), toTypeName(y);
SELECT intDiv(toInt32(number), -1) FROM numbers(1, 10);
SELECT intDiv(toInt64(number), -1) FROM numbers(1, 10);
SELECT intDiv(toInt64(number), -1) FROM numbers(9223372036854775807, 10);
SELECT intDivOrZero((5,4), 0);
SELECT intDivOrZero((5,4), 2);
SELECT intDivOrZero(-1, number) FROM numbers(1, 10);
select intDivOrZero(-127, -1) = 127;
select intDivOrZero(-128, -1) = 0;
select intDivOrZero(0, 0) = 0;
select intDivOrZero(1, 1) = 1;
select intDivOrZero(4, 2) = 2;
SELECT intDivOrZero(number, -number) FROM numbers(1, 10);
SELECT intDivOrZero(toInt32(number), -1) FROM numbers(1, 10);
SELECT intDivOrZero(toInt64(number), -1) FROM numbers(1, 10);
select interval '1 day' - interval '1 hour';
SELECT INTERVAL '2 day';
SELECT INTERVAL '2 days';
SELECT INTERVAL '2 hour';
SELECT INTERVAL '2 hours';
SELECT INTERVAL '2 minute';
SELECT INTERVAL '2 minutes';
SELECT INTERVAL '2 month';
SELECT INTERVAL '2 months';
SELECT INTERVAL '2 week';
SELECT INTERVAL '2 weeks';
SELECT INTERVAL '2 year';
SELECT INTERVAL '2 years';
SELECT INTERVAL '2' AS n minute;
SELECT INTERVAL '2' day;
SELECT INTERVAL '2' hour;
SELECT INTERVAL '2' minute;
SELECT INTERVAL '2' month;
SELECT INTERVAL '2' week;
SELECT INTERVAL '2' year;
select interval 1 day + interval 1 hour;
select interval 1 day, interval 1 week, interval 1 month;
select interval 1 quarter, interval 1 year;
select interval 1 second, interval 1 minute, interval 1 hour;
SELECT INTERVAL 100 - number * 20 DAY + toDate32('2217-01-01') AS x FROM system.numbers LIMIT 10;
SELECT INTERVAL 2 day;
SELECT INTERVAL 2 days;
SELECT INTERVAL 2 hour;
SELECT INTERVAL 2 hours;
SELECT INTERVAL 2 minute;
SELECT INTERVAL 2 minutes;
SELECT INTERVAL 2 month;
SELECT INTERVAL 2 months;
SELECT INTERVAL 2 week;
SELECT INTERVAL 2 weeks;
SELECT INTERVAL 2 year;
SELECT INTERVAL 2 years;
SELECT INTERVAL number * 4 - 20 MONTH + toDate32('2217-01-01') AS x FROM system.numbers LIMIT 10;
SELECT INTERVAL number * 4 - 20 YEAR + toDate32('2217-01-01') AS x FROM system.numbers LIMIT 10;
SELECT INTERVAL number - 15 MONTH + toDate('2017-01-01') AS x FROM system.numbers LIMIT 30;
SELECT INTERVAL number - 15 YEAR + toDate('2017-01-01') AS x FROM system.numbers LIMIT 30;
SELECT intervalLengthSum(x, y) FROM values('x Int64, y Int64', (0, 10), (5, 5), (5, 6), (1, -1));
SELECT ip IN ('1.1.1.1') FROM test order by ip;
SELECT ip IN IPv4StringToNum('1.1.1.1') FROM test order by ip;
SELECT ip IN IPv4StringToNum('8.8.8.8') FROM test order by ip;
SELECT ip, ipv4 FROM test_table_ipv4;
SELECT ip, ipv6 FROM test_table_ipv4_materialized;
SELECT ip, ipv6 FROM test_table_ipv6;
SELECT ip, ipv6 FROM test_table_ipv6_materialized;
select ip, ipv6,cblock, cblock1,is_ipv6, cutIPv6(ipv6, 10, 1) from ipv6_test26473;
SELECT ipv4_, hex(ipv4_) FROM ipv4_test ORDER BY ipv4_;
SELECT IPv4CIDRToRange(toIPv4('0.0.0.0'), 8);
SELECT IPv4CIDRToRange(toIPv4('192.168.5.2'), 0);
SELECT IPv4CIDRToRange(toIPv4('192.168.5.2'), 32);
SELECT IPv4CIDRToRange(toIPv4('255.0.0.0'), 4);
SELECT IPv4CIDRToRange(toIPv4('255.0.0.0'), toUInt8(4 + number)) FROM numbers(2);
SELECT IPv4CIDRToRange(toIPv4('255.255.255.255'), 8);
select IPv4NumToString(materialize(toUInt32(0))) == materialize('0.0.0.0');
select IPv4NumToString(materialize(toUInt32(0x7f000001))) == materialize('127.0.0.1');
select IPv4NumToString(toUInt32(0)) == '0.0.0.0';
select IPv4NumToString(toUInt32(0x7f000001)) == '127.0.0.1';
select IPv4NumToStringClassC(0x7f000001) = '127.0.0.xxx';
select IPv4NumToStringClassC(toUInt32(0)) = '0.0.0.xxx';
select IPv4StringToNum('') == 0;
SELECT IPv4StringToNum('');
select IPv4StringToNum('127.0.0.1' as p) == (0x7f000001 as n), IPv4NumToString(n) == p;
SELECT IPv4StringToNum('127.0.0.1');
select IPv4StringToNum('not an ip string') == 0;
SELECT IPv4StringToNum('test');
select IPv4StringToNum(CAST(NULL, 'Nullable(String)'));
select IPv4StringToNum(materialize('')) == 0;
select IPv4StringToNum(materialize('127.0.0.1') as p) == (materialize(0x7f000001) as n), IPv4NumToString(n) == p;
select IPv4StringToNum(materialize('not an ip string')) == 0;
select IPv4StringToNum(number % 2 ? '0.0.0.0' : NULL) from numbers(2);
SELECT IPv4StringToNumOrDefault('127.0.0.1');
SELECT IPv4StringToNumOrNull('127.0.0.1');
SELECT IPv4StringToNumOrNull('test');
SELECT ipv6_, hex(ipv6_) FROM ipv6_test ORDER BY ipv6_;
SELECT IPv6CIDRToRange(1, 1);
SELECT IPv6CIDRToRange(IPv6StringToNum('0000:0000:0000:0000:0000:0000:0000:0000'), 8);
SELECT IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 0);
SELECT IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 128) = IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 200) ;
SELECT IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 128);
SELECT IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), toUInt8(128 - number)) FROM numbers(2);
SELECT IPv6CIDRToRange(IPv6StringToNum('ffff:0000:0000:0000:0000:0000:0000:0000'), 4);
SELECT IPv6CIDRToRange(IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'), 64);
SELECT IPv6NumToString(bitAnd(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334'), IPv6StringToNum('ffff:ffff:ffff:0000:0000:0000:0000:0000'))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitAnd(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334'), materialize(IPv6StringToNum('ffff:ffff:ffff:0000:0000:0000:0000:0000')))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitAnd(materialize(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334')), IPv6StringToNum('ffff:ffff:ffff:0000:0000:0000:0000:0000'))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitNot(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334'))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitOr(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334'), IPv6StringToNum('2ff0:0000:0000:0000:0000:0000:0000:0000'))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitOr(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334'), materialize(IPv6StringToNum('2ff0:0000:0000:0000:0000:0000:0000:0000')))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitOr(materialize(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334')), IPv6StringToNum('2ff0:0000:0000:0000:0000:0000:0000:0000'))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitXor(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334'), IPv6StringToNum('fe80::1ff:fe23:4567:890a'))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitXor(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334'), materialize(IPv6StringToNum('fe80::1ff:fe23:4567:890a')))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(bitXor(materialize(IPv6StringToNum('2001:0db8:85a3:8d3a:b2da:8a2e:0370:7334')), IPv6StringToNum('fe80::1ff:fe23:4567:890a'))) FROM system.numbers LIMIT 10;
SELECT IPv6NumToString(ip), cidr, IPv6CIDRToRange(ip, cidr) FROM ipv6_range;
select IPv6NumToString(IPv6StringToNum('::ffff:127.0.0.1' as p) as n) == p;
select IPv6NumToString(IPv6StringToNum(materialize('::ffff:127.0.0.1') as p) as n) == p;
select IPv6NumToString(toFixedString('', 16)) == '::';
select IPv6NumToString(toFixedString(materialize(''), 16)) == materialize('::');
select IPv6NumToString(toFixedString(unhex('20010DB800000003000001FF0000002E'), 16)) == '2001:db8:0:3:0:1ff:0:2e';
select IPv6NumToString(toFixedString(unhex(materialize('20010DB800000003000001FF0000002E')), 16)) == materialize('2001:db8:0:3:0:1ff:0:2e');
select IPv6StringToNum('') == toFixedString(materialize(''), 16);
SELECT IPv6StringToNum('');
SELECT IPv6StringToNum('::ffff:127.0.0.1');
select IPv6StringToNum('not an ip string') == toFixedString(materialize(''), 16);
SELECT IPv6StringToNum('test');
select IPv6StringToNum(CAST(NULL, 'Nullable(String)'));
select IPv6StringToNum(materialize('')) == toFixedString(materialize(''), 16);
select IPv6StringToNum(materialize('not an ip string')) == toFixedString(materialize(''), 16);
select IPv6StringToNum(number % 2 ? '0000:0000:0000:0000:0000:0000:0000:0000' : NULL) from numbers(2);
SELECT IPv6StringToNumOrDefault('::ffff:127.0.0.1');
SELECT IPv6StringToNumOrNull('::ffff:127.0.0.1');
SELECT IPv6StringToNumOrNull('test');
select is_blocked, error_count, data_files, data_compressed_bytes, broken_data_files, broken_data_compressed_bytes from system.distribution_queue where database = currentDatabase();
select is_blocked, error_count, data_files, data_compressed_bytes>100, broken_data_files, broken_data_compressed_bytes from system.distribution_queue where database = currentDatabase();
SELECT is_done FROM system.mutations where database = currentDatabase() and table = 'table_for_synchronous_mutations1';
SELECT is_done FROM system.mutations where database = currentDatabase() and table = 'table_for_synchronous_mutations_no_replication';
SELECT is_done FROM system.mutations WHERE table = 'mmm' and database=currentDatabase();
SELECT isConstant('a' = 'b');
SELECT isConstant((SELECT 1));
select isConstant();
SELECT isConstant(01856_test_function_0(1, 2, 3));
select isConstant(1);
select isConstant([1]);
select isConstant(arrayJoin([1]));
SELECT isConstant(arrayJoin([NULL]) AND 1);
SELECT isConstant(format('{}, world', 'Hello'));
select isConstant(getMacro('test'));
SELECT isConstant(materialize(NULL));
SELECT isConstant(NULL);
SELECT isConstant(x) FROM (SELECT 1 x UNION ALL SELECT 2);
SELECT isConstant(x) FROM (SELECT 1 x);
SELECT isDecimalOverflow(materialize(toDecimal128('99999999999999999999999999999999999999', 0)) + 1, 38), isDecimalOverflow(materialize(toDecimal128('99999999999999999999999999999999999999', 0)) + 1), isDecimalOverflow(materialize(toDecimal128('-99999999999999999999999999999999999999', 0)) - 1, 38), isDecimalOverflow(materialize(toDecimal128('-99999999999999999999999999999999999999', 0)) - 1);
SELECT isDecimalOverflow(materialize(toDecimal128('99999999999999999999999999999999999999', 0)), 37), isDecimalOverflow(materialize(toDecimal128('10', 0)), 1), isDecimalOverflow(materialize(toDecimal128('1', 0)), 0), isDecimalOverflow(materialize(toDecimal128('-99999999999999999999999999999999999999', 0)), 37), isDecimalOverflow(materialize(toDecimal128('-10', 0)), 1), isDecimalOverflow(materialize(toDecimal128('-1', 0)), 0);
SELECT isDecimalOverflow(materialize(toDecimal128('99999999999999999999999999999999999999', 0)), 38), isDecimalOverflow(materialize(toDecimal128('99999999999999999999999999999999999999', 0))), isDecimalOverflow(materialize(toDecimal128('-99999999999999999999999999999999999999', 0)), 38), isDecimalOverflow(materialize(toDecimal128('-99999999999999999999999999999999999999', 0)));
SELECT isDecimalOverflow(materialize(toDecimal32(1000000000, 0)), 9), isDecimalOverflow(materialize(toDecimal32(1000000000, 0))), isDecimalOverflow(materialize(toDecimal32(-1000000000, 0)), 9), isDecimalOverflow(materialize(toDecimal32(-1000000000, 0)));
SELECT isDecimalOverflow(materialize(toDecimal32(999999999, 0)), 8), isDecimalOverflow(materialize(toDecimal32(10, 0)), 1), isDecimalOverflow(materialize(toDecimal32(1, 0)), 0), isDecimalOverflow(materialize(toDecimal32(-999999999, 0)), 8), isDecimalOverflow(materialize(toDecimal32(-10, 0)), 1), isDecimalOverflow(materialize(toDecimal32(-1, 0)), 0);
SELECT isDecimalOverflow(materialize(toDecimal32(999999999, 0)), 9), isDecimalOverflow(materialize(toDecimal32(999999999, 0))), isDecimalOverflow(materialize(toDecimal32(-999999999, 0)), 9), isDecimalOverflow(materialize(toDecimal32(-999999999, 0)));
SELECT isDecimalOverflow(materialize(toDecimal64(1000000000000000000, 0)), 18), isDecimalOverflow(materialize(toDecimal64(1000000000000000000, 0))), isDecimalOverflow(materialize(toDecimal64(-1000000000000000000, 0)), 18), isDecimalOverflow(materialize(toDecimal64(-1000000000000000000, 0)));
SELECT isDecimalOverflow(materialize(toDecimal64(999999999999999999, 0)), 17), isDecimalOverflow(materialize(toDecimal64(10, 0)), 1), isDecimalOverflow(materialize(toDecimal64(1, 0)), 0), isDecimalOverflow(materialize(toDecimal64(-999999999999999999, 0)), 17), isDecimalOverflow(materialize(toDecimal64(-10, 0)), 1), isDecimalOverflow(materialize(toDecimal64(-1, 0)), 0);
SELECT isDecimalOverflow(materialize(toDecimal64(999999999999999999, 0)), 18), isDecimalOverflow(materialize(toDecimal64(999999999999999999, 0))), isDecimalOverflow(materialize(toDecimal64(-999999999999999999, 0)), 18), isDecimalOverflow(materialize(toDecimal64(-999999999999999999, 0)));
SELECT isDecimalOverflow(toDecimal128('99999999999999999999999999999999999999', 0) + 1, 38), isDecimalOverflow(toDecimal128('99999999999999999999999999999999999999', 0) + 1), isDecimalOverflow(toDecimal128('-99999999999999999999999999999999999999', 0) - 1, 38), isDecimalOverflow(toDecimal128('-99999999999999999999999999999999999999', 0) - 1);
SELECT isDecimalOverflow(toDecimal128('99999999999999999999999999999999999999', 0), 37), isDecimalOverflow(toDecimal128('10', 0), 1), isDecimalOverflow(toDecimal128('1', 0), 0), isDecimalOverflow(toDecimal128('-99999999999999999999999999999999999999', 0), 37), isDecimalOverflow(toDecimal128('-10', 0), 1), isDecimalOverflow(toDecimal128('-1', 0), 0);
SELECT isDecimalOverflow(toDecimal128('99999999999999999999999999999999999999', 0), 38), isDecimalOverflow(toDecimal128('99999999999999999999999999999999999999', 0)), isDecimalOverflow(toDecimal128('-99999999999999999999999999999999999999', 0), 38), isDecimalOverflow(toDecimal128('-99999999999999999999999999999999999999', 0));
SELECT isDecimalOverflow(toDecimal32(0, 0), 0), isDecimalOverflow(toDecimal64(0, 0), 0), isDecimalOverflow(toDecimal128(0, 0), 0);
SELECT isDecimalOverflow(toDecimal32(1000000000, 0), 9), isDecimalOverflow(toDecimal32(1000000000, 0)), isDecimalOverflow(toDecimal32(-1000000000, 0), 9), isDecimalOverflow(toDecimal32(-1000000000, 0));
SELECT isDecimalOverflow(toDecimal32(999999999, 0), 8), isDecimalOverflow(toDecimal32(10, 0), 1), isDecimalOverflow(toDecimal32(1, 0), 0), isDecimalOverflow(toDecimal32(-999999999, 0), 8), isDecimalOverflow(toDecimal32(-10, 0), 1), isDecimalOverflow(toDecimal32(-1, 0), 0);
SELECT isDecimalOverflow(toDecimal32(999999999, 0), 9), isDecimalOverflow(toDecimal32(999999999, 0)), isDecimalOverflow(toDecimal32(-999999999, 0), 9), isDecimalOverflow(toDecimal32(-999999999, 0));
SELECT isDecimalOverflow(toDecimal64(1000000000000000000, 0), 18), isDecimalOverflow(toDecimal64(1000000000000000000, 0)), isDecimalOverflow(toDecimal64(-1000000000000000000, 0), 18), isDecimalOverflow(toDecimal64(-1000000000000000000, 0));
SELECT isDecimalOverflow(toDecimal64(999999999999999999, 0), 17), isDecimalOverflow(toDecimal64(10, 0), 1), isDecimalOverflow(toDecimal64(1, 0), 0), isDecimalOverflow(toDecimal64(-999999999999999999, 0), 17), isDecimalOverflow(toDecimal64(-10, 0), 1), isDecimalOverflow(toDecimal64(-1, 0), 0);
SELECT isDecimalOverflow(toDecimal64(999999999999999999, 0), 18), isDecimalOverflow(toDecimal64(999999999999999999, 0)), isDecimalOverflow(toDecimal64(-999999999999999999, 0), 18), isDecimalOverflow(toDecimal64(-999999999999999999, 0));
SELECT isDecimalOverflow(toNullable(toDecimal32(42, 0)), 1), isDecimalOverflow(materialize(toNullable(toDecimal32(42, 0))), 2), isDecimalOverflow(toNullable(toDecimal64(42, 0)), 1), isDecimalOverflow(materialize(toNullable(toDecimal64(42, 0))), 2), isDecimalOverflow(toNullable(toDecimal128(42, 0)), 1), isDecimalOverflow(materialize(toNullable(toDecimal128(42, 0))), 2);
select isFinite(-1/0) = 0;
select isFinite(-inf) = 0;
select isFinite(0) = 1;
select isFinite(0/0) = 0;
select isFinite(1) = 1;
select isFinite(1/0) = 0;
select isFinite(inf) = 0;
select isFinite(materialize(0)) = 1;
select isFinite(materialize(1)) = 1;
select isFinite(nan) = 0;
select isInfinite(-1/0) = 1;
select isInfinite(-inf) = 1;
select isInfinite(0) = 0;
select isInfinite(0/0) = 0;
select isInfinite(1) = 0;
select isInfinite(1/0) = 1;
select isInfinite(inf) = 1;
select isInfinite(materialize(0)) = 0;
select isInfinite(materialize(1)) = 0;
select isInfinite(nan) = 0;
SELECT isIPAddressInRange('127.0.0.1', '127.0.0.0/8');
SELECT isIPAddressInRange('127.0.0.1', '::127.0.0.1/128');
SELECT isIPAddressInRange('127.0.0.1', 'ffff::/16');
SELECT isIPAddressInRange('128.0.0.1', '127.0.0.0/8');
SELECT isIPAddressInRange('::1', '127.0.0.0/8');
SELECT isIPAddressInRange('::127.0.0.1', '127.0.0.1/32');
SELECT isIPAddressInRange('fffe::1', 'ffff::/16');
SELECT isIPAddressInRange('ffff::1', 'ffff::/16');
SELECT isIPAddressInRange('unparsable', '127.0.0.0/8');
SELECT isIPAddressInRange(100, '127.0.0.0/8');
SELECT isIPv6String('1234::1234:');
select isNaN(-1/0) = 0;
select isNaN(-inf) = 0;
select isNaN(0) = 0;
select isNaN(0/0) = 1;
select isNaN(1) = 0;
select isNaN(1/0) = 0;
select isNaN(inf) = 0;
select isNaN(materialize(0)) = 0;
select isNaN(materialize(1)) = 0;
select isNaN(nan) = 1;
select isNotNull(1)+isNotNull(2) from remote('127.2', system.one);
SELECT ISNULL('abc');
SELECT isNull(a), isNotNull(a) FROM decimal WHERE a = toDecimal32(5.5, 1);
SELECT isNull(b), isNotNull(b) FROM decimal WHERE a = toDecimal32(5.5, 1);
SELECT isNull(c), isNotNull(c) FROM decimal WHERE a = toDecimal32(5.5, 1);
SELECT isNull(d), isNotNull(d) FROM decimal WHERE a = toDecimal32(5.5, 1);
SELECT isNull(e), isNotNull(e) FROM decimal WHERE a = toDecimal32(5.5, 1);
SELECT isNull(f), isNotNull(f) FROM decimal WHERE a = toDecimal32(5.5, 1);
select isNull(one) from one_table where isNull(one);
SELECT isNull(t0.c0) OR COUNT('\n?pVa') FROM t0 GROUP BY t0.c0 HAVING isNull(t0.c0) UNION ALL SELECT isNull(t0.c0) OR COUNT('\n?pVa') FROM t0 GROUP BY t0.c0 HAVING NOT isNull(t0.c0) UNION ALL SELECT isNull(t0.c0) OR COUNT('\n?pVa') FROM t0 GROUP BY t0.c0 HAVING isNull(isNull(t0.c0)) SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;
SELECT isNullable(3);
SELECT isNullable(materialize(NULL));
SELECT isNullable(NULL);
SELECT isNullable(toLowCardinality(1));
SELECT isNullable(toLowCardinality(materialize(1)));
SELECT isNullable(toNullable(3));
SELECT isNullable(toNullable(toLowCardinality(1)));
SELECT isNullable(toNullable(toLowCardinality(materialize(1))));
SELECT isValidJSON('"HX-=');
SELECT isValidJSON('not a json');
SELECT isValidJSON('{"a": "hello", "b": [-100, 200.0, 300]}');
SELECT isValidJSON('{"success"test:"123"}');
SELECT isValidUTF8(randomStringUTF8(100000));
select isZeroOrNull(Null);
SELECT item_id FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) AS l FULL OUTER JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) AS r USING (item_id) SETTINGS join_use_nulls = '1';
SELECT item_id FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) AS l FULL OUTER JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) AS r USING (item_id);
SELECT item_id FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) l FULL JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id) r USING (item_id);
SELECT item_id FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) l INNER JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS ORDER BY item_id) r USING (item_id);
SELECT j + 21, j - 21, j - 84, j * 21, j * -21, j / 21, j / 84, intDiv(j, 21), intDivOrZero(j, 84) FROM decimal WHERE j > 0;
SELECT j + j, j - j, j * j, j / j, intDiv(j, j), intDivOrZero(j, j) FROM decimal WHERE j > 0;
SELECT j = -1, j = NULL FROM t WHERE j = -1;
SELECT j = 2, i FROM t PREWHERE j = 2;
SELECT j, h, i, j from decimal WHERE j < 42 AND h < 42 AND h < 42 AND j < 42;
SELECT j, h, i, j from decimal WHERE j > 42 AND h > 42 AND h > 42 AND j > 42;
select j, k from x where i in (select number from numbers(4));
select javaHash('874293087');
select javaHash('abc');
select javaHash(toInt16(-123));
select javaHash(toInt16(123));
select javaHash(toInt32(-123));
select javaHash(toInt32(123));
select javaHash(toInt64(-123));
select javaHash(toInt64(-12345678901));
select javaHash(toInt64(123));
select javaHash(toInt64(12345678901));
select javaHash(toInt8(-123));
select javaHashUTF16LE(convertCharset('a1가', 'utf-8', 'utf-16le'));
select javaHashUTF16LE(convertCharset('FJKLDSJFIOLD_389159837589429', 'utf-8', 'utf-16le'));
select javaHashUTF16LE(convertCharset('가나다라마바사아자차카타파하', 'utf-8', 'utf-16le'));
select javaHashUTF16LE(convertCharset('𐐀𐐁𐐂𐐃𐐄', 'utf-8', 'utf-16le'));
SELECT join_key, toTimeZone(dictGetDateTime('system.dict1', 'loading_start_time', toUInt64(dict_key)), 'UTC') AS datetime FROM (select dictGetInt32('system.dict1', 'element_count', toUInt64(dict_key)) AS join_key, 1 AS dict_key) js1 LEFT JOIN (SELECT toInt32(2) AS join_key) js2 USING (join_key) WHERE now() >= datetime;
SELECT joinGet ('join_test', 'num', 500);
SELECT joinGet('join_any_left', 's', number) FROM numbers(3);
SELECT joinGet('join_any_left_null', 's', number) FROM numbers(3);
SELECT joinGet('join_string_key', 'x', 'abc'), joinGet('join_string_key', 'k', 'abc');
SELECT joinGet('join_tbl', 'lcname', 'xxx') == 'yyy';
SELECT joinGet('join_tbl', 'lcname', toLowCardinality('xxx')) == 'yyy';
SELECT joinGet('join_tbl', 'lcname', toLowCardinality(materialize('xxx'))) == 'yyy';
SELECT joinGet('join_tbl', 'name', 'xxx') == 'yyy';
SELECT joinGet('join_tbl', 'name', toLowCardinality('xxx')) == 'yyy';
SELECT joinGet('join_tbl', 'name', toLowCardinality(materialize('xxx'))) == 'yyy';
select joinGet('join_test', 'b', 1);
SELECT joinGet('join_test', 'num', 500);
SELECT joinGet('kv', 'v', toUInt32(1));
SELECT joinGet('kv_overwrite', 'v', toUInt32(1));
SELECT joinGet('t1', '', number) FROM numbers(2);
SELECT joinGet('test_table_join', 'value', toUInt64(0));
select joinGet(id_val, 'val', toInt32(number)) from numbers(1);
SELECT joinGet(join_any_left_null, 's', number) FROM numbers(3);
SELECT joinGet(test_joinGet, 'c', 'ab', '1');
SELECT joinGet(test_lc, 'c', 'ab', '1');
SELECT joinGet(test_table_join, 'value', toUInt64(0));
SELECT joinGet({CLICKHOUSE_DATABASE:String} || '.join_test', 'b', 1);
SELECT joinGetOrNull('join_test', 'num', 500);
select JSON_ARRAY_LENGTH('[1,2,3,4,5');
select JSON_ARRAY_LENGTH('[1,2,3,4,5]');
SELECT JSON_EXISTS('', '$');
SELECT JSON_EXISTS('{"a":[[{"b":1}, {"g":1}],[{"h":1},{"y":1}]]}', '$.a[*][0].h');
SELECT JSON_EXISTS('{"a":[{"b":1},{"c":2}]}', '$.a[*].b');
SELECT JSON_EXISTS('{"a":[{"b":1},{"c":2}]}', '$.a[*].f');
SELECT JSON_EXISTS('{"hello":1,"world":2}', '$.world');
SELECT JSON_EXISTS('{"hello":1}', '$');
SELECT JSON_EXISTS('{"hello":1}', '$.hello');
SELECT JSON_EXISTS('{"hello":["world"]}', '$.hello[*]');
SELECT JSON_EXISTS('{"hello":["world"]}', '$.hello[0]');
SELECT JSON_EXISTS('{"hello":["world"]}', '$.hello[1]');
SELECT JSON_EXISTS('{"hello":{"world":1}}', '$.hello.world');
SELECT JSON_EXISTS('{"hello":{"world":1}}', '$.world');
SELECT JSON_EXISTS('{hello:world}', '$.hello');
SELECT JSON_EXISTS('{}', '$');
SELECT JSON_QUERY( '{hello:{"world":"!"}}}', '$.hello');
SELECT JSON_QUERY('{"123":1}', '$.123');
SELECT JSON_QUERY('{"123":1}', '$[123]');
SELECT JSON_QUERY('{"123":["1"]}', '$.123[0]');
SELECT JSON_QUERY('{"123":{"123":1}}', '$.123.123');
SELECT JSON_QUERY('{"123":{"abc":1}}', '$.123.abc');
SELECT JSON_QUERY('{"123abc":["1"]}', '$.123abc[0]');
SELECT JSON_QUERY('{"123abc":[{"123":"1"}]}', '$.123abc[0].123');
SELECT JSON_QUERY('{"123abc":{"123":1}}', '$.123abc.123');
SELECT JSON_QUERY('{"1key":1}', '$..1key');
SELECT JSON_QUERY('{"1key":1}', '$.1key');
SELECT JSON_QUERY('{"abc":{"123":1}}', '$.abc.123');
SELECT JSON_QUERY('{"abc123":{"123":1}}', '$.abc123.123');
SELECT JSON_QUERY('{"array":[[0, 1, 2, 3, 4, 5], [0, -1, -2, -3, -4, -5]]}', '$.array[*][0 to 2, 4]');
SELECT JSON_QUERY('{"hello 1":1}', '$["hello 1"]');
SELECT JSON_QUERY('{"hello":"world"}', '$.hello');
SELECT JSON_QUERY('{"hello":1.2}', '$.hello');
SELECT JSON_QUERY('{"hello":1}', '$');
SELECT JSON_QUERY('{"hello":1}', '$.hello');
SELECT JSON_QUERY('{"hello":1}', '$["hello"]');
SELECT JSON_QUERY('{"hello":1}', '$[\'hello\']');
SELECT JSON_QUERY('{"hello":1}', '$[hello]');
SELECT JSON_QUERY('{"hello":["world","world2"]}', '$.hello');
SELECT JSON_QUERY('{"hello":null}', '$.hello');
SELECT JSON_QUERY('{"hello":true}', '$.hello');
SELECT JSON_QUERY('{"hello":{"world":"!"}}', '$.hello');
SELECT JSON_VALUE('{"1key":1}', '$..1key');
SELECT JSON_VALUE('{"1key":1}', '$.1key');
select JSON_VALUE('{"a":"\\n\\u0000"}', '$.a');
select JSON_VALUE('{"a":"\\u263a"}', '$.a');
SELECT JSON_VALUE('{"a":"Hello \\"World\\" \\\\"}', '$.a');
SELECT JSON_VALUE('{"foo foo":"bar"}', '$."foo foo"');
SELECT JSON_VALUE('{"hello 1":1}', '$["hello 1"]');
SELECT JSON_VALUE('{"hello":"\\uD83C\\uDF3A \\uD83C\\uDF38 \\uD83C\\uDF37 Hello, World \\uD83C\\uDF37 \\uD83C\\uDF38 \\uD83C\\uDF3A"}', '$.hello');
select JSON_VALUE('{"hello":"world"}', '$.b') settings function_json_value_return_type_allow_nullable=true;
SELECT JSON_VALUE('{"hello":"world"}', '$.hello');
SELECT JSON_VALUE('{"hello":1.2}', '$.hello');
SELECT JSON_VALUE('{"hello":1}', '$');
SELECT JSON_VALUE('{"hello":1}', '$["hello"]');
SELECT JSON_VALUE('{"hello":1}', '$[\'hello\']');
SELECT JSON_VALUE('{"hello":1}', '$[hello]');
SELECT JSON_VALUE('{"hello":["world","world2"]}', '$.hello') settings function_json_value_return_type_allow_complex=true;
SELECT JSON_VALUE('{"hello":["world","world2"]}', '$.hello');
SELECT JSON_VALUE('{"hello":null}', '$.hello');
SELECT JSON_VALUE('{"hello":true}', '$.hello');
select JSON_VALUE('{"hello":{"world":"!"}}', '$.hello') settings function_json_value_return_type_allow_complex=true;
SELECT JSON_VALUE('{"hello":{"world":"!"}}', '$.hello');
SELECT JSON_VALUE('{hello:world}', '$.hello');
select JSONArrayLength('');
select JSONArrayLength('[1,2,3,4,5');
select JSONArrayLength('[1,2,3,[33,44],{"key":[2,3,4]}]');
select JSONArrayLength('[1,2,3]');
select JSONArrayLength('[[1,2],[5,6,7]]');
select JSONArrayLength('[]');
select JSONArrayLength('[{"a":123},{"b":"hello"}]');
select JSONArrayLength('{"key":"not a json array"}');
select JSONArrayLength(2);
SELECT JSONExtract('["-a"]', toNullable(1), 'Nullable(Int)');
SELECT JSONExtract('["a"]', toNullable(1), 'Nullable(Int)');
SELECT JSONExtract('["a"]', toNullable(1), 'Nullable(String)');
SELECT JSONExtract('[1]', toNullable(1), 'Nullable(Bool)');
SELECT JSONExtract('[1]', toNullable(1), 'Nullable(Float)');
SELECT JSONExtract('[1]', toNullable(1), 'Nullable(UInt8)');
SELECT JSONExtract('[3,5,7]', 'Tuple(Int, Int)');
SELECT JSONExtract('[3]', 'Tuple(Int, Int)');
SELECT JSONExtract('[]', JSONExtract('0', 'UInt256'), 'UInt256');
SELECT JSONExtract('{"a" : {"b" : {"c" : 1, "d" : "str"}}}', 'Tuple( a LowCardinality(String), b LowCardinality(String), c LowCardinality(String), d LowCardinality(String))');
SELECT JSONExtract('{"a" : {"b" : {"c" : 1, "d" : "str"}}}', 'Tuple( a String, b LowCardinality(String), c LowCardinality(String), d LowCardinality(String))');
SELECT JSONExtract('{"a": "-123456789012.345"}', 'a', 'Int64') as a, toTypeName(a);
SELECT JSONExtract('{"a": "-2000.22"}', 'a', 'Int8') as a, toTypeName(a);
SELECT JSONExtract('{"a": "-2000.22"}', 'a', 'UInt64') as a, toTypeName(a);
select JSONExtract('{"a": "123", "b": 456, "c": [7, 8, 9]}', 'Tuple(a String, b String, c String)');
SELECT JSONExtract('{"a": "123456"}', 'a', 'FixedString(5)');
SELECT JSONExtract('{"a": "123456"}', 'a', 'FixedString(6)');
SELECT JSONExtract('{"a": "123456789012.345"}', 'a', 'UInt64') as a, toTypeName(a);
SELECT JSONExtract('{"a": "hello", "b": "world"}', 'Map(LowCardinality(String), String)');
SELECT JSONExtract('{"a": "hello", "b": "world"}', 'Map(String, String)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'a', 'LowCardinality(String)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'a', 'String');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 'Array(Float32)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 'Array(Int8)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 'Array(Nullable(Int8))');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 'Array(Nullable(UInt8))');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 'Array(UInt8)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 'Tuple(Int8, Float32, UInt16)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 1, 'Int8');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 2, 'Int32');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 4, 'Nullable(Int64)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'Tuple(a FixedString(6), c UInt8)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'Tuple(a String, b Array(Float64))');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'Tuple(b Array(Float64), a String)');
SELECT JSONExtract('{"a": "hello", "b": [-100, 200.0, 300]}', 'Tuple(String, Array(Float64))');
SELECT JSONExtract('{"a": 123456}', 'a', 'FixedString(5)');
SELECT JSONExtract('{"a": 123456}', 'a', 'FixedString(6)');
SELECT JSONExtract('{"a": 123456}', 'FixedString(11)');
SELECT JSONExtract('{"a": 123456}', 'FixedString(12)');
SELECT JSONExtract('{"a": ["hello", 100.0], "b": ["world", 200]}', 'Map(String, Tuple(String, Float64))');
SELECT JSONExtract('{"a": [100.0, 200], "b": [-100, 200.0, 300]}', 'Map(Int64, Array(Float64))');
SELECT JSONExtract('{"a": [100.0, 200], "b": [-100, 200.0, 300]}', 'Map(String, Array(Float64))');
SELECT JSONExtract('{"a": {"c": "hello"}, "b": {"d": "world"}}', 'a', 'Map(String, String)');
SELECT JSONExtract('{"a": {"c": "hello"}, "b": {"d": "world"}}', 'Map(String, Map(String, String))');
SELECT JSONExtract('{"a":"-11345678901234567890123456789012345678901234567890123456789012345678901234567"}', 'a', 'Int256') as a, toTypeName(a);
SELECT JSONExtract('{"a":"-123456789"}', 'a', 'Int32') as a, toTypeName(a);
SELECT JSONExtract('{"a":"-1234567890123456789"}', 'a', 'Int64') as a, toTypeName(a);
SELECT JSONExtract('{"a":"-12345678901234567890123456789012345678"}', 'a', 'Int128') as a, toTypeName(a);
SELECT JSONExtract('{"a":"-1234567890123456789999"}', 'a', 'Int64') as a, toTypeName(a);
SELECT JSONExtract('{"a":"-1234567899999"}', 'a', 'Int32') as a, toTypeName(a);
SELECT JSONExtract('{"a":"11345678901234567890123456789012345678901234567890123456789012345678901234567"}', 'a', 'UInt256') as a, toTypeName(a);
SELECT JSONExtract('{"a":"123456.123456"}', 'a', 'Decimal(20, 4)') as a, toTypeName(a);
SELECT JSONExtract('{"a":"123456789"}', 'a', 'UInt32') as a, toTypeName(a);
SELECT JSONExtract('{"a":"1234567890.12345678901234567890", "b":"test"}', 'Tuple(a Decimal(35,20), b LowCardinality(String))') as a, toTypeName(a);
SELECT JSONExtract('{"a":"1234567890.123456789012345678901234567890", "b":"test"}', 'Tuple(a Decimal(45,30), b LowCardinality(String))') as a, toTypeName(a);
SELECT JSONExtract('{"a":"123456789012345.12"}', 'a', 'Decimal(30, 4)') as a, toTypeName(a);
SELECT JSONExtract('{"a":"1234567890123456789"}', 'a', 'UInt64') as a, toTypeName(a);
SELECT JSONExtract('{"a":"12345678901234567890123456789012345678"}', 'a', 'UInt128') as a, toTypeName(a);
SELECT JSONExtract('{"a":"1234567890123456789999"}', 'a', 'UInt64') as a, toTypeName(a);
SELECT JSONExtract('{"a":"1234567899999"}', 'a', 'UInt32') as a, toTypeName(a);
SELECT JSONExtract('{"a":"3333.6333333333333333333333", "b":"test"}', 'Tuple(a Decimal(10,1), b LowCardinality(String))');
SELECT JSONExtract('{"a":"3333.6333333333333333333333", "b":"test"}', 'Tuple(a Decimal(20,10), b LowCardinality(String))');
SELECT JSONExtract('{"a":-123456789.345}', 'a', 'Int32') as a, toTypeName(a);
SELECT JSONExtract('{"a":-123456789012.345}', 'a', 'Int128') as a, toTypeName(a);
SELECT JSONExtract('{"a":-123456789012.345}', 'a', 'Int256') as a, toTypeName(a);
SELECT JSONExtract('{"a":-123456789012.345}', 'a', 'Int64') as a, toTypeName(a);
SELECT JSONExtract('{"a":-1234567890123456789}', 'a', 'Int128') as a, toTypeName(a);
SELECT JSONExtract('{"a":-1234567890123456789}', 'a', 'Int256') as a, toTypeName(a);
SELECT JSONExtract('{"a":-1234567890123456789}', 'a', 'Int64') as a, toTypeName(a);
SELECT JSONExtract('{"a":-1234567890}', 'a', 'Int32') as a, toTypeName(a);
SELECT JSONExtract('{"a":0}', 'a', 'Bool') as a, toTypeName(a);
SELECT JSONExtract('{"a":1, "b":"417ddc5d-e556-4d27-95dd-a34d84e46a50"}', 'Tuple(a Int8, b UUID)');
SELECT JSONExtract('{"a":123456, "b":3.55}', 'Tuple(a LowCardinality(Int32), b Decimal(5, 2))');
SELECT JSONExtract('{"a":123456.123456}', 'a', 'Decimal(20, 4)') as a, toTypeName(a);
SELECT JSONExtract('{"a":123456789.345}', 'a', 'UInt32') as a, toTypeName(a);
SELECT JSONExtract('{"a":123456789012.345}', 'a', 'UInt128') as a, toTypeName(a);
SELECT JSONExtract('{"a":123456789012.345}', 'a', 'UInt256') as a, toTypeName(a);
SELECT JSONExtract('{"a":123456789012.345}', 'a', 'UInt64') as a, toTypeName(a);
SELECT JSONExtract('{"a":1234567890123456789}', 'a', 'UInt128') as a, toTypeName(a);
SELECT JSONExtract('{"a":1234567890123456789}', 'a', 'UInt256') as a, toTypeName(a);
SELECT JSONExtract('{"a":1234567890123456789}', 'a', 'UInt64') as a, toTypeName(a);
SELECT JSONExtract('{"a":1234567890}', 'a', 'UInt32') as a, toTypeName(a);
SELECT JSONExtract('{"a":1}', 'a', 'Bool') as a, toTypeName(a);
SELECT JSONExtract('{"a":3,"b":5,"c":7}', 'Tuple(a Int, b Int)');
SELECT JSONExtract('{"a":3,"b":5,"c":7}', 'Tuple(b Int, d Int)');
SELECT JSONExtract('{"a":3,"b":5,"c":7}', 'Tuple(c Int, a Int)');
SELECT JSONExtract('{"a":3,"b":5,"c":7}', 'Tuple(Int, Int)');
SELECT JSONExtract('{"a":3333.6333333333333333333333, "b":"test"}', 'Tuple(a Decimal(10,1), b LowCardinality(String))');
SELECT JSONExtract('{"a":3333.6333333333333333333333, "b":"test"}', 'Tuple(a Decimal(20,10), b LowCardinality(String))');
SELECT JSONExtract('{"a":3}', 'Tuple(Int, Int)');
SELECT JSONExtract('{"day": "Thursday"}', 'day', 'Enum8(\'Sunday\' = 0, \'Monday\' = 1, \'Tuesday\' = 2, \'Wednesday\' = 3, \'Thursday\' = 4, \'Friday\' = 5, \'Saturday\' = 6)');
SELECT JSONExtract('{"day": 5}', 'day', 'Enum8(\'Sunday\' = 0, \'Monday\' = 1, \'Tuesday\' = 2, \'Wednesday\' = 3, \'Thursday\' = 4, \'Friday\' = 5, \'Saturday\' = 6)');
SELECT JSONExtract('{"passed": true}', 'passed', 'UInt8');
SELECT JSONExtract('{"string_value":null}', 'string_value', 'Nullable(String)') as x, toTypeName(x);
SELECT JSONExtract('{"string_value":null}', 'string_value', 'String') as x, toTypeName(x);
SELECT JSONExtract('{"v":-1e300}', 'v', 'Float32');
SELECT JSONExtract('{"v":-1e300}', 'v', 'Float64');
SELECT JSONExtract('{"v":-1e300}', 'v', 'Int64');
SELECT JSONExtract('{"v":-1e300}', 'v', 'Int8');
SELECT JSONExtract('{"v":-1e300}', 'v', 'UInt64');
SELECT JSONExtract('{"v":-1e300}', 'v', 'UInt8');
SELECT JSONExtract('{"v":1.1}', 'v', 'Nullable(UInt64)');
SELECT JSONExtract('{"v":1.1}', 'v', 'UInt64');
SELECT JSONExtract(data, 'Tuple( a LowCardinality(FixedString(20)), b LowCardinality(FixedString(20)), c LowCardinality(FixedString(20)), d LowCardinality(FixedString(20)) )') AS json FROM test_low_cardinality_string;
SELECT JSONExtract(data, 'Tuple( a LowCardinality(Int16), b LowCardinality(Int16), c LowCardinality(Int16), d LowCardinality(Int16) )') AS json FROM test_low_cardinality_int;
SELECT JSONExtract(data, 'Tuple( a LowCardinality(Int32), b LowCardinality(Int32), c LowCardinality(Int32), d LowCardinality(Int32) )') AS json FROM test_low_cardinality_int;
SELECT JSONExtract(data, 'Tuple( a LowCardinality(Int64), b LowCardinality(Int64), c LowCardinality(Int64), d LowCardinality(Int64) )') AS json FROM test_low_cardinality_int;
SELECT JSONExtract(data, 'Tuple( a LowCardinality(Int8), b LowCardinality(Int8), c LowCardinality(Int8), d LowCardinality(Int8) )') AS json FROM test_low_cardinality_int;
SELECT JSONExtract(data, 'Tuple( a LowCardinality(String), b LowCardinality(String), c LowCardinality(String), d LowCardinality(String) )') AS json FROM test_low_cardinality_string;
SELECT JSONExtract(data, 'Tuple( a LowCardinality(UUID), b LowCardinality(UUID), c LowCardinality(UUID), d LowCardinality(UUID) )') AS json FROM test_low_cardinality_uuid;
SELECT JSONExtract(data, 'Tuple(a FixedString(24))') AS json FROM test_fixed_string_nested_json;
SELECT JSONExtract(materialize('{"a": 131231}'), 'a', 'LowCardinality(FixedString(5))') FROM numbers(2);
SELECT JSONExtract(materialize('{"a": 131231}'), 'a', 'LowCardinality(FixedString(6))') FROM numbers(2);
SELECT JSONExtract(NULL, 'string_value', 'Nullable(String)') as x, toTypeName(x);
SELECT JSONExtract(NULL, 'string_value', 'String') as x, toTypeName(x);
SELECT JSONExtract(toNullable('{"string_value":null}'), 'string_value', 'Nullable(String)') as x, toTypeName(x);
SELECT JSONExtract(toNullable('{"string_value":null}'), 'string_value', 'String') as x, toTypeName(x);
SELECT JSONExtractArrayRaw('');
SELECT JSONExtractArrayRaw('["1"]', toNullable(1));
SELECT JSONExtractArrayRaw('[1,2,3,4,5,"hello"]');
SELECT JSONExtractArrayRaw('[[],[]]');
SELECT JSONExtractArrayRaw('[]');
SELECT JSONExtractArrayRaw('{"a": "hello", "b": "not_array"}');
SELECT JSONExtractArrayRaw('{"a": "hello", "b": [-100, 200.0, 300]}', 'b');
SELECT JSONExtractArrayRaw(arrayJoin(JSONExtractArrayRaw('[[1,2,3],[4,5,6]]')));
SELECT JSONExtractBool('"HX-=');
SELECT JSONExtractBool('-1');
SELECT JSONExtractBool('[1]', toNullable(1));
SELECT JSONExtractBool('{"passed": true}', 'passed');
SELECT JSONExtractFloat('[1]', toNullable(1));
SELECT JSONExtractFloat('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 2);
SELECT JSONExtractInt('[1]', toNullable(1));
SELECT JSONExtractInt('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 1);
SELECT JSONExtractKeys('{"a": "hello", "b": [-100, 200.0, 300], "c":{"d":[121,144]}}', 'c');
SELECT JSONExtractKeys('{"a": "hello", "b": [-100, 200.0, 300]}');
SELECT JSONExtractKeys('{"a": "hello", "b": [-100, 200.0, 300]}', 'a');
SELECT JSONExtractKeys('{"a": "hello", "b": [-100, 200.0, 300]}', 'b');
SELECT JSONExtractKeysAndValues('{"a": "hello", "b": "world"}', 'LowCardinality(String)');
SELECT JSONExtractKeysAndValues('{"a": "hello", "b": "world"}', 'String');
SELECT JSONExtractKeysAndValues('{"a": "hello", "b": [-100, 200.0, 300]}', 'Array(Float64)');
SELECT JSONExtractKeysAndValues('{"a": "hello", "b": [-100, 200.0, 300]}', 'String');
SELECT JSONExtractKeysAndValues('{"x": {"a": 5, "b": 7, "c": 11}}', 'x', 'Int8');
SELECT JSONExtractKeysAndValues([], JSONLength('^?V{LSwp'));
SELECT JSONExtractKeysAndValuesRaw('{"a": "hello", "b": [-100, 200.0, 300], "c":{"d":[121,144]}}');
SELECT JSONExtractKeysAndValuesRaw('{"a": "hello", "b": [-100, 200.0, 300], "c":{"d":[121,144]}}', 'c');
SELECT JSONExtractKeysAndValuesRaw('{"a": "hello", "b": [-100, 200.0, 300]}');
SELECT JSONExtractKeysAndValuesRaw('{"a": "hello", "b": [-100, 200.0, 300]}', 'a');
SELECT JSONExtractKeysAndValuesRaw('{"a": "hello", "b": [-100, 200.0, 300]}', 'b');
SELECT JSONExtractKeysAndValuesRaw(arrayJoin([]));
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300], "c":{"d":[121,144]}}');
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300], "c":{"d":[121,144]}}', 'c');
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300], "c":{"d":[121,144]}}', 'c', 'd');
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300], "c":{"d":[121,144]}}', 'c', 'd', 2);
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300], "c":{"d":[121,144]}}', 'c', 'd', 3);
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300]}');
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300]}', 'a');
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300]}', 'b');
SELECT JSONExtractRaw('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', 1);
SELECT JSONExtractRaw('{"abc":"\\n\\u0000"}', 'abc');
SELECT JSONExtractRaw('{"abc":"\\u263a"}', 'abc');
SELECT JSONExtractRaw('{"passed": true}');
SELECT JSONExtractRaw('{}');
SELECT JSONExtractString('["a", "b", "c", "d", "e"]', idx) FROM (SELECT arrayJoin([1,2,3,4,5]) AS idx);
SELECT JSONExtractString('["a", "b", "c", "d", "e"]', idx) FROM (SELECT arrayJoin([2, NULL, 2147483646, 65535, 65535, 3]) AS idx);
SELECT JSONExtractString('["a"]', toNullable(1));
select JSONExtractString('{"a": "123"}', 'a');
SELECT JSONExtractString('{"a": "hello", "b": [-100, 200.0, 300]}', 'a');
SELECT JSONExtractString('{"a": "hello", "b": [-100, 200.0, 300]}', 1);
select JSONExtractString('{"a": 123}', 'a');
select JSONExtractString('{"a": null}', 'a');
select JSONExtractString('{"abc":"\\n\\u0000"}', 'abc');
select JSONExtractString('{"abc":"\\u263"}', 'abc');
select JSONExtractString('{"abc":"\\u263a"}', 'abc');
select JSONExtractString('{"abc":"hello}', 'abc');
SELECT JSONExtractString(json, 's') FROM (SELECT arrayJoin(['{"s":"u"}', '{"s":"v"}']) AS json);
SELECT JSONExtractUInt('{"a": "hello", "b": [-100, 200.0, 300]}', 'b', -1);
SELECT JSONHas('{"a": "hello", "b": [-100, 200.0, 300]}', 'a');
SELECT JSONHas('{"a": "hello", "b": [-100, 200.0, 300]}', 'b');
SELECT JSONHas('{"a": "hello", "b": [-100, 200.0, 300]}', 'c');
SELECT JSONKey('{"a": "hello", "b": [-100, 200.0, 300]}', -1);
SELECT JSONKey('{"a": "hello", "b": [-100, 200.0, 300]}', -2);
SELECT JSONKey('{"a": "hello", "b": [-100, 200.0, 300]}', 1);
SELECT JSONKey('{"a": "hello", "b": [-100, 200.0, 300]}', 2);
SELECT JSONLength('"HX-=');
SELECT JSONLength('[9]\0\x42\xD3\x36\xE3');
SELECT JSONLength('{"a": "hello", "b": [-100, 200.0, 300]}');
SELECT JSONLength('{"a": "hello", "b": [-100, 200.0, 300]}', 'b');
SELECT JSONLength('{"success"test:"123"}');
SELECT JSONLength('{}');
SELECT JSONLength(unhex('5B30000E06D7AA5D'));
select jsonMergePatch('[1]');
select jsonMergePatch('{ "a": 1, "b":2 }','{ "a": 3, "c":4 }','{ "a": 5, "d":6 }');
select jsonMergePatch('{"a": "1","b": 2,"c": [true,{"qrdzkzjvnos": true,"yxqhipj": false,"oesax": "33o8_6AyUy"}]}', '{"c": "1"}');
select jsonMergePatch('{"a": {"b": 1, "c": 2}}', '{"a": {"b": [3, 4]}}');
select jsonMergePatch('{"a":1, "b":2}', '{"b":null}');
select jsonMergePatch('{"a":1}');
select jsonMergePatch('{"a":1}', '{"b":1}');
select jsonMergePatch('{"a":1}', '{"b":1}', '{"c":[1,2]}');
select jsonMergePatch('{"a":1}', '{"b":1}', '{"c":[{"d":1},2]}');
select jsonMergePatch('{"a":1}','{"name": "joey"}','{"name": "tom"}','{"name": "zoey"}');
select jsonMergePatch(s1, s2) from t_json_merge ORDER BY id;
SELECT JSONType('{"a": "hello", "b": [-100, 200.0, 300]}');
SELECT JSONType('{"a": "hello", "b": [-100, 200.0, 300]}', 'b');
SELECT JSONType('{"a": true}', 'a');
SELECT jumpConsistentHash(intHash64(number), 787) FROM system.numbers LIMIT 1000000, 2;
SELECT k % 7 AS k2, finalizeAggregation(uniqMergeState(state)), uniqMerge(state) FROM (SELECT k, uniqState(x) AS state FROM (SELECT number % 11 AS k, intDiv(number, 7) AS x FROM system.numbers LIMIT 100) GROUP BY k) GROUP BY k2 ORDER BY k2;
SELECT k == 4 FROM 01504_test WHERE k = 4 OR k IN [4] OR k in (4, 10000001, 10000002) AND value > 0;
SELECT k == 4 FROM 01504_test WHERE k IN (SELECT toUInt32(number) FROM keys WHERE number = 4);
SELECT k FROM ( SELECT k, abs(v) AS _v FROM remote('127.{1,2}', view(select materialize('foo') as k, -1 as v)) ORDER BY _v ASC LIMIT 1 BY k ) GROUP BY k;
SELECT k FROM (SELECT 1 AS k FROM system.one) js1 ANY LEFT JOIN (SELECT k FROM (SELECT 1 AS k, 2 AS x)) js2 USING k;
SELECT k FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY FULL JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT k FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY RIGHT JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT k FROM (SELECT toInt128(123) AS k FROM system.one) INNER JOIN (SELECT toInt128(123) AS k) t USING k;
SELECT k FROM (SELECT toInt256(123) AS k FROM system.one) INNER JOIN (SELECT toInt256(123) AS k) t USING k;
SELECT k FROM (SELECT toNullable(toInt128(321)) AS k FROM system.one) INNER JOIN (SELECT toInt128(321) AS k) t USING k;
SELECT k FROM (SELECT toNullable(toInt256(321)) AS k FROM system.one) INNER JOIN (SELECT toInt256(321) AS k) t USING k;
SELECT k FROM (SELECT toNullable(toUInt256(321)) AS k FROM system.one) INNER JOIN (SELECT toUInt256(321) AS k) t USING k;
SELECT k FROM (SELECT toUInt256(123) AS k FROM system.one) INNER JOIN (SELECT toUInt256(123) AS k) t USING k;
SELECT k FROM t2 LEFT ANTI JOIN rdb ON rdb.key == t2.k ORDER BY k;
SELECT k FROM t2 LEFT SEMI JOIN rdb ON rdb.key == t2.k ORDER BY k;
select k, (k=1 or k=2 or k=3), s, (s=21), (s=21 or s=22), (s=21 or s=22 or s=23) from bug SETTINGS allow_experimental_analyzer = 1;
select k, (k=1 or k=2 or k=3), s, (s=21), (s=21 or s=22), (s=21 or s=22 or s=23) from bug;
SELECT k, a FROM (SELECT 42 AS k FROM remote('127.0.0.2', system.one)) GLOBAL ALL FULL OUTER JOIN (SELECT 42 AS k, 1 AS a, a) USING k;
SELECT k, a, b FROM ( SELECT nullIf(number, 7) AS k, toString(number) AS a FROM system.numbers LIMIT 10 ) js1 ANY INNER JOIN ( SELECT number AS k, toString(number) AS b FROM system.numbers LIMIT 5, 10 ) js2 USING (k) ORDER BY k;
SELECT k, a, b FROM ( SELECT nullIf(number, 7) AS k, toString(number) AS a FROM system.numbers LIMIT 10 ) js1 ANY RIGHT JOIN ( SELECT nullIf(number, 8) AS k, toString(number) AS b FROM system.numbers LIMIT 5, 10 ) js2 USING (k) ORDER BY k;
SELECT k, a, b FROM ( SELECT number AS k, toString(number) AS a FROM system.numbers LIMIT 10 ) ANY FULL JOIN ( SELECT number AS k, toString(number) AS b FROM system.numbers LIMIT 5, 10 ) USING (k) ORDER BY k;
SELECT k, a, b FROM ( SELECT number AS k, toString(number) AS a FROM system.numbers LIMIT 10 ) ANY INNER JOIN ( SELECT number AS k, toString(number) AS b FROM system.numbers LIMIT 5, 10 ) USING (k) ORDER BY k;
SELECT k, a, b FROM ( SELECT number AS k, toString(number) AS a FROM system.numbers LIMIT 10 ) ANY LEFT JOIN ( SELECT number AS k, toString(number) AS b FROM system.numbers LIMIT 5, 10 ) USING (k) ORDER BY k;
SELECT k, a, b FROM ( SELECT number AS k, toString(number) AS a FROM system.numbers LIMIT 10 ) ANY RIGHT JOIN ( SELECT number AS k, toString(number) AS b FROM system.numbers LIMIT 5, 10 ) USING (k) ORDER BY k;
SELECT k, a, b FROM ( SELECT number AS k, toString(number) AS a FROM system.numbers LIMIT 10 ) js1 ANY LEFT JOIN ( SELECT nullIf(number, 8) AS k, toString(number) AS b FROM system.numbers LIMIT 5, 10 ) js2 USING (k) ORDER BY k;
SELECT k, a, b FROM (SELECT 0 AS k, 'hello' AS a, 123 AS b, a) ANY FULL OUTER JOIN (SELECT 1 AS k) USING (k) ORDER BY k;
SELECT k, a1, b1, a2, b2 FROM (SELECT 0 AS k, 'hello' AS a1, 'world' AS b1, a1) ANY FULL OUTER JOIN (SELECT 1 AS k, 'hello' AS a2, 'world' AS b2, a2) USING (k) ORDER BY k;
SELECT k, a1, b1, a2, b2 FROM (SELECT 0 AS k, 'hello' AS a1, 123 AS b1, a1) ANY FULL OUTER JOIN (SELECT 1 AS k, 'hello' AS a2, 456 AS b2, a2) USING (k) ORDER BY k;
select k, avgMerge(x) from summing_merge_tree_aggregate_function group by k;
SELECT k, b FROM ( SELECT number + 1 AS k FROM numbers(10) ) js1 RIGHT JOIN ( SELECT nullIf(number, if(number % 2 == 0, number, 0)) AS k, number AS b FROM numbers(10) ) js2 USING (k) ORDER BY k, b;
select k, city from smta;
SELECT k, count() AS c FROM (SELECT number, CASE WHEN number < 10 THEN 'hello' WHEN number < 50 THEN 'world' ELSE 'goodbye' END AS k FROM system.numbers LIMIT 100) GROUP BY k WITH TOTALS HAVING nullIf(c, 10) < 50 ORDER BY c;
SELECT k, count() FROM (SELECT number % 5 AS k FROM system.numbers LIMIT 100) GROUP BY k WITH TOTALS ORDER BY k FORMAT Vertical;
SELECT k, d, i FROM (SELECT t.1 AS k, t.2 AS v, runningDifference(v) AS d, runningDifference(cityHash64(t.1)) AS i FROM (SELECT arrayJoin([(NULL, 65535), ('a', 7), ('a', 3), ('b', 11), ('b', 2), ('', -9223372036854775808)]) AS t)) WHERE i = 9223372036854775807;
SELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (SELECT intDiv(number, 30000 AS d) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k;
SELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (SELECT intDiv(number, if(number = 9223372036854775807, -2, if(number = 3, number = if(number = 1, NULL, 3), 1)) AS d) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k ASC LIMIT 5;
SELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (WITH toNullable(number = 3 ? 3 : 1) AS d SELECT intDiv(number, 3) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k LIMIT 5;
SELECT k, finalizeAggregation(sum_state), runningAccumulate(sum_state) FROM (SELECT intDiv(number, 50000) AS k, sumState(number) AS sum_state FROM (SELECT number FROM system.numbers LIMIT 1000000) GROUP BY k ORDER BY k);
SELECT k, finalizeAggregation(u) FROM aggregating_00191 FINAL order by k;
SELECT k, finalizeAggregation(u) FROM aggregating_00191;
SELECT k, finalizeAggregation(uniqState(x)) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k LIMIT 5;
SELECT k, finalizeAggregation(uniqState(x)) FROM (WITH toNullable(number = 3 ? 3 : 1) AS d SELECT intDiv(number, 3) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k LIMIT 5;
SELECT k, groupArray(x) AS res1, toTypeName(res1), avg(x) AS res2, toTypeName(res2) FROM (SELECT 1 AS k, arrayJoin([1, NULL, 2]) AS x UNION ALL SELECT 2 AS k, CAST(arrayJoin([NULL, NULL]) AS Nullable(UInt8)) AS x) GROUP BY k ORDER BY k;
SELECT k, groupArrayForEach(arr) FROM (SELECT intDiv(number, 3) AS k, arrayMap(x -> toString(x), range(number)) AS arr FROM system.numbers LIMIT 10) GROUP BY k ORDER BY k;
SELECT k, groupArrayForEach(arr) FROM (SELECT intDiv(number, 3) AS k, range(number) AS arr FROM system.numbers LIMIT 10) GROUP BY k ORDER BY k;
SELECT k, groupArrayForEach(arr) FROM (SELECT number % 3 AS k, arrayMap(x -> toString(x), range(number)) AS arr FROM system.numbers LIMIT 10) GROUP BY k ORDER BY k;
SELECT k, groupArrayForEach(arr) FROM (SELECT number % 3 AS k, range(number) AS arr FROM system.numbers LIMIT 10) GROUP BY k ORDER BY k;
SELECT k, groupArrayForEach(arr), quantilesExactForEach(0.5, 0.9)(arr) FROM (SELECT intDiv(number, 3) AS k, arrayMap(x -> number + x, range(number)) AS arr FROM system.numbers LIMIT 10) GROUP BY k ORDER BY k;
SELECT k, groupArrayInsertAt('-', 10)(toString(x), x) FROM (SELECT number AS k, number AS x FROM system.numbers LIMIT 11) GROUP BY k ORDER BY k;
SELECT k, groupArrayMovingAvg(3)(v) FROM (SELECT * FROM moving_sum_num ORDER BY k, dt) GROUP BY k ORDER BY k FORMAT TabSeparatedWithNamesAndTypes;
SELECT k, groupArrayMovingAvg(v) FROM (SELECT * FROM moving_sum_num ORDER BY k, dt) GROUP BY k ORDER BY k FORMAT TabSeparatedWithNamesAndTypes;
SELECT k, groupArrayMovingSum(3)(v) FROM (SELECT * FROM moving_sum_num ORDER BY k, dt) GROUP BY k ORDER BY k FORMAT TabSeparatedWithNamesAndTypes;
SELECT k, groupArrayMovingSum(v) FROM (SELECT * FROM moving_sum_num ORDER BY k, dt) GROUP BY k ORDER BY k FORMAT TabSeparatedWithNamesAndTypes;
select k, groupArraySample(10, 123456)(v) from (select number % 4 as k, number as v from numbers(1024)) group by k order by k;
SELECT k, ignore(groupArrayInsertAt(x, x)) FROM (SELECT dummy AS k, (randConstant() * 10) % 10 AS x FROM remote('127.0.0.{1,1}', system.one)) GROUP BY k ORDER BY k;
SELECT k, js1.s, t2.s FROM (SELECT number AS k, number AS s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 ON js1.k == t2.k OR js1.s == t2.k ORDER BY k;
SELECT k, js1.s, t2.s FROM (SELECT number AS k, number AS s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 ON js1.k == t2.k ORDER BY k;
SELECT k, js1.s, t2.s FROM (SELECT number AS k, number as s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k ORDER BY k;
SELECT k, js1.s, t2.s FROM (SELECT toUInt64(number / 3) AS k, sum(number) as s FROM numbers(10) GROUP BY toUInt64(number / 3) WITH TOTALS) js1 ANY LEFT JOIN t2 USING k ORDER BY k;
SELECT k, key, toTypeName(value2), value2 FROM t2 INNER JOIN rdb ON rdb.key == t2.k ORDER BY k SETTINGS join_use_nulls = 1;
SELECT k, key, toTypeName(value2), value2 FROM t2 LEFT JOIN rdb ON rdb.key == t2.k ORDER BY k SETTINGS join_use_nulls = 1;
SELECT k, l, m, n, count() FROM t2 GROUP BY k, l, m, n ORDER BY k, l, m, n;
select k, round(quantileMerge(0.1)(x), 1) from summing_merge_tree_aggregate_function group by k;
SELECT k, s FROM (SELECT 1 AS k FROM `system`.`one`) AS `xxx` ANY LEFT JOIN (SELECT 1 AS k, 'Hello' AS s) AS `yyy` USING k;
SELECT k, s FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k ORDER BY k;
SELECT k, s FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;
SELECT k, s FROM summing ORDER BY k;
SELECT k, s FROM t_sparse_pk WHERE k = 0 OR k = 3 ORDER BY k, s;
SELECT k, s FROM t_sparse_pk WHERE k = 2 ORDER BY k, s;
SELECT k, s1, s2 FROM (SELECT intDiv(number, 3) AS k, sum(number) AS s1 FROM (SELECT * FROM system.numbers LIMIT 10) GROUP BY k WITH TOTALS) ANY LEFT JOIN (SELECT intDiv(number, 4) AS k, sum(number) AS s2 FROM (SELECT * FROM system.numbers LIMIT 10) GROUP BY k) USING k ORDER BY k;
SELECT k, s1, s2 FROM (SELECT intDiv(number, 3) AS k, sum(number) AS s1 FROM (SELECT * FROM system.numbers LIMIT 10) GROUP BY k) ANY LEFT JOIN (SELECT intDiv(number, 4) AS k, sum(number) AS s2 FROM (SELECT * FROM system.numbers LIMIT 10) GROUP BY k WITH TOTALS) USING k ORDER BY k;
SELECT k, s1, s2 FROM (SELECT intDiv(number, 3) AS k, sum(number) AS s1 FROM (SELECT * FROM system.numbers LIMIT 10) GROUP BY k) ANY LEFT JOIN (SELECT intDiv(number, 4) AS k, sum(number) AS s2 FROM (SELECT * FROM system.numbers LIMIT 10) GROUP BY k) USING k ORDER BY k;
select k, sum(c), topKMerge(2)(x) from summing_merge_tree_aggregate_function group by k;
select k, sum(c), topKWeightedMerge(2)(x) from summing_merge_tree_aggregate_function group by k;
select k, sum(c), uniqMerge(u) from summing_merge_tree_aggregate_function group by k order by k;
select k, sum(c), uniqMerge(un), uniqThetaMerge(ut) from summing_merge_tree_aggregate_function group by k order by k;
SELECT k, sum(v) AS s FROM group_by_pk_lc_uint128 GROUP BY k ORDER BY k ASC LIMIT 1024 SETTINGS optimize_aggregation_in_order = 1;
SELECT k, sum(v) AS s FROM group_by_pk_lc_uint256 GROUP BY k ORDER BY k ASC LIMIT 1024 SETTINGS optimize_aggregation_in_order = 1;
SELECT k, sumForEach(arr) FROM (SELECT intDiv(number, 3) AS k, range(number) AS arr FROM system.numbers LIMIT 10) GROUP BY k ORDER BY k;
SELECT k, sumForEach(arr) FROM (SELECT number % 3 AS k, range(number) AS arr FROM system.numbers LIMIT 10) GROUP BY k ORDER BY k;
SELECT k, sumMerge(d) FROM agg_func_col GROUP BY k ORDER BY k;
SELECT k, sumMerge(d), avgMerge(af_avg1) FROM agg_func_col GROUP BY k ORDER BY k;
SELECT k, sumMerge(d), avgMerge(af_avg1), groupUniqArrayMerge(af_gua) FROM agg_func_col GROUP BY k ORDER BY k;
SELECT k, t2.k, js1.s, t2.s FROM (SELECT number AS k, number AS s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 ON js1.k == t2.k ORDER BY k;
SELECT k, t2.k, js1.s, t2.s FROM (SELECT number AS k, number as s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k ORDER BY k;
SELECT k, topK(v) FROM (SELECT number % 10 AS k, arrayMap(x -> arrayMap(x -> x = 0 ? NULL : toString(x), range(x)), range(intDiv(number, 13))) AS v FROM system.numbers LIMIT 100) GROUP BY k ORDER BY k;
SELECT k, uniq(date_dt) FROM remote('127.0.0.{1,2}', currentDatabase(), han_1) GROUP BY k;
SELECT k, v, d, i FROM (SELECT t.1 AS k, t.2 AS v, runningDifference(v) AS d, runningDifference(cityHash64(t.1)) AS i FROM ( SELECT arrayJoin([('a', 1), ('a', 2), ('a', 3), ('b', 11), ('b', 13), ('b', 15)]) AS t)) WHERE i = 0;
SELECT k, v2 FROM adaptive_granularity_alter WHERE k >= 100 OR k = 42 ORDER BY k;
SELECT k, v2 FROM adaptive_granularity_alter WHERE k >= 100 OR k = 42;
SELECT k, v2 FROM adaptive_granularity_alter1 WHERE k >= 100 OR k = 42 ORDER BY k;
SELECT k, v2 FROM adaptive_granularity_alter2 WHERE k >= 100 OR k = 42 ORDER BY k;
SELECT k, value FROM 01504_test WHERE k = 0 OR value > 0;
SELECT k, x FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY FULL JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT k, x FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY RIGHT JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT k, x FROM (SELECT arrayJoin([1, 2]) AS k) js1 ANY LEFT JOIN join USING k;
SELECT k, x, e FROM summing;
SELECT k, x, y FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY FULL JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT k, x, y FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY RIGHT JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT k, y FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY FULL JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT k, y FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY RIGHT JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;
SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;
SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_use_projections = 0;
SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3;
SELECT k1, k2, k3, val_t1, val_t2 FROM t1_00203 ANY FULL JOIN t2_00203 USING (k3, k1, k2) ORDER BY k1, k2, k3;
SELECT k1, k2, k3, val_t1, val_t2 FROM t1_00203 ANY RIGHT JOIN t2_00203 USING (k3, k1, k2) ORDER BY k1, k2, k3;
select k1, k2, sum(v) from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v), cityHash64(k1, k2)) group by k1, k2;
SELECT kafkaMurmurHash('a-little-bit-long-string');
SELECT kafkaMurmurHash('a-little-bit-longer-string');
SELECT kafkaMurmurHash('foobar');
SELECT kafkaMurmurHash('lkjh234lh9fiuh90y23oiuhsafujhadof229phr9h19h89h8');
SELECT key + 1 FROM join_with_index ALL INNER JOIN ( SELECT key, data FROM join_with_index WHERE toUInt64(data) IN (0, 529335254087962442) ) js2 USING (key);
SELECT key FROM ( SELECT 1 AS key ) AS t1 JOIN ( SELECT 1 AS key ) AS t2 ON t1.key = t2.key WHERE key;
SELECT key FROM ( SELECT key FROM t1 ) AS t1 JOIN ( SELECT key FROM t1 ) AS t2 ON t1.key = t2.key WHERE key;
SELECT key FROM ( SELECT key FROM t1 GROUP BY key ) t1 JOIN (SELECT key FROM t2) t2 ON t1.key = t2.key WHERE key FORMAT Null;
SELECT key FROM dist_00612;
SELECT key FROM dist_1;
SELECT key FROM dist_2;
SELECT key FROM mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connect_timeout = 100, connection_wait_timeout = 100) ORDER BY key;
select key from tab_00612 left array join arr as val where (key, val) in ((1, 1), (2, 2)) order by key;
select key from tab_00612 left array join arr as val where (key, val) in (1, 1);
select key from tab_00612 left array join n.x as val where (key, val) in ((1, 1), (2, 2)) order by key;
select key from tab_00612 left array join n.x as val where (key, val) in (1, 1);
SELECT key, a FROM test ORDER BY key, a, exp(key + a) SETTINGS allow_experimental_analyzer=1;
SELECT key, a FROM test ORDER BY key, a, exp(key + a);
SELECT key, a FROM test ORDER BY key, exp(key + a) SETTINGS allow_experimental_analyzer=1;
SELECT key, a FROM test ORDER BY key, exp(key + a);
SELECT Key, any(Value), any(ConcatArraySimple), groupArrayArrayMerge(ConcatArrayComplex) FROM summing_mt_aggregating_column GROUP BY Key;
select key, arr_x, arr_y, _table from test_in_tuple left array join x as arr_x, y as arr_y order by _table, arr_x, arr_y;
select key, arr_x, arr_y, _table from test_in_tuple left array join x as arr_x, y as arr_y where (key_2, arr_x, arr_y) in (1, 1, 1) order by _table, arr_x, arr_y;
select key, arrayJoin(arr) as val from tab_00612 where (key, val) in ((1, 1), (2, 2)) order by key;
select key, arrayJoin(arr) as val from tab_00612 where (key, val) in (1, 1);
select key, arrayJoin(n.x) as val from tab_00612 where (key, val) in ((1, 1), (2, 2)) order by key;
select key, arrayJoin(n.x) as val from tab_00612 where (key, val) in (1, 1);
select key, byteSize(*), complex1, byteSize(complex1) from test_byte_size_more_complex order by key;
select key, byteSize(*), ints, byteSize(ints), int_ints, byteSize(int_ints) from test_byte_size_complex_array order by key;
select key, byteSize(*), opt_int32, byteSize(opt_int32), opt_str, byteSize(opt_str), tuple, byteSize(tuple), strings, byteSize(strings) from test_byte_size_other order by key;
select key, byteSize(*), str1, byteSize(str1), str2, byteSize(str2), fstr1, byteSize(fstr1), fstr2, byteSize(fstr2) from test_byte_size_string order by key;
select key, byteSize(*), strs, byteSize(strs), str_strs, byteSize(str_strs) from test_byte_size_complex_array order by key;
select key, byteSize(*), toTypeName(date), byteSize(date), toTypeName(dt), byteSize(dt), toTypeName(dt64), byteSize(dt64), toTypeName(uuid), byteSize(uuid) from test_byte_size_number1 order by key;
select key, byteSize(*), uints8, byteSize(uints8), ints8, byteSize(ints8), ints32, byteSize(ints32), floats32, byteSize(floats32), decs32, byteSize(decs32), dates, byteSize(dates), uuids, byteSize(uuids) from test_byte_size_array order by key;
SELECT key, count(1) AS cnt FROM ( SELECT data.key FROM ( SELECT key FROM left AS s ) AS data LEFT JOIN ( SELECT key FROM right GROUP BY key ) AS promo ON promo.key = data.key ) GROUP BY key HAVING count(1) > 1;
select key, groupArray(repeat('a', 200)), count() from data_01513 group by key format Null settings optimize_aggregation_in_order=0;
SELECT key, n.renamed_x FROM table_for_rename_nested WHERE key = 7;
SELECT key, n.renamed_y FROM table_for_rename_nested WHERE key = 7;
select key, Path, Value, Version, col from test_graphite final order by key, Path, Time desc;
select key, Path, Value, Version, col from test_graphite order by key, Path, Time desc;
select key, s1.value, s2.value from ( select 'key1' as key, 'value1' as value ) s1 all left join ( select 'key1' as key, '' as value union all select 'key2' as key, toNullable('') as value ) s2 using key;
SELECT key, sum(agg) FROM tbl GROUP BY key ORDER BY key SETTINGS use_query_cache = 1, extremes = 1;
SELECT key, sum(agg) FROM tbl GROUP BY key WITH totals ORDER BY key SETTINGS use_query_cache = 1, extremes = 1;
SELECT key, sum(agg) FROM tbl GROUP BY key WITH totals ORDER BY key SETTINGS use_query_cache = 1;
select key, sum(sum(value)) over (rows unbounded preceding) from dist_01247 group by key;
select key, toTypeName(f32), byteSize(f32), toTypeName(f64), byteSize(f64) from test_byte_size_number0 order by key;
select key, toTypeName(i8), byteSize(i8), toTypeName(i16), byteSize(i16), toTypeName(i32), byteSize(i32), toTypeName(i64), byteSize(i64), toTypeName(i128), byteSize(i128), toTypeName(u256), byteSize(u256) from test_byte_size_number0 order by key;
select key, toTypeName(u8), byteSize(u8), toTypeName(u16), byteSize(u16), toTypeName(u32), byteSize(u32), toTypeName(u64), byteSize(u64), toTypeName(u256), byteSize(u256) from test_byte_size_number0 order by key;
select key, untuple(argMax((* except (key),), v1)) from kv group by key order by key format TSVWithNames;
select key, val1, val2, assumeNotNull(val1) > val2 x1, val1 > val2 x2 from data final prewhere assumeNotNull(val1) > 0 where x1 != x2 settings max_threads=1;
SELECT key, value FROM merge_tree_deduplication ORDER BY key;
SELECT key, value FROM merge_tree_deduplication WHERE key = 10;
SELECT key, value FROM merge_tree_deduplication WHERE key = 12;
SELECT key, value FROM merge_tree_deduplication;
SELECT key1 FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT key1 FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT key1, value1 FROM table_for_rename_pk WHERE key1 = 1 AND key2 = 1 AND key3 = 1;
SELECT key2, arrayReduce('uniqExactMerge', arr) FROM ( SELECT key1 % 3 AS key2, groupArray(state) AS arr FROM ( SELECT number % 10 AS key1, uniqExactState(number) AS state FROM ( SELECT * FROM system.numbers LIMIT 100 ) GROUP BY key1 ) GROUP BY key2 ) ORDER BY key2;
SELECT keycol, enum_col FROM table_key FULL JOIN table_with_enum USING (keycol) ORDER BY keycol;
SELECT keycol, enum_col FROM table_key LEFT JOIN table_with_enum USING (keycol) ORDER BY keycol;
SELECT keycol, enum_col FROM table_key RIGHT JOIN table_with_enum USING (keycol) ORDER BY keycol;
SELECT keycol, enum_col FROM table_with_enum FULL JOIN table_key USING (keycol) ORDER BY keycol;
SELECT keycol, enum_col FROM table_with_enum LEFT JOIN table_key USING (keycol) ORDER BY keycol;
SELECT keycol, enum_col FROM table_with_enum RIGHT JOIN table_key USING (keycol) ORDER BY keycol;
SELECT kostikConsistentHash(-1, 40000);
SELECT kostikConsistentHash(16045690984833335023+number-number, 120) FROM system.numbers LIMIT 1000000, 2;
SELECT kurtPop(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT kurtSamp(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT kv['a'] FROM map_lc;
SELECT l.c FROM (SELECT 1 AS a, 2 AS b) AS l join (SELECT 2 AS b, 3 AS c) AS r USING b;
SELECT L1Distance((1, 2, 3), (2, 3, 1));
SELECT L1Distance([0, 0, 0], [1, 2, 3]);
SELECT L1Distance([0, 0], [1]);
SELECT L1Distance(v, [0, 0, 0]) FROM vec1;
SELECT L1Norm((-1, 2, -3));
SELECT L1Norm((-1, 2.5, -3.6));
SELECT L1Norm(1);
SELECT L1Norm(1, 2);
SELECT L1Norm([1, 2, 3]);
SELECT L1Normalize((NULL, 1));
SELECT L1Normalize(materialize((1, -4)));
SELECT L2Distance((5, 5), (5, 5));
SELECT L2Distance([1, 2, 3], [0, 0, 0]);
SELECT L2Distance([1, 2, 3], NULL);
SELECT L2Distance(materialize((1, 1)), (3, -1));
SELECT L2Distance(v, [0, 0, 0]) FROM vec1;
SELECT L2Norm((1, 1.0));
SELECT L2Norm((NULL, 3, 4));
SELECT L2Norm([3., 4., 5.]);
SELECT L2Norm(materialize((-12, 5)));
SELECT L2Normalize((3, 4));
SELECT L2SquaredDistance((5, 5), (5, 5));
SELECT L2SquaredDistance([1, 2, 3], [0, 0, 0]);
SELECT L2SquaredDistance([1, 2, 3], NULL);
SELECT L2SquaredDistance(materialize((1, 1)), (3, -1));
SELECT L2SquaredDistance(v, [0, 0, 0]) FROM vec1;
SELECT L2SquaredNorm((1, 1.0));
SELECT L2SquaredNorm((NULL, 3, 4));
SELECT L2SquaredNorm([3., 4., 5.]);
SELECT L2SquaredNorm(materialize((-12, 5)));
SELECT lagInFrame(1, /* INT64_MAX+1 */ 0x7fffffffffffffff+1) OVER ();
SELECT lagInFrame(1, 1) OVER ();
select lagInFrameOrNull(1) over ();
select largestTriangleThreeBuckets(0)(x, y) FROM largestTriangleThreeBucketsTestFloat64Float64;
select largestTriangleThreeBuckets(1)(x, y) FROM largestTriangleThreeBucketsTestFloat64Float64;
select largestTriangleThreeBuckets(2)(x, y) FROM largestTriangleThreeBucketsTestFloat64Float64;
select largestTriangleThreeBuckets(20)(x, y) from largestTriangleThreeBucketsTestDecimal64Decimal64;
SELECT largestTriangleThreeBuckets(4)(x, y) AS downsampled_data FROM largestTriangleThreeBucketsTestFloat64Float64;
select largestTriangleThreeBuckets(5)(x, y) from largestTriangleThreeBucketsTestDateTime64Float64;
select last_value(b) ignore nulls from test;
select last_value(b) respect nulls from test;
SELECT last_value(value) OVER (ORDER BY time ASC) as last_value FROM test1 WHERE (key = 3);
SELECT last_value(value) OVER (ORDER BY time ASC) FROM test2;
SELECT last_value(value) OVER (PARTITION BY id ORDER BY time ASC) as last_value FROM test1;
Select last_value_respect_nulls (number) IGNORE NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));
Select LAST_VALUE_respect_nulls (number) IGNORE NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));
SELECT last_value_respect_nullsMerge(t) FROM (Select last_value_respect_nullsState(dummy) as t FROM system.one);
SELECT last_value_respect_nullsMerge(t) FROM (Select last_value_respect_nullsState(NULL::Nullable(UInt8)) as t FROM numbers(5));
SELECT last_value_respect_nullsMerge(t) FROM (Select last_value_respect_nullsState(NULL::Nullable(UInt8)) as t FROM system.one);
SELECT last_value_respect_nullsMerge(t) FROM (Select last_value_respect_nullsState(number) as t FROM numbers(5));
SELECT last_valueIf (number, isNull(number)) RESPECT NULLS from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));
SELECT last_valueIf (number, NOT isNull(number) AND (assumeNotNull(number) > 5)) RESPECT NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));
SELECT LAST_VALUEIf (number, NOT isNull(number) AND (assumeNotNull(number) > 5)) RESPECT NULLS from (SELECT if(number < 2, NULL, number) as number FROM numbers(10));
select LastName from kql_table1 limit 1;
select lat, lon, geoToH3(lon, lat, resolution) AS k from table1 order by lat, lon, k;
SELECT lc FROM tlc WHERE notIn(lc, ('rty', 'uiop'));
SELECT lc FROM tnul WHERE notIn(lc, ('rty', 'uiop'));
select lcase('FOO');
SELECT lcm(-15, -10);
SELECT lcm(-15, 10);
select lcm(-2147483648, 1);
select lcm(-256, 64);
SELECT lcm(-9223372036854775806, -9223372036854775806);
select lcm(1, 1);
select lcm(11, 121);
SELECT lcm(15, -10);
SELECT lcm(15, 10);
select lcm(15, 49);
select lcm(2147483647, 2147483646);
select lcm(255, 254);
select lcm(4, 2);
select lcm(4611686011984936962, 2147483647);
SELECT lcm(toInt128('-170141183460469231731687303715884105720'), toInt128('-170141183460469231731687303715884105720'));
SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720));
SELECT leadInFrame(1, /* INT64_MAX+1 */ 0x7fffffffffffffff+1) OVER ();
SELECT leadInFrame(1, 1) OVER ();
SELECT least('hello');
SELECT least('hello', 'world');
SELECT least('hello', 'world', '');
SELECT LEAST(-1, 18446744073709551615) x, toTypeName(x);
SELECT least(0., -0.);
SELECT LEAST(1, -1);
SELECT least(1, inf, nan);
SELECT least(1, inf, nan, NULL);
SELECT least(1.5, 1.0::Decimal32(5));
SELECT least(4, number, 6), greatest(4, number, 6) FROM numbers(10);
SELECT least([[[], []]], [[[]]], [[[]], [[]]]);
SELECT least([], [NULL]);
SELECT LEAST([NULL], [0]);
SELECT least(a, 0), least(b, 0), least(g, 0) FROM decimal ORDER BY a;
SELECT least(a, b), least(a, g), greatest(a, b), greatest(a, g) FROM decimal ORDER BY a;
SELECT least(toNullable(123), 456);
SELECT least(toUInt32(0), toInt256(0)), greatest(toInt32(0), toUInt256(0));
SELECT least(value, 0) FROM system.metrics WHERE metric = 'MemoryTracking';
select LEFT('foo', 123);
select left('foo', 2);
SELECT left('Hello', -3);
SELECT left('Hello', -5);
SELECT left('Hello', -6);
SELECT left('Hello', -number) FROM numbers(10);
SELECT left('Hello', 0);
SELECT left('Hello', 5);
SELECT left('Hello', 6);
SELECT left('Hello', NULL);
SELECT left('Hello', number) FROM numbers(10);
SELECT lEFT('Привет', -12);
SELECT left('Привет', -13);
SELECT LEFT('Привет', -4);
SELECT Left('Привет', 0);
SELECT left('Привет', NULL);
SELECT left(materialize('Привет'), 4);
SELECT left(materialize(toNullable('Привет')), 13);
SELECT left(toNullable('Привет'), 12);
SELECT left, right FROM ( SELECT number % 4 AS k1, number % 3 AS k2, number AS left FROM system.numbers LIMIT 10 ) js1 ALL LEFT JOIN ( SELECT number % 2 AS k1, number % 6 AS k2, number AS right FROM system.numbers LIMIT 10 ) js2 USING k1, k2 ORDER BY left, right;
SELECT left, right FROM ( SELECT number % 4 AS k1, toString(number % 3) AS k2, number AS left FROM system.numbers LIMIT 10 ) js1 ALL LEFT JOIN ( SELECT number % 2 AS k1, toString(number % 6) AS k2, number AS right FROM system.numbers LIMIT 10 ) js2 USING k1, k2 ORDER BY left, right;
SELECT leftPad('abc', 0), leftPad('abc', 0::Int32);
SELECT leftPad('abc', 1), leftPad('abc', 1::Int32);
SELECT leftPad('abc', 10), leftPad('abc', 10::Int32);
SELECT leftPad('abc', 10, '*'), leftPad('abc', 10::Int32, '*');
SELECT leftPad('abc', 10, '*.'),leftPad('abc', 10::Int32, '*.');
SELECT leftPad('abc', 2), leftPad('abc', 2::Int32);
SELECT leftPad('abc', 2, '*'), leftPad('abc', 2::Int32, '*');
SELECT leftPad('abc', 2, '*.'), leftPad('abc', 2::Int32, '*.');
SELECT leftPad('abc', 3), leftPad('abc', 3::Int32);
SELECT leftPad('abc', 4), leftPad('abc', 4::Int32);
SELECT leftPad('abc', 4, '*'), leftPad('abc', 4::Int32, '*');
SELECT leftPad('abc', 4, '*.'), leftPad('abc', 4::Int32, '*.');
SELECT leftPad('abc', 5), leftPad('abc', 5::Int32);
SELECT leftPad('abc', 5, '*'), leftPad('abc', 5::Int32, '*');
SELECT leftPad('abc', 5, '*.'), leftPad('abc', 5::Int32, '*.');
SELECT leftPad('абвг', 12, 'ЧАС'), leftPad('абвг', 12::Int32, 'ЧАС');
SELECT leftPad('абвг', 2), leftPad('абвг', 2::Int32);
SELECT leftPad('абвг', 4), leftPad('абвг', 4::Int32);
SELECT leftPadUTF8('абвг', 12, 'ЧАС'), leftPadUTF8('абвг', 12::Int32, 'ЧАС');
SELECT leftPadUTF8('абвг', 2), leftPadUTF8('абвг', 2::Int32);
SELECT leftPadUTF8('абвг', 4), leftPadUTF8('абвг', 4::Int32);
SELECT leftUTF8('Привет', -12);
SELECT leftUTF8('Привет', -13);
SELECT leftUTF8('Привет', -4);
SELECT leftUTF8('Привет', -number) FROM numbers(10);
SELECT leftUTF8('Привет', 0);
SELECT leftUTF8('Привет', 12);
SELECT leftUTF8('Привет', 13);
SELECT leftUTF8('Привет', 4);
SELECT leftUTF8('Привет', NULL);
SELECT leftUTF8('Привет', number % 3 = 0 ? NULL : (number % 2 ? toInt64(number) : -number)) FROM numbers(10);
SELECT leftUTF8('Привет', number) FROM numbers(10);
SELECT leftUTF8(number < 5 ? 'Hello' : 'Привет', number % 3 = 0 ? NULL : (number % 2 ? toInt64(number) : -number)) FROM numbers(10);
SELECT lemmatize('en', 'dogs');
SELECT lemmatize('en', 'flown');
SELECT lemmatize('en', 'imported');
SELECT lemmatize('en', 'looking');
SELECT lemmatize('en', 'tokenized');
SELECT lemmatize('en', 'took');
SELECT lemmatize('en', 'wolves');
SELECT LENGTH('корова'), CHAR_LENGTH('ворона'), CHARACTER_LENGTH('фейхоа');
SELECT length(a), length(b), length(c) FROM decimal;
SELECT length(arr), empty(arr), notEmpty(arr), empty(n) FROM t_func_to_subcolumns;
SELECT length(arrayDistinct([NULL, NULL, NULL]));
SELECT length(arrayReduce('groupUniqArray', [[1, 2], [1], emptyArrayUInt8(), [1], [1, 2]]));
select length(b) as l from tab_00717 group by l, l + 1, l + 2, l + 3, l + 4, l + 5;
select length(b) as l from tab_00717 group by l, l + 1, l + 2, l + 3, l + 4;
select length(b) as l from tab_00717 group by l, l + 1, l + 2, l + 3;
select length(b) as l from tab_00717 group by l, l + 1, l + 2;
select length(b) as l from tab_00717 group by l, l + 1;
select length(b) as l from tab_00717 group by l;
SELECT length(buildId()) >= 16;
select length(currentUser()) > 0;
SELECT length(entries.bytes) FROM system.asynchronous_inserts WHERE database = currentDatabase() AND table = 't_async_insert_skip_settings' ORDER BY first_update;
SELECT length(fuzzBits('stringstring', 0.5)), a FROM numbers(1) ARRAY JOIN [1, 2] AS a;
SELECT length(fuzzBits(randomString(100), 0.5));
SELECT length(geohashesInBox(-inf, -inf, inf, inf, 3));
SELECT length(groupArray(toString(number))), count() FROM (SELECT number FROM system.numbers LIMIT 100000);
SELECT length(groupUniqArray(10)(v)) FROM group_uniq_arr_int GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(10)(v)) FROM group_uniq_str GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(10000)(d)), length(groupUniqArray(10000)(dt)) FROM grop_uniq_array_date GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(10000)(v)) FROM group_uniq_str GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(100000)(v)) FROM group_uniq_arr_int GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(2)(d)), length(groupUniqArray(2)(dt)), length(groupUniqArray(d)), length(groupUniqArray(dt)) FROM grop_uniq_array_date GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(v)) FROM group_uniq_arr_int GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(v)) FROM group_uniq_arr_str GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(v)) FROM group_uniq_str GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(v)) FROM remote('127.0.0.{2,3,4,5}', currentDatabase(), 'group_uniq_arr_int') GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(v)) FROM remote('127.0.0.{2,3,4,5}', currentDatabase(), 'group_uniq_arr_str') GROUP BY id ORDER BY id;
SELECT length(groupUniqArray(v)) FROM remote('127.0.0.{2,3,4,5}', currentDatabase(), 'group_uniq_str') GROUP BY id ORDER BY id;
SELECT length(groupUniqArrayIf(d, d != hex(0))) FROM arena GROUP BY k;
SELECT length(groupUniqArrayMerge(ds)) FROM (SELECT k, groupUniqArrayState(d) AS ds FROM arena GROUP BY k) GROUP BY k;
SELECT length(m2['aaa'::FixedString(4)]) FROM t_map_02014;
select length(map());
select length(map(1,2,3,4));
select length(name), name, '.' from system.users where position(name, ' ')!=0 order by name;
SELECT length(nest.a), length(nest.b), length(nest.c) FROM decimal;
SELECT length(randomPrintableASCII(1000));
SELECT length(range(100000000));
SELECT length(repeat('', 1000000));
SELECT length(repeat('x', 1000000));
SELECT length(repeat('x', 1000001));
SELECT length(repeat(repeat('Hello, world!', 1000000), 10));
SELECT length(replaceAll(bin('clickhouse cloud'), '0', '')) = bitCount('clickhouse cloud');
SELECT length(replaceAll(bin('clickhouse cloud'), '0', ''));
select length(splitByChar('*', data_path)), replaceRegexpOne(data_path, '^.*/([^/]*)/' , '\\1') from system.distribution_queue where database = currentDatabase() and table = 'dist_01555' format CSV;
SELECT length(stack_trace) > 1000 FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \'Hello\', throwIf(1)%' AND query NOT LIKE '%system%' ORDER BY event_time_microseconds DESC LIMIT 1;
SELECT length(stack_trace) FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \'World\', throwIf(1)%' AND query NOT LIKE '%system%' ORDER BY event_time_microseconds DESC LIMIT 1;
SELECT length(thread_ids) FROM system.query_log WHERE query='SELECT max(x) FROM select_final FINAL;' AND type='QueryFinish' AND current_database = currentDatabase() ORDER BY event_time DESC LIMIT 1;
select length(topK(20)((number, ''))) from remote('127.{1,1}', currentDatabase(), data_01409);
select length(topK(20)(number)) from remote('127.{1,1}', currentDatabase(), data_01409);
SELECT length(topK(3)(A)) FROM remote('localhost,127.0.0.1', currentDatabase(), topXtest);
SELECT length(topK(3)(A)) FROM topXtest;
SELECT length(topK(30)(A)) FROM remote('localhost,127.0.0.1', currentDatabase(), topXtest);
SELECT length(topK(30)(A)) FROM topXtest;
SELECT length(topK(5592405)(tuple(number))) FROM numbers(10) GROUP BY number;
SELECT length(topK(A)) FROM remote('localhost,127.0.0.1', currentDatabase(), topXtest);
SELECT length(topK(A)) FROM topXtest;
SELECT length(topKWeighted(2, -9223372036854775808)(number, 1025)) FROM system.numbers;
select length(topKWeighted(20)((number, ''), 1)) from remote('127.{1,1}', currentDatabase(), data_01409);
select length(topKWeighted(20)(number, 1)) from remote('127.{1,1}', currentDatabase(), data_01409);
SELECT length(toString(groupArrayState(toDate(number)))) FROM (SELECT * FROM system.numbers LIMIT 10);
SELECT length(toString(groupArrayState(toDateTime(number)))) FROM (SELECT * FROM system.numbers LIMIT 10);
SELECT lengthUTF8(lowerUTF8(randomStringUTF8(99)));
SELECT level, COUNT() FROM (SELECT uid, windowFunnel(3600)(toUInt32(its), action_code != '', action_code = '2') AS level FROM remote('127.0.0.{2,3}', currentDatabase(), remote_test) GROUP BY uid) GROUP BY level;
SELECT library_name, license_type, license_path FROM system.licenses WHERE library_name LIKE '%zstd%';
SELECT lifetime_bytes, lifetime_rows FROM system.tables WHERE name = 'check_system_tables' AND database = currentDatabase();
SELECT lifetime_min, lifetime_max FROM system.dictionaries WHERE database={CLICKHOUSE_DATABASE_1:String} AND name = 'dict1';
select line, _file from test;
SELECT LinfDistance((1, 1), (1, 2));
SELECT LinfDistance([1, 2, 3], [0, 0, 0]);
SELECT LinfDistance([5, 4, 3], v) FROM vec1;
SELECT LinfDistance(v, materialize([0, -2, 0])) FROM vec1;
SELECT LinfNorm((1, -2.3, 1.7));
SELECT LinfNorm([0, 0, 2]);
SELECT LinfNormalize((5, -5, 5.0));
select Locate('foo', 'o');
select log(0) = -inf;
select log(1) = 0;
select log1p(-1) = -inf;
select log1p(0) = 0;
select log2(0) = -inf;
select log2(1) = 0;
select log2(2) = 1;
select log2(4) = 2;
SELECT lon/5 - 180 AS lon1, lat/5 - 90 AS lat1, lon1 AS lon2, lat1 AS lat2, geohashesInBox(lon1, lat1, lon2, lat2, 1) AS g FROM (SELECT arrayJoin(range(360*5)) AS lon, arrayJoin(range(180*5)) AS lat) WHERE length(g) != 1;
SELECT lon/5 - 40 AS lon1, lat/5 - 20 AS lat1, lon1 + 0.0000000001 AS lon2, lat1 + 0.0000000001 AS lat2, geohashesInBox(lon1, lat1, lon2, lat2, 1) AS g FROM (SELECT arrayJoin(range(80*5)) AS lon, arrayJoin(range(10*5)) AS lat) WHERE length(g) != 1;
SELECT lon/5 - 40 AS lon1, lat/5 - 20 AS lat1, lon1 AS lon2, lat1 AS lat2, geohashesInBox(lon1, lat1, lon2, lat2, 12) AS g FROM (SELECT arrayJoin(range(80*5)) AS lon, arrayJoin(range(10*5)) AS lat) WHERE length(g) != 1;
select lost_part_count from system.replicas where database = currentDatabase() and table = 'rmt2';
select lower('aaaaaaaaaaaaaaa012345789,.!aaaa' as str) = str;
select lower('AaAaAaAaAaAaAaA012345789,.!aAaA') = 'aaaaaaaaaaaaaaa012345789,.!aaaa';
select lower('aaaaАБВГAAAAaaAA') = 'aaaaАБВГaaaaaaaa';
select LOWER('Foo');
SELECT lower(hex(reverse(CAST(sipHash128('very_very_long_column_name_that_will_be_replaced_with_hash'), 'FixedString(16)'))));
SELECT lowerUTF8('\xF0') = lowerUTF8('\xF0');
select lowerUTF8('aaaaaaaaaaaaaaa012345789,.!aaaa' as str) = str;
select lowerUTF8('AaAaAaAaAaAaAaA012345789,.!aAaA') = 'aaaaaaaaaaaaaaa012345789,.!aaaa';
select lowerUTF8('aaaaАБВГAAAAaaAA') = 'aaaaабвгaaaaaaaa';
SELECT lowerUTF8('КВ АМ И СЖ КВ АМ И СЖ');
SELECT lowerUTF8(repeat('0', 48) || 'КВ АМ И СЖ');
SELECT LpDistance((1800, 1900), (18, 59), 12) - LpDistance(tuple(-22), tuple(1900), 12.);
SELECT LpDistance([1, 2, 3], [0, 0, 0], 3.5);
SELECT LpDistance(tuple(*, 1), tuple(2, *), * + 1.) FROM numbers(3, 2);
SELECT LpDistance(v, [0, 0, 0], 3.14) FROM vec1;
SELECT LpNorm((-1, -2), 11.);
SELECT LpNorm((1, 2, 3), 2.2);
SELECT LpNorm((1.5, 2.5, 4), pi());
SELECT LpNorm((13, -84.4, 91, 63.1), 2) = L2Norm(tuple(13, -84.4, 91, 63.1));
SELECT LpNorm((3, 1, 4), 0);
SELECT LpNorm((95800, 217519, 414560), 4);
SELECT LpNorm([3., 4., 5.], 1.1);
SELECT LpNorm(materialize((13, -84.4, 91, 63.1)), 1) = L1Norm(tuple(13, -84.4, 91, 63.1));
SELECT LpNorm(tuple(-1), 3);
SELECT LpNorm(tuple(-1), 3.3);
SELECT LpNorm(tuple(-1.1), 3);
SELECT LpNormalize((1, pow(31, 1 / 5)), 5.);
select ltrim(' foo');
SELECT LTRIM(' abcdef ');
select ltrim('') || rtrim('') || trim('');
select lttb(5)(x, y) from largestTriangleThreeBucketsTestDateTime64Float64;
SELECT m FROM table_map_with_key_integer;
SELECT m.keys FROM t_map;
SELECT m.values FROM t_map;
SELECT m1, m2 FROM t_map_int_key;
SELECT m1, m2, m3 FROM map_json FORMAT JSONEachRow SETTINGS output_format_json_quote_64bit_integers = 0;
SELECT m1, m2, m3 FROM map_json FORMAT JSONEachRow;
SELECT m1['aaa'::FixedString(3)], m2['aaa'::FixedString(3)] FROM t_map_02014;
SELECT m1['aaa'], m2['aaa'] FROM t_map_02014;
SELECT m1[fs], m2[fs] FROM t_map_02014;
SELECT m1[i1], m2[i1], m3[i1] FROM t_map_02014;
SELECT m1[i2], m2[i2], m3[i2] FROM t_map_02014;
SELECT m1[s], m2[s] FROM t_map_02014;
SELECT m[-1], m[0], m[toInt128('1234567898765432123456789')], m[toInt128('-1234567898765432123456789')] FROM table_map_with_key_integer;
SELECT m[-1], m[2147483647], m[-2147483648] FROM table_map_with_key_integer;
select m[0], materialize(map('key', 42)) as m;
SELECT m[127], m[1], m[0], m[-1] FROM table_map_with_key_integer;
SELECT m[257], m[1] FROM table_map_with_key_integer;
SELECT m[toDate('2020-01-01')], m[toDate('2020-01-02')], m[toDate('2020-01-03')] FROM table_map_with_key_integer;
SELECT m[toDate(number)] FROM table_map_with_key_integer ARRAY JOIN [0, 1, 2] AS number;
SELECT m[toInt128(-1)], m[toInt128(0)], m[toInt128('1234567898765432123456789')], m[toInt128('-1234567898765432123456789')] FROM table_map_with_key_integer;
SELECT m[toInt128(number - 2)] FROM table_map_with_key_integer ARRAY JOIN [0, 1, 2, 3] AS number;
SELECT m[toInt32(number - 2)] FROM table_map_with_key_integer ARRAY JOIN [0, 1, 2, 3, 4] AS number;
SELECT m[toInt8(number - 2)] FROM table_map_with_key_integer ARRAY JOIN [0, 1, 2, 3, 4] AS number;
SELECT m[toUInt64(0)], m[toInt64(0)], m[toUInt8(0)], m[toUInt16(0)] FROM table_map_with_key_integer;
select makeDate('1980', '10', '20');
select makeDate(-1980, 10);
select makeDate(-1980, 10, 17);
select makeDate(-1980.0, 9);
select makeDate(-1980.0, 9, 32.0/2);
select makeDate(0x7fff+2010,1,1);
select makeDate(0x7fffffff+2010,1,3);
select makeDate(0x7fffffffffffffff+2010,1,3);
select makeDate(0xffff+2010,1,2);
select makeDate(0xffffffff+2010,1,4);
select makeDate(0xffffffffffffffff+2010,1,4);
select makeDate(1924,1,1);
select makeDate(1924,12,1);
select makeDate(1924,12,31);
select makeDate(1969,1,1);
select makeDate(1969,12,1);
select makeDate(1969,12,31);
select makeDate(1969,355);
select makeDate(1969,356);
select makeDate(1969,357);
select makeDate(1970, 01);
select makeDate(1970, 01, 01);
select makeDate(1970,0);
select makeDate(1970,0,0);
select makeDate(1970,0,1);
select makeDate(1970,1);
select makeDate(1970,1,0);
select makeDate(1970,2);
select makeDate(1980);
select makeDate(1980, -10);
select makeDate(1980, -10, 17);
select MAKEDATE(1980, 1);
select makeDate(1980, 10, -17);
select makeDate(1980, 10, 17);
select makeDate(1980, 15, 1);
select makeDate(1980, 2, 29);
select makeDate(1980, 3, NULL);
select makeDate(1980, NULL);
select makeDate(1980, NULL, 4);
select makeDate(1980.0, 9);
select makeDate(1980.0, 9, 30.0/2);
select makeDate(19800, 12);
select makeDate(19800, 12, 3);
select makeDate(1984, 2, 30);
select makeDate(1984, 3, False);
select makeDate(1984, 3, True);
select makeDate(1990,0,1);
select makeDate(1990,1,0);
select makeDate(1994, False, 24);
select makeDate(1994, True, 24);
select makeDate(2020, 08);
select makeDate(2020, 08, 24);
select makeDate(2148,1,1);
select makeDate(2149, 157);
select makeDate(2149, 158);
select makeDate(2149,1,1);
select makeDate(2149,6,6);
select makeDate(2149,6,7);
select makeDate(2150,1,1);
select makeDate(2282,1,1);
select makeDate(2283,1,1);
select makeDate(2283,11,11);
select makeDate(2283,11,12);
select makeDate(2284,1,1);
select makeDate(cast('-1980.1' as Decimal(20,5)), 9);
select makeDate(cast('-1980.1' as Decimal(20,5)), 9, 18);
select makeDate(cast(-1980.1 as Float32), 9);
select makeDate(cast(-1980.1 as Float32), 9, 20);
select makeDate(cast(1980 as Date), 10);
select makeDate(cast(1980 as Date), 10, 30);
select makeDate(cast(1980.1 as Decimal(20,5)), 9);
select makeDate(cast(1980.1 as Decimal(20,5)), 9, 17);
select makeDate(cast(1980.1 as Float32), 9);
select makeDate(cast(1980.1 as Float32), 9, 19);
select makeDate(False, 3, 24);
select makeDate(NULL, 3);
select makeDate(NULL, 3, 4);
select makeDate(year, month, day) from (select 1984 as year, 2 as month, 3 as day union all select 1984 as year, 2 as month, 4 as day) order by year, month, day;
select makeDate(year, month, day) from (select NULL as year, 2 as month, 3 as day union all select 1984 as year, 2 as month, 3 as day) order by year, month, day;
select makeDate(year, month, day) from (select NULL as year, 2 as month, 3 as day union all select NULL as year, 2 as month, 3 as day) order by year, month, day;
select makeDate32('1980', '10', '20');
select makeDate32(-1980, 10);
select makeDate32(-1980, 10, 17);
select makeDate32(-1980.0, 9);
select makeDate32(-1980.0, 9, 32.0/2);
select makeDate32(0x7fff+2010,1,1);
select makeDate32(0x7fffffff+2010,1,3);
select makeDate32(0x7fffffffffffffff+2010,1,3);
select makeDate32(0xffff+2010,1,2);
select makeDate32(0xffffffff+2010,1,4);
select makeDate32(0xffffffffffffffff+2010,1,4);
select makeDate32(1899, 365);
select makeDate32(1899, 366);
select makeDate32(1899, 367);
select makeDate32(1899,1,1);
select makeDate32(1899,12,1);
select makeDate32(1899,12,31);
select makeDate32(1900, 0);
select makeDate32(1900, 01);
select makeDate32(1900, 1);
select makeDate32(1900, 2);
select makeDate32(1969,1,1);
select makeDate32(1969,12,1);
select makeDate32(1969,12,31);
select makeDate32(1970, 01, 01);
select makeDate32(1970,0,0);
select makeDate32(1970,0,1);
select makeDate32(1970,1,0);
select makeDate32(1980);
select makeDate32(1980, -10);
select makeDate32(1980, -10, 17);
select makeDate32(1980, 10, -17);
select makeDate32(1980, 10, 17);
select makeDate32(1980, 15, 1);
select makeDate32(1980, 2, 29);
select makeDate32(1980, 3, NULL);
select makeDate32(1980, NULL);
select makeDate32(1980, NULL, 4);
select makeDate32(1980.0, 9);
select makeDate32(1980.0, 9, 30.0/2);
select makeDate32(19800, 12);
select makeDate32(19800, 12, 3);
select makeDate32(1984, 2, 30);
select makeDate32(1984, 3, False);
select makeDate32(1984, 3, True);
select makeDate32(1990,0,1);
select makeDate32(1990,1,0);
select makeDate32(1994, False, 24);
select makeDate32(1994, True, 24);
select makeDate32(2020, 08);
select makeDate32(2020, 08, 24);
select makeDate32(2148,1,1);
select makeDate32(2149,1,1);
select makeDate32(2149,6,6);
select makeDate32(2149,6,7);
select makeDate32(2150,1,1);
select makeDate32(2298,1,1);
select makeDate32(2299, 365);
select makeDate32(2299, 366);
select makeDate32(2299,1,1);
select makeDate32(2299,12,31);
select makeDate32(2300, 1);
select makeDate32(2300,1,1);
select makeDate32(cast('-1980.1' as Decimal(20,5)), 9);
select makeDate32(cast('-1980.1' as Decimal(20,5)), 9, 18);
select makeDate32(cast(-1980.1 as Float32), 9);
select makeDate32(cast(-1980.1 as Float32), 9, 20);
select makeDate32(cast(1980 as Date), 10);
select makeDate32(cast(1980 as Date), 10, 30);
select makeDate32(cast(1980.1 as Decimal(20,5)), 9);
select makeDate32(cast(1980.1 as Decimal(20,5)), 9, 17);
select makeDate32(cast(1980.1 as Float32), 9);
select makeDate32(cast(1980.1 as Float32), 9, 19);
select makeDate32(False, 3, 24);
select makeDate32(NULL, 3);
select makeDate32(NULL, 3, 4);
select makeDate32(year, month, day) from (select 1984 as year, 2 as month, 3 as day union all select 1984 as year, 2 as month, 4 as day) order by year, month, day;
select makeDate32(year, month, day) from (select NULL as year, 2 as month, 3 as day union all select NULL as year, 2 as month, 3 as day) order by year, month, day;
select makeDateTime(-1984, 1, 1, 0, 0, 0, 'UTC');
select makeDateTime(1924, 12, 31, 23, 59, 59, 'UTC');
select makeDateTime(1925, 1, 1, 0, 0, 0, 'UTC');
select makeDateTime(1983, 2, 29, 0, 0, 0, 'UTC');
select makeDateTime(1984, -1, 1, 0, 0, 0, 'UTC');
select makeDateTime(1984, 0, 1, 0, 0, 0, 'UTC');
select makeDateTime(1984, 1, -1, 0, 0, 0, 'UTC');
select makeDateTime(1984, 1, 0, 0, 0, 0, 'UTC');
select makeDateTime(1984, 1, 1, -1, 0, 0, 'UTC');
select makeDateTime(1984, 1, 1, 0, -1, 0, 'UTC');
select makeDateTime(1984, 1, 1, 0, 0, -1, 'UTC');
select makeDateTime(1984, 1, 1, 0, 0, 0, 'not a timezone');
select makeDateTime(1984, 1, 1, 0, 0, 70, 'UTC');
select makeDateTime(1984, 1, 1, 0, 70, 0, 'UTC');
select makeDateTime(1984, 1, 1, 25, 0, 0, 'UTC');
select makeDateTime(1984, 1, 41, 0, 0, 0, 'UTC');
select makeDateTime(1984, 13, 1, 0, 0, 0, 'UTC');
select makeDateTime(1991, 65537, 24, 21, 4, 0, 'UTC');
select makeDateTime(1991, 8, 24, 21, 4, 0);
select makeDateTime(1991, 8, 24, 21, 4, 0, 'CET');
select makeDateTime(1991, 8, 24, 21, 4, 65537, 'UTC');
select makeDateTime(1991, 8, 24, 21, 65537, 0, 'UTC');
select makeDateTime(1991, 8, 24, 65537, 4, 0, 'UTC');
select makeDateTime(1991, 8, 65537, 21, 4, 0, 'UTC');
select makeDateTime(2262, 4, 11, 23, 47, 16, 'UTC');
select makeDateTime(2262, 4, 11, 23, 47, 17, 'UTC');
select makeDateTime(2283, 11, 11, 23, 59, 59, 'UTC');
select makeDateTime(2283, 11, 12, 0, 0, 0, 'UTC');
select makeDateTime(65537, 8, 24, 21, 4, 0, 'UTC');
select makeDateTime64(-1984, 1, 1, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1899, 12, 31, 23, 59, 59, 999999999, 9, 'UTC');
select makeDateTime64(1900, 1, 1, 0, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1983, 2, 29, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1983, 2, 30, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1983, 2, 31, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1983, 2, 32, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, -1, 1, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 1, -1, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 1, 0, 0, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 1, 1, -1, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 0, 0, 0, 0, 9, 'not a timezone');
select makeDateTime64(1984, 1, 1, 0, 0, 0, 0, 9.5, 'UTC');
select makeDateTime64(1984, 1, 1, 0, 0, 0, 0.5, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 0, 0, 0.5, 0, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 0, 0, 70, 0, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 0, 0.5, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 0, 70, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 0.5, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 2, -1, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 2, 3, -1, 5, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 2, 3, 4, -1, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 2, 3, 4, NaN, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 2, 3, NaN, 5, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 2, NaN, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 1, 1, 25, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 1, 1, NaN, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 1, 1.5, 0, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 1, 41, 0, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 1, NaN, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 1.5, 1, 0, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 13, 1, 0, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1984, 2, 29, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 2, 30, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 2, 31, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, 2, 32, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984, NaN, 1, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(1984.5, 1, 1, 0, 0, 0, 0, 9, 'UTC');
select makeDateTime64(1991, 65537, 24, 21, 4, 0);
select makeDateTime64(1991, 8, 24, 21, 4, 0);
select makeDateTime64(1991, 8, 24, 21, 4, 0, 123);
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 0, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 1, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 10, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 2, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 3, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 4, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 5, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 6);
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 6, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 7, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 8, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 9, 'CET');
select makeDateTime64(1991, 8, 24, 21, 4, 65537);
select makeDateTime64(1991, 8, 24, 21, 65537, 0);
select makeDateTime64(1991, 8, 24, 65537, 4, 0);
select makeDateTime64(1991, 8, 65537, 21, 4, 0);
select makeDateTime64(2262, 4, 11, 23, 47, 16, 854775808, 9, 'UTC');
select makeDateTime64(2299, 12, 31, 23, 59, 59, 99999999, 8, 'UTC');
select makeDateTime64(2299, 12, 31, 23, 59, 59, 999999999, 9, 'UTC');
select makeDateTime64(65537, 8, 24, 21, 4, 0);
select makeDateTime64(NaN, 1, 1, 2, 3, 4, 5, 9, 'UTC');
select makeDateTime64(year, 1, 1, 1, 0, 0, 0, precision, timezone) from ( select 1984 as year, 5 as precision, 'UTC' as timezone union all select 1985 as year, 5 as precision, 'UTC' as timezone );
SELECT mannWhitneyUTest(left, right) from mann_whitney_test;
SELECT mannWhitneyUTest(salary, salary) OVER (ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func FROM 01802_empsalary;
select map( 'aa', 4, 'bb' , 5) as m, mapContains(m, 'aa'), mapContains(m, 'k');
SELECT map('2020-10-10'::Date, 'v1', '2020-10-11'::Date, 'v2') AS m FORMAT JSONEachRow;
SELECT map('2020-10-10'::Date, 'v1', '2020-10-11'::Date, 'v2') AS m, toJSONString(m) AS s, isValidJSON(s);
SELECT map('a', 1, 'b', 2) FROM remote('127.0.0.{1,2}');
SELECT map('a', 1, 'b', 2) FROM remote('127.0.0.{1,2}', system, one);
SELECT map('key1', number, 'key2', number * 2) AS m FROM numbers(1, 1) FORMAT JSONEachRow SETTINGS output_format_json_quote_64bit_integers = 0;
SELECT map('key1', number, 'key2', number * 2) AS m FROM numbers(1, 1) FORMAT JSONEachRow;
SELECT map('key1', number, 'key2', number * 2) AS m, toJSONString(m) AS s, isValidJSON(s) FROM numbers(1, 1) SETTINGS output_format_json_quote_64bit_integers = 0;
SELECT map('key1', number, 'key2', number * 2) AS m, toJSONString(m) AS s, isValidJSON(s) FROM numbers(1, 1);
SELECT map('key5', 500) || map('key6', 600);
select map(-4741124612489978151, 1, -3236599669630092879, 2, 5607475129431807682, 3);
select map(0, 0) as m, mapContains(m, number % 2) from numbers(2);
select map(1, -4741124612489978151, 2, -3236599669630092879, 3, 5607475129431807682);
SELECT map(1, 2, 3, 4) AS m, toJSONString(m) AS s, isValidJSON(s);
SELECT map(11::Int128, 'v1', 22::Int128, 'v2') AS m FORMAT JSONEachRow;
SELECT map(11::Int128, 'v1', 22::Int128, 'v2') AS m, toJSONString(m) AS s, isValidJSON(s);
SELECT map(11::UInt64, 'v1', 22::UInt64, 'v2') AS m FORMAT JSONEachRow;
SELECT map(11::UInt64, 'v1', 22::UInt64, 'v2') AS m, toJSONString(m) AS s, isValidJSON(s);
SELECT map(toFixedString('1',1),1) AS m, m[toFixedString('1',1)],m[toFixedString('1',2)];
SELECT map[key] FROM ( SELECT materialize('key') AS key, CAST((['key'], ['value']), 'Map(String, String)') AS map );
select map_tuple_column from file('02906.orc', 'ORC', 'int64_column Int64, map_tuple_column Map(String, Tuple(b Nullable(Float64), c Nullable(Int64)))') where int64_column % 15 = 0;
select map_tuple_column from file('02906.orc', 'ORC', 'int64_column Int64, map_tuple_column Map(String, Tuple(b Nullable(Float64), c Nullable(Int64), d Nullable(String)))') where int64_column % 15 = 0;
select mapAdd(([1, 2], [toFloat32(1.1), 1]), ([1, 2], [2.2, 1])) as res, toTypeName(res);
select mapAdd(([1, 2], [toFloat64(1.1), 1]), ([1, 2], [2.2, 1])) as res, toTypeName(res);
select mapAdd(([toFloat32(1), 2], [toFloat64(1.1), 1]), ([toFloat32(1), 2], [2.2, 1])) as res, toTypeName(res);
select mapAdd(([toInt16(1), 2], [toInt16(1), 1]), ([toInt16(1), 2], [toInt16(1), 1])) as res, toTypeName(res);
select mapAdd(([toInt32(1), 2], [toInt32(1), 1]), ([toInt32(1), 2], [toInt32(1), 1])) as res, toTypeName(res);
select mapAdd(([toInt64(1), 2], [toInt64(1), 1]), ([toInt64(1), 2], [toInt64(1), 1])) as res, toTypeName(res);
select mapAdd(([toInt8(1), 2], [toInt8(1), 1]), ([toInt8(1), 2], [toInt8(1), 1])) as res, toTypeName(res);
select mapAdd(([toUInt16(1), 2], [toUInt16(1), 1]), ([toUInt16(1), 2], [toUInt16(1), 1])) as res, toTypeName(res);
select mapAdd(([toUInt32(1), 2], [toUInt32(1), 1]), ([toUInt32(1), 2], [toUInt32(1), 1])) as res, toTypeName(res);
select mapAdd(([toUInt64(1), 2], [toUInt64(1), 1]), ([toUInt64(1), 2], [toUInt64(1), 1])) as res, toTypeName(res);
select mapAdd((cast(['a', 'b'], 'Array(FixedString(1))'), [1, 1]), ([key], [1])) as res, toTypeName(res) from values('key FixedString(1)', ('b'), ('c'), ('d'));
select mapAdd((cast(['a', 'b'], 'Array(LowCardinality(String))'), [1, 1]), ([key], [1])) from values('key String', ('b'), ('c'), ('d'));
select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(Enum16(\'a\'=1, \'b\'=2)), val Array(Int16)', (['a'], [1]), (['b'], [1]));
select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(Enum8(\'a\'=1, \'b\'=2)), val Array(Int16)', (['a'], [1]), (['b'], [1]));
select mapAdd((key, val), (key, val)) as res, toTypeName(res) from values ('key Array(UUID), val Array(Int32)', (['00000000-89ab-cdef-0123-456789abcdef'], [1]), (['11111111-89ab-cdef-0123-456789abcdef'], [2]));
select mapAdd(cast(m, 'Map(UInt8, UInt8)'), map(1, 1), map(2,2)) from mapop_test;
select mapAdd(cast(map, 'Tuple(Array(UInt8), Array(UInt8))'), ([1], [1]), ([2],[2]) ) from map_test;
SELECT mapAdd(map('Hello', 1.2::Decimal128(30), 'World', 3.4::Decimal128(30)), map('World', 5.6::Decimal128(30), 'GoodBye', -111.222::Decimal128(30)));
select mapAdd(map(1, toFloat32(1.1), 2, 1), map(1, 2.2, 2, 1)) as res, toTypeName(res);
select mapAdd(map(1, toFloat64(1.1), 2, 1), map(1, 1, 2, 1)) as res, toTypeName(res);
select mapAdd(map(1, toFloat64(1.1), 2, 1), map(1, 2.2, 2, 1)) as res, toTypeName(res);
select mapAdd(map(cast('a', 'FixedString(1)'), 1, 'b', 1), map(key, 1)) as res, toTypeName(res) from values('key String', ('b'), ('c'), ('d'));
select mapAdd(map(cast('a', 'LowCardinality(String)'), 1, 'b', 1), map(key, 1)) from values('key String', ('b'), ('c'), ('d'));
select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key Enum16(\'a\'=1, \'b\'=2), val Int16', ('a', 1), ('b', 1));
select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key Enum8(\'a\'=1, \'b\'=2), val Int16', ('a', 1), ('b', 1));
select mapAdd(map(key, val), map(key, val)) as res, toTypeName(res) from values ('key UUID, val Int32', ('00000000-89ab-cdef-0123-456789abcdef', 1), ('11111111-89ab-cdef-0123-456789abcdef', 2));
select mapAdd(map(toInt128(1), toInt128(1), 2, 1), map(toInt128(1), toInt128(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toInt16(1), toInt16(1), 2, 1), map(toInt16(1), toInt16(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toInt256(1), toInt256(1), 2, 1), map(toInt256(1), toInt256(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toInt32(1), toInt32(1), 2, 1), map(toInt32(1), toInt32(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toInt64(1), toInt64(1), 2, 1), map(toInt64(1), toInt64(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toInt8(1), 1, 2, 1), map(toInt8(1), 1, 2, 1)) as res, toTypeName(res);
select mapAdd(map(toUInt128(1), toUInt128(1), 2, 1), map(toUInt128(1), toUInt128(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toUInt16(1), toUInt16(1), 2, 1), map(toUInt16(1), toUInt16(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toUInt256(1), toUInt256(1), 2, 1), map(toUInt256(1), toUInt256(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toUInt32(1), toUInt32(1), 2, 1), map(toUInt32(1), toUInt32(1), 2, 1)) as res, toTypeName(res);
select mapAdd(map(toUInt64(1), toUInt64(1), 2, 1), map(toUInt64(1), toUInt64(1), 2, 1)) as res, toTypeName(res);
SELECT mapApply((k, v) -> (k, v + 1), col) FROM table_map ORDER BY id;
SELECT mapApply((k, v) -> tuple(v + 9223372036854775806), col) FROM table_map;
SELECT mapApply((x, y) -> ('x', 'y'), map(1, 0, 2, 0));
SELECT mapApply((x, y) -> ('x', 'y'), materialize(map(1, 0, 2, 0)));
SELECT mapApply((x, y) -> (x, x + 1), map(1, 0, 2, 0));
SELECT mapApply((x, y) -> (x, x + 1), materialize(map(1, 0, 2, 0)));
SELECT mapApply();
select mapApply(k, v -> (k, arrayMap(x -> mapApply(k, v -> (k, arrayMap(x -> finalizeAggregation(x), v)), x), v)), x) from test;
select mapApply(k, v -> (k, finalizeAggregation(v)), x) from test;
SELECT mapConcat(col, materialize(map('key5', 500)), map('key6', 600)) FROM table_map ORDER BY id;
select mapContains(a, 'aaa') from table_map;
select mapContains(a, 'abc') from table_map;
select mapContains(a, 'gender') from table_map;
select mapContains(a, 'name') from table_map;
select mapContains(a, 10) from table_map;
select mapContains(a, b) from table_map;
select mapContains(a, b), mapContains(a, c), mapContains(a, 233) from table_map;
SELECT mapContains(m, 'a') FROM t_map_contains;
SELECT mapContains(m, 'foo') AS hit FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;
SELECT mapContainsKeyLike(map('aa', 1, 'bb', 2), 'a%');
SELECT mapContainsKeyLike(map('aa', 1, 'bb', 2), materialize('a%'));
SELECT mapContainsKeyLike(map('aa', NULL, 'bb', NULL), 'a%');
SELECT mapContainsKeyLike(map('aa', NULL, 'bb', NULL), 'q%');
SELECT mapContainsKeyLike(materialize(map('aa', 1, 'bb', 2)), 'a%');
SELECT mapContainsKeyLike(materialize(map('aa', 1, 'bb', 2)), materialize('a%'));
SELECT mapExists((k, v) -> k LIKE '%2' AND v < 1000, col) FROM table_map ORDER BY id;
SELECT mapExists((k, v) -> k LIKE '%3', col) FROM table_map ORDER BY id;
SELECT mapExtractKeyLike(map('aa', 1, 'bb', 2), 'a%');
SELECT mapExtractKeyLike(map('aa', 1, 'bb', 2), materialize('a%'));
SELECT mapExtractKeyLike(map('aa', NULL, 'bb', NULL), 'a%');
SELECT mapExtractKeyLike(map('aa', NULL, 'bb', NULL), 'q%');
SELECT mapExtractKeyLike(materialize(map('aa', 1, 'bb', 2)), 'a%');
SELECT mapExtractKeyLike(materialize(map('aa', 1, 'bb', 2)), materialize('a%'));
SELECT mapFilter((k, v) -> 0, col) from table_map;
SELECT mapFilter((k, v) -> k like '%3' and v > 102, col) FROM table_map ORDER BY id;
select mapFromArrays('aa', [4, 5]);
select mapFromArrays(['aa', 'bb'], [4, 5]);
select mapFromArrays(['aa', 'bb'], materialize([4, 5])) from numbers(2);
select mapFromArrays(['aa', 'bb'], materialize(map('a', 4, 'b', 5))) from numbers(2);
select mapFromArrays(c, d) from table_map;
select mapFromArrays(d, e) from table_map;
select mapFromArrays(map('a', 4, 'b', 4), ['aa', 'bb']) from numbers(2);
select mapFromArrays(materialize(['aa', 'bb']), [4, 5]) from numbers(2);
select mapFromArrays(materialize(['aa', 'bb']), materialize([4, 5])) from numbers(2);
SELECT mapKeys(m), mapValues(m) FROM t_func_to_subcolumns;
SELECT mapPartialSort((k, v) -> k, 2, col) FROM table_map ORDER BY id;
select mapPopulateSeries();
select mapPopulateSeries(['1', '2'], [1, 1]) as res, toTypeName(res);
SELECT mapPopulateSeries([0xFFFFFFFFFFFFFFFF], [0], 0xFFFFFFFFFFFFFFFF);
SELECT mapPopulateSeries([1, 1, 5], [4, 5, 6]);
SELECT mapPopulateSeries([1, 1, 5], [4, 5, 6], materialize(10));
SELECT mapPopulateSeries([18446744073709551610], [5], 18446744073709551615);
SELECT mapPopulateSeries([18446744073709551615], [5], 18446744073709551615);
select mapPopulateSeries([3, 4], map.2) from map_test;
select mapPopulateSeries([toInt16(-10), 2], [toInt16(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toInt16(1), 2], [toInt16(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toInt32(-10), 2], [toInt32(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toInt32(1), 2], [toInt32(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toInt64(-10), 2], [toInt64(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toInt64(-10), 2], [toInt64(1), 1], toInt64(-5)) as res, toTypeName(res);
select mapPopulateSeries([toInt64(1), 2], [toInt64(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toInt8(-10), 2], [toInt8(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toInt8(1), 2], [toInt8(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toUInt16(1), 2], [toUInt16(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toUInt32(1), 2], [toUInt32(1), 1]) as res, toTypeName(res);
select mapPopulateSeries([toUInt64(1), 2], [toUInt64(1), 1]) as res, toTypeName(res);
SELECT mapPopulateSeries([toUInt64(1)], [1], 0xFFFFFFFFFFFFFFFF);
select mapPopulateSeries([toUInt64(3), 4], map.2, n) from map_test;
select mapPopulateSeries([toUInt8(1), 2], [toUInt8(1), 1]) as res, toTypeName(res);
SELECT mapPopulateSeries(key, value) FROM 02005_test_table;
SELECT mapPopulateSeries(key, value, materialize(20)) FROM 02005_test_table;
select mapPopulateSeries(m) from map_test;
select mapPopulateSeries(m, 10) from map_test;
select mapPopulateSeries(m, n) from map_test;
select mapPopulateSeries(m, toUInt64(10)) from map_test;
select mapPopulateSeries(m, toUInt64(3)) from map_test;
SELECT mapPopulateSeries(map(1, 4, 1, 5, 5, 6));
SELECT mapPopulateSeries(map(1, 4, 1, 5, 5, 6), materialize(10));
select mapPopulateSeries(map(toInt128(1), toInt128(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt16(-10), toInt16(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt16(1), toInt16(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt256(1), toInt256(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt32(-10), toInt32(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt32(1), toInt32(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt64(-10), toInt64(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt64(-10), toInt64(1), 2, 1), toInt64(-5)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt64(1), toInt64(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt8(-10), toInt8(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toInt8(1), toInt8(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toUInt128(1), toUInt128(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toUInt16(1), toUInt16(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toUInt256(1), toUInt256(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toUInt32(1), toUInt32(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map(toUInt64(1), toUInt64(1), 2, 1)) as res, toTypeName(res);
SELECT mapPopulateSeries(map(toUInt64(18446744073709551610), toUInt64(5)), 18446744073709551615);
SELECT mapPopulateSeries(map(toUInt64(18446744073709551615), toUInt64(5)), 18446744073709551615);
select mapPopulateSeries(map(toUInt8(1), toUInt8(1), 2, 1)) as res, toTypeName(res);
select mapPopulateSeries(map.1, [11,22]) from map_test;
select mapPopulateSeries(map.1, map.2) from map_test;
select mapPopulateSeries(map.1, map.2, 10) from map_test;
select mapPopulateSeries(map.1, map.2, n) from map_test;
select mapPopulateSeries(map.1, map.2, toUInt64(10)) from map_test;
select mapPopulateSeries(map.1, map.2, toUInt64(3)) from map_test;
SELECT mapPopulateSeries(value) FROM 02005_test_table;
SELECT mapPopulateSeries(value, materialize(20)) FROM 02005_test_table;
SELECT mapSort((k, v) -> v, col) FROM table_map ORDER BY id;
SELECT mapSort(col) FROM table_map ORDER BY id;
select mapSubtract(([1, 2], [toFloat32(1.1), 1]), ([1, 2], [2.2, 1])) as res, toTypeName(res);
select mapSubtract(([toUInt8(1), 2], [1, 1]), ([toUInt8(1), 2], [2, 2])) as res, toTypeName(res);
select mapSubtract(([toUInt8(1), 2], [toInt32(1), 1]), ([toUInt8(1), 2], [toInt16(2), 2])) as res, toTypeName(res);
select mapSubtract(([toUInt8(3)], [toInt32(1)]), ([toUInt8(1), 2], [toInt32(2), 2])) as res, toTypeName(res);
SELECT mapSubtract(map('Hello', 1.2::Decimal128(30), 'World', 3.4::Decimal128(30)), map('World', 5.6::Decimal128(30), 'GoodBye', -111.222::Decimal128(30)));
select mapSubtract(map(1, toFloat32(1.1), 2, 1), map(1, 2.2, 2, 1)) as res, toTypeName(res);
select mapSubtract(map(toUInt8(1), 1, 2, 1), map(toUInt8(1), 2, 2, 2)) as res, toTypeName(res);
select mapSubtract(map(toUInt8(1), toInt32(1), 2, 1), map(toUInt8(1), toInt16(2), 2, 2)) as res, toTypeName(res);
select mapSubtract(map(toUInt8(3), toInt32(1)), map(toUInt8(1), toInt32(2), 2, 2)) as res, toTypeName(res);
SELECT mapUpdate(map('k1', 1, 'k2', 2), map('k1', 11, 'k2', 22));
SELECT mapUpdate(map('k1', 1, 'k2', 2), map('k3', 33, 'k4', 44));
SELECT mapUpdate(map('k1', 1, 'k2', 2), materialize(map('k1', 11, 'k2', 22)));
SELECT mapUpdate(map('k1', 1, 'k2', 2), materialize(map('k3', 33, 'k4', 44)));
SELECT mapUpdate(map('k1', 1, 'k2', 2, 'k3', 3), map('k2', 22, 'k3', 33, 'k4', 44));
SELECT mapUpdate(map('k1', 1, 'k2', 2, 'k3', 3), materialize(map('k2', 22, 'k3', 33, 'k4', 44)));
SELECT mapUpdate(map('season','autumn'), mapFilter((k, v) -> (k in ('fruit')), tags)) FROM map_test;
SELECT mapUpdate(map(1, 3, 3, 2), map(1, 0, 2, 0));
SELECT mapUpdate(mapFilter((k, v) -> (k in ('fruit')), tags), map('season', 'autumn')) FROM map_test;
SELECT mapUpdate(materialize(map('k1', 1, 'k2', 2)), map('k1', 11, 'k2', 22));
SELECT mapUpdate(materialize(map('k1', 1, 'k2', 2)), map('k3', 33, 'k4', 44));
SELECT mapUpdate(materialize(map('k1', 1, 'k2', 2)), materialize(map('k1', 11, 'k2', 22)));
SELECT mapUpdate(materialize(map('k1', 1, 'k2', 2)), materialize(map('k3', 33, 'k4', 44)));
SELECT mapUpdate(materialize(map('k1', 1, 'k2', 2, 'k3', 3)), map('k2', 22, 'k3', 33, 'k4', 44));
SELECT mapUpdate(materialize(map('k1', 1, 'k2', 2, 'k3', 3)), materialize(map('k2', 22, 'k3', 33, 'k4', 44)));
select mapValues(a) from table_map;
SELECT marks FROM system.parts WHERE table = 'adaptive_table' and database=currentDatabase() and active;
SELECT match('', repeat('(', 100000));
select match('\0 key="v" ', 'key="(.*?)"'), REGEXP_MATCHES('\0 key="v" ', 'key="(.*?)"');
select match('\0 key="v" ', 'key="(.*?)"');
select match('a key="v" ', 'key="(.*?)"');
select match('abc123', '[a-zA-Z]+(?P<num>\\d+)');
select match('default/k8s1', '\\A(?:(?:[-0-9_a-z]+(?:\\.[-0-9_a-z]+)*)/k8s1)\\z');
SELECT match('Hello', '');
SELECT match('Hello', '\He\l\l\o');
SELECT match('Hello', '\w+'), match('Hello', '\\w+'), match('Hello', '\\\w+'), match('Hello', '\w\+'), match('Hello', 'w+');
select match('Too late', '(?i)to(?)o late');
select match('Too late', '(?i)to(?:o|o) late');
select match('Too late', '(?i)to+ late');
select match('Too late', '(?i)Too late');
select match('Too late', '(?i)too late');
select match('Too late', '(?i)to{2} late');
select match('Too late', '(?i:too late)');
SELECT match('Too late', 'Too late');
select match(materialize('\0 key="v" '), 'key="(.*?)"'), REGEXP_MATCHES(materialize('\0 key="v" '), 'key="(.*?)"');
select match(materialize('\0 key="v" '), 'key="(.*?)"');
select match(materialize('a key="v" '), 'key="(.*?)"'), REGEXP_MATCHES(materialize('a key="v" '), 'key="(.*?)"');
select match(materialize('a key="v" '), 'key="(.*?)"');
SELECT match(materialize('Hello'), '');
SELECT materialize('') AS k1, number % 123 AS k2, count() AS c FROM (SELECT * FROM system.numbers LIMIT 1000) GROUP BY k1, k2 ORDER BY k1, k2;
SELECT materialize('01234567-89ab-cdef-0123-456789abcdef') AS str, UUIDNumToString(UUIDStringToNum(str)), UUIDNumToString(UUIDStringToNum(toFixedString(str, 36)));
SELECT materialize('01:02:03:04:05:06') AS mac_str, MACStringToNum(mac_str) AS mac_num, hex(mac_num), MACNumToString(mac_num) AS mac_str2, mac_str = mac_str2, MACStringToOUI(mac_str) AS oui_num, hex(oui_num), MACStringToOUI(substring(mac_str, 1, 8)) AS oui_num2, oui_num = oui_num2;
SELECT materialize('a\0b') LIKE 'a%\0b';
SELECT materialize('a\0b') LIKE 'a\0b';
SELECT materialize('a\0b') LIKE 'a_b';
SELECT materialize('a\0b') LIKE materialize('a%\0b');
SELECT materialize('a\0b') LIKE materialize('a\0b');
SELECT materialize('a\0b') LIKE materialize('a_b');
SELECT materialize('a\xFF\xFEb') LIKE '%a\xFF\xFEb';
SELECT materialize('a\xFF\xFEb') LIKE materialize('%a\xFF\xFEb');
SELECT materialize('a\xFFb') LIKE '%a\xFF\xFEb';
SELECT materialize('a\xFFb') LIKE 'a%\xFF\xFEb';
SELECT materialize('a\xFFb') LIKE 'a%\xFFb';
SELECT materialize('a\xFFb') LIKE materialize('%a\xFF\xFEb');
SELECT materialize('a\xFFb') LIKE materialize('a%\xFF\xFEb');
SELECT materialize('a\xFFb') LIKE materialize('a%\xFFb');
SELECT materialize('aяb') LIKE 'a_b';
SELECT materialize('aяb') LIKE materialize('a_b');
SELECT materialize('Hello') IN (SELECT 'Hello');
SELECT materialize('Hello') IN (SELECT materialize('Hello'));
SELECT materialize('Hello') LIKE '%%%';
SELECT materialize('Hello') LIKE '%%';
SELECT materialize('Hello') LIKE '%';
SELECT materialize('Hello') LIKE '%_%';
SELECT materialize('Hello') LIKE '%_';
SELECT materialize('Hello') LIKE '';
SELECT materialize('Hello') LIKE '_%';
SELECT materialize('Hello') LIKE '_';
SELECT materialize('Hello') WHERE materialize(NULL);
SELECT materialize('Hello') WHERE toNullable(materialize(0));
SELECT materialize('Hello') WHERE toNullable(materialize(1));
SELECT materialize('prepre_f') ILIKE '%pre_f%';
SELECT materialize('prepre_f') LIKE '%%%pre_f%';
SELECT materialize('prepre_f') LIKE '%pre_f%';
SELECT materialize('World') IN (SELECT 'Hello');
SELECT materialize('World') IN (SELECT materialize('Hello'));
SELECT materialize('{"k":"v"}'::JSON) SETTINGS extremes = 1;
SELECT materialize('Привет, optimized World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%привет%') OR (s LIKE 'world%') SETTINGS optimize_or_like_chain = 1, allow_experimental_analyzer = 1;
SELECT materialize('Привет, optimized World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%привет%') OR (s LIKE 'world%') SETTINGS optimize_or_like_chain = 1;
SELECT materialize('Привет, optimized World') AS s WHERE (s LIKE 'hell%') OR (s LIKE '%привет%') OR (s ILIKE '%world') SETTINGS optimize_or_like_chain = 1, allow_experimental_analyzer = 1;
SELECT materialize('Привет, optimized World') AS s WHERE (s LIKE 'hell%') OR (s LIKE '%привет%') OR (s ILIKE '%world') SETTINGS optimize_or_like_chain = 1;
SELECT materialize('Привет, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%привет%') OR (s ILIKE 'world%') SETTINGS optimize_or_like_chain = 1, allow_experimental_analyzer = 1;
SELECT materialize('Привет, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%привет%') OR (s LIKE 'world%') SETTINGS optimize_or_like_chain = 0, allow_experimental_analyzer = 1;
SELECT materialize('Привет, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%привет%') OR (s LIKE 'world%') SETTINGS optimize_or_like_chain = 0;
SELECT materialize('Привет, World') AS s WHERE (s LIKE 'hell%') OR (s LIKE '%привет%') OR (s ILIKE '%world') SETTINGS optimize_or_like_chain = 0, allow_experimental_analyzer = 1;
SELECT materialize('Привет, World') AS s WHERE (s LIKE 'hell%') OR (s LIKE '%привет%') OR (s ILIKE '%world') SETTINGS optimize_or_like_chain = 0;
SELECT materialize(('1',2)) AS t, t.1, t.2;
SELECT materialize((1, 2.0, 3.1)) * 3;
SELECT materialize(0) IN (0) AS x, count() GROUP BY x;
SELECT materialize(1) % CAST(1, 'Nullable(Float32)');
SELECT materialize(1) % CAST(1, 'Nullable(UInt32)');
SELECT materialize(1) % CAST(materialize(1), 'Nullable(Float32)');
SELECT materialize(1) % CAST(materialize(1), 'Nullable(UInt32)');
SELECT materialize(1) % CAST(materialize(NULL), 'Nullable(Float32)');
SELECT materialize(1) % CAST(materialize(NULL), 'Nullable(UInt32)');
SELECT materialize(1) % CAST(NULL, 'Nullable(Float32)');
SELECT materialize(1) % CAST(NULL, 'Nullable(UInt32)');
SELECT materialize(1) / CAST(1, 'Nullable(Decimal(7, 2))');
SELECT materialize(1) / CAST(materialize(1), 'Nullable(Decimal(7, 2))');
SELECT materialize(1) / CAST(materialize(NULL), 'Nullable(Decimal(7, 2))');
SELECT materialize(1) / CAST(NULL, 'Nullable(Decimal(7, 2))');
SELECT materialize(1) AS k WHERE NULL OR (0 OR (k = 2) OR (k = CAST(1, 'Nullable(UInt8)') OR k = 3));
SELECT materialize(1) IN (0) AS x, count() GROUP BY x;
SELECT materialize(1) IN (SELECT 1);
SELECT materialize(1) IN (SELECT materialize(1));
SELECT materialize(2) IN (SELECT 1);
SELECT materialize(2) IN (SELECT materialize(1));
SELECT materialize(2), substr(_table, 1, 10), s FROM merge('test_01155_atomic', '') ORDER BY _table, s;
SELECT materialize(21.99);
SELECT materialize(3), substr(_table, 1, 10), s FROM merge('test_01155_ordinary', '') ORDER BY _table, s;
SELECT materialize(4), substr(_table, 1, 10), s FROM merge('test_01155_ordinary', '') ORDER BY _table, s;
SELECT materialize(42) as last_element, cityHash64(map(), CAST(materialize('') AS LowCardinality(Nullable(String))), last_element) from numbers(3);
SELECT materialize(7) * [2, 3, 5];
SELECT materialize(7) * materialize([2, 3, 5]);
SELECT materialize(['Hello', 'world'])[-1];
SELECT materialize(['Hello', 'world'])[-9223372036854775808];
SELECT materialize(['Hello', 'world'])[0::Int8];
SELECT materialize(['Hello', 'world'])[2::Int8];
SELECT materialize(['Hello', 'world'])[3::Int8];
SELECT materialize(['Hello', toLowCardinality('world')])[-9223372036854775808];
SELECT materialize(['Hello'])[1::Int8];
SELECT materialize([('1',2)]) AS t, t[1].1, t[1].2;
SELECT materialize([13, 14])[-1];
SELECT materialize([13, 14])[-9223372036854775808];
SELECT materialize([13, 14])[0::Int8];
SELECT materialize([13, 14])[2::Int8];
SELECT materialize([13, 14])[3::Int8];
SELECT materialize([13, toNullable(14)])[-9223372036854775808];
SELECT materialize([13])[1::Int8];
SELECT materialize([2, 1, 3]) AS arr, arraySort(arr), arrayReverseSort(arr), arraySort(x -> -x, arr);
SELECT materialize([2, 3, 5]) * 7;
SELECT materialize([2, 3, 5]) * materialize(7);
SELECT materialize([9,4,8,10,5,2,3,7,1,6]) AS arr, 4 AS lim, arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> -x, lim, arr), lim);
SELECT materialize([['Hello'], ['world']])[-1];
SELECT materialize([['Hello'], ['world']])[-9223372036854775808];
SELECT materialize([['Hello'], ['world']])[0::Int8];
SELECT materialize([['Hello'], ['world']])[2::Int8];
SELECT materialize([['Hello'], ['world']])[3::Int8];
SELECT materialize([['Hello'], [toNullable('world')]])[-9223372036854775808];
SELECT materialize([['Hello']])[1::Int8];
SELECT materialize([[13], [14]])[-1];
SELECT materialize([[13], [14]])[-9223372036854775808];
SELECT materialize([[13], [14]])[0::Int8];
SELECT materialize([[13], [14]])[2::Int8];
SELECT materialize([[13], [14]])[3::Int8];
SELECT materialize([[toNullable(13)], [14]])[-9223372036854775808];
SELECT materialize([toNullable(1)]) AS x, x[materialize(toNullable(1))] AS y;
SELECT materialize([toNullable(1)]) AS x, x[toNullable(1)] AS y;
SELECT materialize(finalizeAggregation((SELECT sumState(number) FROM numbers(10)) * 10));
SELECT materialize(finalizeAggregation((SELECT sumState(number) FROM numbers(10)) + (SELECT sumState(number) FROM numbers(10))));
SELECT materialize(js2.k) FROM (SELECT toLowCardinality(number) AS k FROM numbers(1)) AS js1 FULL OUTER JOIN (SELECT number + 7 AS k FROM numbers(1)) AS js2 USING (k) ORDER BY js2.k;
SELECT materialize(NULL) AND 1;
SELECT materialize(NULL) AND materialize(0);
SELECT materialize(NULL) AND materialize(1);
SELECT materialize(NULL) OR 1;
SELECT materialize(NULL) OR materialize(0);
SELECT materialize(NULL) OR materialize(1);
SELECT materialize(PhraseProcessedID)　FROM click_storage_dst;
SELECT materialize(toDate('2000-01-01')) AS x, toDateTime('2000-01-01 00:00:01', 'Asia/Istanbul') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toDate('2015-02-03')) < '2015-02-04';
SELECT materialize(toDate('2015-02-03')) <= '2015-02-04';
SELECT materialize(toDate('2015-02-03')) = '2015-02-03';
SELECT materialize(toDate('2015-02-03')) = '2015-02-04';
SELECT materialize(toDate('2015-02-03')) > '2015-02-04';
SELECT materialize(toDate('2015-02-03')) >= '2015-02-04';
SELECT materialize(toDate('2015-02-05')) < '2015-02-04';
SELECT materialize(toDate('2015-02-05')) <= '2015-02-04';
SELECT materialize(toDate('2015-02-05')) > '2015-02-04';
SELECT materialize(toDate('2015-02-05')) >= '2015-02-04';
SELECT materialize(toDate(0)) AS x, toDecimal32(1, 0) AS y, ((x = 0) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toDate(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul')) AS x, materialize(toDate('2000-01-02')) AS y, 0 ? x : y AS z;
SELECT materialize(toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul')) AS x, materialize(toDate('2000-01-02')) AS y, 1 ? x : y AS z;
SELECT materialize(toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul')) AS x, materialize(toDate('2000-01-02')) AS y, x > y ? x : y AS z;
SELECT materialize(toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul')) AS x, toDate('2000-01-02') AS y, 0 ? x : y AS z;
SELECT materialize(toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul')) AS x, toDate('2000-01-02') AS y, 1 ? x : y AS z;
SELECT materialize(toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul')) AS x, toDate('2000-01-02') AS y, x > y ? x : y AS z;
SELECT materialize(toDateTime('2015-02-03 04:05:06')) < '2015-02-03 05:06:07';
SELECT materialize(toDateTime('2015-02-03 04:05:06')) <= '2015-02-03 05:06:07';
SELECT materialize(toDateTime('2015-02-03 04:05:06')) = '2015-02-03 04:05:06';
SELECT materialize(toDateTime('2015-02-03 04:05:06')) = '2015-02-03 05:06:07';
SELECT materialize(toDateTime('2015-02-03 04:05:06')) > '2015-02-03 05:06:07';
SELECT materialize(toDateTime('2015-02-03 04:05:06')) >= '2015-02-03 05:06:07';
SELECT materialize(toDateTime('2015-02-03 06:07:08')) < '2015-02-03 05:06:07';
SELECT materialize(toDateTime('2015-02-03 06:07:08')) <= '2015-02-03 05:06:07';
SELECT materialize(toDateTime('2015-02-03 06:07:08')) > '2015-02-03 05:06:07';
SELECT materialize(toDateTime('2015-02-03 06:07:08')) >= '2015-02-03 05:06:07';
SELECT materialize(toDateTime(0, 'Asia/Istanbul')) AS x, toDateTime(1, 'Asia/Istanbul') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toDateTime(0, 'Asia/Istanbul')) AS x, toDecimal32(1, 0) AS y, ((x = 0) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
select materialize(toDecimal128(3.2, 12)) as x group by x;
SELECT materialize(toDecimal32(1, 2)) / CAST(1, 'Nullable(UInt32)');
SELECT materialize(toDecimal32(1, 2)) / CAST(materialize(1), 'Nullable(UInt32)');
SELECT materialize(toDecimal32(1, 2)) / CAST(materialize(NULL), 'Nullable(UInt32)');
SELECT materialize(toDecimal32(1, 2)) / CAST(NULL, 'Nullable(UInt32)');
select materialize(toDecimal32(1.2, 2)) as x group by x;
select materialize(toDecimal64(2.2, 4)) as x group by x;
SELECT materialize(toDecimal64(4,4)) - materialize(toDecimal32(2,2));
SELECT materialize(toDecimal64(4,4)) - toDecimal32(2,2);
SELECT materialize(toFixedString('', 1)) AS x FROM system.one GROUP BY x;
SELECT materialize(toFixedString('', 2)) AS x FROM system.one GROUP BY x;
SELECT materialize(toFixedString('', 3)) AS x FROM system.one GROUP BY x;
SELECT materialize(toFixedString('', 4)) AS x FROM system.one GROUP BY x;
SELECT materialize(toFixedString('', 5)) AS x FROM system.one GROUP BY x;
SELECT materialize(toFixedString('', 6)) AS x FROM system.one GROUP BY x;
SELECT materialize(toFixedString('', 7)) AS x FROM system.one GROUP BY x;
SELECT materialize(toFixedString('', 8)) AS x FROM system.one GROUP BY x;
SELECT materialize(toFixedString('', 9)) AS x FROM system.one GROUP BY x;
select materialize(toFixedString(unhex('202005295555'), 15)) > unhex('20200529') r;
SELECT materialize(toInt16(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt16(0)) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt32(0)) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
select materialize(toInt32(1)) % -9223372036854775808;
SELECT materialize(toInt64(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt64(0)) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toInt8(0)) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
select materialize(toLowCardinality('a'));
SELECT materialize(toNullable(0)) + 1 AS x, toTypeName(x), toColumnTypeName(x);
SELECT materialize(toNullable(0)) + materialize(1) AS x, toTypeName(x), toColumnTypeName(x);
SELECT materialize(toUInt16(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toFloat32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt16(0)) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toFloat32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt32(0)) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt64(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt64(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt64(0)) AS x, toFloat32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt64(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt64(0)) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt64(0)) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt64(0)) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toFloat32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT materialize(toUInt8(0)) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
select max from (select max(first_col) as max, second_col as total from tp2 group by 2) order by 1;
SELECT max((number % 5) * (number % 7)) AS a FROM numbers(10000000) GROUP BY number % 7, number % 5 ORDER BY a;
Select max(-number) from numbers(100);
SELECT max(1 + n * 2), max(1 + 2 * n), max(1 + n / 2), max(1 + 1 / n) FROM (SELECT number n FROM numbers(10));
SELECT max(1 + n + 1), max(1 + 1 + n), max(1 + n - 1), max(1 + 1 - n) FROM (SELECT number n FROM numbers(10));
SELECT MAX(1) FROM test_table;
SELECT max(1), count() FROM t0 AS t0 INNER JOIN t1 ON t0.c0 = t1.c1 WHERE 1;
SELECT max(1), count() FROM t0 AS t0 INNER JOIN t1 ON true WHERE 0;
SELECT max(1), count() FROM t0 AS t0 LEFT JOIN t1 ON true WHERE 1;
SELECT max(100-number), min(100-number) FROM numbers(2);
select max(a + b) from (SELECT 1 AS a, 2 AS b);
SELECT max(a) FROM tt_m group by b order by b;
SELECT max(a), max(b), max(c), max(d), max(e), max(f), max(g), max(h), max(i), max(j) FROM decimal;
SELECT max(abs(2) * 2), max(abs(2) * n), max(n / abs(2)), max(1 / abs(2)) FROM (SELECT number n FROM numbers(10));
SELECT max(abs(2) + 1), max(abs(2) + n), max(n - abs(2)), max(1 - abs(2)) FROM (SELECT number n FROM numbers(10));
SELECT max(abs(n) * 2), max(abs(n) * n), max(n / abs(n)), max(1 / abs(n)) FROM (SELECT number n FROM numbers(10));
SELECT max(abs(n) + 1), max(abs(n) + n), max(n - abs(n)), max(1 - abs(n)) FROM (SELECT number n FROM numbers(10));
SELECT MaX(aggr) FROM ( SELECT mAX(-1) AS aggr FROM system.one WHERE NOT 1 UNION ALL SELECT MAx(-1) AS aggr FROM system.one WHERE 1 );
SELECT MaX(aggr) FROM ( SELECT mAX(-1) AS aggr FROM system.one WHERE NOT 1 UNION ALL SELECT max(-1) AS aggr FROM system.one WHERE 1 );
SELECT MaX(aggr) FROM ( SELECT mAX(-1) AS aggr FROM system.one WHERE NOT 1 UNION ALL SELECT max(-1) AS aggr FROM system.one WHERE not 1 );
SELECT MAX(aggr) FROM ( SELECT MAX(-1) AS aggr FROM system.one WHERE NOT 1 UNION ALL SELECT MAX(-1) AS aggr FROM system.one WHERE 1 );
SELECT max(aggr) FROM (SELECT max('92233720368547758.06') AS aggr FROM system.one);
SELECT max(arrayJoin(arr)) FROM (SELECT arrayEnumerateUniq(groupArray(intDiv(number, 54321)) AS nums, groupArray(toString(intDiv(number, 98765)))) AS arr FROM (SELECT number FROM system.numbers LIMIT 1000000) GROUP BY intHash32(number) % 100000);
select max(blockSize()), min(blockSize()), any(ignore(*)) from tab_00484;
SELECT max(bs) <= 10, b FROM ( SELECT blockSize() as bs, * FROM t1 JOIN t2 ON t1.a = t2.a ) GROUP BY b ORDER BY b SETTINGS max_joined_block_size_rows = 10;
SELECT max(bs) > 10, b FROM ( SELECT blockSize() as bs, * FROM t1 JOIN t2 ON t1.a = t2.a ) GROUP BY b ORDER BY b SETTINGS max_joined_block_size_rows = 10;
SELECT max(cityHash64(*)) > 0 FROM (SELECT quantile(0.1)(d), quantile(0.5)(d) FROM datetime);
SELECT max(date) FROM proj PREWHERE date != '2012-10-24';
SELECT max(explain like '%Delayed%') FROM (EXPLAIN PIPELINE graph=1 SELECT sum(a) FROM remote('127.0.0.4', currentDatabase(), '02863_delayed_source') WITH TOTALS SETTINGS extremes = 1);
SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'abc');
SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'ABC');
SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'abc,def,zzz');
SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'abcabcabcabcabcabcabcab\0');
SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'def');
SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'zzz');
select max(id) from bloom_filter where hasTokenCaseInsensitive(s, 'ABC');
select max(id) from bloom_filter where hasTokenCaseInsensitive(s, 'zZz');
select max(id) from bloom_filter where hasTokenCaseInsensitiveOrNull(s, 'ABC');
SELECT max(id) FROM bloom_filter WHERE hasTokenCaseInsensitiveOrNull(s, 'abc,def,zzz');
SELECT max(id) FROM bloom_filter WHERE hasTokenOrNull(s, 'abc');
select max(id) from bloom_filter2 where hasToken(s, 'ABC');
select max(id) from bloom_filter2 where hasToken(s, 'abc');
select max(id) from bloom_filter2 where hasTokenCaseInsensitive(s, 'abc');
select max(id) from bloom_filter2 where hasTokenCaseInsensitive(s, 'ABC');
SELECT max(id) OVER () AS aid FROM ( SELECT materialize(toLowCardinality('aaaa')) AS id FROM numbers_mt(1000000) ) FORMAT `Null`;
SELECT max(id) OVER (PARTITION BY id) AS id FROM ( SELECT materialize('aaaa') AS id FROM numbers_mt(1000000) ) FORMAT `Null`;
select max(identity(dummy + 1)) over () as x from remote('127.0.0.{1,2}', system, one) order by x;
select max(key) from projection_without_key;
select max(key) from tab_00612 any left join (select key, arrayJoin(n.x) as val from tab_00612) js2 using key where (key, val) in ((1, 1), (2, 2));
select max(key) from tab_00612 any left join (select key, arrayJoin(n.x) as val from tab_00612) js2 using key where (key, val) in (1, 1);
select max(key) from tab_00612 left array join `n.x` as val where (key, val) in ((1, 1));
select max(key) from tab_00612 left array join `n.x` as val where (key, val) in ((1, 1), (2, 2));
select max(key) from tab_00612 left array join n as val where (key, val.x) in ((1, 1), (2, 2));
select max(key) from tab_00612 left array join n as val where (key, val.x) in (1, 1);
SELECT MAX(left.c0), min2(left.c0, -(-left.c0) * (radians(left.c0) - radians(left.c0))) as g, (((-1925024212 IS NOT NULL) IS NOT NULL) != radians(tan(1216286224))) AND cos(lcm(MAX(left.c0), -1966575216) OR (MAX(left.c0) * 1180517420)) as h, not h, h is null FROM t2 AS left GROUP BY g HAVING h ORDER BY g DESC SETTINGS enable_optimize_predicate_expression = 0;
SELECT MAX(left.c0), min2(left.c0, -(-left.c0) * (radians(left.c0) - radians(left.c0))) as g, (((-1925024212 IS NOT NULL) IS NOT NULL) != radians(tan(1216286224))) AND cos(lcm(MAX(left.c0), -1966575216) OR (MAX(left.c0) * 1180517420)) as h, not h, h is null FROM t2 AS left GROUP BY g HAVING h ORDER BY g DESC SETTINGS enable_optimize_predicate_expression = 1;
SELECT max(length(mapKeys(a))) FROM ( SELECT a FROM generateRandom('a Map(String, String)', 20, 5, 20) LIMIT 1000 );
SELECT max(length(value)) FROM adaptive_table;
SELECT max(length(x)) FROM parallel_replicas_plain FORMAT Null;
SELECT max(log(2) * number) FROM numbers(100);
SELECT max(mapPopulateSeries(mapPopulateSeries(map(toInt64(1048), toInt64(9223), 3, -2147))), toInt64(1048), map('11', 257, '', NULL), cityHash64(*)) > NULL FROM (SELECT max(cityHash64(mapPopulateSeries(mapPopulateSeries(map(toInt64(1048), toInt64(2147), 655, -2147))), *)) > NULL, map(toInt64(-2147), toInt64(100.0001), -2147, NULL), mapPopulateSeries(map(toInt64(1024), toInt64(1048), 1048, -1)), map(toInt64(256), toInt64(NULL), -1, NULL), quantile(0.0001)(d) FROM datetime__fuzz_14 WITH TOTALS);
SELECT max(multiply(1));
SELECT max(n * -2 * -1), max(-2 * n * -1), max(n / -2 / -1), max(-1 / n / -1) FROM (SELECT number n FROM numbers(10));
SELECT max(n * -2), max(-2 * n), max(n / -2), max(-1 / n) FROM (SELECT number n FROM numbers(10));
SELECT max(n * 2) + max(2 * n) + max(n / 2) + max(1 / n) FROM (SELECT number n FROM numbers(10));
SELECT max(n * 2), max(2 * n), max(n / 2), max(1 / n) FROM (SELECT number n FROM numbers(10));
SELECT max(n + -1 + -1), max(-1 + n + -1), max(n - -1 + -1), max(-1 - n + -1) FROM (SELECT number n FROM numbers(10));
SELECT max(n + -1), max(-1 + n), max(n - -1), max(-1 - n) FROM (SELECT number n FROM numbers(10));
SELECT max(n + 1) + max(1 + n) + max(n - 1) + max(1 - n) FROM (SELECT number n FROM numbers(10));
SELECT max(n + 1), max(1 + n), max(n - 1), max(1 - n) FROM (SELECT number n FROM numbers(10));
SELECT max(n*n * 2), max(2 * n*n), max(n*n / 2), max(1 / n*n) FROM (SELECT number n FROM numbers(10));
SELECT max(n*n + 1), max(1 + n*n), max(n*n - 1), max(1 - n*n) FROM (SELECT number n FROM numbers(10));
SELECT max(n::Nullable(String)) from (Select if(number < 15 and number % 2 == 1, number * 2, NULL) as n from numbers(10, 20));
Select max(number) from numbers(100) settings max_threads=1, max_block_size=10;
select max(primary) from primary;
SELECT max(range(id % 10)[u]) FROM t_sparse_full;
select max(s.a) from t left join s on s.a = t.a left join y on s.b = y.b group by t.a order by t.a;
SELECT max(sketch) FROM data;
SELECT max(t) - min(t) >= 1 FROM times;
SELECT max(x) - min(x) < 0.000001 FROM (WITH entropy(number % 2, number % 5) AS e1, log2(10) AS e2, log2(uniq(number % 2, number % 5)) AS e3, entropy(number) AS e4, entropy(toString(number)) AS e5, entropy(number % 2 ? 'hello' : 'world', range(number % 5)) AS e6, entropy(number, number + 1, number - 1) AS e7, entropy(([[number], [number, number]], [[], [number]])) AS e8 SELECT arrayJoin([e1, e2, e3, e4, e5, e6, e7, e8]) AS x FROM numbers(10));
SELECT max(x) - min(x) FROM t;
SELECT max(x) as k FROM test HAVING k > 0 ORDER BY k;
SELECT max(x) as k FROM test ORDER BY k;
SELECT max(x) FROM select_final FINAL where string = 'updated';
SELECT max(x) FROM select_final FINAL;
select max(x1), x2 from test group by 1, 2;
SELECT max2(materialize(1), 1.5);
SELECT max2(NULL, 1) - min2(NULL, 1);
SELECT maxArray(sketch) FROM data;
SELECT maxForEach(sketch) FROM data;
SELECT maxIf(number, rand() % 2 == 3) from numbers(10) settings max_threads=1, max_block_size=5;
SELECT maxIf(number, rand() % 2 == 3) from numbers(10);
SELECT maxIf(number::Float64, rand() % 2 == 3) from numbers(10) settings max_threads=1, max_block_size=5;
SELECT maxIf(number::Float64, rand() % 2 == 3) from numbers(10);
SELECT maxIf(number::Nullable(String), number < 10) as number from numbers(10, 1000);
SELECT maxIf(number::String, number % 3), maxIf(number::String, number % 5), minIf(number::String, number % 3), minIf(number::String, number > 10) from numbers(400);
SELECT maxIf(number::String, number < 10) as number from numbers(10, 1000);
SELECT maxIntersections(start,end) from test1_00671;
SELECT maxIntersections(start,end) from test2_00671;
SELECT maxIntersectionsPosition(start,end) FROM test;
select maxMap([1, 1, 1], [(1, 2), (1, 1), (1, 3)]);
select maxMap([1, 1, 1], [[1, 2], [1], [1, 2, 3]]);
select maxMap([1], [toInt32(number) - 50]) from numbers(1, 100);
select maxMap([cast(1, 'Decimal(10, 2)')], [cast(toInt32(number) - 50, 'Decimal(10, 2)')]) from numbers(1, 100);
SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
select maxMap([toInt32(number % 10), number % 10 + 1], [number, 1]) as m, toTypeName(m) from numbers(1, 100);
select maxMap(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));
SELECT maxMap(statusMap) FROM map_comb;
select maxMap(val) from values ('val Map(String, String)', (map('1', '1')), (map('1', '2')));
select maxMap(val, cnt) from values ('val Array(Date), cnt Array(Int16)', ([1], [1]), ([1], [2]));
select maxMap(val, cnt) from values ('val Array(DateTime(\'Asia/Istanbul\')), cnt Array(Int32)', ([1], [1]), ([1], [2]));
select maxMap(val, cnt) from values ('val Array(Decimal(10, 2)), cnt Array(Int16)', (['1.01'], [1]), (['1.01'], [2]));
select maxMap(val, cnt) from values ('val Array(Enum16(\'a\'=1)), cnt Array(Int16)', (['a'], [1]), (['a'], [2]));
select maxMap(val, cnt) from values ('val Array(FixedString(1)), cnt Array(FixedString(1))', (['1'], ['1']), (['1'], ['2']));
select maxMap(val, cnt) from values ('val Array(Float64), cnt Array(Int8)', ([1], [1]), ([1], [2]));
select maxMap(val, cnt) from values ('val Array(String), cnt Array(String)', (['1'], ['1']), (['1'], ['2']));
select maxMap(val, cnt) from values ('val Array(String), cnt Array(String)', (['A'], ['']), (['B'], ['']));
select maxMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)', ([1], [0]), ([2], [0]));
select maxMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)', ([1], [1]), ([1], [2]));
select maxMerge(s) as x, length(x) from aggr;
SELECT maxMerge(x * 10) FROM (SELECT maxState(b) AS x FROM mult_aggregation);
SELECT maxOrDefaultIf(x, x > 0) FROM (SELECT 1 AS x);
SELECT maxOrDefaultIf(x, x > 1) FROM (SELECT 1 AS x);
SELECT maxOrDefaultIfMerge(state) FROM (SELECT maxOrDefaultIfState(x, x > 0) AS state FROM (SELECT 1 AS x));
SELECT maxOrDefaultIfMerge(state) FROM (SELECT maxOrDefaultIfState(x, x > 1) AS state FROM (SELECT 1 AS x));
SELECT maxOrNullIf(x, x > 0) FROM (SELECT 1 AS x);
SELECT maxOrNullIf(x, x > 1) FROM (SELECT 1 AS x);
SELECT maxOrNullIfMerge(state) FROM (SELECT maxOrNullIfState(x, x > 0) AS state FROM (SELECT 1 AS x));
SELECT maxOrNullIfMerge(state) FROM (SELECT maxOrNullIfState(x, x > 1) AS state FROM (SELECT 1 AS x));
SELECT median(a) as ma, median(b) as mb, median(c) as mc, toTypeName(ma),toTypeName(mb),toTypeName(mc) FROM decimal;
SELECT median(a), median(b), median(c) as x, toTypeName(x) FROM decimal;
SELECT medianExact(a), medianExact(b), medianExact(c) as x, toTypeName(x) FROM decimal;
SELECT medianExactHigh(a), medianExactHigh(b), medianExactHigh(c) as x, toTypeName(x) FROM decimal;
SELECT medianExactLow(a), medianExactLow(b), medianExactLow(c) as x, toTypeName(x) FROM decimal;
SELECT medianExactWeighted(a, 1), medianExactWeighted(b, 2), medianExactWeighted(c, 3) as x, toTypeName(x) FROM decimal;
select medianGK()(number) from numbers(10) SETTINGS allow_experimental_analyzer = 0;
SELECT medianInterpolatedWeighted(a, 1), medianInterpolatedWeighted(b, 2), medianInterpolatedWeighted(c, 3) as x, toTypeName(x) FROM decimal;
SELECT medianTiming(t), medianTimingWeighted(t, w) FROM (SELECT number AS t, number = 77 ? 0 : 0 AS w FROM system.numbers LIMIT 100);
SELECT medianTiming(t), medianTimingWeighted(t, w) FROM (SELECT number AS t, number = 77 ? 10 : 1 AS w FROM system.numbers LIMIT 100);
SELECT message LIKE '%Stack trace%' FROM system.text_log WHERE level = 'Error' AND message LIKE '%Exception%throwIf%' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \'Hello\', throwIf(1)%' AND query NOT LIKE '%system%' ORDER BY event_time_microseconds DESC LIMIT 1) ORDER BY event_time_microseconds DESC LIMIT 10;
SELECT message LIKE '%Stack trace%' FROM system.text_log WHERE level = 'Error' AND message LIKE '%Exception%throwIf%' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%SELECT \'World\', throwIf(1)%' AND query NOT LIKE '%system%' ORDER BY event_time_microseconds DESC LIMIT 1) ORDER BY event_time_microseconds DESC LIMIT 10;
SELECT metric FROM system.asynchronous_metrics WHERE length(description) < 10;
SELECT metric FROM system.metrics WHERE length(description) < 10;
SELECT metric FROM system.metrics WHERE metric LIKE '%MMap%' ORDER BY metric;
SELECT metroHash64(123456);
select mid('foo', 3);
select min((n as a) + (1 as b)) c from (select number n from numbers(10)) where a > 0 and b > 0 having c > 0;
SELECT min((toDateTime('2011-01-01 00:00:00', 'Europe/Moscow') + INTERVAL number DAY) as day) as start, max(day) as end, count(1), concat(toString(toYear(day)),'_',toString(timezoneOffset(day)))as DST from numbers(365*4+1) group by DST order by start;
Select min(-number) from numbers(100);
SELECT min(1 + n * 2), min(1 + 2 * n), min(1 + n / 2), min(1 + 1 / n) FROM (SELECT number n FROM numbers(10));
SELECT min(1 + n + 1), min(1 + 1 + n), min(1 + n - 1), min(1 + 1 - n) FROM (SELECT number n FROM numbers(10));
SELECT min(_part_offset), max(_part_offset) FROM t_1;
SELECT min(a), min(b), min(c), min(d), min(e), min(f), min(g), min(h), min(i), min(j) FROM decimal;
SELECT min(abs(2) * 2), min(abs(2) * n), min(n / abs(2)), min(1 / abs(2)) FROM (SELECT number n FROM numbers(10));
SELECT min(abs(2) + 1), min(abs(2) + n), min(n - abs(2)), min(1 - abs(2)) FROM (SELECT number n FROM numbers(10));
SELECT min(abs(n) * 2), min(abs(n) * n), min(n / abs(n)), min(1 / abs(n)) FROM (SELECT number n FROM numbers(10));
SELECT min(abs(n) + 1), min(abs(n) + n), min(n - abs(n)), min(1 - abs(n)) FROM (SELECT number n FROM numbers(10));
SELECT min(b), x AS b FROM (SELECT max(number) FROM numbers(1));
SELECT min(dt) FROM d PREWHERE ((0.9998999834060669 AND 1023) AND 255) <= ceil(j);
select min(dt), max(dt), count() from d where toDate(dt) >= '2021-10-25';
select min(i), max(i), count() from d group by _partition_id order by _partition_id;
select min(i), max(i), count() from d where _partition_value.1 = 0 group by _partition_id order by _partition_id;
select min(i), max(i), count() from d where _partition_value.1 = 10 group by _partition_id order by _partition_id;
select min(i), max(i), count() from d where moduloLegacy(i, 2) = 0 group by _partition_id order by _partition_id;
select min(i), max(i), count() from d;
SELECT min(id) FROM t FORMAT Null;
SELECT min(j) FROM d PREWHERE ceil(j) <= 0;
select min(j) from has_final_mark;
select min(j) from mixed_final_mark;
select min(j), max(j) from has_final_mark;
SELECT min(n * -2 * -1), min(-2 * n * -1), min(n / -2 / -1), min(-1 / n / -1) FROM (SELECT number n FROM numbers(10));
SELECT min(n * -2), min(-2 * n), min(n / -2), min(-1 / n) FROM (SELECT number n FROM numbers(10));
SELECT min(n * 2) + min(2 * n) + min(n / 2) + min(1 / n) FROM (SELECT number n FROM numbers(10));
SELECT min(n * 2), min(2 * n), min(n / 2), min(1 / n) FROM (SELECT number n FROM numbers(10));
SELECT min(n + -1 + -1), min(-1 + n + -1), min(n - -1 + -1), min(-1 - n + -1) FROM (SELECT number n FROM numbers(10));
SELECT min(n + -1), min(-1 + n), min(n - -1), min(-1 - n) FROM (SELECT number n FROM numbers(10));
SELECT min(n + 1) + min(1 + n) + min(n - 1) + min(1 - n) FROM (SELECT number n FROM numbers(10));
SELECT min(n + 1), min(1 + n), min(n - 1), min(1 - n) FROM (SELECT number n FROM numbers(10));
SELECT min(n*n * 2), min(2 * n*n), min(n*n / 2), min(1 / n*n) FROM (SELECT number n FROM numbers(10));
SELECT min(n*n + 1), min(1 + n*n), min(n*n - 1), min(1 - n*n) FROM (SELECT number n FROM numbers(10));
SELECT min(n::Nullable(String)) from (Select if(number < 15 and number % 2 == 1, number * 2, NULL) as n from numbers(10, 20));
SELECT min(number % 2) AS a, max(number % 3) AS b FROM numbers(10000000) GROUP BY number % 2, number % 3 ORDER BY a, b;
SELECT min(number) as min_number FROM numbers(10) GROUP BY number HAVING 1 ORDER BY min_number;
Select min(number) from numbers(100) settings max_threads=1, max_block_size=10;
SELECT min(number) FROM system.numbers WHERE toUInt64(number % 1000) IN (SELECT DISTINCT blockSize() FROM system.numbers SETTINGS max_block_size = 123, max_rows_to_read = 1000, read_overflow_mode = 'break') SETTINGS max_rows_to_read = 1000000, read_overflow_mode = 'break';
SELECT min(number), max(number), sum(number) FROM numbers(10000000, 5000000);
SELECT min(number), max(number), sum(number) FROM numbers_mt(10000000);
SELECT min(number), max(number), sum(number) FROM numbers_mt(10000000, 5000000);
SELECT MIN(t1.c0) FROM t1 GROUP BY (-sign(cos(t1.c0))) * (-max2(t1.c0, t1.c0 / t1.c0)), t1.c0 * t1.c0, sign(-exp(-t1.c0)) HAVING -(-(MIN(t1.c0) + MIN(t1.c0))) AND (pow('{b' > '-657301241', log(-1004522121)) IS NOT NULL) UNION ALL SELECT MIN(t1.c0) FROM t1 GROUP BY (-sign(cos(t1.c0))) * (-max2(t1.c0, t1.c0 / t1.c0)), t1.c0 * t1.c0, sign(-exp(-t1.c0)) HAVING NOT (-(-(MIN(t1.c0) + MIN(t1.c0))) AND (pow('{b' > '-657301241', log(-1004522121)) IS NOT NULL)) UNION ALL SELECT MIN(t1.c0) FROM t1 GROUP BY (-sign(cos(t1.c0))) * (-max2(t1.c0, t1.c0 / t1.c0)), t1.c0 * t1.c0, sign(-exp(-t1.c0)) HAVING (-(-(MIN(t1.c0) + MIN(t1.c0))) AND (pow('{b' > '-657301241', log(-1004522121)) IS NOT NULL)) IS NULL SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;
SELECT MIN(t1.c0) FROM t1 GROUP BY t1.c0 HAVING and(MIN(t1.c0) + MIN(t1.c0), 1) SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;
SELECT MIN(t1.c0) FROM t1 SETTINGS aggregate_functions_null_for_empty = 1;
SELECT min(ts = toUInt32(toDateTime(toString(ts)))) FROM (SELECT 10000 + 1234 * number AS ts FROM system.numbers LIMIT 1000000);
SELECT min(ts = toUInt32(toDateTime(toString(ts)))) FROM (SELECT 1000000000 + 1234 * number AS ts FROM system.numbers LIMIT 1000000);
SELECT MIN(val == 'US') FROM {CLICKHOUSE_DATABASE:Identifier}.table_from_ip_trie_dict WHERE prefix == '2620:0:870::/48';
SELECT min(x), max(x) FROM (SELECT arrayJoin([toFloat32(0.0), nan, toFloat32(1.0), toFloat32(-1.0)]) AS x);
SELECT min(x), max(x) FROM (SELECT arrayJoin([toFloat64(0.0), -nan, toFloat64(1.0), toFloat64(-1.0)]) AS x);
SELECT min(x), max(x) FROM (SELECT length(arrayReduce('groupUniqArray', [hex(number), hex(number+1), hex(number)])) AS x FROM system.numbers LIMIT 100000);
SELECT min(x), max(x), sum(x) FROM (SELECT CAST(arrayJoin([1, 2]) AS Enum8('Hello' = 1, 'World' = 2)) AS x);
SELECT min2(-1, -3);
SELECT min_block_number, max_block_number, partition, partition_id FROM system.parts WHERE database = currentDatabase() AND table = 'test' AND active ORDER BY partition;
SELECT min_block_number, max_block_number, partition, partition_id FROM system.parts WHERE database = currentDatabase() AND table = 'test2' AND active ORDER BY partition;
SELECT min_time, max_time FROM system.parts WHERE table = 'test' AND database = currentDatabase();
SELECT min_time, max_time FROM system.parts_columns WHERE table = 'test' AND database = currentDatabase();
SELECT minIf(arr, notEmpty(arr)) FROM min_if;
SELECT minIf(int, int != 0) FROM min_if;
SELECT minIf(num1, num1 < 5) FROM dummy GROUP BY num2;
SELECT minIf(num1, num1 >= 5) FROM dummy GROUP BY num2;
SELECT minIf(number, rand() % 2 == 3) from numbers(10) settings max_threads=1, max_block_size=5;
SELECT minIf(number, rand() % 2 == 3) from numbers(10);
SELECT minIf(number::Float64, rand() % 2 == 3) from numbers(10) settings max_threads=1, max_block_size=5;
SELECT minIf(number::Float64, rand() % 2 == 3) from numbers(10);
SELECT minIf(number::Nullable(String), number < 10) as number from numbers(10, 1000);
SELECT minIf(number::String, number < 10) as number from numbers(10, 1000);
SELECT minIf(str, notEmpty(str)) FROM min_if;
select minMap([1, 1, 1], [(1, 2), (1, 1), (1, 3)]);
select minMap([1], [toInt32(number) - 50]) from numbers(1, 100);
select minMap([cast(1, 'Decimal(10, 2)')], [cast(toInt32(number) - 50, 'Decimal(10, 2)')]) from numbers(1, 100);
SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
select minMap([toInt32(number % 10), number % 10 + 1], [number, 1]) as m, toTypeName(m) from numbers(1, 100);
select minMap(arrayJoin([([1], [null]), ([1], [null])]));
SELECT minMap(statusMap) FROM map_comb;
select minMap(val) from values ('val Map(Date, Int16)', (map(1, 1)), (map(1, 2)));
select minMap(val) from values ('val Map(DateTime(\'Asia/Istanbul\'), Int32)', (map(1, 1)), (map(1, 2)));
select minMap(val) from values ('val Map(Enum16(\'a\'=1), Int16)', (map('a', 1)), (map('a', 2)));
select minMap(val) from values ('val Map(FixedString(1), FixedString(1))', (map('1', '1')), (map('1', '2')));
select minMap(val) from values ('val Map(Int128, Int128)', (map(1, 1)), (map(1, 2)));
select minMap(val) from values ('val Map(Int256, Int256)', (map(1, 1)), (map(1, 2)));
select minMap(val) from values ('val Map(String, String)', (map('1', '1')), (map('1', '2')));
select minMap(val) from values ('val Map(UInt128, UInt128)', (map(1, 1)), (map(1, 2)));
select minMap(val) from values ('val Map(UInt256, UInt256)', (map(1, 1)), (map(1, 2)));
select minMap(val) from values ('val Map(UInt64, UInt64)', (map(1, 1)), (map(1, 2)));
select minMap(val, cnt) from values ('val Array(Date), cnt Array(Int16)', ([1], [1]), ([1], [2]));
select minMap(val, cnt) from values ('val Array(DateTime(\'Asia/Istanbul\')), cnt Array(Int32)', ([1], [1]), ([1], [2]));
select minMap(val, cnt) from values ('val Array(Decimal(10, 2)), cnt Array(Int16)', (['1.01'], [1]), (['1.01'], [2]));
select minMap(val, cnt) from values ('val Array(Enum16(\'a\'=1)), cnt Array(Int16)', (['a'], [1]), (['a'], [2]));
select minMap(val, cnt) from values ('val Array(FixedString(1)), cnt Array(FixedString(1))', (['1'], ['1']), (['1'], ['2']));
select minMap(val, cnt) from values ('val Array(Float64), cnt Array(Int8)', ([1], [1]), ([1], [2]));
select minMap(val, cnt) from values ('val Array(String), cnt Array(String)', (['1'], ['1']), (['1'], ['2']));
select minMap(val, cnt) from values ('val Array(String), cnt Array(String)', (['A'], ['']), (['B'], ['']));
select minMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)', ([1], [1]), ([1], [2]));
select minMerge(y) from ( select cast(x, 'AggregateFunction(min, Decimal(18, 10))') y from ( select arrayReduce('minState', [toDecimal64('0.000001', 10), toDecimal64('1.1', 10)]) x ) );
SELECT minOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNull(1);
select minus(c1 = 1 or c1=2 or c1 =3, c1=5) from orin_test;
SELECT moduloLegacy(-199, 200);
SELECT moduloLegacy(199, 200);
select moduloOrZero(-127, -1) = 0;
select moduloOrZero(-128, -1) = 0;
select moduloOrZero(0, 0) = 0;
select moduloOrZero(1, 1) = 0;
select moduloOrZero(5, 3) = 2;
select mortonDecode((1, 2, 3, 1), 4205569);
select mortonDecode((1,1), 4294967286);
select mortonDecode(1, 4294967286);
select mortonDecode(2, 4294967286);
select mortonDecode(4, 2149);
select mortonDecode(tuple(1), 4294967286);
select mortonDecode(tuple(4), 2147483648);
select mortonEncode((1,1), 65534, 65533);
select mortonEncode((1,2,3,1), 1,2,3,4);
select mortonEncode((4,4,4,4), 128, 128, 128, 128);
select mortonEncode(1,2,3,4);
select mortonEncode(4294967286);
select mortonEncode(65534, 65533);
select mortonEncode(tuple(1), 4294967286);
select mortonEncode(tuple(4), 128);
select multiFuzzyMatchAllIndices('123', 0, ['12']);
select multiFuzzyMatchAllIndices('halo some wrld', 2, ['^halllllo.*world$', 'some random string']);
select multiFuzzyMatchAllIndices(materialize('123'), 0, materialize(['12']));
select multiFuzzyMatchAllIndices(materialize('halo some wrld'), 2, materialize(['^halllllo.*world$', 'some random string']));
select multiFuzzyMatchAny('123', 0, ['12']);
select multiFuzzyMatchAny('abc', 1, ['a1c']) from system.numbers limit 3;
select multiFuzzyMatchAny('abc', 2, ['a1c']) from system.numbers limit 3;
select multiFuzzyMatchAny('abc', 3, ['a1c']) from system.numbers limit 3;
select multiFuzzyMatchAny('hallo some world', 1, ['^hello.*world$']);
select multiFuzzyMatchAny('halo some wrld', 2, ['^halo.*world$', '^hello.*world$']);
select multiFuzzyMatchAny('halo some wrld', 2, ['^hello.*world$', '^halo.*world$']);
select multiFuzzyMatchAny('halo some wrld', 2, ['^hello.*world$']);
select multiFuzzyMatchAny('halo some wrld', 3, ['^hello.*world$']);
select multiFuzzyMatchAny('hello some world', 0, ['^hello.*world$']);
select multiFuzzyMatchAny('hello some world', 10, ['^hello.*world$']);
select multiFuzzyMatchAny('string', 0, ['zorro$', '^tring', 'in$', 'how.*', 'it{2}', 'works']);
select multiFuzzyMatchAny('string', 1, ['zorro$', '^tring', 'ip$', 'how.*', 'it{2}', 'works']);
select multiFuzzyMatchAny(materialize('123'), 0, materialize(['12']));
select multiFuzzyMatchAny(materialize('abc'), 0, materialize(['a1c'])) from system.numbers limit 3;
select multiFuzzyMatchAny(materialize('abc'), 1, materialize(['a1c'])) from system.numbers limit 3;
select multiFuzzyMatchAny(materialize('abc'), 2, materialize(['a1c'])) from system.numbers limit 3;
select multiFuzzyMatchAny(materialize('abc'), 3, materialize(['a1c'])) from system.numbers limit 3;
select multiFuzzyMatchAny(materialize('hallo some world'), 1, materialize(['^hello.*world$']));
select multiFuzzyMatchAny(materialize('halo some wrld'), 2, materialize(['^halo.*world$', '^hello.*world$']));
select multiFuzzyMatchAny(materialize('halo some wrld'), 2, materialize(['^hello.*world$', '^halo.*world$']));
select multiFuzzyMatchAny(materialize('halo some wrld'), 2, materialize(['^hello.*world$']));
select multiFuzzyMatchAny(materialize('halo some wrld'), 3, materialize(['^hello.*world$']));
select multiFuzzyMatchAny(materialize('hello some world'), 0, materialize(['^hello.*world$']));
select multiFuzzyMatchAny(materialize('hello some world'), 10, materialize(['^hello.*world$']));
select multiFuzzyMatchAny(materialize('string'), 0, materialize(['zorro$', '^tring', 'in$', 'how.*', 'it{2}', 'works']));
select multiFuzzyMatchAny(materialize('string'), 1, materialize(['zorro$', '^tring', 'ip$', 'how.*', 'it{2}', 'works']));
select multiFuzzyMatchAnyIndex('123', 0, ['12']);
select multiFuzzyMatchAnyIndex('halo some wrld', 2, ['^halo.*world$', '^hello.*world$']);
select multiFuzzyMatchAnyIndex('halo some wrld', 2, ['^hello.*world$', '^halo.*world$']);
select multiFuzzyMatchAnyIndex('string', 1, ['zorro$', '^tring', 'ip$', 'how.*', 'it{2}', 'works']);
select multiFuzzyMatchAnyIndex(materialize('123'), 0, materialize(['12']));
select multiFuzzyMatchAnyIndex(materialize('halo some wrld'), 2, materialize(['^halo.*world$', '^hello.*world$']));
select multiFuzzyMatchAnyIndex(materialize('halo some wrld'), 2, materialize(['^hello.*world$', '^halo.*world$']));
select multiFuzzyMatchAnyIndex(materialize('string'), 1, materialize(['zorro$', '^tring', 'ip$', 'how.*', 'it{2}', 'works']));
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, 'bar', col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, col3, 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, col3, col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', (col1 % 3) = 0, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, 'bar', col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, col3, 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, col3, col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, 'foo', 1, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], (col1 % 3) = 0, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', 'bar'], 1, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], (col1 % 3) = 0, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, ['foo', col3], 1, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], (col1 % 3) = 0, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, 'bar'], 1, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], (col1 % 3) = 0, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, [col2, col3], 1, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, 'bar', col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, col3, 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, col3, col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, (col1 % 3) = 0, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, 'bar', col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, col3, 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, col3, col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, col2, 1, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, 'bar', col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, col3, 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, col3, col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, 'bar', col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, col3, 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, col3, col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString('foo', 16), 1, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, 'bar', col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, col3, 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, col3, col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, 'bar', col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, col3, 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, col3, col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf((col1 % 2) = 0, toFixedString(col2, 16), 1, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat32(1), toFloat32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toFloat64(1), toFloat64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt16(1), toInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt32(1), toInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt64(1), toInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toInt8(1), toInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt16(1), toUInt16(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt32(1), toUInt32(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt64(1), toUInt64(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat32(2), toFloat32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toFloat64(2), toFloat64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt16(2), toInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt32(2), toInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt64(2), toInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toInt8(2), toInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt16(2), toUInt16(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt32(2), toUInt32(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt64(2), toUInt64(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat32(3), toFloat32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toFloat64(3), toFloat64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt16(3), toInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt32(3), toInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt64(3), toInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toInt8(3), toInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt16(3), toUInt16(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt32(3), toUInt32(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt64(3), toUInt64(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, [toUInt8(1), toUInt8(2)], (number % 3) = 0, [toUInt8(2), toUInt8(3)], [toUInt8(3), toUInt8(3)]) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat64(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat64(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toFloat64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat32(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat64(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat64(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toFloat64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toFloat64(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat64(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat64(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toFloat64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt64(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt16(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat64(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat64(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toFloat64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt64(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt32(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt64(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt64(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat64(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat64(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toFloat64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt64(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toInt8(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat64(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat64(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toFloat64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt64(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt64(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt16(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat64(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat64(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toFloat64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt64(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt64(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt32(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt16(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt32(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt64(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt8(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt64(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat64(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat64(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toFloat64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt64(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt64(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt64(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt64(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt16(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt32(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt64(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt64(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt64(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt64(2), toUInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toFloat32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toFloat64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toInt8(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toUInt16(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toUInt32(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toUInt64(3)) FROM system.numbers LIMIT 10;
SELECT multiIf((number % 2) = 0, toUInt8(1), (number % 3) = 0, toUInt8(2), toUInt8(3)) FROM system.numbers LIMIT 10;
select multiIf(0, 1, intDiv(number % 2, 1), 2, 0, 3, 1, number + 10, 2) from numbers(10);
SELECT multiIf(1 > 2, 'Value', 'ElseValue') as a, isConstant(a);
SELECT multiIf(1, 'A', 1, 'BC', 'DEF');
SELECT multiIf(1, 'A', 1, NULL, 'DEF');
SELECT multiIf(1, 'foo', (col1 % 3) = 0, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, 'bar', col4) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, col3, 'baz') FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, col3, col4) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', (col1 % 3) = 0, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, 'bar', col4) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, col3, 'baz') FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, col3, col4) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, 'foo', 1, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, 2, 1, 3, 4);
SELECT multiIf(1, 2, 1, NULL, 4);
SELECT multiIf(1, 2, NULL, 3, 4);
SELECT multiIf(1, ['A', 'B'], 1, ['C', 'D'], ['E', 'F']);
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], (col1 % 3) = 0, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', 'bar'], 1, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], (col1 % 3) = 0, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, ['foo', col3], 1, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [1,2], 1, [3,4], [5,6]);
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], (col1 % 3) = 0, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, 'bar'], 1, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], (col1 % 3) = 0, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, ['foo', 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, ['foo', 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, ['foo', 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, ['foo', 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, ['foo', col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, ['foo', col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, ['foo', col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, ['foo', col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, [col4, 'bar'], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, [col4, 'bar'], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, [col4, 'bar'], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, [col4, 'bar'], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, [col4, col5], ['foo', 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, [col4, col5], ['foo', col7]) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, [col4, col5], [col6, 'bar']) FROM multi_if_check;
SELECT multiIf(1, [col2, col3], 1, [col4, col5], [col6, col7]) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, 'bar', col4) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, col3, 'baz') FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, col3, col4) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, col2, (col1 % 3) = 0, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, col2, 1, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf(1, col2, 1, 'bar', col4) FROM multi_if_check;
SELECT multiIf(1, col2, 1, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, col2, 1, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, col2, 1, col3, 'baz') FROM multi_if_check;
SELECT multiIf(1, col2, 1, col3, col4) FROM multi_if_check;
SELECT multiIf(1, col2, 1, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, col2, 1, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, col2, 1, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, col2, 1, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf(1, col2, 1, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, col2, 1, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, col2, 1, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, col2, 1, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf(1, col2, 1, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, col2, 1, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, NULL, 1, 3, 4);
SELECT multiIf(1, toFixedString('A', 16), 1, NULL, toFixedString('DEF', 16));
SELECT multiIf(1, toFixedString('A', 16), 1, toFixedString('BC', 16), toFixedString('DEF', 16));
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, 'bar', col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, col3, 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, col3, col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), (col1 % 3) = 0, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, 'bar', col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, col3, 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, col3, col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString('foo', 16), 1, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, 'bar', col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, col3, 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, col3, col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), (col1 % 3) = 0, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, 'bar', 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, 'bar', col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, 'bar', toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, 'bar', toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, col3, 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, col3, col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, col3, toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, col3, toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, toFixedString('bar', 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, toFixedString('bar', 16), col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, toFixedString('bar', 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, toFixedString('bar', 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, toFixedString(col3, 16), 'baz') FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, toFixedString(col3, 16), col4) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, toFixedString(col3, 16), toFixedString('baz', 16)) FROM multi_if_check;
SELECT multiIf(1, toFixedString(col2, 16), 1, toFixedString(col3, 16), toFixedString(col4, 16)) FROM multi_if_check;
SELECT multiIf(2 > 1, 'Value', 'ElseValue') as a, isConstant(a) FROM multi_if_check;
SELECT multiIf(2 > 1, 'Value', value) as a, isConstant(a) FROM multi_if_check;
SELECT multiIf(col1 == 1, col2, col2 == 2, col3, col3 == 3, col1, 42) FROM test1_00395;
select multiIf(col1 > 2, col2/col3, 4.0) from test SETTINGS min_count_to_compile_expression=0;
SELECT multiIf(cond1,then1,cond2,then2,then3) FROM test1_00395;
SELECT multiIf(NULL, 2, 1, 3, 4);
SELECT multiIf(NULL, 65536 :: UInt32, 3 :: Int32);
SELECT multiIf(NULL, NULL, NULL);
select multiIf(number % 2 != 0, intDiv(10, number % 2), 5, intDiv(10, 1 - number % 2), intDiv(10, number)) from numbers(5);
SELECT multiIf(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 2)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;
SELECT multiIf(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 5)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;
select multiIf(number == 0, 0, number == 1, intDiv(1, number), number == 2, intDiv(1, number - 1), number == 3, intDiv(1, number - 2), intDiv(1, number - 3)) from numbers(10);
SELECT multiIf(rand() % 2 = 0, '', '');
SELECT multiIf(rand() % 2 = 0, emptyArrayString(), emptyArrayString());
SELECT multiIf(rand() % 2 = 0, emptyArrayUInt8(), emptyArrayUInt8());
select multiIf(toLowCardinality(number) % 2, number, number + 1) from numbers(10);
SELECT multiIf(value == '1', 'ValueFirst', 2 > 1, 'ValueSecond', 'ElseValue') as a, isConstant(a) FROM multi_if_check;
select multiMatchAllIndices('123', ['12']);
select multiMatchAllIndices(materialize('123'), materialize(['12']));
select multiMatchAny('123', ['1']);
select multiMatchAny('123', ['12']);
select multiMatchAny('\0 key="v" ', ['key="(.*?)"']);
SELECT multiMatchAny('goodbye', ['^hello[, ]+world$', 'go+d *bye', 'w(or)+ld']);
SELECT multiMatchAny('Hallo Welt', ['.{51}']);
SELECT multiMatchAny(arrayJoin(['hello', 'world', 'hellllllllo', 'wororld', 'abc']), ['hel+o', 'w(or)*ld']);
SELECT multiMatchAny(arrayJoin(['hello', 'world', 'hellllllllo', 'wororld', 'abc']), materialize(['hel+o', 'w(or)*ld']));
SELECT multiMatchAny(materialize('/odezhda-dlya-bega/'), ['/odezhda-dlya-bega/', 'kurtki-i-vetrovki-dlya-bega', 'futbolki-i-mayki-dlya-bega']);
SELECT multiMatchAny(materialize('/odezhda-dlya-bega/'), materialize(['/odezhda-dlya-bega/', 'kurtki-i-vetrovki-dlya-bega', 'futbolki-i-mayki-dlya-bega']));
select multiMatchAny(materialize('123'), materialize(['1']));
select multiMatchAny(materialize('123'), materialize(['12']));
select multiMatchAny(materialize('\0 key="v" '), ['key="(.*?)"']);
select multiMatchAnyIndex('123', ['12']);
SELECT multiMatchAnyIndex('goodbye', ['^hello[, ]+world$', 'go+d *bye', 'w(or)+ld']);
select multiMatchAnyIndex(materialize('123'), materialize(['12']));
SELECT multiplyDecimal(toDecimal32(-123.123, 3), toDecimal128(-11.4, 1), 2);
SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(-11.4, 1), 2);
SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(0, 1));
SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(11.4, 1), 2);
SELECT multiplyDecimal(toDecimal64(-123.76, 2), toDecimal128(11.123456, 6));
SELECT multiplyDecimal(toDecimal64(10, 1), toNullable(toDecimal64(100, 5)));
SELECT multiplyDecimal(toDecimal64(123.76, 2), toDecimal128(11.123456, 6));
SELECT multiplyDecimal(toNullable(toDecimal64(10, 1)), toNullable(toDecimal64(100, 5)));
SELECT multiSearchAllPositions('hello, world', ['hello', 'world']);
select multiSearchAllPositions(materialize('string'), ['o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'str']);
select multiSearchAny(materialize('Hello World'), materialize([]));
select multiSearchFirstIndex(materialize('Hello World'), materialize([]));
select multiSearchFirstPosition(materialize('Hello World'), materialize([]));
SELECT murmurHash2_32('');
SELECT murmurHash2_32('\x01');
SELECT murmurHash2_32('\x02') = bitXor(toUInt32(0x5bd1e995 * bitXor(toUInt32(3 * 0x5bd1e995) AS a, bitShiftRight(a, 13))) AS b, bitShiftRight(b, 15));
SELECT murmurHash2_32('\x02\0');
SELECT murmurHash2_32('\x03\0\0');
SELECT murmurHash2_32('foo');
SELECT murmurHash2_32(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], (1, 2))));
SELECT murmurHash2_32(1);
SELECT murmurHash2_32(1, 2, 3);
SELECT murmurHash2_32(1, 3, 2);
SELECT murmurHash2_32(123456);
SELECT murmurHash2_32(2) = bitXor(toUInt32(0x5bd1e995 * bitXor(toUInt32(3 * 0x5bd1e995) AS a, bitShiftRight(a, 13))) AS b, bitShiftRight(b, 15));
SELECT murmurHash2_32(CAST('bar' AS FixedString(3)));
SELECT murmurHash2_32(CAST(-154477 AS Int64));
SELECT murmurHash2_32(CAST(1.2684 AS Float32));
SELECT murmurHash2_32(CAST(3 AS UInt8));
SELECT murmurHash2_32(toUInt16(2));
SELECT murmurHash2_32(x) FROM (SELECT CAST(1 AS Enum8('a' = 1, 'b' = 2)) as x);
SELECT murmurHash2_64('\x01');
SELECT murmurHash2_64('foo');
SELECT murmurHash2_64(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2))));
SELECT murmurHash2_64(1);
SELECT murmurHash2_64(1, 2, 3);
SELECT murmurHash2_64(1, 3, 2);
SELECT murmurHash2_64(123456);
SELECT murmurHash2_64([(1, 'a'), (2, 'b'), (3, 'c')]);
SELECT murmurHash2_64(map(1, 'a', 2, 'b', 3, 'c'));
SELECT murmurHash2_64(materialize([(1, 'a'), (2, 'b'), (3, 'c')]));
SELECT murmurHash2_64(materialize(map(1, 'a', 2, 'b', 3, 'c')));
SELECT murmurHash3_32('\x01');
SELECT murmurHash3_32('foo');
SELECT murmurHash3_32(1);
SELECT murmurHash3_64('\x01');
SELECT murmurHash3_64('foo');
SELECT murmurHash3_64(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2))));
SELECT murmurHash3_64(1);
SELECT murmurHash3_64(1, 2, 3);
SELECT murmurHash3_64(1, 3, 2);
select mutation_id, command, parts_to_do_names from system.mutations where database=currentDatabase() and table='mut';
select mutation_id, command, parts_to_do_names, is_done from system.mutations where database=currentDatabase() and table='mut';
select mutation_id, command, parts_to_do_names, parts_to_do, is_done from system.mutations where database=currentDatabase() and table='rmt';
select mutation_id, command, parts_to_do_names, parts_to_do, is_done from system.mutations where database=currentDatabase();
SELECT n % 10, count(1) from (SELECT range(0, number) as x FROM numbers(1000)) LEFT ARRAY JOIN x as n group by n % 10;
select n = n_, number as n, bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(b7, 1), b6), 1), b5), 1), b4), 1), b3), 1), b2), 1), b1), 1), b0) as n_, bitTest(n, 7) as b7, bitTest(n, 6) as b6, bitTest(n, 5) as b5, bitTest(n, 4) as b4, bitTest(n, 3) as b3, bitTest(n, 2) as b2, bitTest(n, 1) as b1, bitTest(n, 0) as b0 from system.numbers limit 256;
select n = n_, number as n, bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(b7, 1), b6), 1), b5), 1), b4), 1), b3), 1), b2), 1), b1), 1), b0) as n_, bitTestAll(n, 7) as b7, bitTestAll(n, 6) as b6, bitTestAll(n, 5) as b5, bitTestAll(n, 4) as b4, bitTestAll(n, 3) as b3, bitTestAll(n, 2) as b2, bitTestAll(n, 1) as b1, bitTestAll(n, 0) as b0 from system.numbers limit 256;
select n = n_, number as n, bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(bitOr(bitShiftLeft(b7, 1), b6), 1), b5), 1), b4), 1), b3), 1), b2), 1), b1), 1), b0) as n_, bitTestAny(n, 7) as b7, bitTestAny(n, 6) as b6, bitTestAny(n, 5) as b5, bitTestAny(n, 4) as b4, bitTestAny(n, 3) as b3, bitTestAny(n, 2) as b2, bitTestAny(n, 1) as b1, bitTestAny(n, 0) as b0 from system.numbers limit 256;
SELECT n FROM (SELECT number AS n FROM system.numbers LIMIT 1000000) ORDER BY n, n, n, n, n, n, n, n, n, n LIMIT 1000000, 1;
SELECT n FROM remote('127.0.0.{2,3}', currentDatabase(), data_00184) GROUP BY number AS n ORDER BY n SETTINGS distributed_group_by_no_merge=2;
SELECT n FROM remote('127.0.0.{2,3}', currentDatabase(), data_00184) ORDER BY number AS n LIMIT 1 SETTINGS distributed_group_by_no_merge=2;
SELECT n FROM test1 WHERE toFloat32(n) = 7777.0 SETTINGS max_rows_to_read = 2;
SELECT n FROM test1 WHERE toFloat64(n) = 7777.0 SETTINGS max_rows_to_read = 2;
select n, a, s from t order by n;
select n, array_concat_agg(a) from t group by n order by n;
SELECT n, count() AS m FROM t_inter_02233 GROUP BY n ORDER BY n WITH FILL INTERPOLATE ( m AS m + 1 );
SELECT n, count(1) from (SELECT groupArray(number % 10) AS x FROM (SELECT * FROM numbers(100000))) ARRAY JOIN x as n group by n;
select n, firstLine(text) from 02815_first_line_vector order by n;
SELECT n, FROM (SELECT 1 AS n);
SELECT n, j * 2097152 FROM (SELECT number * 200000 as n FROM numbers(5)) nums ANY LEFT JOIN ( SELECT number * 2 AS n, number AS j FROM numbers(1000000) ) js2 USING n ORDER BY n SETTINGS log_comment='02402_external_disk_mertrics/join' FORMAT Null;
SELECT n, j FROM ( SELECT number * 200000 as n FROM numbers(5) ) nums ANY LEFT JOIN ( SELECT number * 2 AS n, number AS j FROM numbers(1000000) ) js2 USING n;
SELECT n, j FROM ( SELECT number * 200000 as n FROM numbers(5) ) nums JOIN ( SELECT number * 2 AS n, number AS j FROM numbers(1000000) ) js2 USING n ORDER BY n;
SELECT n, j FROM ( SELECT number * 200000 as n FROM numbers(5) ) nums LEFT JOIN ( SELECT number * 2 AS n, number AS j FROM numbers(1000000) ) js2 USING n ORDER BY n SETTINGS max_rows_in_join = 100000;
SELECT n, j FROM (SELECT number as n FROM numbers(4)) nums ANY LEFT JOIN ( SELECT number * 2 AS n, number + 10 AS j FROM numbers(4000) ) js2 USING n ORDER BY n;
SELECT n, j FROM (SELECT number AS n FROM numbers(4)) nums ANY LEFT JOIN ( SELECT number * 2 AS n, number + 10 AS j FROM numbers(4000) ) js2 USING n ORDER BY n;
SELECT n, k FROM (SELECT number AS n, toFixedString(materialize(' '), 3) AS k FROM system.numbers LIMIT 100000) GROUP BY n, k ORDER BY n DESC, k LIMIT 10;
select n, maxMerge(s) as x, length(x) from aggr group by n order by n;
SELECT n, source FROM (SELECT toDateTime64(number * 1000, 3,'Asia/Istanbul') AS n, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ) ORDER BY n ASC WITH FILL STEP toDateTime64(1000, 3);
SELECT n, source FROM (SELECT toDateTime64(number * 1000, 9,'Asia/Istanbul') AS n, 'original' AS source FROM numbers(10) WHERE (number % 3) = 1 ) ORDER BY n ASC WITH FILL STEP toDateTime64(1000, 9);
SELECT n, z, changed FROM ( SELECT n, z, runningDifferenceStartingWithFirstValue(n) AS changed FROM ( SELECT ts, n,z FROM system.one ARRAY JOIN [1,3,4,5,6] AS ts, [1,2,2,2,1] AS n, ['a', 'a', 'b', 'a', 'b'] AS z ORDER BY n, ts DESC ) ) WHERE changed = 0;
SELECT n,m FROM nums ORDER BY n;
SELECT n,m FROM nums_buf ORDER BY n;
SELECT n,n2 FROM mview ORDER by n;
SELECT n,s FROM test_table ORDER BY n;
SELECT n.a, n.b FROM nested ORDER BY n.a;
SELECT n.lc1, n.lc2 FROM cool_table ORDER BY id;
SELECT n.null FROM t_comp_subcolumns LIMIT 10000, 5;
SELECT n.null FROM t_nul;
SELECT n.values.id FROM t_nested_with_dots;
SELECT n.x FROM table_for_rename_nested WHERE key = 7;
SELECT n.y FROM table_for_rename_nested WHERE key = 7;
SELECT n1.number, n2.number, n3.number FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3 ORDER BY n1.number, n2.number, n3.number;
SELECT name FROM ( SELECT name FROM system.settings ) ANY INNER JOIN ( SELECT name FROM system.settings ) USING (name) WHERE name = 'enable_optimize_predicate_expression';
SELECT name FROM (SELECT name FROM data2013 UNION ALL SELECT data_name AS name FROM data2015) ORDER BY name ASC;
SELECT name FROM (SELECT name FROM data2013 UNION ALL SELECT data_name FROM data2015) ORDER BY name ASC;
SELECT name FROM const_in_const WHERE 1 IN (125, 1, 2) ORDER BY name LIMIT 1;
SELECT name FROM join_table_mutation WHERE id = 10;
SELECT name FROM system.columns WHERE database = currentDatabase() AND table = 'merge_ab';
SELECT name FROM system.data_skipping_indices WHERE type = 'minmax' AND database = currentDatabase();
SELECT name FROM system.databases WHERE name = {new_db_name:String};
SELECT name FROM system.detached_parts WHERE table = 'mt_01451' AND database = currentDatabase();
SELECT name FROM system.detached_parts WHERE table = 'replica2' AND database = currentDatabase();
SELECT name from system.dictionaries WHERE database = 'database_for_dict' ORDER BY name;
SELECT name FROM system.dictionaries WHERE name = {new_dict_name:String};
SELECT name FROM system.functions WHERE name = 'date_diff' OR name = 'DATE_DIFF' OR name = 'timestampDiff' OR name = 'timestamp_diff' OR name = 'TIMESTAMP_DIFF' ORDER BY name;
SELECT name FROM system.functions WHERE name = 'ltrim' OR name = 'rtrim' OR name = 'trim' ORDER BY name;
SELECT name FROM system.merge_tree_settings WHERE length(description) < 10;
SELECT name FROM system.parts WHERE database=currentDatabase() AND table = '02581_trips' AND active ORDER BY name;
SELECT name FROM system.parts WHERE table = 'mt_01451' AND active AND database = currentDatabase();
SELECT name FROM system.parts WHERE table = 'replica1' and database = currentDatabase() and active = 1 ORDER BY name;
SELECT name FROM system.parts WHERE table = 'replica2' AND active AND database = currentDatabase();
SELECT name FROM system.parts WHERE table = 'replica2' and database = currentDatabase() and active = 1;
SELECT name FROM system.server_settings WHERE is_obsolete = 1 ORDER BY name;
SELECT name FROM system.settings WHERE length(description) < 10;
select name from system.tables where database=currentDatabase() order by name;
SELECT name FROM system.tables WHERE is_temporary = 1 AND name = 'test_temporary_table';
SELECT name FROM system.zookeeper WHERE path = '/clickhouse/' || currentDatabase() || '/01700_system_zookeeper_path_in/' || getMacro('shard') AND name like 'block%' ORDER BY name;
SELECT name FROM system.zookeeper WHERE path IN ('/clickhouse/' || currentDatabase() || '/01700_system_zookeeper_path_in/' || getMacro('shard')) AND name LIKE 'block%' ORDER BY name;
SELECT name FROM system.zookeeper WHERE path IN ('/clickhouse/' || currentDatabase() || '/01700_system_zookeeper_path_in/' || getMacro('shard'), '/clickhouse/' || currentDatabase() || '/01700_system_zookeeper_path_in/' || getMacro('shard') || '/replicas') AND name LIKE 'block%' ORDER BY name;
SELECT name FROM system.zookeeper WHERE path IN (SELECT concat('/clickhouse/' || currentDatabase() || '/01700_system_zookeeper_path_in/' || getMacro('shard') || '/', name) FROM system.zookeeper WHERE (name != 'replicas' AND name NOT LIKE 'leader_election%' AND name NOT LIKE 'zero_copy_%' AND path = '/clickhouse/' || currentDatabase() || '/01700_system_zookeeper_path_in/' || getMacro('shard'))) ORDER BY name;
SELECT name FROM test GROUP BY name SETTINGS force_optimize_projection_name='non_existing_projection';
SELECT name FROM test GROUP BY name SETTINGS force_optimize_projection_name='projection_name';
SELECT name, _state FROM system.parts WHERE database = currentDatabase() AND table = 'data_01660' ORDER BY name;
SELECT name, _state FROM system.parts WHERE database = currentDatabase() AND table = 'data_01660';
SELECT name, active FROM system.parts WHERE database = currentDatabase() AND table = 'data_01660' ORDER BY name;
SELECT name, active FROM system.parts WHERE database = currentDatabase() AND table = 'data_01660';
SELECT name, column, serialization_kind FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_02235' ORDER BY name, column;
SELECT name, column, serialization_kind FROM system.parts_columns WHERE table = 't_sparse_distinct' AND database = currentDatabase() AND column = 'v' ORDER BY name;
SELECT name, column, serialization_kind FROM system.parts_columns WHERE table = 't_sparse_full' AND database = currentDatabase() AND active ORDER BY name, column;
SELECT name, column, type FROM system.parts_columns WHERE table = 't_json' AND database = currentDatabase() AND active AND column = 'data' ORDER BY name;
SELECT name, column, type FROM system.parts_columns WHERE table = 't_materialize_column' AND database = currentDatabase() AND active ORDER BY name, column;
SELECT name, column, type, rows FROM system.parts_columns WHERE (database = currentDatabase()) AND (table = 'lwd_test') AND active ORDER BY name, column;
SELECT name, column, type, serialization_kind, substreams, filenames FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_parts_columns_filenames' ORDER BY name, column;
SELECT name, comment FROM system.dictionaries WHERE name == '02155_test_dictionary' AND database == currentDatabase();
SELECT name, comment FROM system.tables WHERE name == '02155_test_dictionary' AND database == currentDatabase();
SELECT name, comment FROM system.tables WHERE name == '02155_test_dictionary_view' AND database == currentDatabase();
SELECT name, database, element_count FROM system.dictionaries WHERE database = '01785_db' AND name = 'complex_key_hashed_dictionary';
SELECT name, database, element_count FROM system.dictionaries WHERE database = '01785_db' AND name = 'simple_key_cache_dictionary';
SELECT name, database, element_count FROM system.dictionaries WHERE database = '01785_db' AND name = 'simple_key_flat_dictionary';
SELECT name, database, element_count FROM system.dictionaries WHERE database = '01785_db' AND name = 'simple_key_hashed_dictionary';
SELECT name, database, element_count FROM system.dictionaries WHERE database = 'test_truncate_database' AND name = 'dest_dictionary';
SELECT name, database, key.names, key.types, attribute.names, attribute.types, status FROM system.dictionaries WHERE database='01760_db';
SELECT name, description FROM system.settings WHERE substring(description, 1, 1) != upper(substring(description, 1, 1));
SELECT name, engine FROM system.tables WHERE database='test_01191' ORDER BY name;
SELECT name, engine FROM system.tables WHERE name IN ('v_test1', 'v_test2', 'v_test11', 'v_test22') AND database = currentDatabase() ORDER BY name;
SELECT name, engine, engine_full, create_table_query, data_paths, notEmpty([metadata_path]), notEmpty([uuid]) FROM system.tables WHERE name like '%tablefunc%' and database=currentDatabase() ORDER BY name;
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'complex_key_cache_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'complex_key_direct_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'complex_key_hashed_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'ip_trie_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'polygon_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'simple_key_cache_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'simple_key_direct_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'simple_key_flat_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'simple_key_hashed_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'simple_key_range_hashed_dictionary_01862';
SELECT name, found_rate FROM system.dictionaries WHERE database = currentDatabase() AND name = 'simple_key_sparse_hashed_dictionary_01862';
SELECT name, is_frozen FROM system.parts WHERE `database` = currentDatabase() AND `table` = 'part_info';
SELECT name, is_frozen FROM system.parts WHERE database = currentDatabase() AND table = 't';
SELECT name, is_in_partition_key, is_in_sorting_key, is_in_primary_key, is_in_sampling_key FROM system.columns WHERE table = 'check_system_tables' AND database = currentDatabase() FORMAT PrettyCompactNoEscapes;
SELECT name, key FROM system.dictionaries WHERE name='example_complex_key_dictionary' AND database=currentDatabase();
SELECT name, key FROM system.dictionaries WHERE name='example_simple_key_dictionary' AND database=currentDatabase();
SELECT name, length(attribute.names), element_count, round(load_factor, 4) FROM system.dictionaries WHERE database = currentDatabase() AND name = 'dict_sharded';
SELECT name, length(attribute.names), element_count, round(load_factor, 4) FROM system.dictionaries WHERE database = currentDatabase() AND name = 'dict_sharded_multi';
SELECT name, num FROM parsed_eph;
SELECT name, part_type FROM system.parts WHERE (database = currentDatabase()) AND (table = 'lwd_test') AND active ORDER BY name;
SELECT name, part_type FROM system.parts WHERE table = 'wide_to_comp' AND database = currentDatabase() AND active ORDER BY name;
SELECT name, partition, formatReadableSize(sum(data_compressed_bytes) AS size) AS compressed, formatReadableSize(sum(data_uncompressed_bytes) AS usize) AS uncompressed, round(usize / size, 2) AS compr_rate, sum(rows) AS rows, count() AS part_count FROM system.projection_parts WHERE database = currentDatabase() and table = 'z' AND active GROUP BY name, partition ORDER BY size DESC;
SELECT name, partition, partition_id FROM system.parts WHERE database = currentDatabase() AND table = 'test' AND active ORDER BY partition;
SELECT name, partition_key, sorting_key, primary_key, sampling_key FROM system.tables WHERE name = 'check_system_tables' AND database = currentDatabase() FORMAT PrettyCompactNoEscapes;
SELECT name, partition_key, sorting_key, primary_key, sampling_key, storage_policy, total_rows FROM system.tables WHERE name = 'check_system_tables' AND database = currentDatabase() FORMAT PrettyCompactNoEscapes;
SELECT name, round(found_rate, 2) FROM system.dictionaries WHERE database = currentDatabase() AND name = 'simple_key_flat_dictionary_01862';
SELECT name, short_name, database, table, storage, select_filter, is_restrictive, apply_to_all, apply_to_list, apply_to_except from system.row_policies WHERE short_name LIKE 'p%\_01295' ORDER BY name;
SELECT name, status FROM system.dictionaries WHERE database='test_01191';
SELECT name, storage from system.roles WHERE name='r1_01293';
SELECT name, storage, auth_type, auth_params, host_ip, host_names, host_names_regexp, host_names_like, default_roles_all, default_roles_list, default_roles_except FROM system.users WHERE name LIKE 'u%\_01292' ORDER BY name;
SELECT name, storage, keys, durations, apply_to_all, apply_to_list, apply_to_except FROM system.quotas WHERE name LIKE 'q%\_01297' ORDER BY name;
SELECT name, storage, num_elements, apply_to_all, apply_to_list, apply_to_except FROM system.settings_profiles WHERE name LIKE 's%\_01294' ORDER BY name;
SELECT name, toUInt32(metadata_modification_time) > 0, engine_full, create_table_query FROM system.tables WHERE database = currentDatabase() ORDER BY name FORMAT TSVRaw;
SELECT name, type FROM system.columns WHERE database = 'dict_db_01224' AND table = 'dict';
SELECT name, type FROM system.dictionaries WHERE database = currentDatabase() AND name = 'dict_flat_simple';
SELECT name, type FROM system.dictionaries WHERE database = currentDatabase() AND name = 'dict_hashed_simple_auto_convert';
SELECT name, type FROM system.dictionaries WHERE database = currentDatabase() AND name = 'dict_hashed_simple_Decimal128';
SELECT name, type FROM system.dictionaries WHERE database = currentDatabase() AND name = 'dict_hashed_simple_Float32';
SELECT name, type FROM system.dictionaries WHERE database = currentDatabase() AND name = 'dict_hashed_simple_String';
SELECT name, type, compression_codec FROM system.columns WHERE table='alter_bug' AND database=currentDatabase();
SELECT name, type, default_expression, compression_codec FROM system.columns WHERE table='alter_bug' AND database=currentDatabase();
SELECT name, type, position FROM system.columns WHERE database = currentDatabase() AND table = 'test';
SELECT name, type, serialization_kind FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_modify_to_nullable' AND column = 's' AND active ORDER BY name;
SELECT name, type, serialization_kind FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_mutations_1' AND column = 's' AND active ORDER BY name;
SELECT name, value FROM system.settings WHERE name = 'custom_compound.identifier.v1';
SELECT name, value FROM system.settings WHERE name = 'custom_e' SETTINGS custom_e = -0.333;
SELECT name, value FROM system.settings WHERE name = 'custom_e';
SELECT name, value FROM system.settings WHERE name = 'custom_f' SETTINGS custom_f = 'word';
SELECT name, value FROM system.settings WHERE name = 'custom_null' SETTINGS custom_null = NULL;
SELECT name, value FROM system.settings WHERE name = 'custom_null';
SELECT name, value FROM system.settings WHERE name LIKE 'custom_%' ORDER BY name;
SELECt name,database from system.databases where name = 'default';
SELECT name,table from system.tables where database = 'system' and name = 'numbers';
SELECT nan = toFloat32(0.0), nan != toFloat32(0.0), nan < toFloat32(0.0), nan > toFloat32(0.0), nan <= toFloat32(0.0), nan >= toFloat32(0.0);
SELECT nan = toFloat64(0.0), nan != toFloat64(0.0), nan < toFloat64(0.0), nan > toFloat64(0.0), nan <= toFloat64(0.0), nan >= toFloat64(0.0);
SELECT nan = toInt16(0), nan != toInt16(0), nan < toInt16(0), nan > toInt16(0), nan <= toInt16(0), nan >= toInt16(0);
SELECT nan = toInt32(0), nan != toInt32(0), nan < toInt32(0), nan > toInt32(0), nan <= toInt32(0), nan >= toInt32(0);
SELECT nan = toInt64(0), nan != toInt64(0), nan < toInt64(0), nan > toInt64(0), nan <= toInt64(0), nan >= toInt64(0);
SELECT nan = toInt8(0), nan != toInt8(0), nan < toInt8(0), nan > toInt8(0), nan <= toInt8(0), nan >= toInt8(0);
SELECT nan = toUInt16(0), nan != toUInt16(0), nan < toUInt16(0), nan > toUInt16(0), nan <= toUInt16(0), nan >= toUInt16(0);
SELECT nan = toUInt32(0), nan != toUInt32(0), nan < toUInt32(0), nan > toUInt32(0), nan <= toUInt32(0), nan >= toUInt32(0);
SELECT nan = toUInt64(0), nan != toUInt64(0), nan < toUInt64(0), nan > toUInt64(0), nan <= toUInt64(0), nan >= toUInt64(0);
SELECT nan = toUInt8(0), nan != toUInt8(0), nan < toUInt8(0), nan > toUInt8(0), nan <= toUInt8(0), nan >= toUInt8(0);
SELECT nan AS lhs, cast(nan, 'Float32') AS rhs, lhs != rhs, lhs != materialize(rhs), materialize(lhs) != rhs, materialize(lhs) != materialize(rhs);
SELECT nan AS lhs, cast(nan, 'Float32') AS rhs, lhs = rhs, lhs = materialize(rhs), materialize(lhs) = rhs, materialize(lhs) = materialize(rhs);
SELECT nan AS value, value != value, value != materialize(value), materialize(value) != value, materialize(value) != materialize(value);
SELECT nan AS value, value = value, value = materialize(value), materialize(value) = value, materialize(value) = materialize(value);
SELECT nan AS x, erf(x), erfc(x), lgamma(x), tgamma(x);
SELECT nan AS x, isFinite(exp(x)) /* exp(nan) is allowed to return inf */, exp2(x), exp10(x), log(x), log2(x), log10(x), sqrt(x), cbrt(x);
SELECT nan as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=0;
SELECT nan as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=1;
SELECT nan AS x, sin(x), cos(x), tan(x), asin(x), acos(x), atan(x);
SELECT NaN;
SELECT narr FROM nullable_00457 ORDER BY s;
SELECT negate(INTERVAL 1 SECOND);
SELECT neighbor(toString(number), -9223372036854775808) FROM numbers(100);
SELECT nest.a, arrayPopBack(nest.a), arrayPopFront(nest.a), arrayResize(nest.a, 1), arraySlice(nest.a, 2, 1) FROM decimal;
SELECT nest.a, nest.b, nested.`nest`.`a`, nested.nest.b, t.nest.a, t.nest.b, t.* FROM nested AS t;
SELECT nest.b, arrayPopBack(nest.b), arrayPopFront(nest.b), arrayResize(nest.b, 1), arraySlice(nest.b, 2, 1) FROM decimal;
SELECT nest.c, arrayPopBack(nest.c), arrayPopFront(nest.c), arrayResize(nest.c, 1), arraySlice(nest.c, 2, 1) FROM decimal;
SELECT nested_name_tuples.a.y.i FROM nested_name_tuples as t;
SELECT network, val FROM null_ip_dict;
SELECT NewColumn FROM test_a INNER JOIN (SELECT OldColumn, NewColumn FROM test_b) s Using OldColumn PREWHERE NewColumn != '';
SELECT ngramMinHash('');
SELECT ngramMinHash('what a cute cat.');
SELECT ngramMinHash(s) FROM defaults;
SELECT ngramMinHashCaseInsensitive('what a cute cat.');
SELECT ngramMinHashCaseInsensitive(s) FROM defaults;
SELECT ngramMinHashCaseInsensitiveUTF8('what a cute cat.');
SELECT ngramMinHashCaseInsensitiveUTF8(s) FROM defaults;
SELECT ngramMinHashUTF8('what a cute cat.');
SELECT ngramMinHashUTF8(s) FROM defaults;
SELECT ngrams('Test', 1);
SELECT ngrams('Test', 2);
SELECT ngrams('Test', 3);
SELECT ngrams('Test', 4);
SELECT ngrams('Test', 5);
SELECT ngrams('😁😈😁😈', 1);
SELECT ngrams('😁😈😁😈', 2);
SELECT ngrams('😁😈😁😈', 3);
SELECT ngrams('😁😈😁😈', 4);
SELECT ngrams('😁😈😁😈', 5);
SELECT ngrams(materialize('Test'), 1);
SELECT ngrams(materialize('Test'), 2);
SELECT ngrams(materialize('Test'), 3);
SELECT ngrams(materialize('Test'), 4);
SELECT ngrams(materialize('Test'), 5);
SELECT ngrams(materialize('😁😈😁😈'), 1);
SELECT ngrams(materialize('😁😈😁😈'), 2);
SELECT ngrams(materialize('😁😈😁😈'), 3);
SELECT ngrams(materialize('😁😈😁😈'), 4);
SELECT ngrams(materialize('😁😈😁😈'), 5);
SELECT ngrams(materialize(toFixedString('Test', 4)), 1);
SELECT ngrams(materialize(toFixedString('Test', 4)), 2);
SELECT ngrams(materialize(toFixedString('Test', 4)), 3);
SELECT ngrams(materialize(toFixedString('Test', 4)), 4);
SELECT ngrams(materialize(toFixedString('Test', 4)), 5);
SELECT ngrams(materialize(toFixedString('😁😈😁😈', 16)), 1);
SELECT ngrams(materialize(toFixedString('😁😈😁😈', 16)), 2);
SELECT ngrams(materialize(toFixedString('😁😈😁😈', 16)), 3);
SELECT ngrams(materialize(toFixedString('😁😈😁😈', 16)), 4);
SELECT ngrams(materialize(toFixedString('😁😈😁😈', 16)), 5);
SELECT ngrams(toFixedString('Test', 4), 1);
SELECT ngrams(toFixedString('Test', 4), 2);
SELECT ngrams(toFixedString('Test', 4), 3);
SELECT ngrams(toFixedString('Test', 4), 4);
SELECT ngrams(toFixedString('Test', 4), 5);
SELECT ngrams(toFixedString('😁😈😁😈', 16), 1);
SELECT ngrams(toFixedString('😁😈😁😈', 16), 2);
SELECT ngrams(toFixedString('😁😈😁😈', 16), 3);
SELECT ngrams(toFixedString('😁😈😁😈', 16), 4);
SELECT ngrams(toFixedString('😁😈😁😈', 16), 5);
SELECT ngramSimHash('what a cute cat.');
SELECT ngramSimHash(s) FROM defaults;
SELECT ngramSimHashCaseInsensitive('what a cute cat.');
SELECT ngramSimHashCaseInsensitive(s) FROM defaults;
SELECT ngramSimHashCaseInsensitiveUTF8('what a cute cat.');
SELECT ngramSimHashCaseInsensitiveUTF8(s) FROM defaults;
SELECT ngramSimHashUTF8('what a cute cat.');
SELECT ngramSimHashUTF8(s) FROM defaults;
SELECT nn,vv FROM (SELECT name AS nn, value AS vv FROM data2013 UNION ALL SELECT name AS nn, value AS vv FROM data2014) ORDER BY nn,vv ASC;
SELECT normalizedQueryHash('[1, 2, 3, x]') != normalizedQueryHash('[1, x]');
SELECT normalizedQueryHash('[1, 2, 3]') = normalizedQueryHash('[1, ''x'']');
SELECT normalizedQueryHash('SELECT 1') != normalizedQueryHash('SELECT 1, 1, 1');
SELECT normalizedQueryHash('SELECT $doc$VALUE$doc$ AS `xyz`') != normalizedQueryHash('SELECT $doc$VALUE$doc$ AS `abc`');
SELECT normalizedQueryHash('SELECT $doc$VALUE$doc$ AS xyz111') = normalizedQueryHash('SELECT $doc$VALUE$doc$ AS xyz234');
SELECT normalizedQueryHash('SELECT 1 AS `xyz`') != normalizedQueryHash('SELECT 1 AS `abc`');
SELECT normalizedQueryHash('SELECT 1 AS xyz111') = normalizedQueryHash('SELECT 2 AS xyz234');
SELECT normalizedQueryHash('SELECT 1') = normalizedQueryHash('SELECT 2');
SELECT normalizedQueryHash('SELECT 1, 1, 1, /* Hello */ \'abc\'') = normalizedQueryHash('SELECT 2, 3');
SELECT normalizedQueryHash(formatQuery('select 1')) = normalizedQueryHash(formatQuery('SELECT 1'));
SELECT normalizedQueryHash(formatQuerySingleLine('select 1')) = normalizedQueryHash(formatQuerySingleLine('SELECT 1'));
SELECT normalizeL1((1, 1)), normalizeL2((1, 1)), normalizeLinf((1, 1)), normalizeLp((1, 1), 1.);
SELECT normalizeQuery('[1, 2, 3, x]');
SELECT normalizeQuery('[1, 2, 3]');
SELECT normalizeQuery('SELECT 1');
SELECT normalizeQuery('SELECT 1, 1, 1');
SELECT normalizeQuery('SELECT $doc$VALUE$doc$ xyz11');
SELECT normalizeQuery('SELECT $doc$VALUE$doc$, ''xyz11''');
SELECT normalizeQuery('SELECT $doc$VALUE$doc$, xyz11');
SELECT normalizeQuery('SELECT 1 AS `aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee`'), normalizedQueryHash('SELECT 1 AS `aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee`') = normalizedQueryHash('SELECT 2 AS `aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeef`');
SELECT normalizeQuery('SELECT 1 AS `xyz11`');
SELECT normalizeQuery('SELECT 1 AS `xyz1`');
SELECT normalizeQuery('SELECT 1 AS `xyz`');
SELECT normalizeQuery('SELECT 1 AS xyz1');
SELECT normalizeQuery('SELECT 1 AS xyz11');
SELECT normalizeQuery('SELECT 1 AS xyz111');
SELECT normalizeQuery('SELECT 1 xyz11');
SELECT normalizeQuery('SELECT 1');
SELECT normalizeQuery('SELECT 1, ''xyz11''');
SELECT normalizeQuery('SELECT 1, 1, 1, /* Hello */ \'abc\' WHERE 1 = 1 AND (1, y) LIMIT 1, 1');
SELECT normalizeQuery('SELECT 1, 1, 1, /* Hello */ \'abc\' WHERE 1 = 1 AND (1, y)');
SELECT normalizeQuery('SELECT 1, 1, 1, /* Hello */ \'abc\' WHERE 1 = 1 AND (x, y)');
SELECT normalizeQuery('SELECT 1, 1, 1, /* Hello */ \'abc\' WHERE 1 = 1');
SELECT normalizeQuery('SELECT 1, 1, 1, /* Hello */ \'abc\' WHERE 1');
SELECT normalizeQuery('SELECT 1, 1, 1, /* Hello */ \'abc\'');
SELECT normalizeQuery('SELECT 1, 1, 1, /* Hello */');
SELECT normalizeQuery('SELECT 1, 1, 1, /* Hwllo */');
SELECT normalizeQuery('SELECT 1, xyz11');
SELECT normalizeQueryKeepNames('SELECT 1 AS `aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee`'), normalizedQueryHashKeepNames('SELECT 1 AS `aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee`') = normalizedQueryHashKeepNames('SELECT 2 AS `aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeef`');
SELECT normL1((1, 1)), normL2((1, 1)), normLinf((1, 1)), normLp((1, 1), 1.);
SELECT NOT (0) + NOT (0);
SELECT not 0;
SELECT not 100000000;
SELECT NOT 1;
SELECT not 1;
SELECT not false;
SELECT NOT NOT 1;
SELECT NOT NOT cos(MAX(pow(1523598955, 763027371))) FROM numbers(1) SETTINGS compile_expressions = 0;
SELECT NOT NOT cos(MAX(pow(1523598955, 763027371))) FROM numbers(1) SETTINGS compile_expressions = 1;
SELECT NOT NOT NOT 1;
SELECT NOT NOT NOT NOT 1 = 1;
SELECT NOT NOT not NoT NOT 1 = 1;
SELECT NOT NULL IS NOT NULL;
SELECT NOT NULL IS null;
SELECT NOT x, isZeroOrNull(x) FROM (SELECT arrayJoin([1, 2, 3, NULL]) = 3 AS x);
SELECT NOT x, isZeroOrNull(x) FROM (SELECT arrayJoin([1, 2, 3]) = 3 AS x);
SELECT not(not(materialize(nan))) FROM numbers(1) SETTINGS compile_expressions = 0;
SELECT not(not(materialize(nan))) FROM numbers(1) SETTINGS compile_expressions = 1;
SELECT notEmpty(a), notEmpty(b), notEmpty(c) FROM decimal;
select notEmpty(map());
select notEmpty(map(1,2,3,4));
SELECT notEmpty(nest.a), notEmpty(nest.b), notEmpty(nest.c) FROM decimal;
SELECT notEmpty(toIPv4('0.0.0.0'));
SELECT notEmpty(toIPv4('127.0.0.1'));
SELECT notEmpty(toIPv6('::'));
SELECT notEmpty(toIPv6('::1'));
SELECT notEmpty(toUUID('00000000-0000-0000-0000-000000000000'));
SELECT notIn([['']], [[NULL]]);
SELECT now() + 1::Int128;
SELECT now() + INTERVAL 1::Int256 SECOND - now();
SELECT now() + INTERVAL 1::UInt128 SECOND - now();
SELECT now() + INTERVAL 1::UInt256 SECOND - now();
SELECT now() = current_timestamp();
SELECT now() = CURRENT_TIMESTAMP();
SELECT now() = current_TIMESTAMP();
select now64(10);
SELECT nowInBlock('UTC', 'UTC');
SELECT nowInBlock(1);
SELECT ns FROM nullable_00457 ORDER BY s;
SELECT nth_value(1, 1) OVER ();
SELECT NULL + NULL;
SELECT NULL = countEqual(materialize([arrayJoin([NULL, NULL, NULL]), NULL AS x, arrayJoin([255, 1025, NULL, NULL]), arrayJoin([2, 1048576, NULL, NULL])]), materialize(x)) format Null;
SELECT NULL == CAST(toUInt8(0) AS Nullable(UInt8));
SELECT NULL AND 0;
SELECT NULL AND 1;
SELECT NULL AND throwIf((0 AND NULL) AND 2147483646 AND NULL AND NULL) AND -2147483649 AND (NULL AND NULL) AND NULL FROM system.numbers LIMIT 10;
select null as c_2_0, ref_2.c0 as c_2_1, ref_2.vkey as c_2_2 from t0 as ref_2 order by c_2_0 asc, c_2_1 asc, c_2_2 asc;
select null as c_2_0, ref_2.c0 as c_2_1, ref_2.vkey as c_2_2 from t0 as ref_2 order by c_2_0 asc, c_2_1 asc;
select null as offset, 'Hello' as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select null as offset, 1 as length, 'Hello' as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select null as offset, 1 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset, length), bin(bitSlice(s, offset, length));
select null as offset, null as length, null as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length));
select null as offset, null as s, subString(bin(s), offset), bin(bitSlice(s, offset));
select null as offset, toFixedString('Hello', 6) as s, subString(bin(s), offset), bin(bitSlice(s, offset));
SELECT NULL as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=0;
SELECT NULL as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=1;
SELECT NULL AS x, tuple(NULL) AS y FORMAT PrettyCompactNoEscapes;
SELECT NULL FROM (SELECT NULL) AS s1, (SELECT count(2.), 9223372036854775806, count('-1'), NULL) AS s2, (SELECT count('-2147483648')) AS any_query, (SELECT NULL) AS check_single_query ;
SELECT NULL FROM ( SELECT NULL, 1 AS a, 0 :: Nullable(UInt8) AS c UNION ALL SELECT NULL, 65536, NULL ) AS js1 ALL LEFT JOIN ( SELECT 2 :: Nullable(UInt8) AS a ) AS js2 USING (a) ORDER BY c ;
SELECT NULL FROM (SELECT [1048575, NULL] AS ax, 2147483648 AS c) t1 ARRAY JOIN ax INNER JOIN (SELECT NULL AS c) t2 USING (c);
SELECT NULL FROM (SELECT untuple((NULL, dummy)));
SELECT NULL FROM 01902_db.t_merge WHERE n ORDER BY _table DESC;
SELECT NULL FROM t_02709__fuzz_23 FINAL GROUP BY sign, '1023' ORDER BY nan DESC, [0, NULL, NULL, NULL, NULL] DESC FORMAT Null SETTINGS max_parallel_replicas = 3, allow_experimental_parallel_reading_from_replicas = 1, use_hedged_requests = 0, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost';
SELECT NULL FROM test_01344 WHERE encrypt(ignore(encrypt(NULL, '0.0001048577', lcm(2, 65537), NULL, inf, NULL), lcm(-2, 1048575)), '-0.0000000001', lcm(NULL, NULL)) = NULL;
SELECT NULL FROM test_01344 WHERE ignore(1) = NULL;
SELECT NULL FROM test_01344 WHERE ignore(x, lcm(NULL, 1048576), -2) = NULL;
SELECT NULL GROUP BY NULL WITH TOTALS;
SELECT NULL GROUP BY toUUID(NULL, '0', NULL, '0.0000065535'), 1 WITH CUBE WITH TOTALS;
select NULL in NULL;
SELECT NULL IN NULL;
SELECT nuLL IS NOT NULL;
SELECT NULL IS NULL;
SELECT Null IS NULL;
SELECT null is null;
SELECT NULL OR 0;
SELECT NULL OR 1;
select Null or isNull(intDiv(number, 1)) from numbers(5);
SELECT NULL, 1, 'test', [1, 2, 3], [(1, 1), (1, 1)];
select null, isConstant(null), * from (select 2 x) a left join (select null, 3 y) b on y = x;
select null, isConstant(null), * from (select 2 x, null) a right join (select 3 y) b on y = x;
SELECT NULL, toFloat64('-1'), -2147483648, h3CellAreaM2(arrayJoin([9223372036854775807, 65535, NULL]));
SELECT NULL, toFloat64('-1'), -2147483648, h3CellAreaRads2(arrayJoin([9223372036854775807, 65535, NULL]));
SELECT NULL;
SELECT nullIf(1, 0);
SELECT nullIf(1, 1);
SELECT nullIf(1, NULL);
SELECT nullIf(number, 2) IN (1, 2, 3) FROM system.numbers LIMIT 5;
SELECT nullIf(number, 2) IN (1, NULL, 3) FROM system.numbers LIMIT 5;
SELECT nullIf(number, 4) IN (SELECT nullIf(number, 2) FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT nullIf(number, number % 3 = 0 ? number : 0) AS x FROM (SELECT * FROM system.numbers LIMIT 10) ORDER BY x DESC;
SELECT nullIf(number, number % 3 = 0 ? number : 0) AS x FROM (SELECT * FROM system.numbers LIMIT 10) ORDER BY x;
SELECT nullIf(number, number % 3 = 0 ? number : 0) AS x, number AS y FROM (SELECT * FROM system.numbers LIMIT 10) ORDER BY x DESC, y;
SELECT nullIf(number, number % 3 = 0 ? number : 0) AS x, number AS y FROM (SELECT * FROM system.numbers LIMIT 10) ORDER BY x, y;
SELECT nullIf(toDecimal128(1, 0), toNullable(toDecimal128(1, 0)));
SELECT nullIf(toDecimal128(1, 0), toNullable(toDecimal128(2, 0)));
SELECT nullIf(toDecimal32(1, 0), toNullable(toDecimal32(1, 0))), nullIf(toDecimal64(1, 0), toNullable(toDecimal64(1, 0)));
SELECT nullIf(toDecimal32(1, 0), toNullable(toDecimal32(2, 0))), nullIf(toDecimal64(1, 0), toNullable(toDecimal64(2, 0)));
SELECT nullIf(toNullable(toDecimal128(1, 0)), toDecimal128(1, 0));
SELECT nullIf(toNullable(toDecimal128(1, 0)), toDecimal128(2, 0));
SELECT nullIf(toNullable(toDecimal32(1, 0)), toDecimal32(1, 0)), nullIf(toNullable(toDecimal64(1, 0)), toDecimal64(1, 0));
SELECT nullIf(toNullable(toDecimal32(1, 0)), toDecimal32(2, 0)), nullIf(toNullable(toDecimal64(1, 0)), toDecimal64(2, 0));
SELECT nullIf(toString(number), '2') IN ('1', '2', '3') FROM system.numbers LIMIT 5;
SELECT nullIf(toString(number), '2') IN ('1', NULL, '3') FROM system.numbers LIMIT 5;
SELECT nullIf(toString(number), '4') IN (SELECT nullIf(toString(number), '2') FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT Num FROM order PREWHERE Type = 1 WHERE ID = 1 ORDER BY Num ASC limit 5;
SELECT Num FROM order WHERE Type = 1 AND ID = 1 ORDER BY Num ASC limit 5;
SELECT num, str FROM clear_column ORDER BY num;
select num_columns, num_rows, num_row_groups from file(big_column_chunk_02735.parquet, ParquetMetadata);
select num_columns, num_rows, num_row_groups from file(row_group_bytes_02735.parquet, ParquetMetadata);
select num_columns, num_rows, num_row_groups from file(squash_02735.parquet, ParquetMetadata);
select num_columns, num_rows, num_row_groups from file(statistics_02735.parquet, ParquetMetadata);
select num_columns, num_rows, num_row_groups from file(tiny_row_groups_02735.parquet, ParquetMetadata);
SELECT num_tries < 50 FROM system.replication_queue WHERE table = 'i20203_2' AND database = currentDatabase();
select number != 0 and intDiv(1, number) == 0 and number != 2 and intDiv(1, number - 2) == 0 from numbers(10);
SELECT number % 10 AS k, boundingRatio(1000 + number, number * 1.5 - 111) FROM numbers(100) GROUP BY k WITH TOTALS ORDER BY k;
SELECT number % 10 AS k, count() AS c FROM numbers(100) GROUP BY k WITH TOTALS FORMAT ODBCDriver2;
SELECT number % 10 as x, roundDown(x, (SELECT groupArray(number * 1.25) FROM numbers(100000))) FROM system.numbers LIMIT 10;
SELECT number % 100 AS k, sumArray(emptyArrayUInt8()) AS v FROM numbers(10) GROUP BY k ORDER BY k;
SELECT number % 10000 AS k, anyLastIf(1.0, 0) AS x FROM (SELECT * FROM system.numbers LIMIT 1000 UNION ALL SELECT * FROM system.numbers LIMIT 1000) GROUP BY k HAVING x != 0;
SELECT number % 2 ? 'Hello' : 'Goodbye' FROM system.numbers LIMIT 10;
SELECT number % 2 ? 'hello' : 'world' FROM system.numbers LIMIT 5;
SELECT number % 2 ? 'hello' : materialize('world') FROM system.numbers LIMIT 5;
SELECT number % 2 ? 'hello' : materialize(toFixedString('world', 5)) FROM system.numbers LIMIT 5;
SELECT number % 2 ? 'hello' : toFixedString('world', 5) FROM system.numbers LIMIT 5;
SELECT number % 2 ? 'Hello' : toFixedString(toString(-number), 2) FROM system.numbers LIMIT 10;
SELECT number % 2 ? 'Hello' : toString(-number) FROM system.numbers LIMIT 10;
SELECT number % 2 ? [''] : ['', ''] FROM system.numbers LIMIT 10;
SELECT number % 2 ? [''] : materialize(['', '']) FROM system.numbers LIMIT 10;
SELECT number % 2 ? ['Hello', '', 'World!'] : emptyArrayString() FROM system.numbers LIMIT 10;
SELECT number % 2 ? ['Hello', 'World'] : ['abc'] FROM system.numbers LIMIT 10;
SELECT number % 2 ? ['Hello', 'World'] : materialize(['abc']) FROM system.numbers LIMIT 10;
SELECT number % 2 ? [0xFFFFFFFF] : [-1] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [0xFFFFFFFF] : materialize([-1]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [1, 2] : [3, 4, -5] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [1, 2] : [3, 4, 5] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [1, 2] : emptyArrayInt64() AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [1, 2] : materialize([3, 4, -5]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [1, 2] : materialize([3, 4, 5]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [1, 2] : range(number) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [1.1, 2] : emptyArrayInt32() AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [256, 257] : [300, -500000, 500] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [256, 257] : materialize([300, -500000, 500]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [256] : [3, 4, -5] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? [256] : materialize([3, 4, -5]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? arrayMap(x -> toFixedString(x, 5), ['hello', 'world']) : arrayMap(x -> toFixedString(x, 5), ['a', 'b', 'c']) FROM system.numbers LIMIT 4;
SELECT number % 2 ? arrayMap(x -> toFixedString(x, 5), ['hello', 'world']) : materialize(arrayMap(x -> toFixedString(x, 5), ['a', 'b', 'c'])) FROM system.numbers LIMIT 4;
SELECT number % 2 ? materialize('hello') : 'world' FROM system.numbers LIMIT 5;
SELECT number % 2 ? materialize('hello') : materialize('world') FROM system.numbers LIMIT 5;
SELECT number % 2 ? materialize('hello') : materialize(toFixedString('world', 5)) FROM system.numbers LIMIT 5;
SELECT number % 2 ? materialize('hello') : toFixedString('world', 5) FROM system.numbers LIMIT 5;
select number % 2 ? materialize(1)::Decimal(18, 10) : 2 FROM numbers(3);
SELECT number % 2 ? materialize(['']) : ['', ''] FROM system.numbers LIMIT 10;
SELECT number % 2 ? materialize(['']) : materialize(['', '']) FROM system.numbers LIMIT 10;
SELECT number % 2 ? materialize(['Hello', '', 'World!']) : emptyArrayString() FROM system.numbers LIMIT 10;
SELECT number % 2 ? materialize(['Hello', 'World']) : ['abc'] FROM system.numbers LIMIT 10;
SELECT number % 2 ? materialize(['Hello', 'World']) : materialize(['abc']) FROM system.numbers LIMIT 10;
SELECT number % 2 ? materialize([0xFFFFFFFF]) : materialize([-1]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([0xFFFFFFFF]) : [-1] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([1, 2]) : materialize([3, 4, -5]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([1, 2]) : [3, 4, -5] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([1, 2]) : [3, 4, 5] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([1, 2]) : materialize([3, 4, 5]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([256, 257]) : materialize([300, -500000, 500]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([256, 257]) : [300, -500000, 500] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([256]) : materialize([3, 4, -5]) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize([256]) : [3, 4, -5] AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? materialize(arrayMap(x -> toFixedString(x, 5), ['hello', 'world'])) : arrayMap(x -> toFixedString(x, 5), ['a', 'b', 'c']) FROM system.numbers LIMIT 4;
SELECT number % 2 ? materialize(arrayMap(x -> toFixedString(x, 5), ['hello', 'world'])) : materialize(arrayMap(x -> toFixedString(x, 5), ['a', 'b', 'c'])) FROM system.numbers LIMIT 4;
SELECT number % 2 ? materialize(toDate('2000-01-01')) : materialize(toDate('2001-02-03')) FROM numbers(2);
SELECT number % 2 ? materialize(toDate('2000-01-01')) : toDate('2001-02-03') FROM numbers(2);
SELECT number % 2 ? materialize(toDateTime('2000-01-01 00:00:00')) : materialize(toDateTime('2001-02-03 04:05:06')) FROM numbers(2);
SELECT number % 2 ? materialize(toDateTime('2000-01-01 00:00:00')) : toDateTime('2001-02-03 04:05:06') FROM numbers(2);
SELECT number % 2 ? materialize(toFixedString('hello', 5)) : 'world' FROM system.numbers LIMIT 5;
SELECT number % 2 ? materialize(toFixedString('hello', 5)) : materialize('world') FROM system.numbers LIMIT 5;
SELECT number % 2 ? materialize(toFixedString('hello', 5)) : materialize(toFixedString('world', 5)) FROM system.numbers LIMIT 5;
SELECT number % 2 ? materialize(toFixedString('hello', 5)) : toFixedString('world', 5) FROM system.numbers LIMIT 5;
SELECT number % 2 ? NULL : toNullable('2023-02-09'::Date + number) AS d FROM numbers(5) ORDER BY d ASC NULLS LAST WITH FILL;
SELECT number % 2 ? range(number) : range(toUInt64(10 - number)) AS res FROM system.numbers LIMIT 10 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number % 2 ? toDate('2000-01-01') : materialize(toDate('2001-02-03')) FROM numbers(2);
SELECT number % 2 ? toDate('2000-01-01') : toDate('2001-02-03') FROM numbers(2);
SELECT number % 2 ? toDateTime('2000-01-01 00:00:00') : materialize(toDateTime('2001-02-03 04:05:06')) FROM numbers(2);
SELECT number % 2 ? toDateTime('2000-01-01 00:00:00') : toDateTime('2001-02-03 04:05:06') FROM numbers(2);
SELECT number % 2 ? toDecimal128('128.1', 5) : toDecimal128('128.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal128('128.1', 5) : toDecimal32('32.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal128('128.1', 5) : toDecimal64('64.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal32('32.1', 5) : toDecimal128('128.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal32('32.1', 5) : toDecimal32('32.2', 1) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal32('32.1', 5) : toDecimal32('32.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal32('32.1', 5) : toDecimal64('64.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal64('64.1', 5) : toDecimal128('128.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal64('64.1', 5) : toDecimal32('32.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toDecimal64('64.1', 5) : toDecimal64('64.2', 5) FROM system.numbers LIMIT 2;
SELECT number % 2 ? toFixedString('hello', 5) : 'world' FROM system.numbers LIMIT 5;
SELECT number % 2 ? toFixedString('hello', 5) : materialize('world') FROM system.numbers LIMIT 5;
SELECT number % 2 ? toFixedString('hello', 5) : materialize(toFixedString('world', 5)) FROM system.numbers LIMIT 5;
SELECT number % 2 ? toFixedString('hello', 5) : toFixedString('world', 5) FROM system.numbers LIMIT 5;
SELECT number % 2 ? toFixedString(toString(number), 2) : 'Hello' FROM system.numbers LIMIT 10;
SELECT number % 2 ? toFixedString(toString(number), 2) : toFixedString(toString(-number), 2) FROM system.numbers LIMIT 10;
SELECT number % 2 ? toFixedString(toString(number), 2) : toString(-number) FROM system.numbers LIMIT 10;
SELECT number % 2 ? toString(number) : 'Hello' FROM system.numbers LIMIT 10;
SELECT number % 2 ? toString(number) : toFixedString(toString(-number), 2) FROM system.numbers LIMIT 10;
SELECT number % 2 ? toString(number) : toString(-number) FROM system.numbers LIMIT 10;
select number % 2 and toLowCardinality(number) from numbers(5);
select number % 2 or toLowCardinality(number) from numbers(5);
SELECT number % 3 + 1 AS n, min(n), max(n) FROM numbers(100) GROUP BY n WITH CUBE;
SELECT number % 3 + 1 AS n, min(n), max(n) FROM numbers(100) GROUP BY n WITH ROLLUP;
SELECT number % 3 + 1 AS n, min(n), max(n) FROM numbers(100) GROUP BY n WITH TOTALS;
SELECT number % 3 = 2 ? (1, 'Hello') : (2, 'World') FROM system.numbers LIMIT 10;
SELECT number % 3 = 2 ? (number, 'Hello') : (0, 'World') FROM system.numbers LIMIT 10;
SELECT number % 3 = 2 ? (number, 'Hello') : (0, toString(exp2(number))) FROM system.numbers LIMIT 10;
SELECT number % 3 = 2 ? (number, toString(number)) : (number * 10, concat('! ', toString(number))) FROM system.numbers LIMIT 10;
SELECT number % 4 AS k, groupArray(-number), groupBitOr(-number), groupBitAnd(-number), groupBitXor(-number) FROM (SELECT * FROM system.numbers LIMIT 20) GROUP BY k ORDER BY k;
SELECT number % 4 AS k, groupArray(number), groupBitOr(number), groupBitAnd(number), groupBitXor(number) FROM (SELECT * FROM system.numbers LIMIT 20) GROUP BY k ORDER BY k;
SELECT number % 4 AS k, groupArray(number-10), groupBitOr(number-10), groupBitAnd(number-10), groupBitXor(number-10) FROM (SELECT * FROM system.numbers LIMIT 20) GROUP BY k ORDER BY k;
SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, range(n) AS arr, arrayStringConcat(arrayMap(x -> reinterpretAsString(x), arr)) AS s, (n, d) AS tuple FROM system.numbers LIMIT 2 FORMAT CSV;
SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, range(n) AS arr, arrayStringConcat(arrayMap(x -> reinterpretAsString(x), arr)) AS s, (n, d) AS tuple FROM system.numbers LIMIT 2 FORMAT JSON;
SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, range(n) AS arr, arrayStringConcat(arrayMap(x -> reinterpretAsString(x), arr)) AS s, (n, d) AS tuple FROM system.numbers LIMIT 2 FORMAT JSONCompact;
SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, range(n) AS arr, arrayStringConcat(arrayMap(x -> reinterpretAsString(x), arr)) AS s, (n, d) AS tuple FROM system.numbers LIMIT 2 FORMAT RowBinary;
SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, range(n) AS arr, arrayStringConcat(arrayMap(x -> reinterpretAsString(x), arr)) AS s, (n, d) AS tuple FROM system.numbers LIMIT 2 FORMAT RowBinaryWithNamesAndTypes;
SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, range(n) AS arr, arrayStringConcat(arrayMap(x -> reinterpretAsString(x), arr)) AS s, (n, d) AS tuple FROM system.numbers LIMIT 2 FORMAT TabSeparatedRaw;
SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, range(n) AS arr, arrayStringConcat(arrayMap(x -> reinterpretAsString(x), arr)) AS s, (n, d) AS tuple FROM system.numbers LIMIT 2 FORMAT TabSeparatedWithNamesAndTypes;
SELECT number * 246 + 10 AS n, toDate('2000-01-01') + n AS d, range(n) AS arr, arrayStringConcat(arrayMap(x -> reinterpretAsString(x), arr)) AS s, (n, d) AS tuple FROM system.numbers LIMIT 2 FORMAT XML;
SELECT number + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS x FROM system.numbers LIMIT 1;
SELECT number + 1, dictGetFloat32OrDefault('db_01268.dict3', 'parent_region', toUInt64(number + 1), toFloat32(0)) chars FROM numbers(10);
SELECT number + 1, dictGetStringOrDefault('db_01268.dict2', 'region_name', toUInt64(number + 1), 'NONE') chars FROM numbers(10);
select number + nan k from numbers(256) group by k;
SELECT number + number + number FROM numbers(1);
SELECT number = '1' FROM numbers(3);
SELECT number = age('month', now() - INTERVAL number MONTH, now()) FROM system.numbers LIMIT 10;
SELECT number = dateDiff('month', now() - INTERVAL number MONTH, now()) FROM system.numbers LIMIT 10;
select number == 0 or 5 or intDiv(100, number) from numbers(5);
select number == 0 or intDiv(1, number) != 0 or number == 2 or intDiv(1, number - 2) != 0 from numbers(10);
SELECT number > 0 ? 'censor.net' : 'google' FROM dist;
SELECT number > 0 ? 'censor.net' : 'google' FROM numbers(1);
select number > 0 and 5 and intDiv(100, number) from numbers(5);
select number > 0 and Null and intDiv(100, number) from numbers(5);
SELECT number > 5 ? 'censor.net' : 'google' as value, value FROM system.numbers LIMIT 10;
SELECT number > 5 ? 'censor.net' : 'google' FROM system.numbers LIMIT 10;
select number >= 0 and if(number != 0, intDiv(1, number), 1) from numbers(5);
select number >= 0 and if(number = 0, 0, if(number == 1, intDiv(1, number), if(number == 2, intDiv(1, number - 1), if(number == 3, intDiv(1, number - 2), intDiv(1, number - 3))))) from numbers(10);
select number a, number * 2 b from numbers(3) format JSONEachRow;
select number as a from numbers(10) where a != any (select 5 from numbers(3, 3));
select number as a from numbers(10) where a == any (select number from numbers(3, 3));
select number as a, number+1 as b from remote('127.0.0.{1,2}', numbers_mt(1e5)) group by grouping sets ((a), (b)) format Null;
SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT Pretty;
SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT PrettyCompact;
SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT PrettyCompactMonoBlock;
SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT PrettyCompactNoEscapes;
SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT PrettyNoEscapes;
SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT PrettySpace;
SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT PrettySpaceNoEscapes;
SELECT number AS k FROM (SELECT number FROM system.numbers LIMIT 110000 SETTINGS max_result_rows = 0) GROUP BY k ORDER BY k LIMIT 10 SETTINGS max_result_rows = 100000, result_overflow_mode = 'break';
SELECT number AS n FROM system.numbers WHERE number IN(8, 9) LIMIT 2;
select number as offset, -number as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(16);
select number as offset, -number as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(16);
select number as offset, number as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(16);
select number as offset, number as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(16);
SELECT number AS x FROM numbers(3) ORDER BY toFloat32(x) as k, toFloat64(k);
select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_include_column_names=0;
select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_max_batch_size=1;
select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_max_batch_size=2;
select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_table_name='test', output_format_sql_insert_quote_names=0;
select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_table_name='test';
select number as x, number % 3 as y, 'Hello' as z from numbers(5) format SQLInsert settings output_format_sql_insert_use_replace=1;
SELECT number as x, roundDown(x, [0, 1, 2, 3, 4, 5]) FROM system.numbers LIMIT 10;
SELECT number as x, roundDown(x, [6, 5, 4]) FROM system.numbers LIMIT 10;
SELECT number BETWEEN 4 AND 6, NOT number NOT BETWEEN 4 AND 6 AND 1 FROM numbers(10);
SELECT number DIV -number FROM numbers(1, 10);
SELECT number FROM ( SELECT * FROM system.numbers LIMIT 10000 ) WHERE (number, number * 2) IN ( SELECT number, number * 2 FROM system.numbers WHERE number % 1000 = 1 LIMIT 2 ) LIMIT 2;
SELECT number FROM ( SELECT number FROM system.numbers LIMIT 10 ) WHERE number NOT BETWEEN 2 AND 4;
SELECT number FROM (SELECT number FROM numbers(2097152)) ORDER BY number * 1234567890123456789 LIMIT 2097142, 10 SETTINGS log_comment='02402_external_disk_mertrics/sort' FORMAT Null;
SELECT number FROM (SELECT number FROM numbers(2097152)) ORDER BY number * 1234567890123456789 LIMIT 2097142, 10;
SELECT number FROM (SELECT number FROM system.numbers LIMIT 10000000) ORDER BY number * 1234567890123456789 LIMIT 9999990, 10;
select number from (select number from t order by number desc offset 3) where number < 18;
select number from (select number from t order by number limit 5) where number % 2;
SELECT number FROM (select number FROM t ORDER BY number OFFSET 3) WHERE number < NULL;
SELECT number FROM (SELECT number, 1 AS k FROM numbers(100000) ORDER BY k ASC, number DESC LIMIT 1025, 1023) LIMIT 5;
select number from cluster(test_cluster_two_shards_localhost, numbers(1)) where number global in array(0, 1, 2, 3);
SELECT number FROM data_01875_3 WHERE number = 999;
SELECT number FROM number WHERE number IN set LIMIT 1;
select number from numbers(10) except select 5;
select number from numbers(10) except select number from numbers(5);
SELECT number FROM numbers(10) LIMIT 0 + 1 BY number;
SELECT number FROM numbers(10) LIMIT 0 + 1;
SELECT number FROM numbers(10) LIMIT 0 - 1;
SELECT number FROM numbers(10) LIMIT 0 BY number;
SELECT number FROM numbers(10) LIMIT 1 - 1;
SELECT number FROM numbers(10) LIMIT 1.5;
SELECT number FROM numbers(10) LIMIT 2 - 1;
SELECT number FROM numbers(10) LIMIT 2 BY intDiv(number, 5);
SELECT number FROM numbers(10) LIMIT 2 BY number % 2;
SELECT number FROM numbers(10) LIMIT rand();
SELECT number FROM numbers(10) LIMIT toFloat32('1');
SELECT number FROM numbers(10) ORDER BY number ASC LIMIT 2, 9223372036854775807 WITH TIES;
SELECT number FROM numbers(10) ORDER BY number DESC OFFSET 2 ROWS FETCH NEXT 3 ROWS WITH TIES;
SELECT number FROM numbers(10) WHERE number > 15 and test_function(number, number) == 4;
SELECT number FROM numbers(10) WHERE number IN ( WITH (SELECT 1) AS v1, (SELECT 2) AS v2 SELECT v1 AS v UNION ALL SELECT v2 AS v );
SELECT number from numbers(10) where sleepEachRow(1) Format Null;
select number from numbers(100) intersect select number from numbers(20, 60) except select number from numbers(30, 20) except select number from numbers(60, 20);
SELECT number FROM numbers(100) LIMIT 10 OFFSET 10;
SELECT number FROM numbers(100) ORDER BY number WITH FILL STEP INTERVAL 1 HOUR;
SELECT number FROM numbers(2);
select number from numbers(20) intersect select number from numbers(5, 5);
SELECT number FROM numbers(3) ORDER BY -number DESC;
SELECT number FROM numbers(3) ORDER BY -number;
SELECT number FROM numbers(3) ORDER BY abs(toFloat32(number)) DESC;
SELECT number FROM numbers(3) ORDER BY abs(toFloat32(number));
SELECT number FROM numbers(3) ORDER BY exp(number) DESC;
SELECT number FROM numbers(3) ORDER BY exp(number);
SELECT number FROM numbers(3) ORDER BY toFloat32(abs(number)) DESC;
SELECT number FROM numbers(3) ORDER BY toFloat32(abs(number));
SELECT number FROM numbers(3) ORDER BY toFloat32(toFloat64(number)) DESC;
SELECT number FROM numbers(3) ORDER BY toFloat32(toFloat64(number));
SELECT number FROM numbers(30);
SELECT number FROM numbers(5) FORMAT JSONEachRow SETTINGS output_format_json_array_of_rows = 1;
SELECT number FROM numbers(5);
SELECT number FROM numbers(toUInt64(-1)) limit 10 Format Null;
SELECT number FROM numbers(untuple(tuple(0, 2)));
SELECT number FROM numbers(untuple(tuple(1)));
SELECT number FROM numbers(untuple(tuple(1, 2)));
select number from numbers_mt(10) having number >= 9;
SELECT number FROM remote('127.0.0.{2,3}', currentDatabase(), data_00184) LIMIT 1 BY number LIMIT 1 SETTINGS distributed_group_by_no_merge=2;
SELECT number FROM remote('127.0.0.{2,3}', currentDatabase(), data_00184) LIMIT 1 BY number SETTINGS distributed_group_by_no_merge=2;
SELECT number FROM remote('127.0.0.{2,3}', currentDatabase(), data_00184) ORDER BY number DESC LIMIT 1 SETTINGS distributed_group_by_no_merge=2;
SELECT number FROM remote('127.0.0.{2,3}', currentDatabase(), data_00184) ORDER BY number DESC SETTINGS distributed_group_by_no_merge=2;
SELECT number FROM remote('127.0.0.{2,3}', currentDatabase(), numbers10m) ORDER BY number * 1234567890123456789 LIMIT 19999980, 20;
SELECT number FROM remote('127.0.0.{3|2}', numbers(1)) WHERE number GLOBAL IN (SELECT number FROM numbers(10000000000.)) format Null;
SELECT number FROM system.numbers ANY LEFT JOIN (SELECT number, ['test'] FROM system.numbers LIMIT 1) js2 USING (number) LIMIT 1;
SELECT number FROM system.numbers LEFT ARRAY JOIN range(number % 3) AS arr LIMIT 10;
select number from system.numbers limit 0;
SELECT number FROM system.numbers SEMI LEFT JOIN (SELECT number, ['test'] FROM system.numbers LIMIT 1) js2 USING (number) LIMIT 1;
SELECT number FROM system.numbers WHERE number >= 5 LIMIT 2;
SELECT number FROM system.numbers;
SELECT number FROM temp_tab;
SELECT number IN (1, NULL, 3) FROM system.numbers LIMIT 5;
SELECT number IN (SELECT nullIf(number, 2) FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT number IN (SELECT number FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT number IN (SELECT toUInt64(arrayJoin([1, 8]))) FROM remote('127.0.0.{1,2}', numbers(10));
SELECT number y, toInt128(number) - y, toInt256(number) - y, toUInt256(number) - y FROM numbers_mt(10) ORDER BY number;
select number%3 from numbers(10) except select 1;
SELECT number, 'Hello' AS k FROM (SELECT number FROM system.numbers LIMIT 1000000) ORDER BY k, number, k LIMIT 999990, 100 SETTINGS max_bytes_before_external_sort = 1000000;
SELECT number, 'Hello' AS k FROM (SELECT number FROM system.numbers LIMIT 1000000) ORDER BY number LIMIT 999990, 100 SETTINGS max_bytes_before_external_sort = 1000000;
SELECT number, 'Hello' AS k FROM (SELECT number FROM system.numbers LIMIT 1000000) ORDER BY number, k LIMIT 999990, 100 SETTINGS max_bytes_before_external_sort = 1000000;
SELECT number, 'Hello' AS k FROM (SELECT number FROM system.numbers LIMIT 1000000) ORDER BY number, k, number LIMIT 999990, 100 SETTINGS max_bytes_before_external_sort = 1000000;
select number, 'Hello' as str, range(number) as arr from numbers(3) format JSONObjectEachRow;
SELECT number, (number, toDate('2015-01-01') + number) FROM numbers_10 LIMIT 10 SETTINGS extremes = 1;
SELECT number, (toDateTime('1970-06-01 00:00:00', 'Asia/Tehran') + INTERVAL number YEAR) AS DST_Y, timezoneOffset(DST_Y) AS t FROM numbers(51) where t != 12600;
SELECT number, (toDateTime('1970-06-01 00:00:00', 'Europe/Moscow') + INTERVAL number YEAR) AS DST_Y, timezoneOffset(DST_Y) AS t FROM numbers(51) where t != 10800;
SELECT number, (toDateTime('1970-08-01 00:00:00', 'Asia/Shanghai') + INTERVAL number YEAR) AS DST_Y, timezoneOffset(DST_Y) AS t FROM numbers(51) where t != 28800;
select number, -(number - 2) * 2 as offset, neighbor(number, offset) from numbers(6);
select number, -number * 2 as offset, neighbor(number, offset, number * 10) from numbers(6);
SELECT number, 1 AS k FROM numbers(100000) ORDER BY k, number LIMIT 1025, 1023 FORMAT Values;
Select number, any (number) RESPECT NULLS over (order by number) from numbers(1);
Select number, any_value (number) RESPECT NULLS over (order by number) from numbers(1);
SELECT number, anyIf('Hello', arrayJoin([1, NULL, 0]) = 0) FROM numbers(2) GROUP BY number ORDER BY number;
SELECT number, anyIf('Hello', arrayJoin([1, NULL, 0]) = 0) FROM remote('127.0.0.{1,2}', numbers(2)) GROUP BY number ORDER BY number;
SELECT number, anyIf('Hello', arrayJoin([1, NULL]) = 0) FROM numbers(2) GROUP BY number ORDER BY number;
SELECT number, anyIf('Hello', arrayJoin([1, NULL]) = 0) FROM remote('127.0.0.{1,2}', numbers(2)) GROUP BY number ORDER BY number;
SELECT number, anyIf(toNullable('Hello'), arrayJoin([1, 0]) = 0) FROM numbers(2) GROUP BY number ORDER BY number;
SELECT number, anyIf(toNullable('Hello'), arrayJoin([1, 0]) = 0) FROM remote('127.0.0.{1,2}', numbers(2)) GROUP BY number ORDER BY number;
SELECT number, anyIf(toNullable('Hello'), arrayJoin([1, 1]) = 0) FROM numbers(2) GROUP BY number ORDER BY number;
SELECT number, anyIf(toNullable('Hello'), arrayJoin([1, 1]) = 0) FROM remote('127.0.0.{1,2}', numbers(2)) GROUP BY number ORDER BY number;
SELECT number, anyIf(toNullable('Hello'), arrayJoin([1, NULL, 0]) = 0) FROM numbers(2) GROUP BY number ORDER BY number;
SELECT number, anyIf(toNullable('Hello'), arrayJoin([1, NULL, 0]) = 0) FROM remote('127.0.0.{1,2}', numbers(2)) GROUP BY number ORDER BY number;
SELECT number, anyIf(toNullable('Hello'), arrayJoin([1, NULL]) = 0) FROM numbers(2) GROUP BY number ORDER BY number;
SELECT number, anyIf(toNullable('Hello'), arrayJoin([1, NULL]) = 0) FROM remote('127.0.0.{1,2}', numbers(2)) GROUP BY number ORDER BY number;
Select number, anyLast (number) RESPECT NULLS over (order by number) from numbers(1);
SELECT number, arr FROM (SELECT number, arrayFilter(x -> x = 0, [1]) AS arr FROM system.numbers LIMIT 10) ARRAY JOIN arr ORDER BY number;
SELECT number, arr, x FROM (SELECT number, range(number % 3) AS arr FROM system.numbers LIMIT 10) LEFT ARRAY JOIN arr AS x;
SELECT number, arr1, arr2, x, y FROM (SELECT number, range(number % 2) AS arr1, range(number % 3) arr2 FROM system.numbers LIMIT 10) ARRAY JOIN arr1 AS x, arr2 AS y SETTINGS enable_unaligned_array_join = 1;
SELECT number, arr1, arr2, x, y FROM (SELECT number, range(number % 2) AS arr1, range(number % 3) arr2 FROM system.numbers LIMIT 10) LEFT ARRAY JOIN arr1 AS x, arr2 AS y SETTINGS enable_unaligned_array_join = 1;
select number, arrayReduce( 'max', [a] ) from (select materialize([100,100,200]) a, number from numbers(10));
select number, arrayReduce( 'sum', a) from (select materialize([100,100,200]) a, number from numbers(10));
select number, arrayReduce( 'sumMap', [a],[b] ) from (select [100,100,200] a,[10,20,30] b, number from numbers(1));
select number, arrayReduce( 'sumMap', [a],[b] ) from (select [100,100,200] a,[10,20,30] b, number from numbers(10));
select number, arrayReduce( 'sumMap', [a],[b] ) from (select materialize([100,100,200]) a,materialize([10,20,30]) b, number from numbers(10));
SELECT number, bitTestAll(toUInt8(1 + 4 + 16 + 64), number) FROM numbers(100);
SELECT number, bitTestAny(toUInt8(1 + 4 + 16 + 64), number) FROM numbers(100);
SELECT number, COLUMNS('') FROM numbers(2);
SELECT number, COLUMNS('ber') FROM numbers(2);
select number, concat('name_', toString(number)) as name from numbers(3) format JSONObjectEachRow;
select number, concat('name_', toString(number)) as name, number + 1 as x from numbers(3) format JSONObjectEachRow;
SELECT number, count() FROM (SELECT * FROM system.numbers LIMIT 100000) GROUP BY number WITH TOTALS HAVING number % 3 = 0 ORDER BY number LIMIT 1;
SELECT number, count() FROM numbers(10) WHERE number = -1 GROUP BY number WITH TOTALS FORMAT Vertical;
SELECT number, count() FROM numbers(100000) GROUP BY number FORMAT Null SETTINGS max_rows_to_group_by = 1, group_by_overflow_mode = 'any';
select number, count(*) over (partition by p) from window_mt order by number limit 10 settings optimize_read_in_order = 0;
select number, count(*) over (partition by p) from window_mt order by number limit 10 settings optimize_read_in_order = 1;
SELECT number, count(number) FROM distributed_01099_b group by number order by number;
SELECT number, count(number) FROM local_01099_b group by number order by number;
SELECT number, dictGet('01759_db.test_dictionary', 'value1', tuple(number)) as value1, dictGet('01759_db.test_dictionary', 'value2', tuple(number)) as value2 FROM system.numbers LIMIT 3;
SELECT number, dictGet('executable_complex_direct', 'a', (number, number)) AS a, dictGet('executable_complex_direct', 'b', (number, number)) AS b FROM numbers(1000000) WHERE number = 999999;
SELECT number, dictGet('executable_simple', 'a', number) AS a, dictGet('executable_simple', 'b', number) AS b FROM numbers(1000000) WHERE number = 999999;
SELECT number, exp10(number - 500) FROM system.numbers LIMIT 1000;
Select number, FIRST_VALUE (number) over (order by number) from numbers(1);
Select number, First_value (number) RESPECT NULLS over (order by number) from numbers(1);
Select number, FIRST_VALUE (number) RESPECT NULLS over (order by number) from numbers(1);
Select number, first_value_respect_nulls (number) over (order by number) from numbers(1);
SELECT number, groupArray(number) FROM numbers(10) WHERE number = -1 GROUP BY number WITH TOTALS FORMAT Vertical;
SELECT number, groupArrayInsertAt(number, number) FROM (SELECT * FROM system.numbers LIMIT 10) GROUP BY number ORDER BY number;
select number, intDiv(number, 2) p, mod(number, 3) o, count(number) over w as c from numbers(31) window w as (partition by p order by o range unbounded preceding) order by number settings max_block_size = 5 ;
select number, intDiv(number, 2) p, mod(number, 5) o, count(number) over w as c from numbers(31) window w as (partition by p order by o, number range unbounded preceding) order by number settings max_block_size = 3 ;
select number, intDiv(number, 3) p, mod(number, 5) o, count(number) over w as c from numbers(31) window w as (partition by p order by o, number range unbounded preceding) order by number settings max_block_size = 2 ;
select number, intDiv(number, 5) p, mod(number, 2) o, count(number) over w as c from numbers(31) window w as (partition by p order by o, number range unbounded preceding) order by number settings max_block_size = 3 ;
select number, intDiv(number, 5) p, mod(number, 3) o, count(number) over w as c from numbers(31) window w as (partition by p order by o, number range unbounded preceding) order by number settings max_block_size = 2 ;
SELECT number, ip, number % ip FROM (SELECT number, toIPv4OrNull('0.0.0.3') as ip FROM numbers(10, 20));
Select number, LAST_VALUE (number) IGNORE NULLS over (order by number) from numbers(1);
Select number, LAST_VALUE (number) over (order by number) from numbers(1);
Select number, last_value (number) RESPECT NULLS over (order by number) from numbers(1);
Select number, Last_value (number) RESPECT NULLS over (order by number) from numbers(1);
Select number, LAST_VALUE (number) RESPECT NULLS over (order by number) from numbers(1);
Select number, last_value_respect_nulls (number) over (order by number) from numbers(1);
SELECT number, neighbor('ClickHouse', -10) FROM numbers(10);
SELECT number, neighbor('ClickHouse', -15) FROM numbers(10);
SELECT number, neighbor('ClickHouse', -5) FROM numbers(10);
SELECT number, neighbor('ClickHouse', -5, 'World') FROM numbers(10);
SELECT number, neighbor('ClickHouse', -5, concat('World ', toString(number))) FROM numbers(10);
SELECT number, neighbor('ClickHouse', 0) FROM numbers(10);
SELECT number, neighbor('ClickHouse', 10) FROM numbers(10);
SELECT number, neighbor('ClickHouse', 15) FROM numbers(10);
SELECT number, neighbor('ClickHouse', 5) FROM numbers(10);
SELECT number, neighbor('ClickHouse', 5, 'Hello') FROM numbers(10);
SELECT number, neighbor('ClickHouse', 5, concat('Hello ', toString(number))) FROM numbers(10);
SELECT number, neighbor('Hello', -3) FROM numbers(10);
SELECT number, neighbor('Hello', -3, 'World') FROM numbers(10);
SELECT number, neighbor('Hello', number) FROM numbers(10);
select number, neighbor(1000, 10) from numbers(3);
select number, neighbor(number, -1, 1000) from numbers(3);
select number, neighbor(number, -10) from numbers(3);
select number, neighbor(number, -2, number + 10) from numbers(4);
select number, neighbor(number, 0) from numbers(3);
select number, neighbor(number, 1) from numbers(3);
select number, neighbor(number, 1, 1000) from numbers(3);
select number, neighbor(number, 10) from numbers(3);
select number, neighbor(number, 2, number + 10) from numbers(4);
SELECT number, neighbor(toString(number), -10) FROM numbers(10);
SELECT number, neighbor(toString(number), -15) FROM numbers(10);
SELECT number, neighbor(toString(number), -5) FROM numbers(10);
SELECT number, neighbor(toString(number), -5, 'World') FROM numbers(10);
SELECT number, neighbor(toString(number), -5, concat('World ', toString(number))) FROM numbers(10);
SELECT number, neighbor(toString(number), 0) FROM numbers(10);
SELECT number, neighbor(toString(number), 10) FROM numbers(10);
SELECT number, neighbor(toString(number), 15) FROM numbers(10);
SELECT number, neighbor(toString(number), 5) FROM numbers(10);
SELECT number, neighbor(toString(number), 5, 'Hello') FROM numbers(10);
SELECT number, neighbor(toString(number), 5, concat('Hello ', toString(number))) FROM numbers(10);
SELECT number, neighbor(toString(number), intDiv(number, 2)) FROM numbers(10);
SELECT number, neighbor(toString(number), number) FROM numbers(10);
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY CUBE(number, number % 2) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=0;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY CUBE(number, number % 2) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=1;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY CUBE(number, number % 2) WITH TOTALS ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=1;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY ROLLUP(number, number % 2) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=0;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY ROLLUP(number, number % 2) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=1;
SELECT number, number % 2, sum(number) AS val FROM numbers(10) GROUP BY ROLLUP(number, number % 2) WITH TOTALS ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=1;
SELECT number, number % 2, sum(number) AS val FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY CUBE(number, number % 2) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=0;
SELECT number, number % 2, sum(number) AS val FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY CUBE(number, number % 2) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=1;
SELECT number, number % 2, sum(number) AS val FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY ROLLUP(number, number % 2) ORDER BY (number, number % 2, val) SETTINGS group_by_use_nulls=0;
select number, number * 2 as offset, neighbor(number, offset, number * 10) from numbers(4);
select number, number+10 from numbers(12) except select number+5, number+15 from numbers(10);
SELECT number, toString(number), range(number), toDate('2000-01-01') + number, toDateTime('2000-01-01 00:00:00') + number FROM system.numbers LIMIT 10 FORMAT CSV;
SELECT number, toTypeName(s), toString(s) FROM (SELECT number, if(number % 3 = 0, NULL, toFixedString(toString(number), 1)) AS s from numbers(10)) ORDER BY number;
SELECT number, tuple FROM (SELECT 1 AS number, (2, 3) AS tuple) WHERE (number, tuple) IN ( (/*number*/1, /*tuple*/(2, 3)), (/*number*/4, /*tuple*/(5, 6)) );
SELECT number, tuple FROM (SELECT 2 AS number, (2, 3) AS tuple) WHERE (number, tuple) IN ((2, (2, 3)));
SELECT number, tuple FROM (SELECT 3 AS number, (2, 3) AS tuple) WHERE (number, tuple) IN (3, (2, 3));
SELECT number, tuple FROM (SELECT 4 AS number, (2, 3) AS tuple) WHERE (number, tuple) IN (SELECT 4, (2, 3));
SELECT number, tuple FROM (SELECT 5 AS number, (2, 3) AS tuple) WHERE (number, tuple) IN (SELECT 5, (2, 3));
select number, x, y from (select number from system.numbers limit 5) f any left join (select x, y from table_1) s on f.number = s.x settings additional_table_filters={'system.numbers' : 'number != 3', 'table_1' : 'x != 2'};
SELECT number,(toDateTime('1981-04-01 22:40:00', 'Europe/Moscow') + INTERVAL number * 600 SECOND) AS k, timezoneOffset(k) AS t, toUnixTimestamp(k) as s FROM numbers(4);
SELECT number,(toDateTime('1981-09-30 23:00:00', 'Europe/Moscow') + INTERVAL number * 600 SECOND) AS k, timezoneOffset(k) AS t, toUnixTimestamp(k) as s FROM numbers(18);
SELECT number,(toDateTime('2019-04-07 01:00:00', 'Australia/Lord_Howe') + INTERVAL number * 600 SECOND) AS k, timezoneOffset(k) AS t, toUnixTimestamp(k) as s FROM numbers(18);
SELECT number,(toDateTime('2020-03-21 22:40:00', 'Asia/Tehran') + INTERVAL number * 600 SECOND) AS k, timezoneOffset(k) AS t, toUnixTimestamp(k) as s FROM numbers(4);
SELECT number,(toDateTime('2020-09-20 23:00:00', 'Asia/Tehran') + INTERVAL number * 600 SECOND) AS k, timezoneOffset(k) AS t, toUnixTimestamp(k) as s FROM numbers(18);
SELECT number,(toDateTime('2020-10-04 01:40:00', 'Australia/Lord_Howe') + INTERVAL number * 600 SECOND) AS k, timezoneOffset(k) AS t, toUnixTimestamp(k) as s FROM numbers(4);
select number-8 as offset, 8 as length, 'Hello' as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
select number-8 as offset, 8 as length, toFixedString('Hello', 6) as s, subString(bin(s), offset , length), bin(bitSlice(s, offset, length)) from numbers(9);
SELECT number::UInt8 AS c, toTypeName(c) FROM numbers(1);
SELECT nx FROM nested ARRAY JOIN nest.x AS nx, nest.y AS ny WHERE notEmpty(nest.x);
SELECT nx FROM nested ARRAY JOIN nest.x AS nx, nest.y AS ny WHERE notEmpty(nest.y);
SELECT nx, nest.y FROM nested ARRAY JOIN nest.x AS nx, nest.y AS ny;
SELECT nx, ny FROM nested ARRAY JOIN nest.x AS nx, nest.y AS ny WHERE notEmpty(nest.y);
SELECT nx, ny, nest.x, nest.y FROM nested ARRAY JOIN nest.x AS nx, nest.y AS ny;
SELECT o FROM t_json_10 ORDER BY o.a.b FORMAT JSONEachRow;
SELECT o.a.b, o.a.c.d, o.a.c.e, o.a.c.f FROM t_json_10 ORDER BY o.a.b;
SELECT obj FROM t_json_17 ORDER BY obj.id FORMAT JSONEachRow;
SELECT obj.arr.k1.k2, obj.arr.k1.k3.k4 FROM t_json_17 ORDER BY obj.id;
SELECT obj.arr.k1.k3, obj.arr.k1.k2 FROM t_json_17 ORDER BY obj.id;
SELECT obj.arr.k1.k3.k4 FROM t_json_17 ORDER BY obj.id;
SELECT obj.arr.k1.k4 FROM t_json_17 ORDER BY obj.id;
SELECT obj.arr.k1.k4.k5 FROM t_json_17 ORDER BY obj.id;
SELECT obj.arr.k3, obj.arr.k1.k2, obj.arr.k1.k4.k5 FROM t_json_17 ORDER BY obj.id;
SELECT OCTET_LENGTH('1234');
SELECT OcTet_lenGtH('1234');
SELECT OCTET_LENGTH('你好，世界');
SELECT one.* FROM one;
SELECT one.* FROM system.one one;
SELECT one.* FROM system.one;
SELECT one.dummy FROM one AS A JOIN (SELECT 0 AS dummy) B USING dummy;
SELECT one.dummy FROM one;
SELECT one.dummy FROM system.one one;
SELECT one.dummy;
SELECT operand, low, high, count, WIDTH_BUCKET(operand, low, high, count) FROM mytable WHERE count != 0;
SELECT OperatingSystem FROM test_generic_events_all PREWHERE APIKey = 42 WHERE SessionType = 42;
SELECT OperatingSystem FROM test_generic_events_all WHERE APIKey = 42 AND SessionType = 42;
SELECT OperatingSystem FROM test_generic_events_all WHERE APIKey = 42;
SELECT OperatingSystem FROM test_prewhere_default_column PREWHERE SessionType = 42;
SELECT order_0, _part_offset, _part FROM t_1 ORDER BY order_0 DESC LIMIT 3;
SELECT order_0, _part_offset, _part FROM t_1 ORDER BY order_0 LIMIT 3;
SELECT order_0, _part_offset, _part FROM t_1 WHERE order_0 <= 1 OR (order_0 BETWEEN 10000 AND 10002) OR order_0 >= 999998 ORDER BY order_0 DESC;
SELECT order_0, _part_offset, _part FROM t_1 WHERE order_0 <= 1 OR (order_0 BETWEEN 10000 AND 10002) OR order_0 >= 999998 ORDER BY order_0;
SELECT order_0, _part_offset, _part FROM t_1 WHERE order_0 <= 1 OR order_0 >= 999998 ORDER BY order_0 LIMIT 3;
SELECT order_0, _part_offset, computed FROM t_1 ORDER BY order_0 DESC, _part_offset DESC, computed DESC LIMIT 3;
SELECT order_0, _part_offset, computed FROM t_1 ORDER BY order_0, _part_offset, computed LIMIT 3;
select os_name, count() from (SELECT CAST('iphone' AS Enum8('iphone' = 1, 'android' = 2)) AS os_name) group by os_name WITH TOTALS;
select other_table.name from remote('127.0.0.2', currentDatabase(), 'local_table') as t1 global left join other_table as t2 on t1.oth_id = other_table.id order by other_table.name;
select other_table.name from remote('127.0.0.2', currentDatabase(), 'local_table') as t1 global left join other_table on t1.oth_id = other_table.id order by other_table.name;
select parent_key, child_key, count() from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings max_threads=1, optimize_aggregation_in_order=0;
select parent_key, child_key, count() from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings max_threads=1, optimize_aggregation_in_order=1, max_block_size=1;
select parent_key, child_key, count() from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings max_threads=1, optimize_aggregation_in_order=1;
select parseDateTime('/031/', '/%j/', 'UTC') = toDateTime('2000-01-31', 'UTC');
select parseDateTime('/11', '/%d', 'UTC') = toDateTime('2000-01-11', 'UTC');
select parseDateTime('00 AM', '%H %p', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('00 am', '%H %p', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('00 PM', '%H %p', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('00 pm', '%H %p', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('00', '%c');
select parseDateTime('00', '%d');
select parseDateTime('00', '%H', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('00', '%h', 'UTC');
select parseDateTime('00', '%I', 'UTC');
select parseDateTime('00', '%k', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('00', '%l', 'UTC');
select parseDateTime('00', '%m');
select parseDateTime('00/', '%i/', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('00/', '%M/', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('00/', '%s/', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('007', '%j', 'UTC') = toDateTime('2000-01-07', 'UTC');
select parseDateTime('01 AM', '%h %p', 'UTC') = toDateTime('1970-01-01 01:00:00', 'UTC');
select parseDateTime('01 PM', '%h %p', 'UTC') = toDateTime('1970-01-01 13:00:00', 'UTC');
select parseDateTime('01', '%d', 'UTC') = toDateTime('2000-01-01', 'UTC');
select parseDateTime('01', '%h', 'UTC') = toDateTime('1970-01-01 01:00:00', 'UTC');
select parseDateTime('01', '%I', 'UTC') = toDateTime('1970-01-01 01:00:00', 'UTC');
select parseDateTime('01', '%l', 'UTC') = toDateTime('1970-01-01 01:00:00', 'UTC');
select parseDateTime('02 31 01', '%m %d %m', 'UTC') = toDateTime('2000-01-31', 'UTC');
select parseDateTime('02 31 20 04', '%m %d %d %m', 'UTC') = toDateTime('2000-04-20', 'UTC');
select parseDateTime('032', '%j', 'UTC') = toDateTime('2000-02-01', 'UTC');
select parseDateTime('06 AM', '%h %p', 'UTC') = toDateTime('1970-01-01 06:00:00', 'UTC');
select parseDateTime('06 PM', '%h %p', 'UTC') = toDateTime('1970-01-01 18:00:00', 'UTC');
select parseDateTime('060', '%j', 'UTC') = toDateTime('2000-02-29', 'UTC');
select parseDateTime('07 AM', '%H %p', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTime('07 am', '%H %p', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTime('07 pm', '%H %p', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTime('07', '%c', 'UTC') = toDateTime('2000-07-01', 'UTC');
select parseDateTime('07', '%m', 'UTC') = toDateTime('2000-07-01', 'UTC');
select parseDateTime('08 13, 2022, 07:58:32', '%c %e, %G, %k:%i:%s', 'UTC');
select parseDateTime('08', '%M', 'UTC') = toDateTime('1970-01-01 00:08:00', 'UTC');
select parseDateTime('10', '%H', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTime('10', '%h', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTime('10', '%I', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTime('10', '%k', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTime('10', '%l', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTime('10:04:11 03-07-2019.242424', '%s:%i:%H %d-%m-%Y.%f', 'UTC') = toDateTime('2019-07-03 11:04:10', 'UTC');
select parseDateTime('11-', '%c-', 'UTC') = toDateTime('2000-11-01', 'UTC');
select parseDateTime('11-', '%m-', 'UTC') = toDateTime('2000-11-01', 'UTC');
select parseDateTime('12 AM', '%h %p', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('12 PM', '%h %p', 'UTC') = toDateTime('1970-01-01 12:00:00', 'UTC');
select parseDateTime('12', '%h', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('12', '%I', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('12', '%l', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('1980 /007', '%Y /%j', 'UTC') = toDateTime('1980-01-07', 'UTC');
select parseDateTime('1980 /031/', '%Y /%j/', 'UTC') = toDateTime('1980-01-31', 'UTC');
select parseDateTime('1980 001', '%Y %j', 'UTC') = toDateTime('1980-01-01', 'UTC');
select parseDateTime('1980 007', '%Y %j', 'UTC') = toDateTime('1980-01-07', 'UTC');
select parseDateTime('1980 032', '%Y %j', 'UTC') = toDateTime('1980-02-01', 'UTC');
select parseDateTime('1980 060', '%Y %j', 'UTC') = toDateTime('1980-02-29', 'UTC');
select parseDateTime('1980 366', '%Y %j', 'UTC') = toDateTime('1980-12-31', 'UTC');
select parseDateTime('1981 366', '%Y %j');
select parseDateTime('2000-02-29', '%Y-%m-%d', 'UTC') = toDateTime('2000-02-29', 'UTC');
select parseDateTime('2001-02-29', '%Y-%m-%d');
select parseDateTime('2019-07-03 11:04:10.975319', '%Y-%m-%d %H:%i:%s.%f', 'UTC') = toDateTime('2019-07-03 11:04:10', 'UTC');
select parseDateTime('23', '%H', 'UTC') = toDateTime('1970-01-01 23:00:00', 'UTC');
select parseDateTime('23', '%k', 'UTC') = toDateTime('1970-01-01 23:00:00', 'UTC');
select parseDateTime('24', '%H', 'UTC');
select parseDateTime('24', '%k', 'UTC');
select parseDateTime('365', '%j', 'UTC') = toDateTime('2000-12-30', 'UTC');
select parseDateTime('366', '%j', 'UTC') = toDateTime('2000-12-31', 'UTC');
select parseDateTime('42', '%f', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('456789', '%f', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTime('58', '%s', 'UTC') = toDateTime('1970-01-01 00:00:58', 'UTC');
select parseDateTime('59', '%i', 'UTC') = toDateTime('1970-01-01 00:59:00', 'UTC');
select parseDateTime('59', '%M', 'UTC') = toDateTime('1970-01-01 00:59:00', 'UTC');
select parseDateTime('60', '%i', 'UTC');
select parseDateTime('60', '%M', 'UTC');
select parseDateTime('60', '%s', 'UTC');
select parseDateTime('abc', '%b');
select parseDateTime('Aug 13, 2022, 07:58:32 PM', '%b %e, %G, %l:%i:%s %p', 'UTC');
select parseDateTime('Aug 13, 2022, 07:58:32', '%b %e, %G, %k:%i:%s', 'UTC');
select parseDateTime('JUN', '%b', 'UTC') = toDateTime('2000-06-01', 'UTC');
select parseDateTime('may', '%M', 'UTC') = toDateTime('2000-05-01', 'UTC');
select parseDateTime('MAY', '%M', 'UTC') = toDateTime('2000-05-01', 'UTC');
select parseDateTime('september', '%M', 'UTC') = toDateTime('2000-09-01', 'UTC');
select parseDateTime('summer', '%M');
SELECT parseDateTime32BestEffort('1640649600123', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('2020-05-14 03:37:03', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('2020-05-14 11:37:03 AM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('2020-05-14 11:37:03 PM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('2020-05-14 12:37:03 AM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('2020-05-14 12:37:03 PM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('2020-05-14T03:37:03.253184', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('2020-05-14T03:37:03.253184Z', 'Europe/Minsk') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('2020-05-14T03:37:03.253184Z', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('<Empty>') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('Dec 15, 2021') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort('Dec 15, 2021', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffort(materialize('2020-05-14T03:37:03.253184Z'), 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('1640649600123', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14 03:37:03', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14 11:37:03 AM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14 11:37:03 PM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14 12:37:03 AM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14 12:37:03 PM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14T03:37:03', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14T03:37:03.253184', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14T03:37:03.253184Z', 'Europe/Minsk') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('2020-05-14T03:37:03.253184Z', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('<Empty>') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('Dec 15, 2021') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull('Dec 15, 2021', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrNull(materialize('2020-05-14T03:37:03.253184Z'), 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('1640649600123', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14 03:37:03', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14 11:37:03 AM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14 11:37:03 PM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14 12:37:03 AM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14 12:37:03 PM', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14T03:37:03', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14T03:37:03.253184', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14T03:37:03.253184Z', 'Europe/Minsk') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('2020-05-14T03:37:03.253184Z', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('<Empty>', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('Dec 15, 2021') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero('Dec 15, 2021', 'UTC') AS a, toTypeName(a);
SELECT parseDateTime32BestEffortOrZero(materialize('2020-05-14T03:37:03.253184Z'), 'UTC') AS a, toTypeName(a);
SELECT parseDateTime64BestEffort('1640649600123', 1, 'UTC');
SELECT parseDateTime64BestEffort('1640649600123', 3, 'UTC');
SELECT parseDateTime64BestEffort('1640649600123', 6, 'UTC');
select parseDateTime64BestEffort('2.55');
SELECT parseDateTime64BestEffort('2020-05-14 03:37:03', 3, 'UTC');
SELECT parseDateTime64BestEffort('2020-05-14T03:37:03', 3, 'UTC');
SELECT parseDateTime64BestEffort('2020-05-14T03:37:03.253184', 3, 'UTC');
SELECT parseDateTime64BestEffort('2020-05-14T03:37:03.253184Z', 3, 'Europe/Minsk');
SELECT parseDateTime64BestEffort('2020-05-14T03:37:03.253184Z', 3, 'UTC');
SELECT parseDateTime64BestEffort('<Empty>');
SELECT parseDateTime64BestEffort(materialize('2020-05-14T03:37:03.253184Z'), 3, 'UTC');
SELECT parseDateTime64BestEffortOrNull('2020-05-14T03:37:03.253184Z', 3, 'UTC');
select parseDateTime64BestEffortOrNull('9279104477', 9);
SELECT parseDateTime64BestEffortOrNull('foo', 3, 'UTC');
SELECT parseDateTime64BestEffortOrZero('2020-05-14T03:37:03.253184Z', 3, 'UTC');
SELECT parseDateTime64BestEffortOrZero('<Empty>', 0, 'UTC');
SELECT parseDateTime64BestEffortOrZero('bar', 3, 'UTC');
SELECT parseDateTime64BestEffortUSOrNull('01/45/1925 16:00:00',3,'UTC');
SELECT parseDateTime64BestEffortUSOrZero('01/45/1925 16:00:00',3,'UTC');
select parseDateTimeBestEffort('01/12/2017 , 18:31:44');
select parseDateTimeBestEffort('01/12/2017, 18:31:44');
select parseDateTimeBestEffort('01/12/2017,');
select parseDateTimeBestEffort('01/12/2017,18:31:44');
SELECT parseDateTimeBestEffort('100000000', 'Asia/Istanbul');
SELECT parseDateTimeBestEffort('1596752940', 'Asia/Istanbul');
SELECT parseDateTimeBestEffort('1640649600123', 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('1640649600123', 3, 'UTC') AS a, toTypeName(a);
select parseDateTimeBestEffort('18:31:44 , 31/12/2015');
select parseDateTimeBestEffort('18:31:44, 31/12/2015');
SELECT parseDateTimeBestEffort('2020-05-14 03:37:03', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('2020-05-14 11:37:03 AM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('2020-05-14 11:37:03 PM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('2020-05-14 12:37:03 AM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('2020-05-14 12:37:03 PM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('2020-05-14T03:37:03.253184', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('2020-05-14T03:37:03.253184Z', 3, 'Europe/Minsk') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('2020-05-14T03:37:03.253184Z', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('20200807', 'Asia/Istanbul');
SELECT parseDateTimeBestEffort('20220101 010203', 'UTC');
SELECT parseDateTimeBestEffort('20220101+0102', 'UTC');
SELECT parseDateTimeBestEffort('20220101+010203', 'UTC');
SELECT parseDateTimeBestEffort('20220101-0102', 'UTC');
SELECT parseDateTimeBestEffort('20220101-010203', 'UTC');
SELECT parseDateTimeBestEffort('20220101-010203+0100', 'UTC');
SELECT parseDateTimeBestEffort('20220101-010203-01', 'UTC');
SELECT parseDateTimeBestEffort('20220101-010203-01:00', 'UTC');
SELECT parseDateTimeBestEffort('20220101T010203', 'UTC');
SELECT parseDateTimeBestEffort('20220101T01:02', 'UTC');
SELECT parseDateTimeBestEffort('<Empty>');
SELECT parseDateTimeBestEffort('<Empty>', 3) AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('Dec 15, 2021') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('Dec 15, 2021', 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort('Dec 15, 2021', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort(materialize('2020-05-14T03:37:03.253184Z'), 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffort(toLowCardinality(materialize('15-JUL-16')));
SELECT parseDateTimeBestEffortOrNull(' ');
SELECT parseDateTimeBestEffortOrNull('');
SELECT parseDateTimeBestEffortOrNull('0100:0100:0000');
SELECT parseDateTimeBestEffortOrNull('1640649600123', 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('1640649600123', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2000-01-01 01:01:01');
SELECT parseDateTimeBestEffortOrNull('2010-01-01 01:01:01');
SELECT parseDateTimeBestEffortOrNull('2010-01-01');
SELECT parseDateTimeBestEffortOrNull('20100');
SELECT parseDateTimeBestEffortOrNull('2020-01-01 11:01:01 am');
SELECT parseDateTimeBestEffortOrNull('2020-01-01 11:01:01 pm');
SELECT parseDateTimeBestEffortOrNull('2020-01-01 12:01:01 am');
SELECT parseDateTimeBestEffortOrNull('2020-01-01 12:01:01 pm');
SELECT parseDateTimeBestEffortOrNull('2020-05-14 03:37:03', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2020-05-14 11:37:03 AM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2020-05-14 11:37:03 PM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2020-05-14 12:37:03 AM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2020-05-14 12:37:03 PM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2020-05-14T03:37:03', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2020-05-14T03:37:03.253184', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2020-05-14T03:37:03.253184Z', 3, 'Europe/Minsk') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('2020-05-14T03:37:03.253184Z', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('<Empty>', 3) AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('Dec 15, 2021') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('Dec 15, 2021', 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('Dec 15, 2021', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrNull('x');
SELECT parseDateTimeBestEffortOrNull(materialize('2020-05-14T03:37:03.253184Z'), 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('1640649600123', 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('1640649600123', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14 03:37:03', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14 11:37:03 AM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14 11:37:03 PM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14 12:37:03 AM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14 12:37:03 PM', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14T03:37:03', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14T03:37:03.253184', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14T03:37:03.253184Z', 3, 'Europe/Minsk') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('2020-05-14T03:37:03.253184Z', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('<Empty>', 'UTC');
SELECT parseDateTimeBestEffortOrZero('<Empty>', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('Dec 15, 2021') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('Dec 15, 2021', 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero('Dec 15, 2021', 3, 'UTC') AS a, toTypeName(a);
SELECT parseDateTimeBestEffortOrZero(materialize('2020-05-14T03:37:03.253184Z'), 3, 'UTC') AS a, toTypeName(a);
select parseDateTimeBestEffortUS('01/12/2017 ,18:31:44');
select parseDateTimeBestEffortUS('01/12/2017, 18:31:44');
select parseDateTimeBestEffortUS('01/12/2017,18:31:44');
select parseDateTimeBestEffortUS('18:31:44 , 31/12/2015');
select parseDateTimeBestEffortUS('18:31:44, 31/12/2015');
select parseDateTimeInJodaSyntax(' 7', ' MM', 'UTC') = toDateTime('2000-07-01', 'UTC');
select parseDateTimeInJodaSyntax('+10', 'xx', 'UTC') = toDateTime('2010-01-04', 'UTC');
select parseDateTimeInJodaSyntax('+102', 'xxM', 'UTC') = toDateTime('2010-02-01', 'UTC');
select parseDateTimeInJodaSyntax('+200110', 'yyyyMM', 'UTC') = toDateTime('2001-10-01', 'UTC');
select parseDateTimeInJodaSyntax('+20102', 'xxxxM', 'UTC') = toDateTime('2010-02-01', 'UTC');
select parseDateTimeInJodaSyntax('+99 01', 'xx ww', 'UTC') = toDateTime('1999-01-04', 'UTC');
select parseDateTimeInJodaSyntax('+99 02', 'xx ww', 'UTC') = toDateTime('1999-01-11', 'UTC');
select parseDateTimeInJodaSyntax('+99 02', 'yy MM', 'UTC') = toDateTime('1999-02-01', 'UTC');
select parseDateTimeInJodaSyntax('+99', 'yy', 'UTC') = toDateTime('1999-01-01', 'UTC');
select parseDateTimeInJodaSyntax('-12-', '-M-', 'UTC') = toDateTime('2000-12-01', 'UTC');
select parseDateTimeInJodaSyntax('/11', '/dd', 'UTC') = toDateTime('2000-01-11', 'UTC');
select parseDateTimeInJodaSyntax('/11', '/DD', 'UTC') = toDateTime('2000-01-11', 'UTC');
select parseDateTimeInJodaSyntax('/31/', '/d/', 'UTC') = toDateTime('2000-01-31', 'UTC');
select parseDateTimeInJodaSyntax('/31/', '/DDD/', 'UTC') = toDateTime('2000-01-31', 'UTC');
select parseDateTimeInJodaSyntax('0 AM', 'H a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('0 am', 'H a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('0 AM', 'K a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('0 PM', 'H a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('0 pm', 'H a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('0', 'd', 'UTC');
select parseDateTimeInJodaSyntax('0', 'HHH', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('0', 'KKK', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('0', 'M', 'UTC');
select parseDateTimeInJodaSyntax('0/', 'mmm/', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('0/', 's/', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('01', 'xx', 'UTC') = toDateTime('2001-01-01', 'UTC');
select parseDateTimeInJodaSyntax('01', 'YY', 'UTC') = toDateTime('2001-01-01', 'UTC');
select parseDateTimeInJodaSyntax('1 31 20 2', 'M d d M', 'UTC') = toDateTime('2000-02-20', 'UTC');
select parseDateTimeInJodaSyntax('1 AM 0', 'h a H', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('1 AM 12', 'h a H', 'UTC') = toDateTime('1970-01-01 12:00:00', 'UTC');
select parseDateTimeInJodaSyntax('1 AM', 'h a', 'UTC') = toDateTime('1970-01-01 01:00:00', 'UTC');
select parseDateTimeInJodaSyntax('1 PM', 'h a', 'UTC') = toDateTime('1970-01-01 13:00:00', 'UTC');
select parseDateTimeInJodaSyntax('1', 'hhh', 'UTC') = toDateTime('1970-01-01 01:00:00', 'UTC');
select parseDateTimeInJodaSyntax('1', 'kkk', 'UTC') = toDateTime('1970-01-01 01:00:00', 'UTC');
select parseDateTimeInJodaSyntax('1', 'YY', 'UTC');
select parseDateTimeInJodaSyntax('10 +10', 'MM yy', 'UTC') = toDateTime('2010-10-01', 'UTC');
select parseDateTimeInJodaSyntax('10 +10', 'ww xx', 'UTC') = toDateTime('2010-03-08', 'UTC');
select parseDateTimeInJodaSyntax('10', 'HHHHHHHH', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTimeInJodaSyntax('10', 'hhhhhhhh', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTimeInJodaSyntax('10', 'kkkkkkkk', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTimeInJodaSyntax('10', 'KKKKKKKK', 'UTC') = toDateTime('1970-01-01 10:00:00', 'UTC');
select parseDateTimeInJodaSyntax('10+2001', 'MMyyyy', 'UTC') = toDateTime('2001-10-01', 'UTC');
select parseDateTimeInJodaSyntax('10-', 'M-', 'UTC') = toDateTime('2000-10-01', 'UTC');
select parseDateTimeInJodaSyntax('11 AM', 'K a', 'UTC') = toDateTime('1970-01-01 11:00:00', 'UTC');
select parseDateTimeInJodaSyntax('11 PM', 'K a', 'UTC') = toDateTime('1970-01-01 23:00:00', 'UTC');
select parseDateTimeInJodaSyntax('11', 'KK', 'UTC') = toDateTime('1970-01-01 11:00:00', 'UTC');
select parseDateTimeInJodaSyntax('11', 'M', 'UTC') = toDateTime('2000-11-01', 'UTC');
select parseDateTimeInJodaSyntax('12 1 PM', 'H h a', 'UTC') = toDateTime('1970-01-01 13:00:00', 'UTC');
select parseDateTimeInJodaSyntax('12 AM', 'h a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('12 PM', 'h a', 'UTC') = toDateTime('1970-01-01 12:00:00', 'UTC');
select parseDateTimeInJodaSyntax('12', 'hh', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('12', 'xx', 'UTC') = toDateTime('2012-01-02', 'UTC');
select parseDateTimeInJodaSyntax('19', 'CC', 'UTC');
select parseDateTimeInJodaSyntax('1969', 'YYYY', 'UTC');
select parseDateTimeInJodaSyntax('1969', 'yyyy', 'UTC');
select parseDateTimeInJodaSyntax('1970', 'xxxx', 'UTC');
select parseDateTimeInJodaSyntax('1970', 'YYYY', 'UTC') = toDateTime('1970-01-01', 'UTC');
select parseDateTimeInJodaSyntax('1970', 'yyyy', 'UTC') = toDateTime('1970-01-01', 'UTC');
select parseDateTimeInJodaSyntax('1971', 'xxxx', 'UTC') = toDateTime('1971-01-04', 'UTC');
select parseDateTimeInJodaSyntax('1999 /11', 'yyyy /DD', 'UTC') = toDateTime('1999-01-11', 'UTC');
select parseDateTimeInJodaSyntax('1999 /31/', 'yyyy /DD/', 'UTC') = toDateTime('1999-01-31', 'UTC');
select parseDateTimeInJodaSyntax('1999 1', 'yyyy D', 'UTC') = toDateTime('1999-01-01', 'UTC');
select parseDateTimeInJodaSyntax('1999 32', 'yyyy D', 'UTC') = toDateTime('1999-02-01', 'UTC');
select parseDateTimeInJodaSyntax('1999 365', 'yyyy D', 'UTC') = toDateTime('1999-12-31', 'UTC');
select parseDateTimeInJodaSyntax('1999 366', 'yyyy D', 'UTC');
select parseDateTimeInJodaSyntax('1999 60', 'yyyy D', 'UTC') = toDateTime('1999-03-01', 'UTC');
select parseDateTimeInJodaSyntax('1999 7 ', 'yyyy DD ', 'UTC') = toDateTime('1999-01-07', 'UTC');
select parseDateTimeInJodaSyntax('2 31 20 4', 'M d d M', 'UTC') = toDateTime('2000-04-20', 'UTC');
select parseDateTimeInJodaSyntax('2+10', 'wwxx', 'UTC') = toDateTime('2010-01-11', 'UTC');
select parseDateTimeInJodaSyntax('2000 366 2001', 'yyyy D yyyy', 'UTC');
select parseDateTimeInJodaSyntax('2001-02-29', 'YYYY-M-d', 'UTC');
select parseDateTimeInJodaSyntax('2025', 'xxxx', 'UTC') = toDateTime('2024-12-30', 'UTC');
select parseDateTimeInJodaSyntax('21', 'CC', 'UTC') = toDateTime('2100-01-01', 'UTC');
select parseDateTimeInJodaSyntax('2106', 'yyyy', 'UTC') = toDateTime('2106-01-01', 'UTC');
select parseDateTimeInJodaSyntax('23', 'HH', 'UTC') = toDateTime('1970-01-01 23:00:00', 'UTC');
select parseDateTimeInJodaSyntax('24 AM', 'k a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('24 am', 'k a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('24 PM', 'k a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('24 pm', 'k a', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('24', 'kk', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
select parseDateTimeInJodaSyntax('32', 'D', 'UTC') = toDateTime('2000-02-01', 'UTC');
select parseDateTimeInJodaSyntax('365', 'D', 'UTC') = toDateTime('2000-12-30', 'UTC');
select parseDateTimeInJodaSyntax('366', 'D', 'UTC') = toDateTime('2000-12-31', 'UTC');
select parseDateTimeInJodaSyntax('58', 'ss', 'UTC') = toDateTime('1970-01-01 00:00:58', 'UTC');
select parseDateTimeInJodaSyntax('59', 'mm', 'UTC') = toDateTime('1970-01-01 00:59:00', 'UTC');
select parseDateTimeInJodaSyntax('6 AM', 'h a', 'UTC') = toDateTime('1970-01-01 06:00:00', 'UTC');
select parseDateTimeInJodaSyntax('6 AM', 'K a', 'UTC') = toDateTime('1970-01-01 06:00:00', 'UTC');
select parseDateTimeInJodaSyntax('6 PM', 'h a', 'UTC') = toDateTime('1970-01-01 18:00:00', 'UTC');
select parseDateTimeInJodaSyntax('6 PM', 'K a', 'UTC') = toDateTime('1970-01-01 18:00:00', 'UTC');
select parseDateTimeInJodaSyntax('60', 'D', 'UTC') = toDateTime('2000-02-29', 'UTC');
select parseDateTimeInJodaSyntax('60', 'm', 'UTC');
select parseDateTimeInJodaSyntax('60', 's', 'UTC');
select parseDateTimeInJodaSyntax('69', 'xx', 'UTC') = toDateTime('2068-12-31', 'UTC');
select parseDateTimeInJodaSyntax('69', 'YY', 'UTC') = toDateTime('2069-01-01', 'UTC');
select parseDateTimeInJodaSyntax('69', 'yy', 'UTC') = toDateTime('2069-01-01', 'UTC');
select parseDateTimeInJodaSyntax('7 ', 'dd ', 'UTC') = toDateTime('2000-01-07', 'UTC');
select parseDateTimeInJodaSyntax('7 ', 'DD ', 'UTC') = toDateTime('2000-01-07', 'UTC');
select parseDateTimeInJodaSyntax('7 AM', 'H a', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTimeInJodaSyntax('7 am', 'H a', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTimeInJodaSyntax('7 AM', 'k a', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTimeInJodaSyntax('7 am', 'k a', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTimeInJodaSyntax('7 pm', 'H a', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTimeInJodaSyntax('7 PM', 'k a', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTimeInJodaSyntax('7 pm', 'k a', 'UTC') = toDateTime('1970-01-01 07:00:00', 'UTC');
select parseDateTimeInJodaSyntax('70', 'YY', 'UTC') = toDateTime('1970-01-01', 'UTC');
select parseDateTimeInJodaSyntax('70', 'yy', 'UTC') = toDateTime('1970-01-01', 'UTC');
select parseDateTimeInJodaSyntax('99', 'xx', 'UTC') = toDateTime('1999-01-04', 'UTC');
select parseDateTimeInJodaSyntax('99', 'YY', 'UTC') = toDateTime('1999-01-01', 'UTC');
select parseDateTimeInJodaSyntax('99', 'yy', 'UTC') = toDateTime('1999-01-01', 'UTC');
select parseDateTimeInJodaSyntax('AD 1999 2000', 'G YYYY yyyy', 'UTC') = toDateTime('2000-01-01', 'UTC');
select parseDateTimeInJodaSyntax('AD 1999 2000', 'G yyyy YYYY', 'UTC') = toDateTime('2000-01-01', 'UTC');
select parseDateTimeInJodaSyntax('AD 1999', 'G Y');
select parseDateTimeInJodaSyntax('ad 1999', 'G YYYY', 'UTC') = toDateTime('1999-01-01', 'UTC');
select parseDateTimeInJodaSyntax('Ad 1999', 'G YYYY', 'UTC') = toDateTime('1999-01-01', 'UTC');
select parseDateTimeInJodaSyntax('AD 1999', 'G yyyy', 'UTC') = toDateTime('1999-01-01', 'UTC');
select parseDateTimeInJodaSyntax('AuG', 'MMM', 'UTC') = toDateTime('2000-08-01', 'UTC');
select parseDateTimeInJodaSyntax('Aug', 'MMMM', 'UTC') = toDateTime('2000-08-01', 'UTC');
select parseDateTimeInJodaSyntax('AuG', 'MMMM', 'UTC') = toDateTime('2000-08-01', 'UTC');
select parseDateTimeInJodaSyntax('august', 'MMM', 'UTC') = toDateTime('2000-08-01', 'UTC');
select parseDateTimeInJodaSyntax('august', 'MMMM', 'UTC') = toDateTime('2000-08-01', 'UTC');
select parseDateTimeInJodaSyntaxOrNull('2001 366 2000', 'yyyy D yyyy', 'UTC') = toDateTime('2000-12-31', 'UTC');
select parseDateTimeInJodaSyntaxOrNull('2001 invalid 366 2000', 'yyyy D yyyy', 'UTC') IS NULL;
select parseDateTimeInJodaSyntaxOrZero('2001 invalid 366 2000', 'yyyy D yyyy', 'UTC') = toDateTime('1970-01-01', 'UTC');
select parseDateTimeOrNull('10:04:11 03-07-2019', '%s:%i:%H %d-%m-%Y', 'UTC') = toDateTime('2019-07-03 11:04:10', 'UTC');
select parseDateTimeOrNull('10:04:11 invalid 03-07-2019', '%s:%i:%H %d-%m-%Y', 'UTC') IS NULL;
select parseDateTimeOrZero('10:04:11 invalid 03-07-2019', '%s:%i:%H %d-%m-%Y', 'UTC') = toDateTime('1970-01-01 00:00:00', 'UTC');
SELECT parseTimeDelta('0.00123 seconds');
SELECT parseTimeDelta('1 min 35 sec');
SELECT parseTimeDelta('1.11s1.11ms1.11us1.11ns');
SELECT parseTimeDelta('11hr 25min 3.1s');
SELECT parseTimeDelta('11s+22min');
SELECT parseTimeDelta('1s1ms1us1ns');
SELECT parseTimeDelta('1s1ms1μs1ns');
SELECT parseTimeDelta('1yr2mo');
SELECT part_name, read_rows FROM system.part_log WHERE database = currentDatabase() AND table = 't_modify_to_nullable' AND event_type = 'MutatePart' ORDER BY part_name;
SELECT part_type FROM system.part_log WHERE database = currentDatabase() AND table = 't_parts_profile_events' AND event_type = 'NewPart' ORDER BY event_time_microseconds;
select part_type from system.parts where database = currentDatabase() and table = 'tp';
select part_type from system.projection_parts where database = currentDatabase() and table = 'tp';
SELECT part_type, count() > 0 FROM system.part_log WHERE database = currentDatabase() AND table = 't_parts_profile_events' AND event_type = 'MergeParts' GROUP BY part_type ORDER BY part_type;
select part_type, count() from system.parts where database = currentDatabase() and table = 'mt_compact' and active group by part_type order by part_type;
SELECT partition as p FROM system.parts WHERE table='table2' and database=currentDatabase() ORDER BY p;
SELECT partition as p FROM system.parts WHERE table='table3' and database=currentDatabase() ORDER BY p;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'not_partitioned' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'not_partitioned_replica1_00502' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'not_partitioned_replica2_00502' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'partitioned_by_string' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'partitioned_by_string_replica1' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'partitioned_by_string_replica2' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'partitioned_by_tuple' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'partitioned_by_tuple_replica1_00502' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'partitioned_by_tuple_replica2_00502' AND active ORDER BY name;
SELECT partition, name FROM system.parts WHERE database = currentDatabase() AND table = 'partitioned_by_week' AND active ORDER BY name;
SELECT partition, name, rows FROM system.parts WHERE database = currentDatabase() AND table = 'without_fixed_size_columns' AND active ORDER BY name;
SELECT partition, name, rows FROM system.parts WHERE database = currentDatabase() AND table = 'without_fixed_size_columns_replica2' AND active ORDER BY name;
SELECT partition, part_type FROM system.parts WHERE table = 't_move_to_prewhere' AND database = currentDatabase() ORDER BY partition;
SELECT partition_id FROM system.detached_parts WHERE (table = 'restore_01640') AND (database = currentDatabase());
SELECT partition_id, name FROM system.parts WHERE table = 'partitioned_table' AND database = currentDatabase() and active ORDER BY name;
SELECT parts, active_parts,total_marks FROM system.tables WHERE name = 'check_system_tables' AND database = currentDatabase();
SELECT path('www.example.com:443/a/b/c') AS Path;
SELECT pickup_date, groupBitmap( uid ) AS user_num, bitmapToArray(groupBitmapState( uid )) AS users FROM bitmap_test GROUP BY pickup_date order by pickup_date;
SELECT pickup_date, groupBitmap( uid ) AS user_num, bitmapToArray(groupBitmapState( uid )) AS users FROM bitmap_test GROUP BY pickup_date ORDER BY pickup_date;
SELECT pickup_date, groupBitmapMerge(uv) AS users from bitmap_state_test group by pickup_date order by pickup_date;
SELECT pointInEllipses(33.3 + v, 55.3 + v, 33.4, 55.1, 1.0, 1.0) AS distance from ( select number + 0.1 as v from system.numbers limit 1 );
SELECT pointInEllipses(33.3, 55.3, 33.4, 55.1, 0.1, 0.2) AS distance;
SELECT pointInEllipses(33.3, 55.3, 33.4, 55.1, 1.0, 1.0) AS distance;
SELECT pointInPolygon((-4, -4), poly) FROM polygons ORDER BY id;
SELECT pointInPolygon((-9, 0), poly) FROM polygons ORDER BY id;
SELECT pointInPolygon((-inf, 1023), [(10.000100135803223, 10000000000.), (inf, 0.9998999834060669), (1.1920928955078125e-7, 100.0000991821289), (1.000100016593933, 100.0000991821289)]);
SELECT pointInPolygon((0, -9), poly) FROM polygons ORDER BY id;
SELECT pointInPolygon((0, 0), [[(0, 0), (10, 0), (10, 10), (0, 10)]]);
SELECT pointInPolygon((0, 0), [[(0, 0), (10, 10), (256, -9223372036854775808)]]) FORMAT Null ;
SELECT pointInPolygon((0, 0), poly) FROM polygons ORDER BY id;
SELECT pointInPolygon((0., 0.), [(6., 1.), (8., 4.), (5., 8.), (1., 2.), (6., 1.)]);
SELECT pointInPolygon((0.05, 0.05), [(0., 1.), (0.2, 0.5), (0.6, 0.5), (0.8, 0.8), (0.8, 0.3), (0.1, 0.3), (0.1, 0.1), (0.8, 0.1), (1.0, 0.0), (8.0, 7.0), (7.0, 8.0), (0., 1.)]);
SELECT pointInPolygon((0.1, 0.1), [(0., 0.), (8., 7.), (7., 8.), (0., 0.)]);
SELECT pointInPolygon((0.1, 0.1), [(0.5, 0.), (1.0, 0.), (8.0, 7.5), (7.5, 8.0), (0., 1.), (0., 0.5), (4.5, 5.5), (5.5, 4.5), (0.5, 0.0)]);
SELECT pointInPolygon((0.1, 0.1), [(6., 0.), (8., 4.), (5., 8.), (0., 2.), (6., 0.)]);
SELECT pointInPolygon((0.1, 0.9), [(0., 0.), (8., 7.), (7., 8.), (0., 0.)]);
SELECT pointInPolygon((0.15, 0.15), [(0., 1.), (0.2, 0.5), (0.6, 0.5), (0.8, 0.8), (0.8, 0.3), (0.1, 0.3), (0.1, 0.1), (0.8, 0.1), (1.0, 0.0), (8.0, 7.0), (7.0, 8.0), (0., 1.)]);
SELECT pointInPolygon((0.3, 0.4), [(0., 1.), (0.2, 0.5), (0.6, 0.5), (0.8, 0.8), (0.8, 0.3), (0.1, 0.3), (0.1, 0.1), (0.8, 0.1), (1.0, 0.0), (8.0, 7.0), (7.0, 8.0), (0., 1.)]);
SELECT pointInPolygon((0.4, 0.7), [(0., 1.), (0.2, 0.5), (0.6, 0.5), (0.8, 0.8), (0.8, 0.3), (0.1, 0.3), (0.1, 0.1), (0.8, 0.1), (1.0, 0.0), (8.0, 7.0), (7.0, 8.0), (0., 1.)]);
SELECT pointInPolygon((0.5, 1.5), [(0., 0.), (7., 0.), (7., 3.), (0., 3.)], [(1., 1.), (2., 1.), (2., 2.), (1., 2.)], [(3., 1.), (4., 1.), (4., 2.), (3., 2.)], [(5., 1.), (6., 1.), (6., 2.), (5., 2.)]);
SELECT pointInPolygon((0.7, 0.6), [(0., 1.), (0.2, 0.5), (0.6, 0.5), (0.8, 0.8), (0.8, 0.3), (0.1, 0.3), (0.1, 0.1), (0.8, 0.1), (1.0, 0.0), (8.0, 7.0), (7.0, 8.0), (0., 1.)]);
SELECT pointInPolygon((0.9, 0.1), [(0., 0.), (8., 7.), (7., 8.), (0., 0.)]);
SELECT pointInPolygon((0.9, 0.1), [(0., 1.), (0.2, 0.5), (0.6, 0.5), (0.8, 0.8), (0.8, 0.3), (0.1, 0.3), (0.1, 0.1), (0.8, 0.1), (1.0, 0.0), (8.0, 7.0), (7.0, 8.0), (0., 1.)]);
SELECT pointInPolygon((1., 1.), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (3., 5.), (5., 5.), (5., 3.)]);
SELECT pointInPolygon((1., 1.), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (5., 3.), (5., 5.), (3., 5.)]);
SELECT pointInPolygon((1.5, 1.5), [(0., 0.), (7., 0.), (7., 3.), (0., 3.)], [(1., 1.), (2., 1.), (2., 2.), (1., 2.)], [(3., 1.), (4., 1.), (4., 2.), (3., 2.)], [(5., 1.), (6., 1.), (6., 2.), (5., 2.)]);
SELECT pointInPolygon((106.6671509, 10.7674952), [(106.667161868227, 10.7674952), (106.667165727127, 10.7675059912261), (106.667170817563, 10.7674904752629), (106.667229225265, 10.7672278502066), (106.667231193621, 10.7672115129572), (106.667229912029, 10.7671951075415), (106.667225430503, 10.767179274157), (106.667217923927, 10.7671646306786), (106.667207685234, 10.7671517485471), (106.667195113975, 10.7671411304688), (106.667180700725, 10.7671331907989), (106.66716500794, 10.7671282393715), (106.666628232995, 10.7670156787539), (106.666612233649, 10.7670139127584), (106.666596193354, 10.7670152569112), (106.666580711053, 10.7670196610218), (106.666566364856, 10.7670269606408), (106.666553690448, 10.7670368832008), (106.666543161092, 10.767049058194), (106.666535169952, 10.7670630310067), (106.666530015418, 10.7670782798948), (106.666482284259, 10.7672828714379), (106.666480170141, 10.7672985245675), (106.666481048788, 10.7673142953614), (106.666484888609, 10.7673296167758), (106.666491551541, 10.7673439379244), (106.666500798017, 10.7673567438858), (106.666512295576, 10.7673675742178), (106.666525630821, 10.7673760395122), (106.667032331859, 10.7676338521733), (106.6671413386, 10.7676893154858), (106.667371048786, 10.7678061934666), (106.667552760053, 10.7678987010209), (106.667801848625, 10.7680278028917), (106.667817742281, 10.7680340673957), (106.667834579682, 10.7680369577679), (106.66785165264, 10.7680363524383), (106.667868243061, 10.7680322768672), (106.667878683314, 10.7680285412847), (106.667885469819, 10.7680268413536), (106.667892390269, 10.7680258148018), (106.667899378015, 10.7680254715159), (106.667906365761, 10.7680258148018), (106.667913286211, 10.7680268413536), (106.667920072716, 10.7680285412847), (106.667926659921, 10.7680308982244), (106.667932984386, 10.7680338894736), (106.667938985204, 10.7680374862253), (106.667944604583, 10.7680416538412), (106.667949788405, 10.7680463521828), (106.667954486747, 10.7680515360051), (106.667958654362, 10.7680571553826), (106.667962251113, 10.7680631561994), (106.667965242363, 10.7680694806664), (106.667967599303, 10.7680760678724), (106.667969299234, 10.7680828543774), (106.667970926246, 10.7680938227996), (106.667974657027, 10.7681089916695), (106.667981154238, 10.7681231972879), (106.667990189396, 10.7681359400994), (106.668001444773, 10.7681467719897), (106.668014524559, 10.7681553120441), (106.668198488147, 10.7682521458591), (106.669562015793, 10.7689901124345), (106.669614757162, 10.7690820717448), (106.669623023723, 10.7690939566151), (106.669633223154, 10.7691042307472), (106.669645047385, 10.7691125838155), (106.670748051536, 10.7697559307954), (106.670751419717, 10.7697577924329), (106.671035494073, 10.7699063431327), (106.671270162713, 10.7700364834325), (106.67127192876, 10.7700374352053), (106.671437929267, 10.7701243344783), (106.671665917937, 10.7702517637461), (106.67166656035, 10.7702521191025), (106.671943689514, 10.7704038245574), (106.671943806749, 10.7704038886117), (106.6722776446, 10.7705859421916), (106.672278295949, 10.7705862936499), (106.673020324076, 10.7709824352208), (106.673433726727, 10.7712057751884), (106.673694081332, 10.7713489702214), (106.673977066657, 10.7715146655761), (106.674254247937, 10.7716778144336), (106.67440928634, 10.7717698954974), (106.674658478275, 10.7719268836667), (106.674658802254, 10.7719270867325), (106.6748919449, 10.7720724734391), (106.675071660589, 10.7721853602936), (106.675350447469, 10.7723606751059), (106.675350748696, 10.7723608636368), (106.6756252856, 10.7725318758852), (106.675888735092, 10.7726957126602), (106.676114500069, 10.7728361211927), (106.676379504941, 10.7730007692002), (106.67661713771, 10.7731502653527), (106.676617572241, 10.773150536857), (106.676852995814, 10.7732966297465), (106.677284352687, 10.7735807849214), (106.677738143311, 10.7738851794554), (106.677752655777, 10.7738929549383), (106.677768414072, 10.773897724206), (106.677784802596, 10.7738993009456), (106.677801181124, 10.7738976235612), (106.677816909825, 10.7738927575805), (106.677831374252, 10.7738848930944), (106.677844009349, 10.7738743373313), (106.677920079221, 10.7737967983562), (106.678239245717, 10.7735243703649), (106.67839926068, 10.7733892116467), (106.678400691571, 10.7733879749217), (106.678515896101, 10.7732860955802), (106.678557979259, 10.7732504310319), (106.67855930664, 10.7732492818517), (106.679033975331, 10.7728295048433), (106.679053201911, 10.772844898411), (106.679632133733, 10.7733262832973), (106.679771732358, 10.7734524450384), (106.679773325229, 10.7734538481348), (106.680011463819, 10.7736582857586), (106.680175801881, 10.7738018862846), (106.680176891116, 10.7738028216402), (106.680320149367, 10.773923712053), (106.680672123374, 10.7742204563391), (106.68094213423, 10.7744504786771), (106.68094233625, 10.7744506502241), (106.68124725775, 10.7747087432576), (106.681247329066, 10.7747088035527), (106.681470746982, 10.7748974804345), (106.681471338135, 10.7748979749973), (106.681840030697, 10.7752035373868), (106.682304929691, 10.7756040772245), (106.682308650112, 10.7756071005185), (106.682312917236, 10.7756103687835), (106.682359764439, 10.7756490693986), (106.682640114944, 10.7758996628849), (106.682644070655, 10.7759029839554), (106.682711710544, 10.7759562859055), (106.682806505954, 10.7760368956153), (106.68280745353, 10.776037689352), (106.683169164535, 10.7763361378178), (106.68363265876, 10.7767252395911), (106.683677875719, 10.7767650291442), (106.683797775698, 10.77688614766), (106.684138558845, 10.7772306328105), (106.68414063031, 10.7772326552454), (106.684827531639, 10.777880369263), (106.685228619785, 10.7782605077038), (106.685228896163, 10.7782607684525), (106.686025996525, 10.7790093622583), (106.686026813787, 10.7790101368229), (106.68658269265, 10.7795369738106), (106.687194479537, 10.7801158277128), (106.688401155505, 10.7812670656457), (106.688401571342, 10.7812674596561), (106.689622367701, 10.7824162362891), (106.690002723257, 10.7827815572149), (106.690002908997, 10.7827817350625), (106.690359062158, 10.7831217027417), (106.690359638585, 10.7831222477508), (106.690747557266, 10.7834855403784), (106.691628272565, 10.7843952548301), (106.692179613338, 10.7849709155958), (106.692179802225, 10.7849711121697), (106.692743910048, 10.7855562574979), (106.693288875836, 10.7861225208133), (106.693601234729, 10.7864484801726), (106.69220838651, 10.7875617536129), (106.692196691453, 10.787573150248), (106.692187444486, 10.7875866094924), (106.692181000965, 10.7876016141149), (106.692177608512, 10.7876175874962), (106.692177397496, 10.7876339157883), (106.692180376026, 10.7876499715041), (106.692186429639, 10.7876651376314), (106.692195325699, 10.7876788313445), (106.692206722334, 10.7876905264015), (106.692220181578, 10.7876997733682), (106.692235186201, 10.7877062168886), (106.692251159582, 10.787709609342), (106.692267487874, 10.7877098203582), (106.69228354359, 10.7877068418281), (106.692298709717, 10.7877007882148), (106.69231240343, 10.7876918921553), (106.693776442708, 10.7865217172423), (106.693788736175, 10.7865096022178), (106.693798269005, 10.7864952137411), (106.693804631934, 10.7864791695437), (106.693807551784, 10.7864621584413), (106.693806903199, 10.7864449107613), (106.693802714026, 10.7864281669878), (106.693795164114, 10.786412645971), (106.693784577601, 10.7863990140651), (106.69340910087, 10.7860071886444), (106.69340897739, 10.7860070600637), (106.692863924954, 10.7854407067139), (106.69229983717, 10.7848555821281), (106.691748435669, 10.7842798579551), (106.691748124777, 10.7842795350934), (106.690865834778, 10.7833681940925), (106.690862927107, 10.7833653342196), (106.690473809086, 10.7830009183885), (106.690118035849, 10.7826613133679), (106.689737465891, 10.7822957865149), (106.689736848623, 10.7822951996834), (106.688515950726, 10.7811463275029), (106.687309357068, 10.7799951680976), (106.687309106711, 10.779994930232), (106.686697270266, 10.7794160294802), (106.686141416688, 10.7788892164565), (106.686140461741, 10.7788883114), (106.686140185762, 10.7788880510296), (106.6853430856, 10.7781394574112), (106.684942058447, 10.7777593767781), (106.684941904463, 10.7777592312084), (106.684255979358, 10.7771124377212), (106.683916204215, 10.776768971525), (106.683794256559, 10.7766457845149), (106.68379008676, 10.7766418525893), (106.683741989497, 10.7765995284558), (106.683740519326, 10.7765982647987), (106.683276011394, 10.7762083120217), (106.683275466929, 10.7762078588774), (106.68291395946, 10.77590957835), (106.682818451152, 10.775828362424), (106.682816046951, 10.7758263940715), (106.682749215964, 10.7757737295564), (106.682469581984, 10.775523776542), (106.682467121137, 10.7755216616573), (106.682417839663, 10.775480950083), (106.68241543796, 10.7754790393628), (106.682411856108, 10.7754762959601), (106.681948170223, 10.775076801292), (106.681946953215, 10.7750757728772), (106.681577943952, 10.7747699480145), (106.681354856141, 10.7745815499075), (106.681050071432, 10.7743235726569), (106.680779998801, 10.774093497693), (106.680779672798, 10.7740932214111), (106.680427578845, 10.7737963760106), (106.680284883706, 10.7736759607876), (106.680120811518, 10.7735325925854), (106.680120259999, 10.7735321149047), (106.679882649978, 10.7733281310479), (106.679742564868, 10.7732015296478), (106.67973997054, 10.7731992804165), (106.679159125009, 10.772716304271), (106.679157929246, 10.7727153285815), (106.679083371982, 10.7726556350576), (106.679069423592, 10.7726465921904), (106.679053957365, 10.7726404990091), (106.679037589221, 10.7726375981655), (106.679020970997, 10.7726380051815), (106.679004764489, 10.7726417038483), (106.678989615098, 10.7726485468719), (106.678976126125, 10.772658261739), (106.678449597495, 10.7731239014943), (106.678407514754, 10.773159565689), (106.678406188192, 10.7731607141448), (106.678291034854, 10.7732625482153), (106.678131577851, 10.7733972356454), (106.678131249559, 10.7733975143985), (106.677809116892, 10.7736724741964), (106.677803734254, 10.7736774962862), (106.67777351642, 10.773708297704), (106.677376870851, 10.7734422350384), (106.677376291861, 10.7734418501559), (106.676943701895, 10.7731568826838), (106.676941799819, 10.7731556663352), (106.676705634648, 10.7730091132449), (106.676468020922, 10.7728596290723), (106.676467624617, 10.7728593813034), (106.676202468827, 10.7726946395397), (106.675976718772, 10.7725542402878), (106.675713344944, 10.7723904505946), (106.675438984881, 10.7722195485022), (106.675160330528, 10.7720443170291), (106.674980445983, 10.7719313240966), (106.674980215342, 10.7719311797465), (106.674747119479, 10.7717858222138), (106.674497164595, 10.7716283533947), (106.674495300219, 10.7716272127471), (106.674339180867, 10.7715344896819), (106.674338897981, 10.771534322423), (106.674061493048, 10.7713710419232), (106.674061328848, 10.7713709455279), (106.673777295695, 10.7712046366425), (106.673775349509, 10.7712035319333), (106.673513740027, 10.7710596467179), (106.673513190173, 10.7710593469847), (106.673099330442, 10.7708357600807), (106.673098966779, 10.7708355647753), (106.672357083034, 10.7704395002842), (106.672023628724, 10.7702576558632), (106.671746880137, 10.7701061587426), (106.671518215262, 10.7699783515251), (106.671516207112, 10.7699772649622), (106.671350083838, 10.7698903014222), (106.671115399209, 10.7697601522552), (106.671113600766, 10.7697591835329), (106.670830326847, 10.7696110514048), (106.66974820551, 10.7689798847013), (106.66969475177, 10.7688866833063), (106.669685913661, 10.7688741199651), (106.669674918986, 10.7688633930448), (106.669662141606, 10.7688548673033), (106.668277363011, 10.7681053993183), (106.668276514094, 10.7681049461882), (106.668126503268, 10.7680259842551), (106.668125839186, 10.7680237950692), (106.66812072496, 10.7680095017658), (106.668117596648, 10.7680019493532), (106.66811110606, 10.7679882261576), (106.668107252546, 10.7679810167398), (106.668099448104, 10.7679679958141), (106.668094906497, 10.767961198818), (106.668085863361, 10.7679490055608), (106.668080677403, 10.7679426864524), (106.668070482664, 10.7679314382913), (106.668064702296, 10.7679256579236), (106.668053454135, 10.7679154631847), (106.668047135024, 10.7679102772246), (106.668034941766, 10.7679012340887), (106.668028144776, 10.7678966924853), (106.668015123851, 10.7678888880428), (106.668007914429, 10.7678850345264), (106.667994191233, 10.7678785439383), (106.667986638821, 10.7678754156266), (106.667972345518, 10.7678703014008), (106.667964522841, 10.7678679284177), (106.667949797082, 10.7678642398071), (106.667941779481, 10.7678626450072), (106.667926763083, 10.767860417535), (106.667918627772, 10.7678596162768), (106.667903465352, 10.7678588713949), (106.667895290678, 10.7678588713949), (106.667880128258, 10.7678596162768), (106.667871992947, 10.767860417535), (106.667856976549, 10.7678626450072), (106.667848958948, 10.7678642398071), (106.667848526162, 10.7678643482145), (106.667629153721, 10.7677506481269), (106.667628614008, 10.7677503708842), (106.66744662399, 10.7676577214203), (106.667216888626, 10.7675408306262), (106.667161868227, 10.7675128359024), (106.667012119458, 10.7674366427911), (106.666659357657, 10.7672571553777), (106.666673753979, 10.7671954479766), (106.667048293768, 10.7672739882109), (106.6670141, 10.7674274)]);
SELECT pointInPolygon((106.677085876465,10.7744951248169), [(106.667161868227,10.7675128359024),(106.667165727127,10.7675059912261),(106.667170817563,10.7674904752629),(106.667229225265,10.7672278502066),(106.667231193621,10.7672115129572),(106.667229912029,10.7671951075415),(106.667225430503,10.767179274157),(106.667217923927,10.7671646306786),(106.667207685234,10.7671517485471),(106.667195113975,10.7671411304688),(106.667180700725,10.7671331907989),(106.66716500794,10.7671282393715),(106.666628232995,10.7670156787539),(106.666612233649,10.7670139127584),(106.666596193354,10.7670152569112),(106.666580711053,10.7670196610218),(106.666566364856,10.7670269606408),(106.666553690448,10.7670368832008),(106.666543161092,10.767049058194),(106.666535169952,10.7670630310067),(106.666530015418,10.7670782798948),(106.666482284259,10.7672828714379),(106.666480170141,10.7672985245675),(106.666481048788,10.7673142953614),(106.666484888609,10.7673296167758),(106.666491551541,10.7673439379244),(106.666500798017,10.7673567438858),(106.666512295576,10.7673675742178),(106.666525630821,10.7673760395122),(106.667032331859,10.7676338521733),(106.6671413386,10.7676893154858),(106.667371048786,10.7678061934666),(106.667552760053,10.7678987010209),(106.667801848625,10.7680278028917),(106.667817742281,10.7680340673957),(106.667834579682,10.7680369577679),(106.66785165264,10.7680363524383),(106.667868243061,10.7680322768672),(106.667878683314,10.7680285412847),(106.667885469819,10.7680268413536),(106.667892390269,10.7680258148018),(106.667899378015,10.7680254715159),(106.667906365761,10.7680258148018),(106.667913286211,10.7680268413536),(106.667920072716,10.7680285412847),(106.667926659921,10.7680308982244),(106.667932984386,10.7680338894736),(106.667938985204,10.7680374862253),(106.667944604583,10.7680416538412),(106.667949788405,10.7680463521828),(106.667954486747,10.7680515360051),(106.667958654362,10.7680571553826),(106.667962251113,10.7680631561994),(106.667965242363,10.7680694806664),(106.667967599303,10.7680760678724),(106.667969299234,10.7680828543774),(106.667970926246,10.7680938227996),(106.667974657027,10.7681089916695),(106.667981154238,10.7681231972879),(106.667990189396,10.7681359400994),(106.668001444773,10.7681467719897),(106.668014524559,10.7681553120441),(106.668198488147,10.7682521458591),(106.669562015793,10.7689901124345),(106.669614757162,10.7690820717448),(106.669623023723,10.7690939566151),(106.669633223154,10.7691042307472),(106.669645047385,10.7691125838155),(106.670748051536,10.7697559307954),(106.670751419717,10.7697577924329),(106.671035494073,10.7699063431327),(106.671270162713,10.7700364834325),(106.67127192876,10.7700374352053),(106.671437929267,10.7701243344783),(106.671665917937,10.7702517637461),(106.67166656035,10.7702521191025),(106.671943689514,10.7704038245574),(106.671943806749,10.7704038886117),(106.6722776446,10.7705859421916),(106.672278295949,10.7705862936499),(106.673020324076,10.7709824352208),(106.673433726727,10.7712057751884),(106.673694081332,10.7713489702214),(106.673977066657,10.7715146655761),(106.674254247937,10.7716778144336),(106.67440928634,10.7717698954974),(106.674658478275,10.7719268836667),(106.674658802254,10.7719270867325),(106.6748919449,10.7720724734391),(106.675071660589,10.7721853602936),(106.675350447469,10.7723606751059),(106.675350748696,10.7723608636368),(106.6756252856,10.7725318758852),(106.675888735092,10.7726957126602),(106.676114500069,10.7728361211927),(106.676379504941,10.7730007692002),(106.67661713771,10.7731502653527),(106.676617572241,10.773150536857),(106.676852995814,10.7732966297465),(106.677284352687,10.7735807849214),(106.677738143311,10.7738851794554),(106.677752655777,10.7738929549383),(106.677768414072,10.773897724206),(106.677784802596,10.7738993009456),(106.677801181124,10.7738976235612),(106.677816909825,10.7738927575805),(106.677831374252,10.7738848930944),(106.677844009349,10.7738743373313),(106.677920079221,10.7737967983562),(106.678239245717,10.7735243703649),(106.67839926068,10.7733892116467),(106.678400691571,10.7733879749217),(106.678515896101,10.7732860955802),(106.678557979259,10.7732504310319),(106.67855930664,10.7732492818517),(106.679033975331,10.7728295048433),(106.679053201911,10.772844898411),(106.679632133733,10.7733262832973),(106.679771732358,10.7734524450384),(106.679773325229,10.7734538481348),(106.680011463819,10.7736582857586),(106.680175801881,10.7738018862846),(106.680176891116,10.7738028216402),(106.680320149367,10.773923712053),(106.680672123374,10.7742204563391),(106.68094213423,10.7744504786771),(106.68094233625,10.7744506502241),(106.68124725775,10.7747087432576),(106.681247329066,10.7747088035527),(106.681470746982,10.7748974804345),(106.681471338135,10.7748979749973),(106.681840030697,10.7752035373868),(106.682304929691,10.7756040772245),(106.682308650112,10.7756071005185),(106.682312917236,10.7756103687835),(106.682359764439,10.7756490693986),(106.682640114944,10.7758996628849),(106.682644070655,10.7759029839554),(106.682711710544,10.7759562859055),(106.682806505954,10.7760368956153),(106.68280745353,10.776037689352),(106.683169164535,10.7763361378178),(106.68363265876,10.7767252395911),(106.683677875719,10.7767650291442),(106.683797775698,10.77688614766),(106.684138558845,10.7772306328105),(106.68414063031,10.7772326552454),(106.684827531639,10.777880369263),(106.685228619785,10.7782605077038),(106.685228896163,10.7782607684525),(106.686025996525,10.7790093622583),(106.686026813787,10.7790101368229),(106.68658269265,10.7795369738106),(106.687194479537,10.7801158277128),(106.688401155505,10.7812670656457),(106.688401571342,10.7812674596561),(106.689622367701,10.7824162362891),(106.690002723257,10.7827815572149),(106.690002908997,10.7827817350625),(106.690359062158,10.7831217027417),(106.690359638585,10.7831222477508),(106.690747557266,10.7834855403784),(106.691628272565,10.7843952548301),(106.692179613338,10.7849709155958),(106.692179802225,10.7849711121697),(106.692743910048,10.7855562574979),(106.693288875836,10.7861225208133),(106.693601234729,10.7864484801726),(106.69220838651,10.7875617536129),(106.692196691453,10.787573150248),(106.692187444486,10.7875866094924),(106.692181000965,10.7876016141149),(106.692177608512,10.7876175874962),(106.692177397496,10.7876339157883),(106.692180376026,10.7876499715041),(106.692186429639,10.7876651376314),(106.692195325699,10.7876788313445),(106.692206722334,10.7876905264015),(106.692220181578,10.7876997733682),(106.692235186201,10.7877062168886),(106.692251159582,10.787709609342),(106.692267487874,10.7877098203582),(106.69228354359,10.7877068418281),(106.692298709717,10.7877007882148),(106.69231240343,10.7876918921553),(106.693776442708,10.7865217172423),(106.693788736175,10.7865096022178),(106.693798269005,10.7864952137411),(106.693804631934,10.7864791695437),(106.693807551784,10.7864621584413),(106.693806903199,10.7864449107613),(106.693802714026,10.7864281669878),(106.693795164114,10.786412645971),(106.693784577601,10.7863990140651),(106.69340910087,10.7860071886444),(106.69340897739,10.7860070600637),(106.692863924954,10.7854407067139),(106.69229983717,10.7848555821281),(106.691748435669,10.7842798579551),(106.691748124777,10.7842795350934),(106.690865834778,10.7833681940925),(106.690862927107,10.7833653342196),(106.690473809086,10.7830009183885),(106.690118035849,10.7826613133679),(106.689737465891,10.7822957865149),(106.689736848623,10.7822951996834),(106.688515950726,10.7811463275029),(106.687309357068,10.7799951680976),(106.687309106711,10.779994930232),(106.686697270266,10.7794160294802),(106.686141416688,10.7788892164565),(106.686140461741,10.7788883114),(106.686140185762,10.7788880510296),(106.6853430856,10.7781394574112),(106.684942058447,10.7777593767781),(106.684941904463,10.7777592312084),(106.684255979358,10.7771124377212),(106.683916204215,10.776768971525),(106.683794256559,10.7766457845149),(106.68379008676,10.7766418525893),(106.683741989497,10.7765995284558),(106.683740519326,10.7765982647987),(106.683276011394,10.7762083120217),(106.683275466929,10.7762078588774),(106.68291395946,10.77590957835),(106.682818451152,10.775828362424),(106.682816046951,10.7758263940715),(106.682749215964,10.7757737295564),(106.682469581984,10.775523776542),(106.682467121137,10.7755216616573),(106.682417839663,10.775480950083),(106.68241543796,10.7754790393628),(106.682411856108,10.7754762959601),(106.681948170223,10.775076801292),(106.681946953215,10.7750757728772),(106.681577943952,10.7747699480145),(106.681354856141,10.7745815499075),(106.681050071432,10.7743235726569),(106.680779998801,10.774093497693),(106.680779672798,10.7740932214111),(106.680427578845,10.7737963760106),(106.680284883706,10.7736759607876),(106.680120811518,10.7735325925854),(106.680120259999,10.7735321149047),(106.679882649978,10.7733281310479),(106.679742564868,10.7732015296478),(106.67973997054,10.7731992804165),(106.679159125009,10.772716304271),(106.679157929246,10.7727153285815),(106.679083371982,10.7726556350576),(106.679069423592,10.7726465921904),(106.679053957365,10.7726404990091),(106.679037589221,10.7726375981655),(106.679020970997,10.7726380051815),(106.679004764489,10.7726417038483),(106.678989615098,10.7726485468719),(106.678976126125,10.772658261739),(106.678449597495,10.7731239014943),(106.678407514754,10.773159565689),(106.678406188192,10.7731607141448),(106.678291034854,10.7732625482153),(106.678131577851,10.7733972356454),(106.678131249559,10.7733975143985),(106.677809116892,10.7736724741964),(106.677803734254,10.7736774962862),(106.67777351642,10.773708297704),(106.677376870851,10.7734422350384),(106.677376291861,10.7734418501559),(106.676943701895,10.7731568826838),(106.676941799819,10.7731556663352),(106.676705634648,10.7730091132449),(106.676468020922,10.7728596290723),(106.676467624617,10.7728593813034),(106.676202468827,10.7726946395397),(106.675976718772,10.7725542402878),(106.675713344944,10.7723904505946),(106.675438984881,10.7722195485022),(106.675160330528,10.7720443170291),(106.674980445983,10.7719313240966),(106.674980215342,10.7719311797465),(106.674747119479,10.7717858222138),(106.674497164595,10.7716283533947),(106.674495300219,10.7716272127471),(106.674339180867,10.7715344896819),(106.674338897981,10.771534322423),(106.674061493048,10.7713710419232),(106.674061328848,10.7713709455279),(106.673777295695,10.7712046366425),(106.673775349509,10.7712035319333),(106.673513740027,10.7710596467179),(106.673513190173,10.7710593469847),(106.673099330442,10.7708357600807),(106.673098966779,10.7708355647753),(106.672357083034,10.7704395002842),(106.672023628724,10.7702576558632),(106.671746880137,10.7701061587426),(106.671518215262,10.7699783515251),(106.671516207112,10.7699772649622),(106.671350083838,10.7698903014222),(106.671115399209,10.7697601522552),(106.671113600766,10.7697591835329),(106.670830326847,10.7696110514048),(106.66974820551,10.7689798847013),(106.66969475177,10.7688866833063),(106.669685913661,10.7688741199651),(106.669674918986,10.7688633930448),(106.669662141606,10.7688548673033),(106.668277363011,10.7681053993183),(106.668276514094,10.7681049461882),(106.668126503268,10.7680259842551),(106.668125839186,10.7680237950692),(106.66812072496,10.7680095017658),(106.668117596648,10.7680019493532),(106.66811110606,10.7679882261576),(106.668107252546,10.7679810167398),(106.668099448104,10.7679679958141),(106.668094906497,10.767961198818),(106.668085863361,10.7679490055608),(106.668080677403,10.7679426864524),(106.668070482664,10.7679314382913),(106.668064702296,10.7679256579236),(106.668053454135,10.7679154631847),(106.668047135024,10.7679102772246),(106.668034941766,10.7679012340887),(106.668028144776,10.7678966924853),(106.668015123851,10.7678888880428),(106.668007914429,10.7678850345264),(106.667994191233,10.7678785439383),(106.667986638821,10.7678754156266),(106.667972345518,10.7678703014008),(106.667964522841,10.7678679284177),(106.667949797082,10.7678642398071),(106.667941779481,10.7678626450072),(106.667926763083,10.767860417535),(106.667918627772,10.7678596162768),(106.667903465352,10.7678588713949),(106.667895290678,10.7678588713949),(106.667880128258,10.7678596162768),(106.667871992947,10.767860417535),(106.667856976549,10.7678626450072),(106.667848958948,10.7678642398071),(106.667848526162,10.7678643482145),(106.667629153721,10.7677506481269),(106.667628614008,10.7677503708842),(106.66744662399,10.7676577214203),(106.667216888626,10.7675408306262),(106.667161868227,10.7675128359024),(106.667012119458,10.7674366427911),(106.666659357657,10.7672571553777),(106.666673753979,10.7671954479766),(106.667048293768,10.7672739882109),(106.667012119458,10.7674366427911)] );
SELECT pointInPolygon((106.677085876465,10.7744951248169), [(106.667161868227,10.7675128359024),(106.667165727127,10.7675059912261),(106.667170817563,10.7674904752629),(106.667229225265,10.7672278502066),(106.667231193621,10.7672115129572),(106.667229912029,10.7671951075415),(106.667225430503,10.767179274157),(106.667217923927,10.7671646306786),(106.667207685234,10.7671517485471),(106.667195113975,10.7671411304688),(106.667180700725,10.7671331907989),(106.66716500794,10.7671282393715),(106.666628232995,10.7670156787539),(106.666612233649,10.7670139127584),(106.666596193354,10.7670152569112),(106.666580711053,10.7670196610218),(106.666566364856,10.7670269606408),(106.666553690448,10.7670368832008),(106.666543161092,10.767049058194),(106.666535169952,10.7670630310067),(106.666530015418,10.7670782798948),(106.666482284259,10.7672828714379),(106.666480170141,10.7672985245675),(106.666481048788,10.7673142953614),(106.666484888609,10.7673296167758),(106.666491551541,10.7673439379244),(106.666500798017,10.7673567438858),(106.666512295576,10.7673675742178),(106.666525630821,10.7673760395122),(106.667032331859,10.7676338521733),(106.6671413386,10.7676893154858),(106.667371048786,10.7678061934666),(106.667552760053,10.7678987010209),(106.667801848625,10.7680278028917),(106.667817742281,10.7680340673957),(106.667834579682,10.7680369577679),(106.66785165264,10.7680363524383),(106.667868243061,10.7680322768672),(106.667878683314,10.7680285412847),(106.667885469819,10.7680268413536),(106.667892390269,10.7680258148018),(106.667899378015,10.7680254715159),(106.667906365761,10.7680258148018),(106.667913286211,10.7680268413536),(106.667920072716,10.7680285412847),(106.667926659921,10.7680308982244),(106.667932984386,10.7680338894736),(106.667938985204,10.7680374862253),(106.667944604583,10.7680416538412),(106.667949788405,10.7680463521828),(106.667954486747,10.7680515360051),(106.667958654362,10.7680571553826),(106.667962251113,10.7680631561994),(106.667965242363,10.7680694806664),(106.667967599303,10.7680760678724),(106.667969299234,10.7680828543774),(106.667970926246,10.7680938227996),(106.667974657027,10.7681089916695),(106.667981154238,10.7681231972879),(106.667990189396,10.7681359400994),(106.668001444773,10.7681467719897),(106.668014524559,10.7681553120441),(106.668198488147,10.7682521458591),(106.669562015793,10.7689901124345),(106.669614757162,10.7690820717448),(106.669623023723,10.7690939566151),(106.669633223154,10.7691042307472),(106.669645047385,10.7691125838155),(106.670748051536,10.7697559307954),(106.670751419717,10.7697577924329),(106.671035494073,10.7699063431327),(106.671270162713,10.7700364834325),(106.67127192876,10.7700374352053),(106.671437929267,10.7701243344783),(106.671665917937,10.7702517637461),(106.67166656035,10.7702521191025),(106.671943689514,10.7704038245574),(106.671943806749,10.7704038886117),(106.6722776446,10.7705859421916),(106.672278295949,10.7705862936499),(106.673020324076,10.7709824352208),(106.673433726727,10.7712057751884),(106.673694081332,10.7713489702214),(106.673977066657,10.7715146655761),(106.674254247937,10.7716778144336),(106.67440928634,10.7717698954974),(106.674658478275,10.7719268836667),(106.674658802254,10.7719270867325),(106.6748919449,10.7720724734391),(106.675071660589,10.7721853602936),(106.675350447469,10.7723606751059),(106.675350748696,10.7723608636368),(106.6756252856,10.7725318758852),(106.675888735092,10.7726957126602),(106.676114500069,10.7728361211927),(106.676379504941,10.7730007692002),(106.67661713771,10.7731502653527),(106.676617572241,10.773150536857),(106.676852995814,10.7732966297465),(106.677284352687,10.7735807849214),(106.677738143311,10.7738851794554),(106.677752655777,10.7738929549383),(106.677768414072,10.773897724206),(106.677784802596,10.7738993009456),(106.677801181124,10.7738976235612),(106.677816909825,10.7738927575805),(106.677831374252,10.7738848930944),(106.677844009349,10.7738743373313),(106.677920079221,10.7737967983562),(106.678239245717,10.7735243703649),(106.67839926068,10.7733892116467),(106.678400691571,10.7733879749217),(106.678515896101,10.7732860955802),(106.678557979259,10.7732504310319),(106.67855930664,10.7732492818517),(106.679033975331,10.7728295048433),(106.679053201911,10.772844898411),(106.679632133733,10.7733262832973),(106.679771732358,10.7734524450384),(106.679773325229,10.7734538481348),(106.680011463819,10.7736582857586),(106.680175801881,10.7738018862846),(106.680176891116,10.7738028216402),(106.680320149367,10.773923712053),(106.680672123374,10.7742204563391),(106.68094213423,10.7744504786771),(106.68094233625,10.7744506502241),(106.68124725775,10.7747087432576),(106.681247329066,10.7747088035527),(106.681470746982,10.7748974804345),(106.681471338135,10.7748979749973),(106.681840030697,10.7752035373868),(106.682304929691,10.7756040772245),(106.682308650112,10.7756071005185),(106.682312917236,10.7756103687835),(106.682359764439,10.7756490693986),(106.682640114944,10.7758996628849),(106.682644070655,10.7759029839554),(106.682711710544,10.7759562859055),(106.682806505954,10.7760368956153),(106.68280745353,10.776037689352),(106.683169164535,10.7763361378178),(106.68363265876,10.7767252395911),(106.683677875719,10.7767650291442),(106.683797775698,10.77688614766),(106.684138558845,10.7772306328105),(106.68414063031,10.7772326552454),(106.684827531639,10.777880369263),(106.685228619785,10.7782605077038),(106.685228896163,10.7782607684525),(106.686025996525,10.7790093622583),(106.686026813787,10.7790101368229),(106.68658269265,10.7795369738106),(106.687194479537,10.7801158277128),(106.688401155505,10.7812670656457),(106.688401571342,10.7812674596561),(106.689622367701,10.7824162362891),(106.690002723257,10.7827815572149),(106.690002908997,10.7827817350625),(106.690359062158,10.7831217027417),(106.690359638585,10.7831222477508),(106.690747557266,10.7834855403784),(106.691628272565,10.7843952548301),(106.692179613338,10.7849709155958),(106.692179802225,10.7849711121697),(106.692743910048,10.7855562574979),(106.693288875836,10.7861225208133),(106.693601234729,10.7864484801726),(106.69220838651,10.7875617536129),(106.692196691453,10.787573150248),(106.692187444486,10.7875866094924),(106.692181000965,10.7876016141149),(106.692177608512,10.7876175874962),(106.692177397496,10.7876339157883),(106.692180376026,10.7876499715041),(106.692186429639,10.7876651376314),(106.692195325699,10.7876788313445),(106.692206722334,10.7876905264015),(106.692220181578,10.7876997733682),(106.692235186201,10.7877062168886),(106.692251159582,10.787709609342),(106.692267487874,10.7877098203582),(106.69228354359,10.7877068418281),(106.692298709717,10.7877007882148),(106.69231240343,10.7876918921553),(106.693776442708,10.7865217172423),(106.693788736175,10.7865096022178),(106.693798269005,10.7864952137411),(106.693804631934,10.7864791695437),(106.693807551784,10.7864621584413),(106.693806903199,10.7864449107613),(106.693802714026,10.7864281669878),(106.693795164114,10.786412645971),(106.693784577601,10.7863990140651),(106.69340910087,10.7860071886444),(106.69340897739,10.7860070600637),(106.692863924954,10.7854407067139),(106.69229983717,10.7848555821281),(106.691748435669,10.7842798579551),(106.691748124777,10.7842795350934),(106.690865834778,10.7833681940925),(106.690862927107,10.7833653342196),(106.690473809086,10.7830009183885),(106.690118035849,10.7826613133679),(106.689737465891,10.7822957865149),(106.689736848623,10.7822951996834),(106.688515950726,10.7811463275029),(106.687309357068,10.7799951680976),(106.687309106711,10.779994930232),(106.686697270266,10.7794160294802),(106.686141416688,10.7788892164565),(106.686140461741,10.7788883114),(106.686140185762,10.7788880510296),(106.6853430856,10.7781394574112),(106.684942058447,10.7777593767781),(106.684941904463,10.7777592312084),(106.684255979358,10.7771124377212),(106.683916204215,10.776768971525),(106.683794256559,10.7766457845149),(106.68379008676,10.7766418525893),(106.683741989497,10.7765995284558),(106.683740519326,10.7765982647987),(106.683276011394,10.7762083120217),(106.683275466929,10.7762078588774),(106.68291395946,10.77590957835),(106.682818451152,10.775828362424),(106.682816046951,10.7758263940715),(106.682749215964,10.7757737295564),(106.682469581984,10.775523776542),(106.682467121137,10.7755216616573),(106.682417839663,10.775480950083),(106.68241543796,10.7754790393628),(106.682411856108,10.7754762959601),(106.681948170223,10.775076801292),(106.681946953215,10.7750757728772),(106.681577943952,10.7747699480145),(106.681354856141,10.7745815499075),(106.681050071432,10.7743235726569),(106.680779998801,10.774093497693),(106.680779672798,10.7740932214111),(106.680427578845,10.7737963760106),(106.680284883706,10.7736759607876),(106.680120811518,10.7735325925854),(106.680120259999,10.7735321149047),(106.679882649978,10.7733281310479),(106.679742564868,10.7732015296478),(106.67973997054,10.7731992804165),(106.679159125009,10.772716304271),(106.679157929246,10.7727153285815),(106.679083371982,10.7726556350576),(106.679069423592,10.7726465921904),(106.679053957365,10.7726404990091),(106.679037589221,10.7726375981655),(106.679020970997,10.7726380051815),(106.679004764489,10.7726417038483),(106.678989615098,10.7726485468719),(106.678976126125,10.772658261739),(106.678449597495,10.7731239014943),(106.678407514754,10.773159565689),(106.678406188192,10.7731607141448),(106.678291034854,10.7732625482153),(106.678131577851,10.7733972356454),(106.678131249559,10.7733975143985),(106.677809116892,10.7736724741964),(106.677803734254,10.7736774962862),(106.67777351642,10.773708297704),(106.677376870851,10.7734422350384),(106.677376291861,10.7734418501559),(106.676943701895,10.7731568826838),(106.676941799819,10.7731556663352),(106.676705634648,10.7730091132449),(106.676468020922,10.7728596290723),(106.676467624617,10.7728593813034),(106.676202468827,10.7726946395397),(106.675976718772,10.7725542402878),(106.675713344944,10.7723904505946),(106.675438984881,10.7722195485022),(106.675160330528,10.7720443170291),(106.674980445983,10.7719313240966),(106.674980215342,10.7719311797465),(106.674747119479,10.7717858222138),(106.674497164595,10.7716283533947),(106.674495300219,10.7716272127471),(106.674339180867,10.7715344896819),(106.674338897981,10.771534322423),(106.674061493048,10.7713710419232),(106.674061328848,10.7713709455279),(106.673777295695,10.7712046366425),(106.673775349509,10.7712035319333),(106.673513740027,10.7710596467179),(106.673513190173,10.7710593469847),(106.673099330442,10.7708357600807),(106.673098966779,10.7708355647753),(106.672357083034,10.7704395002842),(106.672023628724,10.7702576558632),(106.671746880137,10.7701061587426),(106.671518215262,10.7699783515251),(106.671516207112,10.7699772649622),(106.671350083838,10.7698903014222),(106.671115399209,10.7697601522552),(106.671113600766,10.7697591835329),(106.670830326847,10.7696110514048),(106.66974820551,10.7689798847013),(106.66969475177,10.7688866833063),(106.669685913661,10.7688741199651),(106.669674918986,10.7688633930448),(106.669662141606,10.7688548673033),(106.668277363011,10.7681053993183),(106.668276514094,10.7681049461882),(106.668126503268,10.7680259842551),(106.668125839186,10.7680237950692),(106.66812072496,10.7680095017658),(106.668117596648,10.7680019493532),(106.66811110606,10.7679882261576),(106.668107252546,10.7679810167398),(106.668099448104,10.7679679958141),(106.668094906497,10.767961198818),(106.668085863361,10.7679490055608),(106.668080677403,10.7679426864524),(106.668070482664,10.7679314382913),(106.668064702296,10.7679256579236),(106.668053454135,10.7679154631847),(106.668047135024,10.7679102772246),(106.668034941766,10.7679012340887),(106.668028144776,10.7678966924853),(106.668015123851,10.7678888880428),(106.668007914429,10.7678850345264),(106.667994191233,10.7678785439383),(106.667986638821,10.7678754156266),(106.667972345518,10.7678703014008),(106.667964522841,10.7678679284177),(106.667949797082,10.7678642398071),(106.667941779481,10.7678626450072),(106.667926763083,10.767860417535),(106.667918627772,10.7678596162768),(106.667903465352,10.7678588713949),(106.667895290678,10.7678588713949),(106.667880128258,10.7678596162768),(106.667871992947,10.767860417535),(106.667856976549,10.7678626450072),(106.667848958948,10.7678642398071),(106.667848526162,10.7678643482145),(106.667629153721,10.7677506481269),(106.667628614008,10.7677503708842),(106.66744662399,10.7676577214203),(106.667216888626,10.7675408306262),(106.667161868227,10.7675128359024),(106.667012119458,10.7674366427911),(106.666659357657,10.7672571553777),(106.666673753979,10.7671954479766),(106.667048293768,10.7672739882109),(106.667012119458,10.7674366427911)]);
SELECT pointInPolygon((2.1, 2.9), [(0., 0.), (8., 7.), (7., 8.), (0., 0.)]);
SELECT pointInPolygon((2.2, 2.2), [(0., 0.), (8., 7.), (7., 8.), (0., 0.)]);
SELECT pointInPolygon((2.5, 1.5), [(0., 0.), (7., 0.), (7., 3.), (0., 3.)], [(1., 1.), (2., 1.), (2., 2.), (1., 2.)], [(3., 1.), (4., 1.), (4., 2.), (3., 2.)], [(5., 1.), (6., 1.), (6., 2.), (5., 2.)]);
SELECT pointInPolygon((2.5, 2.5), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (3., 5.), (5., 5.), (5., 3.)]);
SELECT pointInPolygon((2.5, 2.5), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (5., 3.), (5., 5.), (3., 5.)]);
SELECT pointInPolygon((2.9, 2.1), [(0., 0.), (8., 7.), (7., 8.), (0., 0.)]);
SELECT pointInPolygon((3., 3.), [(6, 0), (8, 4), (5, 8), (0, 2), (6, 0)]);
SELECT pointInPolygon((3.5, 1.5), [(0., 0.), (7., 0.), (7., 3.), (0., 3.)], [(1., 1.), (2., 1.), (2., 2.), (1., 2.)], [(3., 1.), (4., 1.), (4., 2.), (3., 2.)], [(5., 1.), (6., 1.), (6., 2.), (5., 2.)]);
select pointInPolygon((35.45285, 58.72587), [(32.947998, 59.506455), (34.222412, 59.215312), (33.343506, 58.551061), (34.859619, 58.938673), (36.463623, 58.528125), (35.397949, 59.215312), (36.804199, 59.495303), (35.2771, 59.50088), (34.892578, 60.267066), (34.343262, 59.517603), (32.947998, 59.506455)]);
select pointInPolygon((35.72308, 58.8294), [(32.947998, 59.506455), (34.222412, 59.215312), (33.343506, 58.551061), (34.859619, 58.938673), (36.463623, 58.528125), (35.397949, 59.215312), (36.804199, 59.495303), (35.2771, 59.50088), (34.892578, 60.267066), (34.343262, 59.517603), (32.947998, 59.506455)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.90553, 21.38668),(39.91034, 21.38608),(39.91834, 21.38048),(39.93078, 21.3627),(39.94141, 21.36278),(39.94753, 21.36075),(39.94986, 21.35894),(39.95349, 21.3533),(39.97833, 21.3815),(39.98132, 21.38231),(39.98851, 21.38151),(39.99076, 21.37747),(39.98987, 21.36908),(39.98791, 21.36332),(39.99543, 21.35687),(39.99827, 21.34722),(39.99784, 21.34271),(39.99632, 21.33955),(39.99322, 21.3366),(39.98908, 21.33496),(39.9692, 21.3331),(39.95841, 21.3388),(39.95109, 21.34412),(39.95026, 21.34825),(39.95203, 21.35168),(39.94753, 21.35845),(39.94165, 21.36077),(39.93272, 21.36009),(39.92969, 21.36103),(39.91928, 21.37669),(39.91374, 21.3816),(39.91056, 21.38296),(39.90839, 21.38361),(39.90059, 21.38257),(39.8978, 21.37712),(39.90051, 21.37335),(39.90033, 21.37195),(39.89559, 21.37533),(39.89099, 21.36937),(39.89101, 21.3661),(39.89465, 21.364),(39.92418, 21.35725),(39.92838, 21.35433),(39.94394, 21.33915),(39.96711, 21.32785),(39.97437, 21.32734),(39.99523, 21.33055),(40.01271, 21.3293),(40.01345, 21.3276),(40.00731, 21.32689),(39.99189, 21.32817),(39.97264, 21.3251),(39.96216, 21.32725),(39.95825, 21.32598),(39.95783, 21.32734),(39.96017, 21.32834),(39.94652, 21.33514),(39.94578, 21.33237),(39.94438, 21.33259),(39.94454, 21.33563),(39.92448, 21.3545),(39.92007, 21.3563),(39.89586, 21.3615),(39.86239, 21.35659),(39.85241, 21.35319),(39.85183, 21.35189),(39.84187, 21.3498),(39.83475, 21.35001),(39.82272, 21.35322),(39.80957, 21.34986),(39.80645, 21.34645),(39.80654, 21.34104),(39.82207, 21.29116),(39.82732, 21.26685),(39.82657, 21.22894),(39.82468, 21.22761),(39.82364, 21.22857),(39.82459, 21.22961),(39.82535, 21.26649),(39.82016, 21.29057),(39.81723, 21.29965),(39.81585, 21.30012),(39.81652, 21.30158),(39.81475, 21.30815),(39.80378, 21.34492),(39.8023, 21.34648),(39.79042, 21.34584),(39.78385, 21.34687),(39.77227, 21.34595),(39.7601, 21.34279),(39.73947, 21.34141),(39.71051, 21.34288),(39.70233, 21.34041),(39.68839, 21.33943),(39.65964, 21.33189),(39.64627, 21.3344),(39.64733, 21.33592),(39.65598, 21.33404),(39.66095, 21.33402),(39.68789, 21.34136),(39.70198, 21.34238),(39.71031, 21.34487),(39.74208, 21.34353),(39.76109, 21.34495),(39.77363, 21.34845),(39.77446, 21.35039),(39.76342, 21.37977),(39.75978, 21.39951),(39.75655, 21.40491),(39.73768, 21.39607),(39.72646, 21.38795),(39.71285, 21.3969),(39.69867, 21.37979),(39.66651, 21.36156),(39.6662, 21.36338),(39.69742, 21.38135),(39.7112, 21.39803),(39.70333, 21.40335),(39.70227, 21.40556),(39.70273, 21.40892),(39.71038, 21.41608),(39.71004, 21.42139),(39.68758, 21.414),(39.68099, 21.41398),(39.63179, 21.4366),(39.62927917729339, 21.43855995858338),(39.629299942421596, 21.44105336136311),(39.63273, 21.43836),(39.65768, 21.42753),(39.67404, 21.419),(39.6815, 21.41592),(39.68534, 21.41555),(39.7182, 21.42582),(39.72915, 21.4318),(39.72926, 21.43473),(39.72198, 21.45071),(39.72058, 21.46018),(39.72262, 21.46776),(39.72871, 21.47851),(39.73639, 21.48854),(39.73607, 21.50077),(39.73921, 21.50608),(39.74358, 21.50869),(39.77204, 21.51334),(39.78965, 21.51773),(39.78925, 21.52186),(39.77895, 21.53768),(39.77335, 21.55878),(39.77409, 21.55998),(39.77529, 21.55924),(39.78151, 21.53691),(39.79101, 21.52282),(39.79216, 21.51796),(39.79392, 21.51725),(39.793, 21.51609),(39.79416, 21.49641),(39.79816, 21.47216),(39.8004, 21.46856),(39.80363, 21.4669),(39.80549, 21.46717),(39.80785, 21.46483),(39.8079, 21.45844),(39.80961, 21.45125),(39.81407, 21.45956),(39.8189, 21.46404),(39.82568, 21.4678),(39.82961, 21.47351),(39.83079, 21.47799),(39.84122, 21.47849),(39.84401, 21.47583),(39.84423, 21.47113),(39.84321, 21.46813),(39.84421, 21.46059),(39.85356, 21.44251),(39.85688, 21.44231),(39.86433, 21.45155),(39.86762, 21.45385),(39.87655, 21.45623),(39.88419, 21.46034),(39.89153, 21.46165),(39.8939, 21.46349),(39.89668, 21.46326),(39.9075, 21.47496),(39.91921, 21.48088),(39.9355, 21.48404),(39.94435, 21.48781),(39.96608, 21.48881),(39.96569, 21.49663),(39.95135, 21.53005),(39.94352, 21.56004),(39.94384, 21.56417),(39.94803, 21.56766),(39.95376, 21.56964),(39.95497, 21.56891),(39.9538, 21.56747),(39.94686, 21.56478),(39.94534, 21.56123),(39.95324, 21.53069),(39.96782, 21.49652),(39.96808, 21.48868),(39.98958, 21.49423),(40.00615, 21.4944),(40.01566, 21.50406),(40.03305, 21.5127),(40.0475, 21.52172),(40.05278, 21.52274),(40.06051, 21.52124),(40.05971, 21.51952),(40.05217, 21.52052),(40.04866, 21.51978),(40.03052, 21.50875),(40.01631, 21.50181),(40.01014, 21.49459),(40.00619, 21.49215),(39.98995, 21.49206),(39.96952, 21.48658),(39.94485, 21.48571),(39.93748, 21.48246),(39.95107, 21.45666),(39.97348, 21.46578),(39.97479, 21.46523),(39.97424, 21.46392),(39.95217, 21.45495),(39.95444, 21.45202),(39.97071, 21.44272),(39.97127, 21.44141),(39.97007, 21.44065),(39.95381, 21.44976),(39.95007, 21.45407),(39.94121, 21.45146),(39.93089, 21.45021),(39.92173, 21.4449),(39.9164, 21.44366),(39.91152, 21.44104),(39.90446, 21.44019),(39.90416, 21.43717),(39.9067, 21.43268),(39.90657, 21.42875),(39.91121, 21.40898),(39.91566, 21.40698),(39.91675, 21.40517),(39.91627, 21.40045),(39.91407, 21.39734),(39.91949, 21.39132),(39.92673, 21.38963),(39.93267, 21.39089),(39.93373, 21.38995),(39.93279, 21.38889),(39.92676, 21.38762),(39.91905, 21.38931),(39.91251, 21.39595),(39.91173, 21.40041),(39.90949, 21.39663),(39.91172, 21.3928),(39.91031, 21.39269),(39.90798, 21.39493),(39.90668, 21.39219),(39.90882, 21.38887),(39.90768, 21.38803),(39.90505, 21.39084),(39.90417, 21.38841),(39.90553, 21.38668)], [(39.80978, 21.44779),(39.80994, 21.44566),(39.81007, 21.44487),(39.81053, 21.44265),(39.81116, 21.44264),(39.81154, 21.44256),(39.81225, 21.44226),(39.81248, 21.44211),(39.81366, 21.44109),(39.81384, 21.44099),(39.81679, 21.44037),(39.81781, 21.44011),(39.82104, 21.43947),(39.8222, 21.43916),(39.82287, 21.43891),(39.82379, 21.43843),(39.82508, 21.43789),(39.82657, 21.43749),(39.82684, 21.43737),(39.82727, 21.4371),(39.82865, 21.43639),(39.82907, 21.43623),(39.82934, 21.4363),(39.82961, 21.43628),(39.83008, 21.43695),(39.8317, 21.43866),(39.83196, 21.439),(39.83218, 21.43955),(39.8324, 21.43989),(39.83262, 21.44011),(39.83308, 21.44043),(39.83338, 21.44071),(39.83419, 21.44194),(39.83469, 21.44238),(39.83493, 21.44253),(39.83535, 21.44272),(39.83558, 21.44279),(39.83628, 21.44289),(39.83853, 21.44254),(39.83909, 21.44226),(39.8397, 21.44168),(39.83977, 21.44165),(39.84008, 21.44161),(39.84192, 21.44153),(39.843, 21.44143),(39.84509, 21.4411),(39.84799, 21.44052),(39.84946, 21.44019),(39.84981, 21.44021),(39.84994, 21.44025),(39.85134, 21.44181),(39.85116, 21.44253),(39.85117, 21.44267),(39.85047, 21.4439),(39.85008, 21.44479),(39.84952, 21.44592),(39.84796, 21.44857),(39.84741, 21.44971),(39.84589, 21.45357),(39.84554, 21.45432),(39.84375, 21.45712),(39.84259, 21.45929),(39.84225, 21.46015),(39.84203, 21.46152),(39.84189, 21.46327),(39.8414, 21.46556),(39.84112, 21.46739),(39.84112, 21.46789),(39.84122, 21.46847),(39.84135, 21.46887),(39.84146, 21.4691),(39.84191, 21.4698),(39.84204, 21.4701),(39.84217, 21.47069),(39.84223, 21.47113),(39.84204, 21.47546),(39.84198, 21.47572),(39.84187, 21.47595),(39.84166, 21.47621),(39.84137, 21.4764),(39.84125, 21.47644),(39.84102, 21.4765),(39.84071, 21.47651),(39.83664, 21.47574),(39.836, 21.4757),(39.83537, 21.47573),(39.83436, 21.47593),(39.83347, 21.47628),(39.83274, 21.47666),(39.83259, 21.47668),(39.83234, 21.47663),(39.83211, 21.47648),(39.83203, 21.4764),(39.83197, 21.47626),(39.83172, 21.47361),(39.83147, 21.47277),(39.83127, 21.4723),(39.83087, 21.47161),(39.82925, 21.46941),(39.82728, 21.4666),(39.82667, 21.46592),(39.82647, 21.46575),(39.82613, 21.46553),(39.82048, 21.46267),(39.82011, 21.46245),(39.81967, 21.46209),(39.81931, 21.46169),(39.81868, 21.46072),(39.81798, 21.45998),(39.81588, 21.45849),(39.81553, 21.45819),(39.81515, 21.45776),(39.81493, 21.45736),(39.81256, 21.45195),(39.8115, 21.45014),(39.81057, 21.44875),(39.80978, 21.44779)] );
SELECT pointInPolygon((39.840202, 21.451471), [(39.90553, 21.38668),(39.91034, 21.38608),(39.91834, 21.38048),(39.93078, 21.3627),(39.94141, 21.36278),(39.94753, 21.36075),(39.94986, 21.35894),(39.95349, 21.3533),(39.97833, 21.3815),(39.98132, 21.38231),(39.98851, 21.38151),(39.99076, 21.37747),(39.98987, 21.36908),(39.98791, 21.36332),(39.99543, 21.35687),(39.99827, 21.34722),(39.99784, 21.34271),(39.99632, 21.33955),(39.99322, 21.3366),(39.98908, 21.33496),(39.9692, 21.3331),(39.95841, 21.3388),(39.95109, 21.34412),(39.95026, 21.34825),(39.95203, 21.35168),(39.94753, 21.35845),(39.94165, 21.36077),(39.93272, 21.36009),(39.92969, 21.36103),(39.91928, 21.37669),(39.91374, 21.3816),(39.91056, 21.38296),(39.90839, 21.38361),(39.90059, 21.38257),(39.8978, 21.37712),(39.90051, 21.37335),(39.90033, 21.37195),(39.89559, 21.37533),(39.89099, 21.36937),(39.89101, 21.3661),(39.89465, 21.364),(39.92418, 21.35725),(39.92838, 21.35433),(39.94394, 21.33915),(39.96711, 21.32785),(39.97437, 21.32734),(39.99523, 21.33055),(40.01271, 21.3293),(40.01345, 21.3276),(40.00731, 21.32689),(39.99189, 21.32817),(39.97264, 21.3251),(39.96216, 21.32725),(39.95825, 21.32598),(39.95783, 21.32734),(39.96017, 21.32834),(39.94652, 21.33514),(39.94578, 21.33237),(39.94438, 21.33259),(39.94454, 21.33563),(39.92448, 21.3545),(39.92007, 21.3563),(39.89586, 21.3615),(39.86239, 21.35659),(39.85241, 21.35319),(39.85183, 21.35189),(39.84187, 21.3498),(39.83475, 21.35001),(39.82272, 21.35322),(39.80957, 21.34986),(39.80645, 21.34645),(39.80654, 21.34104),(39.82207, 21.29116),(39.82732, 21.26685),(39.82657, 21.22894),(39.82468, 21.22761),(39.82364, 21.22857),(39.82459, 21.22961),(39.82535, 21.26649),(39.82016, 21.29057),(39.81723, 21.29965),(39.81585, 21.30012),(39.81652, 21.30158),(39.81475, 21.30815),(39.80378, 21.34492),(39.8023, 21.34648),(39.79042, 21.34584),(39.78385, 21.34687),(39.77227, 21.34595),(39.7601, 21.34279),(39.73947, 21.34141),(39.71051, 21.34288),(39.70233, 21.34041),(39.68839, 21.33943),(39.65964, 21.33189),(39.64627, 21.3344),(39.64733, 21.33592),(39.65598, 21.33404),(39.66095, 21.33402),(39.68789, 21.34136),(39.70198, 21.34238),(39.71031, 21.34487),(39.74208, 21.34353),(39.76109, 21.34495),(39.77363, 21.34845),(39.77446, 21.35039),(39.76342, 21.37977),(39.75978, 21.39951),(39.75655, 21.40491),(39.73768, 21.39607),(39.72646, 21.38795),(39.71285, 21.3969),(39.69867, 21.37979),(39.66651, 21.36156),(39.6662, 21.36338),(39.69742, 21.38135),(39.7112, 21.39803),(39.70333, 21.40335),(39.70227, 21.40556),(39.70273, 21.40892),(39.71038, 21.41608),(39.71004, 21.42139),(39.68758, 21.414),(39.68099, 21.41398),(39.63179, 21.4366),(39.62927917729339, 21.43855995858338),(39.629299942421596, 21.44105336136311),(39.63273, 21.43836),(39.65768, 21.42753),(39.67404, 21.419),(39.6815, 21.41592),(39.68534, 21.41555),(39.7182, 21.42582),(39.72915, 21.4318),(39.72926, 21.43473),(39.72198, 21.45071),(39.72058, 21.46018),(39.72262, 21.46776),(39.72871, 21.47851),(39.73639, 21.48854),(39.73607, 21.50077),(39.73921, 21.50608),(39.74358, 21.50869),(39.77204, 21.51334),(39.78965, 21.51773),(39.78925, 21.52186),(39.77895, 21.53768),(39.77335, 21.55878),(39.77409, 21.55998),(39.77529, 21.55924),(39.78151, 21.53691),(39.79101, 21.52282),(39.79216, 21.51796),(39.79392, 21.51725),(39.793, 21.51609),(39.79416, 21.49641),(39.79816, 21.47216),(39.8004, 21.46856),(39.80363, 21.4669),(39.80549, 21.46717),(39.80785, 21.46483),(39.8079, 21.45844),(39.80961, 21.45125),(39.81407, 21.45956),(39.8189, 21.46404),(39.82568, 21.4678),(39.82961, 21.47351),(39.83079, 21.47799),(39.84122, 21.47849),(39.84401, 21.47583),(39.84423, 21.47113),(39.84321, 21.46813),(39.84421, 21.46059),(39.85356, 21.44251),(39.85688, 21.44231),(39.86433, 21.45155),(39.86762, 21.45385),(39.87655, 21.45623),(39.88419, 21.46034),(39.89153, 21.46165),(39.8939, 21.46349),(39.89668, 21.46326),(39.9075, 21.47496),(39.91921, 21.48088),(39.9355, 21.48404),(39.94435, 21.48781),(39.96608, 21.48881),(39.96569, 21.49663),(39.95135, 21.53005),(39.94352, 21.56004),(39.94384, 21.56417),(39.94803, 21.56766),(39.95376, 21.56964),(39.95497, 21.56891),(39.9538, 21.56747),(39.94686, 21.56478),(39.94534, 21.56123),(39.95324, 21.53069),(39.96782, 21.49652),(39.96808, 21.48868),(39.98958, 21.49423),(40.00615, 21.4944),(40.01566, 21.50406),(40.03305, 21.5127),(40.0475, 21.52172),(40.05278, 21.52274),(40.06051, 21.52124),(40.05971, 21.51952),(40.05217, 21.52052),(40.04866, 21.51978),(40.03052, 21.50875),(40.01631, 21.50181),(40.01014, 21.49459),(40.00619, 21.49215),(39.98995, 21.49206),(39.96952, 21.48658),(39.94485, 21.48571),(39.93748, 21.48246),(39.95107, 21.45666),(39.97348, 21.46578),(39.97479, 21.46523),(39.97424, 21.46392),(39.95217, 21.45495),(39.95444, 21.45202),(39.97071, 21.44272),(39.97127, 21.44141),(39.97007, 21.44065),(39.95381, 21.44976),(39.95007, 21.45407),(39.94121, 21.45146),(39.93089, 21.45021),(39.92173, 21.4449),(39.9164, 21.44366),(39.91152, 21.44104),(39.90446, 21.44019),(39.90416, 21.43717),(39.9067, 21.43268),(39.90657, 21.42875),(39.91121, 21.40898),(39.91566, 21.40698),(39.91675, 21.40517),(39.91627, 21.40045),(39.91407, 21.39734),(39.91949, 21.39132),(39.92673, 21.38963),(39.93267, 21.39089),(39.93373, 21.38995),(39.93279, 21.38889),(39.92676, 21.38762),(39.91905, 21.38931),(39.91251, 21.39595),(39.91173, 21.40041),(39.90949, 21.39663),(39.91172, 21.3928),(39.91031, 21.39269),(39.90798, 21.39493),(39.90668, 21.39219),(39.90882, 21.38887),(39.90768, 21.38803),(39.90505, 21.39084),(39.90417, 21.38841),(39.90553, 21.38668)], [(39.89317, 21.40473),(39.8952, 21.40371),(39.89574, 21.40332),(39.89629, 21.40285),(39.89739, 21.40172),(39.89925, 21.39916),(39.90055, 21.39718),(39.90145, 21.39501),(39.90173, 21.39491),(39.90189, 21.3948),(39.90252, 21.39409),(39.90289, 21.39384),(39.90396, 21.3934),(39.90422, 21.39338),(39.90436, 21.39343),(39.9044, 21.39349),(39.90404, 21.39369),(39.9037, 21.39396),(39.90351, 21.39416),(39.90319, 21.39463),(39.9027, 21.39571),(39.90267, 21.3959),(39.90268, 21.3961),(39.90281, 21.39646),(39.90293, 21.39662),(39.90307, 21.39675),(39.90324, 21.39685),(39.90362, 21.39695),(39.90382, 21.39694),(39.90418, 21.39681),(39.90447, 21.39655),(39.90505, 21.39544),(39.90523, 21.39531),(39.90547, 21.39528),(39.90556, 21.39529),(39.90572, 21.39537),(39.90592, 21.39552),(39.90662, 21.39645),(39.906, 21.39651),(39.9052, 21.39665),(39.90396, 21.39711),(39.90363, 21.39731),(39.9035, 21.39746),(39.90341, 21.39763),(39.90332, 21.39801),(39.90313, 21.39836),(39.90309, 21.39856),(39.90308, 21.39875),(39.90312, 21.39895),(39.90329, 21.39929),(39.90343, 21.39944),(39.90376, 21.39963),(39.90415, 21.39968),(39.90743, 21.39882),(39.90786, 21.39882),(39.90822, 21.39894),(39.9085, 21.39911),(39.90876, 21.39934),(39.9095, 21.40036),(39.90976, 21.40084),(39.90998, 21.40146),(39.91019, 21.40247),(39.90991, 21.40276),(39.90931, 21.40349),(39.90896, 21.40373),(39.90674, 21.40608),(39.90348, 21.40934),(39.9024, 21.41059),(39.90214, 21.4108),(39.90157, 21.41114),(39.90101, 21.41142),(39.90053, 21.41156),(39.90001, 21.41165),(39.89952, 21.41166),(39.89816, 21.41146),(39.89719, 21.4114),(39.8962, 21.41124),(39.89535, 21.41126),(39.89484, 21.41133),(39.89435, 21.41148),(39.89405, 21.41163),(39.89166, 21.4077),(39.89109, 21.40671),(39.89172, 21.4064),(39.89219, 21.40606),(39.89252, 21.40568),(39.89317, 21.40473)], [(39.89411, 21.37812),(39.89305, 21.37935),(39.89229, 21.38007),(39.89129, 21.38085),(39.88637, 21.38398),(39.88501, 21.38505),(39.88428, 21.38581),(39.87665, 21.38344),(39.87669, 21.38209),(39.87721, 21.38049),(39.87864, 21.37771),(39.8796, 21.37629),(39.88162, 21.37426),(39.88637, 21.36994),(39.88657, 21.36988),(39.88706, 21.37),(39.88876, 21.37081),(39.88896, 21.37101),(39.89013, 21.37233),(39.89156, 21.37426),(39.89332, 21.37678),(39.89411, 21.37812)], [(39.87603, 21.38534),(39.88308, 21.38753),(39.88293, 21.38778),(39.88223, 21.38927),(39.88216, 21.3895),(39.88185, 21.39103),(39.88178, 21.39207),(39.88187, 21.39333),(39.8821, 21.39461),(39.88234, 21.39542),(39.88273, 21.39643),(39.88352, 21.39787),(39.87797, 21.4004),(39.87743, 21.40069),(39.87678, 21.4011),(39.87442, 21.40281),(39.87359, 21.40173),(39.87299, 21.40077),(39.87076, 21.39685),(39.87013, 21.39591),(39.8696, 21.39535),(39.8714, 21.39394),(39.87198, 21.39344),(39.87254, 21.39286),(39.87317, 21.39206),(39.87356, 21.39139),(39.87399, 21.39041),(39.87552, 21.3857),(39.87573, 21.38561),(39.87603, 21.38534)], [(39.8728, 21.40398),(39.86889, 21.40686),(39.86188, 21.41407),(39.8567, 21.41973),(39.85571, 21.42095),(39.85474, 21.4207),(39.85357, 21.42055),(39.8571, 21.4159),(39.8598, 21.4115),(39.86247, 21.40702),(39.86312, 21.40575),(39.86566, 21.39964),(39.86637, 21.39829),(39.86702, 21.39748),(39.86801, 21.39659),(39.86852, 21.39711),(39.86908, 21.39794),(39.87126, 21.40177),(39.87192, 21.40283),(39.8728, 21.40398)], [(39.85537, 21.42292),(39.85579, 21.42569),(39.85581, 21.42611),(39.85559, 21.4266),(39.85335, 21.42856),(39.85159, 21.43039),(39.85001, 21.43114),(39.84921, 21.43092),(39.84693, 21.42992),(39.84558, 21.42953),(39.84158, 21.42902),(39.83488, 21.42846),(39.83661, 21.42511),(39.8371, 21.42353),(39.84406, 21.42267),(39.84527, 21.4226),(39.85309, 21.42252),(39.85438, 21.42267),(39.85537, 21.42292)], [(39.84628, 21.43181),(39.84808, 21.43261),(39.84783, 21.43302),(39.84618, 21.43694),(39.84577, 21.43776),(39.84437, 21.43886),(39.84394, 21.43902),(39.84241, 21.43929),(39.84185, 21.43935),(39.8414, 21.43937),(39.83966, 21.43925),(39.83928, 21.4393),(39.83876, 21.43957),(39.83857, 21.43971),(39.8382, 21.44005),(39.83781, 21.44051),(39.83637, 21.44071),(39.83611, 21.4407),(39.83599, 21.44066),(39.83589, 21.44058),(39.83584, 21.44048),(39.83575, 21.43989),(39.83567, 21.43963),(39.83545, 21.43919),(39.83508, 21.4388),(39.83491, 21.4387),(39.83472, 21.43864),(39.83453, 21.43861),(39.83433, 21.43862),(39.83409, 21.4387),(39.83396, 21.43862),(39.83377, 21.43814),(39.83364, 21.43792),(39.83319, 21.43732),(39.83279, 21.43689),(39.83253, 21.43633),(39.8323, 21.43541),(39.83224, 21.43523),(39.83214, 21.43506),(39.83189, 21.43474),(39.83144, 21.43432),(39.83111, 21.43413),(39.8305, 21.43392),(39.82999, 21.43269),(39.83002, 21.43255),(39.82998, 21.43209),(39.83109, 21.43171),(39.8318, 21.43138),(39.83234, 21.43109),(39.83301, 21.43064),(39.83338, 21.43032),(39.83365, 21.43037),(39.84139, 21.43101),(39.8432, 21.43126),(39.84419, 21.43134),(39.84517, 21.43149),(39.84628, 21.43181)], [(39.83035, 21.42986),(39.8304, 21.42866),(39.83018, 21.42818),(39.83125, 21.42753),(39.83199, 21.42688),(39.83261, 21.42604),(39.83342, 21.42459),(39.83365, 21.42395),(39.83444, 21.42391),(39.83496, 21.4238),(39.83479, 21.42429),(39.83281, 21.42802),(39.83184, 21.42901),(39.83126, 21.4294),(39.83035, 21.42986)], [(39.82819, 21.42907),(39.82814, 21.4304),(39.82488, 21.43059),(39.82445, 21.43066),(39.82337, 21.43101),(39.82191, 21.43183),(39.82049, 21.43295),(39.81955, 21.43393),(39.81912, 21.43421),(39.81892, 21.4343),(39.81862, 21.43437),(39.81829, 21.4344),(39.81774, 21.43434),(39.81632, 21.43374),(39.81706, 21.43236),(39.81724, 21.4319),(39.81748, 21.43143),(39.81812, 21.43039),(39.81845, 21.42992),(39.81919, 21.42907),(39.81933, 21.42884),(39.81964, 21.4281),(39.82006, 21.42826),(39.82103, 21.4285),(39.82135, 21.42873),(39.82154, 21.42879),(39.82284, 21.42907),(39.82412, 21.42923),(39.8253, 21.42933),(39.82659, 21.42933),(39.8273, 21.42926),(39.82819, 21.42907)], [(39.82779, 21.43244),(39.82826, 21.43377),(39.82849, 21.43431),(39.82776, 21.4346),(39.82626, 21.43537),(39.82591, 21.43559),(39.8245, 21.43597),(39.82298, 21.4366),(39.822, 21.43711),(39.82165, 21.43723),(39.82055, 21.43753),(39.81734, 21.43816),(39.81631, 21.43843),(39.81333, 21.43905),(39.81312, 21.43912),(39.81267, 21.43934),(39.81245, 21.4395),(39.81128, 21.4405),(39.81094, 21.44064),(39.81165, 21.43717),(39.81218, 21.43422),(39.81403, 21.43504),(39.81432, 21.4353),(39.8145, 21.43538),(39.81489, 21.43543),(39.81499, 21.43547),(39.81655, 21.4363),(39.81714, 21.4365),(39.81776, 21.43662),(39.81815, 21.43662),(39.81834, 21.43656),(39.81861, 21.43638),(39.81889, 21.43636),(39.81948, 21.43622),(39.82014, 21.43593),(39.82092, 21.4354),(39.82179, 21.43448),(39.82309, 21.43346),(39.82425, 21.43281),(39.82484, 21.43263),(39.82515, 21.43258),(39.82779, 21.43244)], [(39.8207, 21.42636),(39.82125, 21.42508),(39.82206, 21.42403),(39.82275, 21.42279),(39.82346, 21.42235),(39.82418, 21.42178),(39.82499, 21.42142),(39.8265, 21.42122),(39.83136, 21.42199),(39.83197, 21.42264),(39.83163, 21.4237),(39.8309, 21.425),(39.83051, 21.42553),(39.83031, 21.42574),(39.82948, 21.42628),(39.828, 21.42705),(39.82644, 21.42733),(39.8243, 21.42724),(39.82267, 21.42698),(39.82214, 21.42669),(39.8207, 21.42636)], [(39.82102, 21.42106),(39.82062, 21.42128),(39.82017, 21.42162),(39.8194, 21.42239),(39.81905, 21.4228),(39.81802, 21.42299),(39.8179, 21.42265),(39.81779, 21.42189),(39.8176, 21.42155),(39.81729, 21.42131),(39.81711, 21.42124),(39.81692, 21.4212),(39.81653, 21.42125),(39.81619, 21.42144),(39.81595, 21.42175),(39.81588, 21.42193),(39.81584, 21.42212),(39.81585, 21.42232),(39.81597, 21.42319),(39.81504, 21.42328),(39.81423, 21.42329),(39.80999, 21.42266),(39.80755, 21.42223),(39.80737, 21.42203),(39.80706, 21.42179),(39.80695, 21.42166),(39.80685, 21.42142),(39.80686, 21.42123),(39.80695, 21.42105),(39.80755, 21.42041),(39.80768, 21.42022),(39.80789, 21.41962),(39.80793, 21.41935),(39.80801, 21.41519),(39.80809, 21.41439),(39.80827, 21.41351),(39.80867, 21.41233),(39.80881, 21.41233),(39.80924, 21.41409),(39.80931, 21.41428),(39.80941, 21.41444),(39.80969, 21.41471),(39.81006, 21.41484),(39.81026, 21.41485),(39.81064, 21.41475),(39.81095, 21.41452),(39.81107, 21.41437),(39.8112, 21.414),(39.81121, 21.4138),(39.81118, 21.41361),(39.81088, 21.41239),(39.81311, 21.41248),(39.81908, 21.41249),(39.8197, 21.41244),(39.82006, 21.41251),(39.8204, 21.41251),(39.8209, 21.41367),(39.82144, 21.41481),(39.82169, 21.41562),(39.82182, 21.4166),(39.82176, 21.41785),(39.81945, 21.41827),(39.81851, 21.41855),(39.8182, 21.41879),(39.81809, 21.41895),(39.81801, 21.41913),(39.81796, 21.41951),(39.81807, 21.41989),(39.81831, 21.4202),(39.81865, 21.42039),(39.81884, 21.42043),(39.81903, 21.42044),(39.81994, 21.42021),(39.82154, 21.41992),(39.82154, 21.41997),(39.82102, 21.42106)], [(39.81069, 21.41022),(39.81115, 21.40581),(39.8114, 21.4056),(39.81159, 21.40525),(39.81163, 21.40487),(39.81157, 21.40426),(39.81209, 21.40103),(39.81211, 21.39966),(39.81193, 21.39818),(39.81097, 21.39505),(39.8115, 21.39475),(39.81252, 21.39399),(39.8134, 21.39321),(39.81416, 21.39245),(39.81607, 21.38983),(39.81662, 21.38928),(39.81728, 21.38874),(39.81819, 21.38814),(39.81928, 21.38768),(39.82014, 21.38742),(39.82059, 21.38733),(39.82164, 21.38725),(39.82287, 21.38723),(39.82462, 21.3871),(39.82443, 21.38782),(39.82441, 21.38855),(39.82457, 21.39047),(39.82464, 21.39192),(39.82479, 21.3973),(39.82485, 21.3976),(39.82514, 21.39842),(39.82525, 21.39865),(39.8258, 21.39947),(39.82635, 21.4),(39.82679, 21.40031),(39.82736, 21.40062),(39.82928, 21.40137),(39.82948, 21.40151),(39.82914, 21.40441),(39.82897, 21.40551),(39.8282, 21.40889),(39.82795, 21.41023),(39.82696, 21.41),(39.82658, 21.40996),(39.82664, 21.40825),(39.82658, 21.40787),(39.82649, 21.40769),(39.82622, 21.40741),(39.82605, 21.40731),(39.82567, 21.40722),(39.82529, 21.40728),(39.82511, 21.40737),(39.82483, 21.40764),(39.82473, 21.40781),(39.82464, 21.40819),(39.82458, 21.41008),(39.8235, 21.41017),(39.82153, 21.41019),(39.82001, 21.40827),(39.81977, 21.40778),(39.81909, 21.40579),(39.81879, 21.40505),(39.81827, 21.40417),(39.81699, 21.40224),(39.8159, 21.4008),(39.81463, 21.39957),(39.8141, 21.39915),(39.81392, 21.39908),(39.81353, 21.39903),(39.81316, 21.39914),(39.81299, 21.39925),(39.81274, 21.39955),(39.81267, 21.39973),(39.81262, 21.40012),(39.81273, 21.40049),(39.81284, 21.40066),(39.81298, 21.4008),(39.81326, 21.40103),(39.81445, 21.40218),(39.81537, 21.40342),(39.81656, 21.40521),(39.81696, 21.40588),(39.81722, 21.40652),(39.81794, 21.4086),(39.81826, 21.40925),(39.81898, 21.41019),(39.81328, 21.41012),(39.81218, 21.41014),(39.81134, 21.41021),(39.81069, 21.41022)], [(39.80999, 21.39018),(39.80983, 21.38939),(39.80816, 21.38343),(39.80609, 21.3751),(39.80867, 21.37472),(39.80969, 21.37875),(39.81147, 21.38151),(39.81202, 21.38214),(39.81339, 21.38345),(39.81628, 21.38612),(39.81677, 21.38646),(39.81575, 21.38713),(39.81478, 21.38799),(39.81395, 21.38898),(39.81265, 21.39076),(39.81228, 21.39111),(39.8121, 21.3912),(39.81181, 21.39121),(39.81033, 21.39058),(39.80999, 21.39018)], [(39.81909, 21.38545),(39.8181, 21.38496),(39.81759, 21.3846),(39.81476, 21.382),(39.81349, 21.38079),(39.81311, 21.38035),(39.81153, 21.37795),(39.81145, 21.37773),(39.81046, 21.37363),(39.81038, 21.37341),(39.81025, 21.37321),(39.80995, 21.37288),(39.80962, 21.3727),(39.80925, 21.37265),(39.80899, 21.37265),(39.80561, 21.37315),(39.80517, 21.37139),(39.80492, 21.37068),(39.80504, 21.37048),(39.8051, 21.37031),(39.80521, 21.36975),(39.8052, 21.36955),(39.80506, 21.36919),(39.80494, 21.36903),(39.80441, 21.36603),(39.80411, 21.36492),(39.80356, 21.36191),(39.80349, 21.36116),(39.80345, 21.35965),(39.80349, 21.35894),(39.80411, 21.35504),(39.80433, 21.35476),(39.80482, 21.35383),(39.80553, 21.35304),(39.8063, 21.35252),(39.80724, 21.35222),(39.80825, 21.35217),(39.80932, 21.35231),(39.81637, 21.35445),(39.81856, 21.35504),(39.82046, 21.35546),(39.82287, 21.35558),(39.82421, 21.35536),(39.82613, 21.35492),(39.83433, 21.35261),(39.83656, 21.35216),(39.83834, 21.35188),(39.83936, 21.35182),(39.84169, 21.3521),(39.84381, 21.35252),(39.84777, 21.35391),(39.84887, 21.35434),(39.84773, 21.35594),(39.84744, 21.35628),(39.84524, 21.35927),(39.83253, 21.37661),(39.8295, 21.38077),(39.82857, 21.38214),(39.82833, 21.38244),(39.82791, 21.38279),(39.82744, 21.38324),(39.82631, 21.3845),(39.82551, 21.38473),(39.82438, 21.38494),(39.82041, 21.38516),(39.81948, 21.38534),(39.81909, 21.38545)], [(39.80215, 21.35462),(39.8015, 21.35868),(39.80145, 21.35959),(39.80149, 21.36132),(39.80157, 21.36215),(39.80215, 21.36532),(39.80244, 21.36642),(39.80274, 21.36813),(39.79915, 21.3652),(39.79798, 21.36406),(39.79715, 21.36315),(39.79586, 21.36153),(39.79496, 21.36019),(39.79359, 21.35827),(39.79297, 21.35753),(39.79128, 21.35568),(39.79053, 21.35503),(39.78825, 21.35321),(39.78735, 21.35255),(39.78586, 21.35172),(39.78394, 21.35084),(39.78351, 21.35055),(39.78399, 21.34968),(39.78415, 21.34951),(39.78515, 21.34915),(39.78558, 21.34906),(39.78718, 21.34859),(39.78801, 21.34846),(39.78885, 21.34839),(39.78982, 21.34822),(39.79322, 21.3482),(39.79564, 21.34849),(39.79835, 21.34916),(39.79957, 21.34986),(39.80019, 21.35029),(39.80071, 21.35078),(39.80117, 21.35137),(39.80155, 21.35202),(39.80187, 21.35285),(39.80206, 21.35367),(39.80209, 21.35432),(39.80215, 21.35462)], [(39.779, 21.35047),(39.78, 21.35119),(39.78099, 21.35171),(39.78492, 21.35348),(39.78632, 21.35426),(39.78702, 21.35478),(39.78924, 21.35656),(39.78993, 21.35716),(39.79145, 21.35883),(39.79203, 21.35952),(39.79333, 21.36134),(39.79427, 21.36274),(39.79565, 21.36447),(39.79656, 21.36548),(39.79779, 21.36667),(39.80229, 21.37034),(39.80218, 21.37053),(39.80167, 21.37113),(39.80041, 21.37248),(39.79975, 21.3731),(39.79894, 21.37373),(39.79827, 21.37413),(39.79698, 21.37475),(39.79643, 21.37496),(39.79558, 21.37521),(39.79529, 21.37422),(39.79478, 21.3732),(39.79409, 21.37214),(39.79351, 21.37149),(39.793, 21.37101),(39.79201, 21.37035),(39.79122, 21.36997),(39.79048, 21.36972),(39.7891, 21.36947),(39.7887, 21.36944),(39.78832, 21.36949),(39.78814, 21.36957),(39.78784, 21.36982),(39.78767, 21.37017),(39.78763, 21.37037),(39.78718, 21.375),(39.78467, 21.37478),(39.78431, 21.37488),(39.78402, 21.37511),(39.78391, 21.37526),(39.78378, 21.3756),(39.78245, 21.38285),(39.78231, 21.38317),(39.78211, 21.38348),(39.77952, 21.38561),(39.77935, 21.38579),(39.77889, 21.38643),(39.77608, 21.391),(39.77578, 21.39181),(39.77555, 21.39291),(39.77492, 21.39694),(39.76541, 21.3964),(39.76273, 21.39622),(39.76342, 21.3915),(39.76482, 21.38563),(39.76512, 21.38401),(39.76545, 21.38126),(39.76562, 21.38041),(39.76602, 21.37916),(39.76859, 21.37278),(39.76972, 21.36938),(39.77036, 21.36686),(39.77091, 21.36513),(39.77314, 21.35887),(39.77478, 21.35448),(39.77517, 21.35368),(39.77568, 21.35293),(39.77631, 21.35217),(39.77681, 21.35168),(39.77761, 21.3511),(39.77831, 21.35073),(39.779, 21.35047)], [(39.76244, 21.39846),(39.76255, 21.39821),(39.76528, 21.3984),(39.77595, 21.399),(39.77653, 21.39906),(39.78224, 21.39999),(39.78304, 21.40016),(39.78406, 21.40081),(39.78349, 21.40178),(39.78316, 21.40249),(39.78263, 21.40405),(39.78258, 21.40444),(39.78267, 21.40478),(39.78245, 21.40582),(39.78226, 21.407),(39.78167, 21.40978),(39.78069, 21.41362),(39.77994, 21.41671),(39.77776, 21.41693),(39.77732, 21.41693),(39.7769, 21.41689),(39.77624, 21.41674),(39.77593, 21.41661),(39.773, 21.41486),(39.77164, 21.41423),(39.76892, 21.41344),(39.76744, 21.41319),(39.76656, 21.41312),(39.76083, 21.41289),(39.7596, 21.41288),(39.75858, 21.41283),(39.756, 21.4126),(39.75567, 21.41255),(39.75472, 21.41221),(39.75448, 21.41203),(39.7544, 21.41191),(39.75435, 21.41171),(39.75437, 21.41133),(39.75446, 21.41111),(39.75488, 21.41038),(39.75712, 21.40804),(39.75802, 21.40692),(39.75933, 21.40518),(39.7607, 21.40297),(39.76127, 21.40197),(39.76186, 21.40076),(39.76209, 21.40008),(39.76228, 21.39934),(39.76244, 21.39846)], [(39.78571, 21.4023),(39.78613, 21.40226),(39.78735, 21.40325),(39.78684, 21.40459),(39.78685, 21.40595),(39.78943, 21.41476),(39.79045, 21.41882),(39.79071, 21.41927),(39.79203, 21.42035),(39.7921, 21.42071),(39.79178, 21.42117),(39.79074, 21.42159),(39.7902, 21.42203),(39.78993, 21.42249),(39.78974, 21.42357),(39.78774, 21.42363),(39.78577, 21.42328),(39.78521, 21.42357),(39.78486, 21.42441),(39.78493, 21.42495),(39.78537, 21.42543),(39.78674, 21.42583),(39.7884, 21.42607),(39.78817, 21.42683),(39.7881, 21.428),(39.78914, 21.43215),(39.7889, 21.43869),(39.78737, 21.43877),(39.78262, 21.43967),(39.78006, 21.43961),(39.77771, 21.43792),(39.77742, 21.43637),(39.77739, 21.43356),(39.77763, 21.4322),(39.77929, 21.42676),(39.78007, 21.42488),(39.78048, 21.42431),(39.78176, 21.42346),(39.78296, 21.42427),(39.78354, 21.42436),(39.78438, 21.42393),(39.78469, 21.42344),(39.78459, 21.42268),(39.78345, 21.42155),(39.78336, 21.41933),(39.78243, 21.41679),(39.78242, 21.41498),(39.78361, 21.41026),(39.78458, 21.40542),(39.78489, 21.40468),(39.7849, 21.40411),(39.78571, 21.4023)], [(39.77052, 21.43821),(39.76961, 21.43812),(39.76832, 21.4382),(39.76767, 21.43829),(39.76811, 21.43749),(39.76863, 21.4368),(39.76943, 21.43601),(39.77156, 21.43438),(39.77239, 21.43353),(39.77295, 21.43277),(39.77411, 21.43069),(39.7749, 21.42952),(39.77558, 21.42859),(39.77673, 21.42736),(39.77594, 21.42991),(39.77575, 21.4307),(39.77542, 21.43177),(39.77522, 21.43286),(39.77508, 21.43432),(39.77509, 21.43554),(39.77488, 21.43577),(39.77474, 21.43605),(39.77467, 21.43622),(39.77444, 21.43711),(39.77419, 21.43754),(39.77404, 21.43771),(39.77377, 21.43791),(39.77352, 21.43805),(39.77287, 21.43824),(39.77085, 21.43816),(39.77052, 21.43821)], [(39.77683, 21.42438),(39.77605, 21.425),(39.77496, 21.42603),(39.7739, 21.42729),(39.77313, 21.42836),(39.77185, 21.4304),(39.77114, 21.43164),(39.77043, 21.4325),(39.76964, 21.4332),(39.76827, 21.43424),(39.76732, 21.43509),(39.76667, 21.43583),(39.76622, 21.43647),(39.76497, 21.43865),(39.76336, 21.43887),(39.76248, 21.43875),(39.76215, 21.43863),(39.75945, 21.4361),(39.75799, 21.43499),(39.75779, 21.43487),(39.75661, 21.43435),(39.75139, 21.43268),(39.75032, 21.43203),(39.74784, 21.42997),(39.74759, 21.42982),(39.74683, 21.4295),(39.74612, 21.42931),(39.74467, 21.42912),(39.74448, 21.42896),(39.7443, 21.42888),(39.74194, 21.4285),(39.74145, 21.42827),(39.74102, 21.42776),(39.7407, 21.42681),(39.74058, 21.42589),(39.74083, 21.42453),(39.74184, 21.4225),(39.74313, 21.42067),(39.74414, 21.41962),(39.74463, 21.41918),(39.74722, 21.41719),(39.74816, 21.41667),(39.75131, 21.41514),(39.7528, 21.4143),(39.7546, 21.41468),(39.75722, 21.41503),(39.7665, 21.41541),(39.76768, 21.41554),(39.7691, 21.41584),(39.77057, 21.41631),(39.77193, 21.41692),(39.77339, 21.41779),(39.7742, 21.41838),(39.77635, 21.41978),(39.77611, 21.41999),(39.77594, 21.42034),(39.77589, 21.42086),(39.77591, 21.42111),(39.77604, 21.42177),(39.77613, 21.42203),(39.77649, 21.42272),(39.77693, 21.42331),(39.77708, 21.42367),(39.77707, 21.42393),(39.77683, 21.42438)], [(39.73364, 21.42933),(39.73324, 21.42934),(39.72777, 21.42885),(39.72661, 21.42861),(39.72586, 21.42833),(39.71975, 21.42438),(39.71903, 21.424),(39.71198, 21.42198),(39.71237, 21.41843),(39.71241, 21.4169),(39.71237, 21.41582),(39.71224, 21.4153),(39.71207, 21.41499),(39.71028, 21.41276),(39.70957, 21.412),(39.70914, 21.4116),(39.70794, 21.41071),(39.70769, 21.41057),(39.70642, 21.41012),(39.70575, 21.40943),(39.70451, 21.40799),(39.70442, 21.40779),(39.70426, 21.40579),(39.70437, 21.4053),(39.70468, 21.40483),(39.70531, 21.40433),(39.71243, 21.39961),(39.7206, 21.41007),(39.72131, 21.41077),(39.72202, 21.41134),(39.72276, 21.41188),(39.72424, 21.41269),(39.72578, 21.41323),(39.72663, 21.41346),(39.72741, 21.41357),(39.72886, 21.41366),(39.73014, 21.4136),(39.7346, 21.41323),(39.73624, 21.41339),(39.73895, 21.41313),(39.74098, 21.41303),(39.74174, 21.41319),(39.74348, 21.41408),(39.74416, 21.41454),(39.74445, 21.41478),(39.74463, 21.41504),(39.74467, 21.41523),(39.74465, 21.41565),(39.74447, 21.41608),(39.74416, 21.41649),(39.74239, 21.41799),(39.74121, 21.41922),(39.74065, 21.41993),(39.73973, 21.42137),(39.73894, 21.42307),(39.7385, 21.42385),(39.73799, 21.42463),(39.73672, 21.42624),(39.73364, 21.42933)], [(39.71409, 21.39848),(39.7259, 21.39043),(39.72856, 21.39237),(39.72897, 21.39258),(39.72946, 21.39268),(39.72985, 21.39281),(39.73553, 21.39698),(39.73563, 21.39707),(39.73609, 21.39767),(39.73676, 21.39815),(39.74249, 21.40142),(39.743, 21.40162),(39.74336, 21.40168),(39.7445, 21.40156),(39.74465, 21.40162),(39.74535, 21.40201),(39.74586, 21.40221),(39.74731, 21.4031),(39.75127, 21.4053),(39.75207, 21.40561),(39.75415, 21.40664),(39.75489, 21.40686),(39.75501, 21.40693),(39.75368, 21.40835),(39.75296, 21.4087),(39.75071, 21.40918),(39.74696, 21.41005),(39.74601, 21.41024),(39.74227, 21.41003),(39.74019, 21.41017),(39.73721, 21.41052),(39.73608, 21.41079),(39.73591, 21.41089),(39.73567, 21.41113),(39.72999, 21.4116),(39.72892, 21.41166),(39.72757, 21.41157),(39.72697, 21.41149),(39.72641, 21.41133),(39.7251, 21.41088),(39.72389, 21.41023),(39.72326, 21.40977),(39.72261, 21.40924),(39.72205, 21.40869),(39.71409, 21.39848)], [(39.7457, 21.43127),(39.74624, 21.43142),(39.74667, 21.4316),(39.7491, 21.43362),(39.75045, 21.43445),(39.75067, 21.43455),(39.75586, 21.43621),(39.75688, 21.43666),(39.75811, 21.43759),(39.7606, 21.43995),(39.76102, 21.44029),(39.76115, 21.44038),(39.76188, 21.44066),(39.7621, 21.44072),(39.76323, 21.44087),(39.76349, 21.44087),(39.76572, 21.44057),(39.76592, 21.44058),(39.76625, 21.4405),(39.76848, 21.4402),(39.76965, 21.44012),(39.77019, 21.44018),(39.77471, 21.44129),(39.77662, 21.44142),(39.77705, 21.44257),(39.77753, 21.44343),(39.77792, 21.444),(39.77863, 21.44489),(39.77936, 21.44567),(39.7797, 21.44597),(39.7803, 21.44638),(39.78107, 21.44684),(39.7823, 21.4475),(39.78364, 21.44835),(39.78622, 21.45028),(39.78775, 21.45163),(39.78853, 21.45236),(39.79426, 21.45875),(39.79488, 21.45938),(39.79706, 21.46135),(39.79869, 21.4625),(39.80185, 21.46439),(39.80201, 21.46461),(39.80207, 21.46475),(39.80206, 21.46486),(39.80187, 21.46508),(39.79992, 21.4663),(39.79979, 21.46644),(39.79968, 21.46663),(39.79914, 21.467),(39.79814, 21.46788),(39.79751, 21.46867),(39.79695, 21.46959),(39.79658, 21.47045),(39.79623, 21.47164),(39.7932, 21.48709),(39.79286, 21.48954),(39.79217, 21.49622),(39.79191, 21.49914),(39.79191, 21.50009),(39.79167, 21.502),(39.79039, 21.5155),(39.7749, 21.51163),(39.77208, 21.51099),(39.7654, 21.51023),(39.74443, 21.5064),(39.74326, 21.50603),(39.74213, 21.50544),(39.74139, 21.50491),(39.74068, 21.50419),(39.7399, 21.50329),(39.73911, 21.50203),(39.73868, 21.50103),(39.73842, 21.49995),(39.73826, 21.49836),(39.73919, 21.49113),(39.73916, 21.48952),(39.73895, 21.48839),(39.73888, 21.48816),(39.73839, 21.4871),(39.73787, 21.4862),(39.73693, 21.48477),(39.73567, 21.48348),(39.73286, 21.48021),(39.73059, 21.47715),(39.72508, 21.46749),(39.72433, 21.46585),(39.72302, 21.46073),(39.72287, 21.45961),(39.72278, 21.45841),(39.72284, 21.45738),(39.72295, 21.45633),(39.72389, 21.45255),(39.72481, 21.45005),(39.73039, 21.43827),(39.7314, 21.43644),(39.73183, 21.43594),(39.73214, 21.43568),(39.73369, 21.43469),(39.73481, 21.43411),(39.73548, 21.43368),(39.73637, 21.433),(39.73709, 21.43238),(39.73785, 21.43181),(39.73821, 21.43158),(39.73856, 21.43144),(39.73898, 21.43133),(39.73951, 21.43126),(39.74295, 21.43112),(39.7457, 21.43127)], [(39.7791, 21.44156),(39.77939, 21.44157),(39.78003, 21.44187),(39.78046, 21.442),(39.78123, 21.44207),(39.78208, 21.44195),(39.78301, 21.44163),(39.78764, 21.44075),(39.78822, 21.44077),(39.78917, 21.44068),(39.79022, 21.44082),(39.7976, 21.44116),(39.7978, 21.44115),(39.79799, 21.4411),(39.79933, 21.44116),(39.79964, 21.44126),(39.80102, 21.44147),(39.80255, 21.44181),(39.80419, 21.4421),(39.80647, 21.44221),(39.80682, 21.44216),(39.80854, 21.4424),(39.8081, 21.44453),(39.80796, 21.44538),(39.8078, 21.44743),(39.80767, 21.44769),(39.80763, 21.44789),(39.80767, 21.44828),(39.80774, 21.44843),(39.80761, 21.45109),(39.80736, 21.4538),(39.80599, 21.45785),(39.8059, 21.45822),(39.80589, 21.45902),(39.80592, 21.45926),(39.80609, 21.45985),(39.80634, 21.46041),(39.80595, 21.46096),(39.8057, 21.46124),(39.8038, 21.46239),(39.80349, 21.46246),(39.80322, 21.46244),(39.79996, 21.46056),(39.79871, 21.45967),(39.79745, 21.45865),(39.79647, 21.45779),(39.79588, 21.4572),(39.78985, 21.45056),(39.78754, 21.44849),(39.7862, 21.44745),(39.78483, 21.44646),(39.78342, 21.44554),(39.78147, 21.44446),(39.78087, 21.44401),(39.77967, 21.44266),(39.7791, 21.44156)], [(39.93436, 21.4816),(39.93241, 21.48133),(39.92917, 21.48071),(39.92795, 21.48063),(39.92391, 21.48004),(39.92213, 21.47963),(39.92017, 21.47891),(39.91245, 21.47545),(39.91099, 21.47469),(39.9098, 21.47394),(39.90843, 21.47286),(39.90708, 21.4716),(39.90445, 21.46837),(39.90205, 21.46552),(39.90002, 21.46344),(39.89957, 21.4628),(39.8993, 21.46223),(39.89803, 21.45836),(39.898, 21.45747),(39.89804, 21.45702),(39.90192, 21.44447),(39.9022, 21.44387),(39.90238, 21.44363),(39.90272, 21.44337),(39.90406, 21.44277),(39.90471, 21.44266),(39.90601, 21.44278),(39.90621, 21.44277),(39.90655, 21.44267),(39.90946, 21.44274),(39.91033, 21.44282),(39.91091, 21.44294),(39.91136, 21.44311),(39.912, 21.44341),(39.91274, 21.44388),(39.91397, 21.44474),(39.9147, 21.44511),(39.91571, 21.44553),(39.91731, 21.44594),(39.9197, 21.44635),(39.92104, 21.44677),(39.92156, 21.44697),(39.92234, 21.44739),(39.92405, 21.44847),(39.92538, 21.44954),(39.92675, 21.45043),(39.92962, 21.4519),(39.93035, 21.45214),(39.93227, 21.45265),(39.93426, 21.45311),(39.93484, 21.45321),(39.93669, 21.45325),(39.9378, 21.4532),(39.93928, 21.45321),(39.94077, 21.45341),(39.94229, 21.45381),(39.94572, 21.45459),(39.94649, 21.45483),(39.94901, 21.45579),(39.93559, 21.4801),(39.93508, 21.48113),(39.93479, 21.48161),(39.93436, 21.4816)], [(39.9044, 21.42901),(39.90248, 21.42675),(39.90195, 21.4262),(39.90111, 21.42499),(39.90059, 21.42408),(39.90038, 21.42359),(39.89991, 21.42209),(39.89946, 21.42086),(39.89889, 21.41972),(39.89911, 21.41951),(39.89926, 21.41931),(39.89948, 21.41892),(39.89961, 21.41855),(39.89964, 21.41816),(39.89957, 21.41767),(39.89948, 21.41741),(39.89925, 21.417),(39.89899, 21.41667),(39.89887, 21.41624),(39.89879, 21.41607),(39.89867, 21.41591),(39.89852, 21.41578),(39.89835, 21.41569),(39.89816, 21.41562),(39.89777, 21.41561),(39.89741, 21.41575),(39.89725, 21.41587),(39.89712, 21.41602),(39.89703, 21.41619),(39.89696, 21.41645),(39.89537, 21.41379),(39.89576, 21.4136),(39.89645, 21.41343),(39.89707, 21.41339),(39.89798, 21.41346),(39.89948, 21.41366),(39.90026, 21.41364),(39.90105, 21.4135),(39.90182, 21.41325),(39.90257, 21.41288),(39.90323, 21.41248),(39.90385, 21.41197),(39.90475, 21.41093),(39.90476, 21.41108),(39.90482, 21.41126),(39.90492, 21.41143),(39.9052, 21.4117),(39.90538, 21.41179),(39.90589, 21.4119),(39.90633, 21.41211),(39.90744, 21.4129),(39.90772, 21.41318),(39.9078, 21.4133),(39.90791, 21.41361),(39.90793, 21.41377),(39.9079, 21.41405),(39.90795, 21.41444),(39.90814, 21.41478),(39.90724, 21.41976),(39.90704, 21.42054),(39.90545, 21.42577),(39.9044, 21.42901)], [(39.8047, 21.42149),(39.80352, 21.42129),(39.80246, 21.42135),(39.80157, 21.42154),(39.79665, 21.42328),(39.79613, 21.42337),(39.79422, 21.4236),(39.79363, 21.42362),(39.79194, 21.42358),(39.79197, 21.42339),(39.79246, 21.42319),(39.79288, 21.42298),(39.79309, 21.42284),(39.79357, 21.42239),(39.79395, 21.4219),(39.79415, 21.42135),(39.7942, 21.42109),(39.79422, 21.42034),(39.79408, 21.41965),(39.7938, 21.41913),(39.79365, 21.41892),(39.79326, 21.41852),(39.79252, 21.41799),(39.79244, 21.41749),(39.79228, 21.41685),(39.78902, 21.4057),(39.78897, 21.40545),(39.78905, 21.40469),(39.78917, 21.40441),(39.7896, 21.40383),(39.7899, 21.40361),(39.79015, 21.40348),(39.79091, 21.4033),(39.79119, 21.40331),(39.79188, 21.40345),(39.79208, 21.40353),(39.7923, 21.40367),(39.79685, 21.4084),(39.79791, 21.40973),(39.79986, 21.41254),(39.80035, 21.41301),(39.80145, 21.41381),(39.80223, 21.41458),(39.80241, 21.41472),(39.80482, 21.41733),(39.80568, 21.41832),(39.80568, 21.41932),(39.80526, 21.41977),(39.8051, 21.41999),(39.80494, 21.4203),(39.8047, 21.42107),(39.8047, 21.42149)], [(39.79951, 21.40831),(39.79848, 21.40702),(39.79501, 21.40333),(39.79373, 21.40207),(39.79355, 21.40193),(39.79291, 21.40156),(39.79209, 21.40128),(39.79129, 21.40117),(39.7904, 21.40122),(39.78952, 21.40145),(39.78886, 21.40175),(39.78761, 21.40064),(39.78831, 21.39977),(39.78842, 21.39961),(39.7885, 21.39941),(39.78889, 21.39915),(39.78934, 21.39892),(39.78975, 21.39885),(39.79039, 21.39844),(39.7913, 21.39812),(39.79528, 21.39727),(39.79685, 21.39697),(39.79808, 21.39687),(39.80179, 21.39686),(39.80549, 21.39681),(39.80651, 21.39668),(39.80725, 21.39666),(39.80743, 21.3966),(39.80771, 21.39643),(39.80899, 21.39602),(39.80971, 21.39842),(39.80979, 21.39893),(39.80983, 21.39956),(39.80955, 21.39958),(39.80936, 21.39965),(39.8092, 21.39975),(39.80893, 21.40003),(39.8088, 21.4004),(39.80766, 21.40803),(39.80749, 21.40874),(39.8071, 21.4101),(39.80666, 21.41003),(39.80538, 21.40971),(39.8038, 21.40937),(39.80309, 21.40917),(39.79951, 21.40831)], [(39.78528, 21.39922),(39.78493, 21.39899),(39.78591, 21.39763),(39.78619, 21.3968),(39.78824, 21.38477),(39.78896, 21.37718),(39.79196, 21.37747),(39.79386, 21.37747),(39.79431, 21.38367),(39.79466, 21.38521),(39.79527, 21.38685),(39.7963, 21.39301),(39.79642, 21.39481),(39.79092, 21.39593),(39.78942, 21.39642),(39.78822, 21.39699),(39.78722, 21.3976),(39.78651, 21.3981),(39.78528, 21.39922)], [(39.79842, 21.39469),(39.79828, 21.39273),(39.79723, 21.38643),(39.79656, 21.38457),(39.7963, 21.38345),(39.79584, 21.3772),(39.79782, 21.37657),(39.80001, 21.37542),(39.80108, 21.37459),(39.80295, 21.37269),(39.80319, 21.37258),(39.80748, 21.38942),(39.80783, 21.39052),(39.80783, 21.39119),(39.8077, 21.39161),(39.80752, 21.39189),(39.80687, 21.39255),(39.80579, 21.39415),(39.80519, 21.39458),(39.79842, 21.39469)], [(39.86272, 21.42529),(39.86276, 21.42495),(39.86273, 21.42476),(39.86266, 21.42457),(39.86255, 21.42441),(39.8638, 21.42428),(39.8642, 21.42419),(39.86474, 21.42401),(39.86583, 21.42353),(39.86774, 21.42232),(39.87468, 21.41769),(39.87519, 21.41722),(39.87556, 21.41679),(39.87623, 21.41572),(39.87632, 21.41563),(39.87919, 21.41359),(39.88011, 21.41502),(39.88112, 21.41677),(39.88159, 21.4177),(39.88115, 21.41807),(39.88045, 21.41821),(39.87899, 21.41871),(39.87817, 21.41908),(39.87653, 21.41992),(39.87497, 21.42078),(39.87348, 21.42172),(39.87086, 21.42355),(39.86554, 21.42759),(39.86429, 21.4284),(39.86344, 21.42888),(39.86315, 21.42914),(39.86304, 21.42931),(39.86297, 21.42949),(39.86288, 21.42955),(39.86345, 21.42732),(39.86493, 21.42715),(39.86628, 21.42693),(39.86645, 21.42685),(39.86674, 21.42659),(39.86691, 21.42623),(39.86694, 21.42604),(39.86693, 21.42584),(39.8668, 21.42548),(39.86654, 21.42519),(39.86618, 21.42502),(39.86599, 21.42499),(39.86579, 21.425),(39.86465, 21.42517),(39.86303, 21.42536),(39.86272, 21.42529)], [(39.88137, 21.4133),(39.88234, 21.41345),(39.88299, 21.41336),(39.88369, 21.41308),(39.88421, 21.41275),(39.88498, 21.41196),(39.88634, 21.40971),(39.88889, 21.40731),(39.89212, 21.41262),(39.89182, 21.41282),(39.89033, 21.41422),(39.88928, 21.41434),(39.88824, 21.41479),(39.88626, 21.41669),(39.88579, 21.41696),(39.88471, 21.41737),(39.88379, 21.4176),(39.88287, 21.41579),(39.88137, 21.4133)], [(39.89343, 21.41478),(39.89599, 21.41909),(39.8969, 21.42055),(39.89729, 21.42134),(39.89771, 21.42243),(39.8981, 21.42371),(39.89874, 21.4253),(39.89905, 21.42595),(39.89945, 21.42665),(39.89984, 21.42723),(39.90044, 21.42799),(39.90305, 21.43104),(39.9031, 21.43127),(39.90311, 21.43155),(39.90306, 21.43194),(39.9017, 21.43639),(39.90122, 21.43585),(39.90098, 21.43544),(39.90059, 21.43417),(39.90029, 21.43348),(39.89965, 21.43238),(39.89683, 21.4285),(39.89643, 21.42802),(39.89572, 21.4274),(39.89208, 21.42467),(39.8859, 21.42038),(39.88621, 21.41977),(39.8863, 21.41948),(39.88648, 21.41926),(39.88752, 21.4184),(39.88777, 21.4181),(39.88784, 21.41793),(39.88939, 21.41644),(39.88975, 21.41629),(39.89056, 21.41626),(39.891, 21.41612),(39.89343, 21.41478)], [(39.90063, 21.43987),(39.89683, 21.45214),(39.8956, 21.45625),(39.89544, 21.45648),(39.89523, 21.45671),(39.89504, 21.45685),(39.89446, 21.45714),(39.89298, 21.45776),(39.89025, 21.4587),(39.88889, 21.4589),(39.88829, 21.45893),(39.88695, 21.45888),(39.88613, 21.45869),(39.88496, 21.45834),(39.88205, 21.45719),(39.88115, 21.45672),(39.87854, 21.45483),(39.87734, 21.45423),(39.87619, 21.45386),(39.871, 21.45278),(39.87018, 21.45257),(39.86828, 21.45177),(39.86695, 21.45101),(39.86592, 21.45008),(39.86505, 21.44914),(39.86307, 21.44683),(39.86096, 21.44427),(39.86036, 21.44351),(39.85993, 21.44287),(39.85876, 21.44092),(39.85863, 21.4405),(39.85853, 21.4385),(39.85845, 21.43789),(39.85841, 21.4377),(39.85799, 21.43648),(39.85816, 21.43625),(39.85861, 21.4358),(39.86082, 21.43328),(39.86139, 21.43272),(39.86152, 21.43255),(39.86213, 21.43226),(39.86471, 21.4308),(39.86495, 21.4305),(39.86503, 21.43028),(39.86671, 21.42921),(39.87205, 21.42516),(39.87456, 21.4234),(39.87601, 21.42249),(39.87745, 21.42169),(39.87968, 21.42059),(39.88, 21.42048),(39.88078, 21.42029),(39.88189, 21.4201),(39.8827, 21.41988),(39.88297, 21.4204),(39.8836, 21.42141),(39.88376, 21.42162),(39.88439, 21.4222),(39.89129, 21.42698),(39.89334, 21.42853),(39.89452, 21.42953),(39.89488, 21.42994),(39.89779, 21.43386),(39.89841, 21.43486),(39.89868, 21.43546),(39.89962, 21.43833),(39.89972, 21.4385),(39.8999, 21.43867),(39.90027, 21.43939),(39.90063, 21.43987)], [(39.89963, 21.38706),(39.8989, 21.38816),(39.8987, 21.38839),(39.89842, 21.38854),(39.89495, 21.38902),(39.8945, 21.38902),(39.89358, 21.38881),(39.89293, 21.38854),(39.88689, 21.38662),(39.88679, 21.38636),(39.88745, 21.38587),(39.89342, 21.38207),(39.89382, 21.38213),(39.89462, 21.38259),(39.89517, 21.38281),(39.8958, 21.38288),(39.89673, 21.3828),(39.89855, 21.38564),(39.89963, 21.38706)], [(39.89348, 21.39296),(39.89286, 21.39348),(39.89194, 21.39401),(39.88552, 21.39692),(39.8847, 21.3955),(39.88413, 21.39366),(39.88401, 21.39185),(39.88434, 21.39012),(39.88475, 21.38944),(39.88506, 21.38913),(39.88593, 21.38845),(39.88615, 21.38848),(39.88648, 21.38874),(39.88738, 21.38915),(39.89272, 21.39085),(39.89371, 21.39128),(39.89392, 21.39143),(39.89398, 21.39158),(39.89408, 21.39224),(39.89348, 21.39296)], [(39.84886, 21.43817),(39.85002, 21.43712),(39.85126, 21.43554),(39.85158, 21.43529),(39.85427, 21.4341),(39.85471, 21.4338),(39.85655, 21.43378),(39.85785, 21.43364),(39.85715, 21.43444),(39.85687, 21.43452),(39.85609, 21.43509),(39.85562, 21.43524),(39.85418, 21.43543),(39.85305, 21.43578),(39.85245, 21.43611),(39.85064, 21.43763),(39.85024, 21.43783),(39.84886, 21.43817)], [(39.85972, 21.41943),(39.86333, 21.41545),(39.8703, 21.40829),(39.87409, 21.40552),(39.87517, 21.40688),(39.87599, 21.40806),(39.87819, 21.41186),(39.87494, 21.41418),(39.87458, 21.41459),(39.87399, 21.41555),(39.87339, 21.41616),(39.86496, 21.42173),(39.86398, 21.42216),(39.86342, 21.42231),(39.86213, 21.42238),(39.85971, 21.42177),(39.86001, 21.42041),(39.85992, 21.41983),(39.85972, 21.41943)], [(39.87571, 21.40434),(39.87841, 21.40243),(39.88448, 21.39962),(39.88786, 21.4056),(39.8874, 21.40591),(39.8848, 21.40843),(39.88417, 21.40934),(39.8834, 21.41072),(39.88317, 21.41098),(39.8828, 21.41129),(39.88232, 21.41144),(39.88197, 21.41139),(39.88098, 21.41104),(39.88003, 21.41105),(39.8777, 21.40702),(39.87679, 21.40571),(39.87571, 21.40434)], [(39.88646, 21.39869),(39.89349, 21.39545),(39.8941, 21.39505),(39.89698, 21.39264),(39.89974, 21.3939),(39.89882, 21.39616),(39.89759, 21.39804),(39.8959, 21.40038),(39.89488, 21.40142),(39.89409, 21.40204),(39.89129, 21.40342),(39.88971, 21.40437),(39.88646, 21.39869)], [(39.95221, 21.34705),(39.95232, 21.34622),(39.95252, 21.3457),(39.95278, 21.34519),(39.95313, 21.34467),(39.95355, 21.34423),(39.95402, 21.34383),(39.95944, 21.34052),(39.96716, 21.3359),(39.96818, 21.33546),(39.96952, 21.33507),(39.97082, 21.33491),(39.97164, 21.33491),(39.97628, 21.33524),(39.97843, 21.33549),(39.98862, 21.33691),(39.99004, 21.33729),(39.99099, 21.33767),(39.9921, 21.33826),(39.99311, 21.339),(39.99377, 21.33959),(39.99466, 21.34067),(39.99517, 21.3415),(39.9956, 21.34231),(39.99591, 21.34323),(39.99606, 21.34384),(39.99627, 21.34514),(39.99627, 21.34711),(39.99622, 21.34781),(39.99493, 21.3532),(39.99449, 21.35441),(39.99377, 21.35575),(39.99337, 21.3563),(39.99265, 21.35702),(39.99047, 21.35841),(39.98785, 21.36027),(39.98739, 21.36066),(39.98664, 21.36148),(39.98629, 21.36203),(39.98604, 21.36261),(39.98588, 21.36326),(39.98582, 21.36386),(39.98584, 21.36461),(39.98597, 21.36522),(39.98613, 21.36571),(39.98645, 21.36645),(39.98769, 21.36884),(39.98792, 21.36953),(39.98811, 21.37052),(39.98876, 21.37739),(39.98869, 21.37821),(39.98863, 21.37841),(39.98851, 21.37867),(39.98808, 21.37931),(39.98785, 21.37954),(39.98758, 21.37973),(39.98671, 21.38013),(39.98624, 21.38023),(39.98142, 21.38031),(39.9805, 21.38024),(39.97978, 21.38003),(39.97949, 21.37987),(39.97917, 21.37962),(39.97889, 21.37936),(39.97864, 21.37904),(39.9778, 21.37783),(39.97605, 21.37561),(39.96729, 21.36519),(39.96247, 21.36003),(39.95955, 21.35682),(39.95867, 21.35593),(39.95499, 21.3519),(39.95402, 21.35093),(39.95309, 21.34984),(39.95262, 21.34915),(39.95236, 21.34849),(39.95225, 21.34799),(39.95218, 21.34733),(39.95221, 21.34705)], [(39.80959, 21.42471),(39.80961, 21.42502),(39.80967, 21.4252),(39.80976, 21.42538),(39.80988, 21.42553),(39.81003, 21.42565),(39.81021, 21.42574),(39.81039, 21.4258),(39.81059, 21.42582),(39.81079, 21.4258),(39.81097, 21.42574),(39.81115, 21.42565),(39.8113, 21.42553),(39.81142, 21.42538),(39.81157, 21.42502),(39.81422, 21.4254),(39.81499, 21.42539),(39.81683, 21.42523),(39.8172, 21.4259),(39.81788, 21.42678),(39.81735, 21.42785),(39.81708, 21.42816),(39.817, 21.42821),(39.81458, 21.42838),(39.8142, 21.42837),(39.81313, 21.4282),(39.81278, 21.42826),(39.81207, 21.42855),(39.81173, 21.42888),(39.81161, 21.42903),(39.81152, 21.42921),(39.81137, 21.42959),(39.81126, 21.43002),(39.81082, 21.4313),(39.80838, 21.43082),(39.80778, 21.43079),(39.80781, 21.4305),(39.80793, 21.4264),(39.80787, 21.4244),(39.80959, 21.42471)], [(39.80556, 21.43147),(39.80353, 21.43246),(39.80246, 21.43184),(39.80176, 21.43158),(39.80132, 21.43147),(39.80103, 21.43144),(39.80025, 21.43149),(39.79977, 21.43161),(39.79946, 21.43174),(39.79918, 21.43192),(39.79694, 21.43394),(39.79578, 21.43486),(39.79286, 21.43677),(39.79262, 21.43702),(39.79251, 21.43723),(39.79246, 21.43742),(39.79245, 21.43762),(39.79253, 21.43798),(39.79272, 21.43828),(39.79297, 21.43852),(39.79326, 21.43865),(39.79353, 21.43869),(39.79384, 21.43864),(39.79402, 21.43856),(39.79789, 21.43598),(39.80018, 21.4339),(39.80064, 21.43359),(39.80097, 21.43358),(39.80149, 21.43371),(39.80259, 21.43438),(39.80291, 21.4345),(39.8032, 21.43456),(39.80343, 21.43458),(39.80388, 21.43455),(39.8048, 21.43423),(39.80446, 21.43495),(39.80406, 21.43567),(39.80366, 21.43693),(39.80347, 21.43812),(39.80332, 21.43981),(39.80118, 21.43938),(39.79973, 21.43917),(39.79102, 21.43876),(39.79131, 21.43242),(39.79123, 21.43161),(39.79026, 21.42778),(39.79024, 21.42756),(39.79027, 21.42715),(39.79032, 21.42696),(39.79049, 21.42663),(39.79096, 21.42597),(39.79434, 21.4257),(39.79706, 21.42535),(39.80209, 21.42359),(39.80281, 21.42342),(39.8032, 21.42339),(39.80401, 21.42349),(39.80572, 21.42393),(39.80578, 21.4274),(39.80564, 21.43075),(39.80556, 21.43147)], [(39.80743, 21.43297),(39.8081, 21.43292),(39.81017, 21.43334),(39.80879, 21.44042),(39.80641, 21.44006),(39.80544, 21.44004),(39.80577, 21.43726),(39.80612, 21.43633),(39.80671, 21.43526),(39.80743, 21.43297)], [(39.80978, 21.44779),(39.80994, 21.44566),(39.81007, 21.44487),(39.81053, 21.44265),(39.81116, 21.44264),(39.81154, 21.44256),(39.81225, 21.44226),(39.81248, 21.44211),(39.81366, 21.44109),(39.81384, 21.44099),(39.81679, 21.44037),(39.81781, 21.44011),(39.82104, 21.43947),(39.8222, 21.43916),(39.82287, 21.43891),(39.82379, 21.43843),(39.82508, 21.43789),(39.82657, 21.43749),(39.82684, 21.43737),(39.82727, 21.4371),(39.82865, 21.43639),(39.82907, 21.43623),(39.82934, 21.4363),(39.82961, 21.43628),(39.83008, 21.43695),(39.8317, 21.43866),(39.83196, 21.439),(39.83218, 21.43955),(39.8324, 21.43989),(39.83262, 21.44011),(39.83308, 21.44043),(39.83338, 21.44071),(39.83419, 21.44194),(39.83469, 21.44238),(39.83493, 21.44253),(39.83535, 21.44272),(39.83558, 21.44279),(39.83628, 21.44289),(39.83853, 21.44254),(39.83909, 21.44226),(39.8397, 21.44168),(39.83977, 21.44165),(39.84008, 21.44161),(39.84192, 21.44153),(39.843, 21.44143),(39.84509, 21.4411),(39.84799, 21.44052),(39.84946, 21.44019),(39.84981, 21.44021),(39.84994, 21.44025),(39.85134, 21.44181),(39.85116, 21.44253),(39.85117, 21.44267),(39.85047, 21.4439),(39.85008, 21.44479),(39.84952, 21.44592),(39.84796, 21.44857),(39.84741, 21.44971),(39.84589, 21.45357),(39.84554, 21.45432),(39.84375, 21.45712),(39.84259, 21.45929),(39.84225, 21.46015),(39.84203, 21.46152),(39.84189, 21.46327),(39.8414, 21.46556),(39.84112, 21.46739),(39.84112, 21.46789),(39.84122, 21.46847),(39.84135, 21.46887),(39.84146, 21.4691),(39.84191, 21.4698),(39.84204, 21.4701),(39.84217, 21.47069),(39.84223, 21.47113),(39.84204, 21.47546),(39.84198, 21.47572),(39.84187, 21.47595),(39.84166, 21.47621),(39.84137, 21.4764),(39.84125, 21.47644),(39.84102, 21.4765),(39.84071, 21.47651),(39.83664, 21.47574),(39.836, 21.4757),(39.83537, 21.47573),(39.83436, 21.47593),(39.83347, 21.47628),(39.83274, 21.47666),(39.83259, 21.47668),(39.83234, 21.47663),(39.83211, 21.47648),(39.83203, 21.4764),(39.83197, 21.47626),(39.83172, 21.47361),(39.83147, 21.47277),(39.83127, 21.4723),(39.83087, 21.47161),(39.82925, 21.46941),(39.82728, 21.4666),(39.82667, 21.46592),(39.82647, 21.46575),(39.82613, 21.46553),(39.82048, 21.46267),(39.82011, 21.46245),(39.81967, 21.46209),(39.81931, 21.46169),(39.81868, 21.46072),(39.81798, 21.45998),(39.81588, 21.45849),(39.81553, 21.45819),(39.81515, 21.45776),(39.81493, 21.45736),(39.81256, 21.45195),(39.8115, 21.45014),(39.81057, 21.44875),(39.80978, 21.44779)], [(39.78317, 21.39802),(39.78285, 21.39808),(39.77692, 21.3971),(39.77752, 21.39324),(39.77769, 21.39243),(39.77792, 21.39179),(39.78089, 21.38707),(39.78351, 21.38492),(39.7841, 21.38405),(39.78439, 21.38333),(39.78558, 21.37686),(39.78697, 21.37699),(39.78625, 21.38452),(39.78422, 21.39642),(39.78406, 21.39682),(39.78317, 21.39802)], [(39.78917, 21.37519),(39.78953, 21.37157),(39.79052, 21.37185),(39.79107, 21.37212),(39.79169, 21.37253),(39.7921, 21.37292),(39.79255, 21.37342),(39.79307, 21.37423),(39.7934, 21.37489),(39.79358, 21.37547),(39.7921, 21.37547),(39.78917, 21.37519)], [(39.87268, 21.3607),(39.87229, 21.37234),(39.87238, 21.37312),(39.8727, 21.37412),(39.87403, 21.3768),(39.87459, 21.37751),(39.87492, 21.3778),(39.87565, 21.3783),(39.87539, 21.37897),(39.87431, 21.38235),(39.87402, 21.38249),(39.87222, 21.38192),(39.87075, 21.38162),(39.86994, 21.38153),(39.86868, 21.38151),(39.86677, 21.38175),(39.86582, 21.382),(39.86468, 21.38241),(39.86373, 21.38286),(39.86273, 21.38347),(39.8619, 21.3841),(39.86106, 21.38489),(39.85782, 21.38829),(39.85728, 21.38809),(39.85678, 21.38807),(39.85608, 21.38827),(39.85576, 21.38852),(39.85553, 21.38885),(39.8554, 21.38933),(39.85538, 21.38957),(39.85547, 21.38999),(39.85567, 21.39042),(39.85495, 21.39109),(39.85387, 21.39231),(39.8531, 21.39292),(39.85269, 21.39312),(39.85256, 21.39313),(39.85225, 21.39306),(39.8512, 21.39193),(39.84972, 21.39016),(39.84959, 21.39004),(39.84879, 21.38937),(39.8481, 21.38893),(39.84746, 21.38863),(39.84605, 21.38825),(39.84136, 21.38785),(39.84054, 21.3877),(39.84015, 21.38753),(39.83982, 21.38734),(39.8394, 21.38701),(39.83693, 21.38443),(39.83665, 21.38418),(39.83518, 21.38321),(39.83492, 21.38309),(39.83413, 21.38287),(39.83345, 21.38279),(39.83236, 21.38277),(39.83156, 21.38286),(39.83051, 21.38312),(39.83637, 21.37503),(39.84749, 21.35985),(39.84785, 21.35942),(39.84912, 21.35812),(39.84948, 21.35783),(39.84985, 21.35763),(39.85045, 21.35745),(39.8545, 21.35696),(39.85519, 21.35698),(39.85738, 21.35754),(39.85971, 21.35848),(39.86135, 21.35892),(39.86264, 21.35917),(39.8703, 21.36038),(39.87268, 21.3607)], [(39.87658, 21.37651),(39.87598, 21.37607),(39.87578, 21.37582),(39.87453, 21.3733),(39.87429, 21.37232),(39.87467, 21.36095),(39.87758, 21.36131),(39.87798, 21.36151),(39.88107, 21.36223),(39.88281, 21.36325),(39.88379, 21.36404),(39.88498, 21.36539),(39.88608, 21.36683),(39.8788, 21.37364),(39.8776, 21.375),(39.87658, 21.37651)], [(39.82364, 21.41981),(39.82367, 21.41954),(39.82416, 21.41928),(39.82507, 21.41862),(39.82572, 21.41854),(39.8261, 21.4186),(39.8258, 21.41927),(39.82445, 21.41949),(39.82364, 21.41981)], [(39.82391, 21.41697),(39.82383, 21.41571),(39.82364, 21.41473),(39.82274, 21.41253),(39.82449, 21.41261),(39.82443, 21.41485),(39.82469, 21.41537),(39.82519, 21.41566),(39.82577, 21.41563),(39.82623, 21.41527),(39.82642, 21.41472),(39.82648, 21.41309),(39.82695, 21.41321),(39.82661, 21.41499),(39.82657, 21.41567),(39.82683, 21.41674),(39.82634, 21.4166),(39.82514, 21.41656),(39.82446, 21.41671),(39.82391, 21.41697)], [(39.82876, 21.41802),(39.83007, 21.41793),(39.83168, 21.41763),(39.83252, 21.41736),(39.8333, 21.41696),(39.83461, 21.41893),(39.83507, 21.41978),(39.83524, 21.42063),(39.8353, 21.42147),(39.83401, 21.42163),(39.83388, 21.42071),(39.83352, 21.41999),(39.83348, 21.41968),(39.83332, 21.41932),(39.83276, 21.41877),(39.8319, 21.41823),(39.83077, 21.41798),(39.82876, 21.41802)], [(39.83509, 21.41604),(39.839, 21.41402),(39.84021, 21.41316),(39.84098, 21.41247),(39.84179, 21.41159),(39.8438, 21.40921),(39.84747, 21.40466),(39.84802, 21.40381),(39.84838, 21.40303),(39.84864, 21.40216),(39.84886, 21.40096),(39.849, 21.39949),(39.84909, 21.39896),(39.84924, 21.39842),(39.84956, 21.39772),(39.85004, 21.39711),(39.8502, 21.39695),(39.8506, 21.39665),(39.85157, 21.39618),(39.853, 21.39569),(39.85363, 21.39558),(39.85396, 21.39547),(39.8544, 21.39524),(39.8547, 21.39503),(39.85499, 21.39478),(39.85617, 21.39361),(39.85696, 21.39291),(39.85746, 21.39236),(39.8579, 21.39179),(39.85877, 21.39085),(39.86338, 21.39308),(39.86446, 21.39356),(39.86531, 21.39402),(39.86577, 21.39435),(39.86651, 21.39507),(39.86596, 21.3955),(39.86532, 21.39609),(39.86472, 21.39688),(39.86379, 21.39863),(39.86138, 21.40439),(39.86035, 21.4064),(39.85537, 21.41465),(39.85266, 21.41823),(39.85145, 21.41971),(39.85133, 21.4198),(39.85092, 21.41997),(39.84912, 21.42017),(39.84516, 21.42027),(39.84289, 21.42044),(39.83728, 21.4212),(39.83723, 21.42043),(39.83701, 21.4193),(39.83677, 21.41867),(39.83632, 21.41789),(39.83509, 21.41604)], [(39.86021, 21.38932),(39.86365, 21.38583),(39.86459, 21.38516),(39.86624, 21.38442),(39.86768, 21.38403),(39.86962, 21.38393),(39.8717, 21.38431),(39.87299, 21.3847),(39.8729, 21.38575),(39.87303, 21.38632),(39.87188, 21.38979),(39.87157, 21.39051),(39.87068, 21.39174),(39.87013, 21.39226),(39.8681, 21.39384),(39.86709, 21.39285),(39.86632, 21.39229),(39.86021, 21.38932)], [(39.84703, 21.39096),(39.84715, 21.39117),(39.84744, 21.39143),(39.84761, 21.39151),(39.84787, 21.39156),(39.84872, 21.39256),(39.84882, 21.39314),(39.84858, 21.39443),(39.84842, 21.39495),(39.848, 21.39601),(39.84714, 21.39783),(39.84698, 21.39845),(39.84677, 21.40025),(39.84654, 21.40175),(39.84636, 21.40234),(39.84612, 21.40283),(39.84579, 21.40335),(39.84226, 21.4074),(39.8407, 21.40935),(39.83947, 21.41065),(39.83831, 21.41161),(39.8377, 21.41205),(39.83345, 21.41428),(39.83247, 21.41344),(39.83245, 21.41324),(39.83239, 21.41305),(39.8323, 21.41288),(39.83217, 21.41273),(39.83121, 21.41178),(39.83068, 21.41134),(39.83015, 21.41099),(39.83001, 21.41065),(39.83052, 21.40833),(39.83112, 21.40587),(39.8317, 21.40157),(39.83168, 21.40101),(39.83164, 21.40082),(39.83137, 21.40027),(39.83115, 21.39999),(39.83083, 21.39971),(39.83052, 21.39952),(39.8284, 21.39872),(39.82797, 21.39848),(39.82767, 21.39827),(39.82744, 21.39803),(39.82711, 21.39753),(39.827, 21.39726),(39.82693, 21.3969),(39.82679, 21.39172),(39.82659, 21.38808),(39.82672, 21.38766),(39.82705, 21.38702),(39.82746, 21.38644),(39.83156, 21.38522),(39.83244, 21.38503),(39.83282, 21.38502),(39.83372, 21.38517),(39.83421, 21.38535),(39.83473, 21.38565),(39.83527, 21.38603),(39.83533, 21.38622),(39.83555, 21.38655),(39.83588, 21.38676),(39.83607, 21.38681),(39.83738, 21.38827),(39.83788, 21.38875),(39.83886, 21.38944),(39.83905, 21.38954),(39.83962, 21.38978),(39.84022, 21.38998),(39.84135, 21.39018),(39.84179, 21.39021),(39.84192, 21.39029),(39.8423, 21.3904),(39.84269, 21.39035),(39.84282, 21.39029),(39.84546, 21.39049),(39.84593, 21.39055),(39.84632, 21.39064),(39.84672, 21.39079),(39.84703, 21.39096)], [(39.83154, 21.41527),(39.83052, 21.41557),(39.82875, 21.41575),(39.82868, 21.41557),(39.8287, 21.41522),(39.82898, 21.41382),(39.83043, 21.41432),(39.83154, 21.41527)], [(39.88532, 21.36227),(39.89047, 21.36299),(39.88935, 21.36357),(39.889, 21.36359),(39.88711, 21.36335),(39.88654, 21.36324),(39.88587, 21.36295),(39.88576, 21.36273),(39.88532, 21.36227)], [(39.91229, 21.40316),(39.91302, 21.40213),(39.91357, 21.40253),(39.91432, 21.40334),(39.91464, 21.40392),(39.91478, 21.40442),(39.91478, 21.40479),(39.91465, 21.40516),(39.91433, 21.40548),(39.914, 21.40563),(39.91331, 21.4056),(39.9128, 21.40534),(39.91261, 21.40516),(39.91238, 21.40474),(39.91229, 21.40316)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.71409, 21.39848),(39.7259, 21.39043),(39.72856, 21.39237),(39.72897, 21.39258),(39.72946, 21.39268),(39.72985, 21.39281),(39.73553, 21.39698),(39.73563, 21.39707),(39.73609, 21.39767),(39.73676, 21.39815),(39.74249, 21.40142),(39.743, 21.40162),(39.74336, 21.40168),(39.7445, 21.40156),(39.74465, 21.40162),(39.74535, 21.40201),(39.74586, 21.40221),(39.74731, 21.4031),(39.75127, 21.4053),(39.75207, 21.40561),(39.75415, 21.40664),(39.75489, 21.40686),(39.75501, 21.40693),(39.75368, 21.40835),(39.75296, 21.4087),(39.75071, 21.40918),(39.74696, 21.41005),(39.74601, 21.41024),(39.74227, 21.41003),(39.74019, 21.41017),(39.73721, 21.41052),(39.73608, 21.41079),(39.73591, 21.41089),(39.73567, 21.41113),(39.72999, 21.4116),(39.72892, 21.41166),(39.72757, 21.41157),(39.72697, 21.41149),(39.72641, 21.41133),(39.7251, 21.41088),(39.72389, 21.41023),(39.72326, 21.40977),(39.72261, 21.40924),(39.72205, 21.40869),(39.71409, 21.39848)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.73364, 21.42933),(39.73324, 21.42934),(39.72777, 21.42885),(39.72661, 21.42861),(39.72586, 21.42833),(39.71975, 21.42438),(39.71903, 21.424),(39.71198, 21.42198),(39.71237, 21.41843),(39.71241, 21.4169),(39.71237, 21.41582),(39.71224, 21.4153),(39.71207, 21.41499),(39.71028, 21.41276),(39.70957, 21.412),(39.70914, 21.4116),(39.70794, 21.41071),(39.70769, 21.41057),(39.70642, 21.41012),(39.70575, 21.40943),(39.70451, 21.40799),(39.70442, 21.40779),(39.70426, 21.40579),(39.70437, 21.4053),(39.70468, 21.40483),(39.70531, 21.40433),(39.71243, 21.39961),(39.7206, 21.41007),(39.72131, 21.41077),(39.72202, 21.41134),(39.72276, 21.41188),(39.72424, 21.41269),(39.72578, 21.41323),(39.72663, 21.41346),(39.72741, 21.41357),(39.72886, 21.41366),(39.73014, 21.4136),(39.7346, 21.41323),(39.73624, 21.41339),(39.73895, 21.41313),(39.74098, 21.41303),(39.74174, 21.41319),(39.74348, 21.41408),(39.74416, 21.41454),(39.74445, 21.41478),(39.74463, 21.41504),(39.74467, 21.41523),(39.74465, 21.41565),(39.74447, 21.41608),(39.74416, 21.41649),(39.74239, 21.41799),(39.74121, 21.41922),(39.74065, 21.41993),(39.73973, 21.42137),(39.73894, 21.42307),(39.7385, 21.42385),(39.73799, 21.42463),(39.73672, 21.42624),(39.73364, 21.42933)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.7457, 21.43127),(39.74624, 21.43142),(39.74667, 21.4316),(39.7491, 21.43362),(39.75045, 21.43445),(39.75067, 21.43455),(39.75586, 21.43621),(39.75688, 21.43666),(39.75811, 21.43759),(39.7606, 21.43995),(39.76102, 21.44029),(39.76115, 21.44038),(39.76188, 21.44066),(39.7621, 21.44072),(39.76323, 21.44087),(39.76349, 21.44087),(39.76572, 21.44057),(39.76592, 21.44058),(39.76625, 21.4405),(39.76848, 21.4402),(39.76965, 21.44012),(39.77019, 21.44018),(39.77471, 21.44129),(39.77662, 21.44142),(39.77705, 21.44257),(39.77753, 21.44343),(39.77792, 21.444),(39.77863, 21.44489),(39.77936, 21.44567),(39.7797, 21.44597),(39.7803, 21.44638),(39.78107, 21.44684),(39.7823, 21.4475),(39.78364, 21.44835),(39.78622, 21.45028),(39.78775, 21.45163),(39.78853, 21.45236),(39.79426, 21.45875),(39.79488, 21.45938),(39.79706, 21.46135),(39.79869, 21.4625),(39.80185, 21.46439),(39.80201, 21.46461),(39.80207, 21.46475),(39.80206, 21.46486),(39.80187, 21.46508),(39.79992, 21.4663),(39.79979, 21.46644),(39.79968, 21.46663),(39.79914, 21.467),(39.79814, 21.46788),(39.79751, 21.46867),(39.79695, 21.46959),(39.79658, 21.47045),(39.79623, 21.47164),(39.7932, 21.48709),(39.79286, 21.48954),(39.79217, 21.49622),(39.79191, 21.49914),(39.79191, 21.50009),(39.79167, 21.502),(39.79039, 21.5155),(39.7749, 21.51163),(39.77208, 21.51099),(39.7654, 21.51023),(39.74443, 21.5064),(39.74326, 21.50603),(39.74213, 21.50544),(39.74139, 21.50491),(39.74068, 21.50419),(39.7399, 21.50329),(39.73911, 21.50203),(39.73868, 21.50103),(39.73842, 21.49995),(39.73826, 21.49836),(39.73919, 21.49113),(39.73916, 21.48952),(39.73895, 21.48839),(39.73888, 21.48816),(39.73839, 21.4871),(39.73787, 21.4862),(39.73693, 21.48477),(39.73567, 21.48348),(39.73286, 21.48021),(39.73059, 21.47715),(39.72508, 21.46749),(39.72433, 21.46585),(39.72302, 21.46073),(39.72287, 21.45961),(39.72278, 21.45841),(39.72284, 21.45738),(39.72295, 21.45633),(39.72389, 21.45255),(39.72481, 21.45005),(39.73039, 21.43827),(39.7314, 21.43644),(39.73183, 21.43594),(39.73214, 21.43568),(39.73369, 21.43469),(39.73481, 21.43411),(39.73548, 21.43368),(39.73637, 21.433),(39.73709, 21.43238),(39.73785, 21.43181),(39.73821, 21.43158),(39.73856, 21.43144),(39.73898, 21.43133),(39.73951, 21.43126),(39.74295, 21.43112),(39.7457, 21.43127)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.76244, 21.39846),(39.76255, 21.39821),(39.76528, 21.3984),(39.77595, 21.399),(39.77653, 21.39906),(39.78224, 21.39999),(39.78304, 21.40016),(39.78406, 21.40081),(39.78349, 21.40178),(39.78316, 21.40249),(39.78263, 21.40405),(39.78258, 21.40444),(39.78267, 21.40478),(39.78245, 21.40582),(39.78226, 21.407),(39.78167, 21.40978),(39.78069, 21.41362),(39.77994, 21.41671),(39.77776, 21.41693),(39.77732, 21.41693),(39.7769, 21.41689),(39.77624, 21.41674),(39.77593, 21.41661),(39.773, 21.41486),(39.77164, 21.41423),(39.76892, 21.41344),(39.76744, 21.41319),(39.76656, 21.41312),(39.76083, 21.41289),(39.7596, 21.41288),(39.75858, 21.41283),(39.756, 21.4126),(39.75567, 21.41255),(39.75472, 21.41221),(39.75448, 21.41203),(39.7544, 21.41191),(39.75435, 21.41171),(39.75437, 21.41133),(39.75446, 21.41111),(39.75488, 21.41038),(39.75712, 21.40804),(39.75802, 21.40692),(39.75933, 21.40518),(39.7607, 21.40297),(39.76127, 21.40197),(39.76186, 21.40076),(39.76209, 21.40008),(39.76228, 21.39934),(39.76244, 21.39846)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.77052, 21.43821),(39.76961, 21.43812),(39.76832, 21.4382),(39.76767, 21.43829),(39.76811, 21.43749),(39.76863, 21.4368),(39.76943, 21.43601),(39.77156, 21.43438),(39.77239, 21.43353),(39.77295, 21.43277),(39.77411, 21.43069),(39.7749, 21.42952),(39.77558, 21.42859),(39.77673, 21.42736),(39.77594, 21.42991),(39.77575, 21.4307),(39.77542, 21.43177),(39.77522, 21.43286),(39.77508, 21.43432),(39.77509, 21.43554),(39.77488, 21.43577),(39.77474, 21.43605),(39.77467, 21.43622),(39.77444, 21.43711),(39.77419, 21.43754),(39.77404, 21.43771),(39.77377, 21.43791),(39.77352, 21.43805),(39.77287, 21.43824),(39.77085, 21.43816),(39.77052, 21.43821)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.77683, 21.42438),(39.77605, 21.425),(39.77496, 21.42603),(39.7739, 21.42729),(39.77313, 21.42836),(39.77185, 21.4304),(39.77114, 21.43164),(39.77043, 21.4325),(39.76964, 21.4332),(39.76827, 21.43424),(39.76732, 21.43509),(39.76667, 21.43583),(39.76622, 21.43647),(39.76497, 21.43865),(39.76336, 21.43887),(39.76248, 21.43875),(39.76215, 21.43863),(39.75945, 21.4361),(39.75799, 21.43499),(39.75779, 21.43487),(39.75661, 21.43435),(39.75139, 21.43268),(39.75032, 21.43203),(39.74784, 21.42997),(39.74759, 21.42982),(39.74683, 21.4295),(39.74612, 21.42931),(39.74467, 21.42912),(39.74448, 21.42896),(39.7443, 21.42888),(39.74194, 21.4285),(39.74145, 21.42827),(39.74102, 21.42776),(39.7407, 21.42681),(39.74058, 21.42589),(39.74083, 21.42453),(39.74184, 21.4225),(39.74313, 21.42067),(39.74414, 21.41962),(39.74463, 21.41918),(39.74722, 21.41719),(39.74816, 21.41667),(39.75131, 21.41514),(39.7528, 21.4143),(39.7546, 21.41468),(39.75722, 21.41503),(39.7665, 21.41541),(39.76768, 21.41554),(39.7691, 21.41584),(39.77057, 21.41631),(39.77193, 21.41692),(39.77339, 21.41779),(39.7742, 21.41838),(39.77635, 21.41978),(39.77611, 21.41999),(39.77594, 21.42034),(39.77589, 21.42086),(39.77591, 21.42111),(39.77604, 21.42177),(39.77613, 21.42203),(39.77649, 21.42272),(39.77693, 21.42331),(39.77708, 21.42367),(39.77707, 21.42393),(39.77683, 21.42438)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.779, 21.35047),(39.78, 21.35119),(39.78099, 21.35171),(39.78492, 21.35348),(39.78632, 21.35426),(39.78702, 21.35478),(39.78924, 21.35656),(39.78993, 21.35716),(39.79145, 21.35883),(39.79203, 21.35952),(39.79333, 21.36134),(39.79427, 21.36274),(39.79565, 21.36447),(39.79656, 21.36548),(39.79779, 21.36667),(39.80229, 21.37034),(39.80218, 21.37053),(39.80167, 21.37113),(39.80041, 21.37248),(39.79975, 21.3731),(39.79894, 21.37373),(39.79827, 21.37413),(39.79698, 21.37475),(39.79643, 21.37496),(39.79558, 21.37521),(39.79529, 21.37422),(39.79478, 21.3732),(39.79409, 21.37214),(39.79351, 21.37149),(39.793, 21.37101),(39.79201, 21.37035),(39.79122, 21.36997),(39.79048, 21.36972),(39.7891, 21.36947),(39.7887, 21.36944),(39.78832, 21.36949),(39.78814, 21.36957),(39.78784, 21.36982),(39.78767, 21.37017),(39.78763, 21.37037),(39.78718, 21.375),(39.78467, 21.37478),(39.78431, 21.37488),(39.78402, 21.37511),(39.78391, 21.37526),(39.78378, 21.3756),(39.78245, 21.38285),(39.78231, 21.38317),(39.78211, 21.38348),(39.77952, 21.38561),(39.77935, 21.38579),(39.77889, 21.38643),(39.77608, 21.391),(39.77578, 21.39181),(39.77555, 21.39291),(39.77492, 21.39694),(39.76541, 21.3964),(39.76273, 21.39622),(39.76342, 21.3915),(39.76482, 21.38563),(39.76512, 21.38401),(39.76545, 21.38126),(39.76562, 21.38041),(39.76602, 21.37916),(39.76859, 21.37278),(39.76972, 21.36938),(39.77036, 21.36686),(39.77091, 21.36513),(39.77314, 21.35887),(39.77478, 21.35448),(39.77517, 21.35368),(39.77568, 21.35293),(39.77631, 21.35217),(39.77681, 21.35168),(39.77761, 21.3511),(39.77831, 21.35073),(39.779, 21.35047)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.7791, 21.44156),(39.77939, 21.44157),(39.78003, 21.44187),(39.78046, 21.442),(39.78123, 21.44207),(39.78208, 21.44195),(39.78301, 21.44163),(39.78764, 21.44075),(39.78822, 21.44077),(39.78917, 21.44068),(39.79022, 21.44082),(39.7976, 21.44116),(39.7978, 21.44115),(39.79799, 21.4411),(39.79933, 21.44116),(39.79964, 21.44126),(39.80102, 21.44147),(39.80255, 21.44181),(39.80419, 21.4421),(39.80647, 21.44221),(39.80682, 21.44216),(39.80854, 21.4424),(39.8081, 21.44453),(39.80796, 21.44538),(39.8078, 21.44743),(39.80767, 21.44769),(39.80763, 21.44789),(39.80767, 21.44828),(39.80774, 21.44843),(39.80761, 21.45109),(39.80736, 21.4538),(39.80599, 21.45785),(39.8059, 21.45822),(39.80589, 21.45902),(39.80592, 21.45926),(39.80609, 21.45985),(39.80634, 21.46041),(39.80595, 21.46096),(39.8057, 21.46124),(39.8038, 21.46239),(39.80349, 21.46246),(39.80322, 21.46244),(39.79996, 21.46056),(39.79871, 21.45967),(39.79745, 21.45865),(39.79647, 21.45779),(39.79588, 21.4572),(39.78985, 21.45056),(39.78754, 21.44849),(39.7862, 21.44745),(39.78483, 21.44646),(39.78342, 21.44554),(39.78147, 21.44446),(39.78087, 21.44401),(39.77967, 21.44266),(39.7791, 21.44156)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.78317, 21.39802),(39.78285, 21.39808),(39.77692, 21.3971),(39.77752, 21.39324),(39.77769, 21.39243),(39.77792, 21.39179),(39.78089, 21.38707),(39.78351, 21.38492),(39.7841, 21.38405),(39.78439, 21.38333),(39.78558, 21.37686),(39.78697, 21.37699),(39.78625, 21.38452),(39.78422, 21.39642),(39.78406, 21.39682),(39.78317, 21.39802)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.78528, 21.39922),(39.78493, 21.39899),(39.78591, 21.39763),(39.78619, 21.3968),(39.78824, 21.38477),(39.78896, 21.37718),(39.79196, 21.37747),(39.79386, 21.37747),(39.79431, 21.38367),(39.79466, 21.38521),(39.79527, 21.38685),(39.7963, 21.39301),(39.79642, 21.39481),(39.79092, 21.39593),(39.78942, 21.39642),(39.78822, 21.39699),(39.78722, 21.3976),(39.78651, 21.3981),(39.78528, 21.39922)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.78571, 21.4023),(39.78613, 21.40226),(39.78735, 21.40325),(39.78684, 21.40459),(39.78685, 21.40595),(39.78943, 21.41476),(39.79045, 21.41882),(39.79071, 21.41927),(39.79203, 21.42035),(39.7921, 21.42071),(39.79178, 21.42117),(39.79074, 21.42159),(39.7902, 21.42203),(39.78993, 21.42249),(39.78974, 21.42357),(39.78774, 21.42363),(39.78577, 21.42328),(39.78521, 21.42357),(39.78486, 21.42441),(39.78493, 21.42495),(39.78537, 21.42543),(39.78674, 21.42583),(39.7884, 21.42607),(39.78817, 21.42683),(39.7881, 21.428),(39.78914, 21.43215),(39.7889, 21.43869),(39.78737, 21.43877),(39.78262, 21.43967),(39.78006, 21.43961),(39.77771, 21.43792),(39.77742, 21.43637),(39.77739, 21.43356),(39.77763, 21.4322),(39.77929, 21.42676),(39.78007, 21.42488),(39.78048, 21.42431),(39.78176, 21.42346),(39.78296, 21.42427),(39.78354, 21.42436),(39.78438, 21.42393),(39.78469, 21.42344),(39.78459, 21.42268),(39.78345, 21.42155),(39.78336, 21.41933),(39.78243, 21.41679),(39.78242, 21.41498),(39.78361, 21.41026),(39.78458, 21.40542),(39.78489, 21.40468),(39.7849, 21.40411),(39.78571, 21.4023)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.78917, 21.37519),(39.78953, 21.37157),(39.79052, 21.37185),(39.79107, 21.37212),(39.79169, 21.37253),(39.7921, 21.37292),(39.79255, 21.37342),(39.79307, 21.37423),(39.7934, 21.37489),(39.79358, 21.37547),(39.7921, 21.37547),(39.78917, 21.37519)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.79842, 21.39469),(39.79828, 21.39273),(39.79723, 21.38643),(39.79656, 21.38457),(39.7963, 21.38345),(39.79584, 21.3772),(39.79782, 21.37657),(39.80001, 21.37542),(39.80108, 21.37459),(39.80295, 21.37269),(39.80319, 21.37258),(39.80748, 21.38942),(39.80783, 21.39052),(39.80783, 21.39119),(39.8077, 21.39161),(39.80752, 21.39189),(39.80687, 21.39255),(39.80579, 21.39415),(39.80519, 21.39458),(39.79842, 21.39469)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.79951, 21.40831),(39.79848, 21.40702),(39.79501, 21.40333),(39.79373, 21.40207),(39.79355, 21.40193),(39.79291, 21.40156),(39.79209, 21.40128),(39.79129, 21.40117),(39.7904, 21.40122),(39.78952, 21.40145),(39.78886, 21.40175),(39.78761, 21.40064),(39.78831, 21.39977),(39.78842, 21.39961),(39.7885, 21.39941),(39.78889, 21.39915),(39.78934, 21.39892),(39.78975, 21.39885),(39.79039, 21.39844),(39.7913, 21.39812),(39.79528, 21.39727),(39.79685, 21.39697),(39.79808, 21.39687),(39.80179, 21.39686),(39.80549, 21.39681),(39.80651, 21.39668),(39.80725, 21.39666),(39.80743, 21.3966),(39.80771, 21.39643),(39.80899, 21.39602),(39.80971, 21.39842),(39.80979, 21.39893),(39.80983, 21.39956),(39.80955, 21.39958),(39.80936, 21.39965),(39.8092, 21.39975),(39.80893, 21.40003),(39.8088, 21.4004),(39.80766, 21.40803),(39.80749, 21.40874),(39.8071, 21.4101),(39.80666, 21.41003),(39.80538, 21.40971),(39.8038, 21.40937),(39.80309, 21.40917),(39.79951, 21.40831)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.80215, 21.35462),(39.8015, 21.35868),(39.80145, 21.35959),(39.80149, 21.36132),(39.80157, 21.36215),(39.80215, 21.36532),(39.80244, 21.36642),(39.80274, 21.36813),(39.79915, 21.3652),(39.79798, 21.36406),(39.79715, 21.36315),(39.79586, 21.36153),(39.79496, 21.36019),(39.79359, 21.35827),(39.79297, 21.35753),(39.79128, 21.35568),(39.79053, 21.35503),(39.78825, 21.35321),(39.78735, 21.35255),(39.78586, 21.35172),(39.78394, 21.35084),(39.78351, 21.35055),(39.78399, 21.34968),(39.78415, 21.34951),(39.78515, 21.34915),(39.78558, 21.34906),(39.78718, 21.34859),(39.78801, 21.34846),(39.78885, 21.34839),(39.78982, 21.34822),(39.79322, 21.3482),(39.79564, 21.34849),(39.79835, 21.34916),(39.79957, 21.34986),(39.80019, 21.35029),(39.80071, 21.35078),(39.80117, 21.35137),(39.80155, 21.35202),(39.80187, 21.35285),(39.80206, 21.35367),(39.80209, 21.35432),(39.80215, 21.35462)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.8047, 21.42149),(39.80352, 21.42129),(39.80246, 21.42135),(39.80157, 21.42154),(39.79665, 21.42328),(39.79613, 21.42337),(39.79422, 21.4236),(39.79363, 21.42362),(39.79194, 21.42358),(39.79197, 21.42339),(39.79246, 21.42319),(39.79288, 21.42298),(39.79309, 21.42284),(39.79357, 21.42239),(39.79395, 21.4219),(39.79415, 21.42135),(39.7942, 21.42109),(39.79422, 21.42034),(39.79408, 21.41965),(39.7938, 21.41913),(39.79365, 21.41892),(39.79326, 21.41852),(39.79252, 21.41799),(39.79244, 21.41749),(39.79228, 21.41685),(39.78902, 21.4057),(39.78897, 21.40545),(39.78905, 21.40469),(39.78917, 21.40441),(39.7896, 21.40383),(39.7899, 21.40361),(39.79015, 21.40348),(39.79091, 21.4033),(39.79119, 21.40331),(39.79188, 21.40345),(39.79208, 21.40353),(39.7923, 21.40367),(39.79685, 21.4084),(39.79791, 21.40973),(39.79986, 21.41254),(39.80035, 21.41301),(39.80145, 21.41381),(39.80223, 21.41458),(39.80241, 21.41472),(39.80482, 21.41733),(39.80568, 21.41832),(39.80568, 21.41932),(39.80526, 21.41977),(39.8051, 21.41999),(39.80494, 21.4203),(39.8047, 21.42107),(39.8047, 21.42149)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.80556, 21.43147),(39.80353, 21.43246),(39.80246, 21.43184),(39.80176, 21.43158),(39.80132, 21.43147),(39.80103, 21.43144),(39.80025, 21.43149),(39.79977, 21.43161),(39.79946, 21.43174),(39.79918, 21.43192),(39.79694, 21.43394),(39.79578, 21.43486),(39.79286, 21.43677),(39.79262, 21.43702),(39.79251, 21.43723),(39.79246, 21.43742),(39.79245, 21.43762),(39.79253, 21.43798),(39.79272, 21.43828),(39.79297, 21.43852),(39.79326, 21.43865),(39.79353, 21.43869),(39.79384, 21.43864),(39.79402, 21.43856),(39.79789, 21.43598),(39.80018, 21.4339),(39.80064, 21.43359),(39.80097, 21.43358),(39.80149, 21.43371),(39.80259, 21.43438),(39.80291, 21.4345),(39.8032, 21.43456),(39.80343, 21.43458),(39.80388, 21.43455),(39.8048, 21.43423),(39.80446, 21.43495),(39.80406, 21.43567),(39.80366, 21.43693),(39.80347, 21.43812),(39.80332, 21.43981),(39.80118, 21.43938),(39.79973, 21.43917),(39.79102, 21.43876),(39.79131, 21.43242),(39.79123, 21.43161),(39.79026, 21.42778),(39.79024, 21.42756),(39.79027, 21.42715),(39.79032, 21.42696),(39.79049, 21.42663),(39.79096, 21.42597),(39.79434, 21.4257),(39.79706, 21.42535),(39.80209, 21.42359),(39.80281, 21.42342),(39.8032, 21.42339),(39.80401, 21.42349),(39.80572, 21.42393),(39.80578, 21.4274),(39.80564, 21.43075),(39.80556, 21.43147)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.80743, 21.43297),(39.8081, 21.43292),(39.81017, 21.43334),(39.80879, 21.44042),(39.80641, 21.44006),(39.80544, 21.44004),(39.80577, 21.43726),(39.80612, 21.43633),(39.80671, 21.43526),(39.80743, 21.43297)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.80959, 21.42471),(39.80961, 21.42502),(39.80967, 21.4252),(39.80976, 21.42538),(39.80988, 21.42553),(39.81003, 21.42565),(39.81021, 21.42574),(39.81039, 21.4258),(39.81059, 21.42582),(39.81079, 21.4258),(39.81097, 21.42574),(39.81115, 21.42565),(39.8113, 21.42553),(39.81142, 21.42538),(39.81157, 21.42502),(39.81422, 21.4254),(39.81499, 21.42539),(39.81683, 21.42523),(39.8172, 21.4259),(39.81788, 21.42678),(39.81735, 21.42785),(39.81708, 21.42816),(39.817, 21.42821),(39.81458, 21.42838),(39.8142, 21.42837),(39.81313, 21.4282),(39.81278, 21.42826),(39.81207, 21.42855),(39.81173, 21.42888),(39.81161, 21.42903),(39.81152, 21.42921),(39.81137, 21.42959),(39.81126, 21.43002),(39.81082, 21.4313),(39.80838, 21.43082),(39.80778, 21.43079),(39.80781, 21.4305),(39.80793, 21.4264),(39.80787, 21.4244),(39.80959, 21.42471)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.80978, 21.44779),(39.80994, 21.44566),(39.81007, 21.44487),(39.81053, 21.44265),(39.81116, 21.44264),(39.81154, 21.44256),(39.81225, 21.44226),(39.81248, 21.44211),(39.81366, 21.44109),(39.81384, 21.44099),(39.81679, 21.44037),(39.81781, 21.44011),(39.82104, 21.43947),(39.8222, 21.43916),(39.82287, 21.43891),(39.82379, 21.43843),(39.82508, 21.43789),(39.82657, 21.43749),(39.82684, 21.43737),(39.82727, 21.4371),(39.82865, 21.43639),(39.82907, 21.43623),(39.82934, 21.4363),(39.82961, 21.43628),(39.83008, 21.43695),(39.8317, 21.43866),(39.83196, 21.439),(39.83218, 21.43955),(39.8324, 21.43989),(39.83262, 21.44011),(39.83308, 21.44043),(39.83338, 21.44071),(39.83419, 21.44194),(39.83469, 21.44238),(39.83493, 21.44253),(39.83535, 21.44272),(39.83558, 21.44279),(39.83628, 21.44289),(39.83853, 21.44254),(39.83909, 21.44226),(39.8397, 21.44168),(39.83977, 21.44165),(39.84008, 21.44161),(39.84192, 21.44153),(39.843, 21.44143),(39.84509, 21.4411),(39.84799, 21.44052),(39.84946, 21.44019),(39.84981, 21.44021),(39.84994, 21.44025),(39.85134, 21.44181),(39.85116, 21.44253),(39.85117, 21.44267),(39.85047, 21.4439),(39.85008, 21.44479),(39.84952, 21.44592),(39.84796, 21.44857),(39.84741, 21.44971),(39.84589, 21.45357),(39.84554, 21.45432),(39.84375, 21.45712),(39.84259, 21.45929),(39.84225, 21.46015),(39.84203, 21.46152),(39.84189, 21.46327),(39.8414, 21.46556),(39.84112, 21.46739),(39.84112, 21.46789),(39.84122, 21.46847),(39.84135, 21.46887),(39.84146, 21.4691),(39.84191, 21.4698),(39.84204, 21.4701),(39.84217, 21.47069),(39.84223, 21.47113),(39.84204, 21.47546),(39.84198, 21.47572),(39.84187, 21.47595),(39.84166, 21.47621),(39.84137, 21.4764),(39.84125, 21.47644),(39.84102, 21.4765),(39.84071, 21.47651),(39.83664, 21.47574),(39.836, 21.4757),(39.83537, 21.47573),(39.83436, 21.47593),(39.83347, 21.47628),(39.83274, 21.47666),(39.83259, 21.47668),(39.83234, 21.47663),(39.83211, 21.47648),(39.83203, 21.4764),(39.83197, 21.47626),(39.83172, 21.47361),(39.83147, 21.47277),(39.83127, 21.4723),(39.83087, 21.47161),(39.82925, 21.46941),(39.82728, 21.4666),(39.82667, 21.46592),(39.82647, 21.46575),(39.82613, 21.46553),(39.82048, 21.46267),(39.82011, 21.46245),(39.81967, 21.46209),(39.81931, 21.46169),(39.81868, 21.46072),(39.81798, 21.45998),(39.81588, 21.45849),(39.81553, 21.45819),(39.81515, 21.45776),(39.81493, 21.45736),(39.81256, 21.45195),(39.8115, 21.45014),(39.81057, 21.44875),(39.80978, 21.44779)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.80999, 21.39018),(39.80983, 21.38939),(39.80816, 21.38343),(39.80609, 21.3751),(39.80867, 21.37472),(39.80969, 21.37875),(39.81147, 21.38151),(39.81202, 21.38214),(39.81339, 21.38345),(39.81628, 21.38612),(39.81677, 21.38646),(39.81575, 21.38713),(39.81478, 21.38799),(39.81395, 21.38898),(39.81265, 21.39076),(39.81228, 21.39111),(39.8121, 21.3912),(39.81181, 21.39121),(39.81033, 21.39058),(39.80999, 21.39018)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.81069, 21.41022),(39.81115, 21.40581),(39.8114, 21.4056),(39.81159, 21.40525),(39.81163, 21.40487),(39.81157, 21.40426),(39.81209, 21.40103),(39.81211, 21.39966),(39.81193, 21.39818),(39.81097, 21.39505),(39.8115, 21.39475),(39.81252, 21.39399),(39.8134, 21.39321),(39.81416, 21.39245),(39.81607, 21.38983),(39.81662, 21.38928),(39.81728, 21.38874),(39.81819, 21.38814),(39.81928, 21.38768),(39.82014, 21.38742),(39.82059, 21.38733),(39.82164, 21.38725),(39.82287, 21.38723),(39.82462, 21.3871),(39.82443, 21.38782),(39.82441, 21.38855),(39.82457, 21.39047),(39.82464, 21.39192),(39.82479, 21.3973),(39.82485, 21.3976),(39.82514, 21.39842),(39.82525, 21.39865),(39.8258, 21.39947),(39.82635, 21.4),(39.82679, 21.40031),(39.82736, 21.40062),(39.82928, 21.40137),(39.82948, 21.40151),(39.82914, 21.40441),(39.82897, 21.40551),(39.8282, 21.40889),(39.82795, 21.41023),(39.82696, 21.41),(39.82658, 21.40996),(39.82664, 21.40825),(39.82658, 21.40787),(39.82649, 21.40769),(39.82622, 21.40741),(39.82605, 21.40731),(39.82567, 21.40722),(39.82529, 21.40728),(39.82511, 21.40737),(39.82483, 21.40764),(39.82473, 21.40781),(39.82464, 21.40819),(39.82458, 21.41008),(39.8235, 21.41017),(39.82153, 21.41019),(39.82001, 21.40827),(39.81977, 21.40778),(39.81909, 21.40579),(39.81879, 21.40505),(39.81827, 21.40417),(39.81699, 21.40224),(39.8159, 21.4008),(39.81463, 21.39957),(39.8141, 21.39915),(39.81392, 21.39908),(39.81353, 21.39903),(39.81316, 21.39914),(39.81299, 21.39925),(39.81274, 21.39955),(39.81267, 21.39973),(39.81262, 21.40012),(39.81273, 21.40049),(39.81284, 21.40066),(39.81298, 21.4008),(39.81326, 21.40103),(39.81445, 21.40218),(39.81537, 21.40342),(39.81656, 21.40521),(39.81696, 21.40588),(39.81722, 21.40652),(39.81794, 21.4086),(39.81826, 21.40925),(39.81898, 21.41019),(39.81328, 21.41012),(39.81218, 21.41014),(39.81134, 21.41021),(39.81069, 21.41022)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.81909, 21.38545),(39.8181, 21.38496),(39.81759, 21.3846),(39.81476, 21.382),(39.81349, 21.38079),(39.81311, 21.38035),(39.81153, 21.37795),(39.81145, 21.37773),(39.81046, 21.37363),(39.81038, 21.37341),(39.81025, 21.37321),(39.80995, 21.37288),(39.80962, 21.3727),(39.80925, 21.37265),(39.80899, 21.37265),(39.80561, 21.37315),(39.80517, 21.37139),(39.80492, 21.37068),(39.80504, 21.37048),(39.8051, 21.37031),(39.80521, 21.36975),(39.8052, 21.36955),(39.80506, 21.36919),(39.80494, 21.36903),(39.80441, 21.36603),(39.80411, 21.36492),(39.80356, 21.36191),(39.80349, 21.36116),(39.80345, 21.35965),(39.80349, 21.35894),(39.80411, 21.35504),(39.80433, 21.35476),(39.80482, 21.35383),(39.80553, 21.35304),(39.8063, 21.35252),(39.80724, 21.35222),(39.80825, 21.35217),(39.80932, 21.35231),(39.81637, 21.35445),(39.81856, 21.35504),(39.82046, 21.35546),(39.82287, 21.35558),(39.82421, 21.35536),(39.82613, 21.35492),(39.83433, 21.35261),(39.83656, 21.35216),(39.83834, 21.35188),(39.83936, 21.35182),(39.84169, 21.3521),(39.84381, 21.35252),(39.84777, 21.35391),(39.84887, 21.35434),(39.84773, 21.35594),(39.84744, 21.35628),(39.84524, 21.35927),(39.83253, 21.37661),(39.8295, 21.38077),(39.82857, 21.38214),(39.82833, 21.38244),(39.82791, 21.38279),(39.82744, 21.38324),(39.82631, 21.3845),(39.82551, 21.38473),(39.82438, 21.38494),(39.82041, 21.38516),(39.81948, 21.38534),(39.81909, 21.38545)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.8207, 21.42636),(39.82125, 21.42508),(39.82206, 21.42403),(39.82275, 21.42279),(39.82346, 21.42235),(39.82418, 21.42178),(39.82499, 21.42142),(39.8265, 21.42122),(39.83136, 21.42199),(39.83197, 21.42264),(39.83163, 21.4237),(39.8309, 21.425),(39.83051, 21.42553),(39.83031, 21.42574),(39.82948, 21.42628),(39.828, 21.42705),(39.82644, 21.42733),(39.8243, 21.42724),(39.82267, 21.42698),(39.82214, 21.42669),(39.8207, 21.42636)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.82102, 21.42106),(39.82062, 21.42128),(39.82017, 21.42162),(39.8194, 21.42239),(39.81905, 21.4228),(39.81802, 21.42299),(39.8179, 21.42265),(39.81779, 21.42189),(39.8176, 21.42155),(39.81729, 21.42131),(39.81711, 21.42124),(39.81692, 21.4212),(39.81653, 21.42125),(39.81619, 21.42144),(39.81595, 21.42175),(39.81588, 21.42193),(39.81584, 21.42212),(39.81585, 21.42232),(39.81597, 21.42319),(39.81504, 21.42328),(39.81423, 21.42329),(39.80999, 21.42266),(39.80755, 21.42223),(39.80737, 21.42203),(39.80706, 21.42179),(39.80695, 21.42166),(39.80685, 21.42142),(39.80686, 21.42123),(39.80695, 21.42105),(39.80755, 21.42041),(39.80768, 21.42022),(39.80789, 21.41962),(39.80793, 21.41935),(39.80801, 21.41519),(39.80809, 21.41439),(39.80827, 21.41351),(39.80867, 21.41233),(39.80881, 21.41233),(39.80924, 21.41409),(39.80931, 21.41428),(39.80941, 21.41444),(39.80969, 21.41471),(39.81006, 21.41484),(39.81026, 21.41485),(39.81064, 21.41475),(39.81095, 21.41452),(39.81107, 21.41437),(39.8112, 21.414),(39.81121, 21.4138),(39.81118, 21.41361),(39.81088, 21.41239),(39.81311, 21.41248),(39.81908, 21.41249),(39.8197, 21.41244),(39.82006, 21.41251),(39.8204, 21.41251),(39.8209, 21.41367),(39.82144, 21.41481),(39.82169, 21.41562),(39.82182, 21.4166),(39.82176, 21.41785),(39.81945, 21.41827),(39.81851, 21.41855),(39.8182, 21.41879),(39.81809, 21.41895),(39.81801, 21.41913),(39.81796, 21.41951),(39.81807, 21.41989),(39.81831, 21.4202),(39.81865, 21.42039),(39.81884, 21.42043),(39.81903, 21.42044),(39.81994, 21.42021),(39.82154, 21.41992),(39.82154, 21.41997),(39.82102, 21.42106)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.82364, 21.41981),(39.82367, 21.41954),(39.82416, 21.41928),(39.82507, 21.41862),(39.82572, 21.41854),(39.8261, 21.4186),(39.8258, 21.41927),(39.82445, 21.41949),(39.82364, 21.41981)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.82391, 21.41697),(39.82383, 21.41571),(39.82364, 21.41473),(39.82274, 21.41253),(39.82449, 21.41261),(39.82443, 21.41485),(39.82469, 21.41537),(39.82519, 21.41566),(39.82577, 21.41563),(39.82623, 21.41527),(39.82642, 21.41472),(39.82648, 21.41309),(39.82695, 21.41321),(39.82661, 21.41499),(39.82657, 21.41567),(39.82683, 21.41674),(39.82634, 21.4166),(39.82514, 21.41656),(39.82446, 21.41671),(39.82391, 21.41697)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.82779, 21.43244),(39.82826, 21.43377),(39.82849, 21.43431),(39.82776, 21.4346),(39.82626, 21.43537),(39.82591, 21.43559),(39.8245, 21.43597),(39.82298, 21.4366),(39.822, 21.43711),(39.82165, 21.43723),(39.82055, 21.43753),(39.81734, 21.43816),(39.81631, 21.43843),(39.81333, 21.43905),(39.81312, 21.43912),(39.81267, 21.43934),(39.81245, 21.4395),(39.81128, 21.4405),(39.81094, 21.44064),(39.81165, 21.43717),(39.81218, 21.43422),(39.81403, 21.43504),(39.81432, 21.4353),(39.8145, 21.43538),(39.81489, 21.43543),(39.81499, 21.43547),(39.81655, 21.4363),(39.81714, 21.4365),(39.81776, 21.43662),(39.81815, 21.43662),(39.81834, 21.43656),(39.81861, 21.43638),(39.81889, 21.43636),(39.81948, 21.43622),(39.82014, 21.43593),(39.82092, 21.4354),(39.82179, 21.43448),(39.82309, 21.43346),(39.82425, 21.43281),(39.82484, 21.43263),(39.82515, 21.43258),(39.82779, 21.43244)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.82819, 21.42907),(39.82814, 21.4304),(39.82488, 21.43059),(39.82445, 21.43066),(39.82337, 21.43101),(39.82191, 21.43183),(39.82049, 21.43295),(39.81955, 21.43393),(39.81912, 21.43421),(39.81892, 21.4343),(39.81862, 21.43437),(39.81829, 21.4344),(39.81774, 21.43434),(39.81632, 21.43374),(39.81706, 21.43236),(39.81724, 21.4319),(39.81748, 21.43143),(39.81812, 21.43039),(39.81845, 21.42992),(39.81919, 21.42907),(39.81933, 21.42884),(39.81964, 21.4281),(39.82006, 21.42826),(39.82103, 21.4285),(39.82135, 21.42873),(39.82154, 21.42879),(39.82284, 21.42907),(39.82412, 21.42923),(39.8253, 21.42933),(39.82659, 21.42933),(39.8273, 21.42926),(39.82819, 21.42907)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.82876, 21.41802),(39.83007, 21.41793),(39.83168, 21.41763),(39.83252, 21.41736),(39.8333, 21.41696),(39.83461, 21.41893),(39.83507, 21.41978),(39.83524, 21.42063),(39.8353, 21.42147),(39.83401, 21.42163),(39.83388, 21.42071),(39.83352, 21.41999),(39.83348, 21.41968),(39.83332, 21.41932),(39.83276, 21.41877),(39.8319, 21.41823),(39.83077, 21.41798),(39.82876, 21.41802)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.83035, 21.42986),(39.8304, 21.42866),(39.83018, 21.42818),(39.83125, 21.42753),(39.83199, 21.42688),(39.83261, 21.42604),(39.83342, 21.42459),(39.83365, 21.42395),(39.83444, 21.42391),(39.83496, 21.4238),(39.83479, 21.42429),(39.83281, 21.42802),(39.83184, 21.42901),(39.83126, 21.4294),(39.83035, 21.42986)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.83154, 21.41527),(39.83052, 21.41557),(39.82875, 21.41575),(39.82868, 21.41557),(39.8287, 21.41522),(39.82898, 21.41382),(39.83043, 21.41432),(39.83154, 21.41527)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.83509, 21.41604),(39.839, 21.41402),(39.84021, 21.41316),(39.84098, 21.41247),(39.84179, 21.41159),(39.8438, 21.40921),(39.84747, 21.40466),(39.84802, 21.40381),(39.84838, 21.40303),(39.84864, 21.40216),(39.84886, 21.40096),(39.849, 21.39949),(39.84909, 21.39896),(39.84924, 21.39842),(39.84956, 21.39772),(39.85004, 21.39711),(39.8502, 21.39695),(39.8506, 21.39665),(39.85157, 21.39618),(39.853, 21.39569),(39.85363, 21.39558),(39.85396, 21.39547),(39.8544, 21.39524),(39.8547, 21.39503),(39.85499, 21.39478),(39.85617, 21.39361),(39.85696, 21.39291),(39.85746, 21.39236),(39.8579, 21.39179),(39.85877, 21.39085),(39.86338, 21.39308),(39.86446, 21.39356),(39.86531, 21.39402),(39.86577, 21.39435),(39.86651, 21.39507),(39.86596, 21.3955),(39.86532, 21.39609),(39.86472, 21.39688),(39.86379, 21.39863),(39.86138, 21.40439),(39.86035, 21.4064),(39.85537, 21.41465),(39.85266, 21.41823),(39.85145, 21.41971),(39.85133, 21.4198),(39.85092, 21.41997),(39.84912, 21.42017),(39.84516, 21.42027),(39.84289, 21.42044),(39.83728, 21.4212),(39.83723, 21.42043),(39.83701, 21.4193),(39.83677, 21.41867),(39.83632, 21.41789),(39.83509, 21.41604)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.84628, 21.43181),(39.84808, 21.43261),(39.84783, 21.43302),(39.84618, 21.43694),(39.84577, 21.43776),(39.84437, 21.43886),(39.84394, 21.43902),(39.84241, 21.43929),(39.84185, 21.43935),(39.8414, 21.43937),(39.83966, 21.43925),(39.83928, 21.4393),(39.83876, 21.43957),(39.83857, 21.43971),(39.8382, 21.44005),(39.83781, 21.44051),(39.83637, 21.44071),(39.83611, 21.4407),(39.83599, 21.44066),(39.83589, 21.44058),(39.83584, 21.44048),(39.83575, 21.43989),(39.83567, 21.43963),(39.83545, 21.43919),(39.83508, 21.4388),(39.83491, 21.4387),(39.83472, 21.43864),(39.83453, 21.43861),(39.83433, 21.43862),(39.83409, 21.4387),(39.83396, 21.43862),(39.83377, 21.43814),(39.83364, 21.43792),(39.83319, 21.43732),(39.83279, 21.43689),(39.83253, 21.43633),(39.8323, 21.43541),(39.83224, 21.43523),(39.83214, 21.43506),(39.83189, 21.43474),(39.83144, 21.43432),(39.83111, 21.43413),(39.8305, 21.43392),(39.82999, 21.43269),(39.83002, 21.43255),(39.82998, 21.43209),(39.83109, 21.43171),(39.8318, 21.43138),(39.83234, 21.43109),(39.83301, 21.43064),(39.83338, 21.43032),(39.83365, 21.43037),(39.84139, 21.43101),(39.8432, 21.43126),(39.84419, 21.43134),(39.84517, 21.43149),(39.84628, 21.43181)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.84703, 21.39096),(39.84715, 21.39117),(39.84744, 21.39143),(39.84761, 21.39151),(39.84787, 21.39156),(39.84872, 21.39256),(39.84882, 21.39314),(39.84858, 21.39443),(39.84842, 21.39495),(39.848, 21.39601),(39.84714, 21.39783),(39.84698, 21.39845),(39.84677, 21.40025),(39.84654, 21.40175),(39.84636, 21.40234),(39.84612, 21.40283),(39.84579, 21.40335),(39.84226, 21.4074),(39.8407, 21.40935),(39.83947, 21.41065),(39.83831, 21.41161),(39.8377, 21.41205),(39.83345, 21.41428),(39.83247, 21.41344),(39.83245, 21.41324),(39.83239, 21.41305),(39.8323, 21.41288),(39.83217, 21.41273),(39.83121, 21.41178),(39.83068, 21.41134),(39.83015, 21.41099),(39.83001, 21.41065),(39.83052, 21.40833),(39.83112, 21.40587),(39.8317, 21.40157),(39.83168, 21.40101),(39.83164, 21.40082),(39.83137, 21.40027),(39.83115, 21.39999),(39.83083, 21.39971),(39.83052, 21.39952),(39.8284, 21.39872),(39.82797, 21.39848),(39.82767, 21.39827),(39.82744, 21.39803),(39.82711, 21.39753),(39.827, 21.39726),(39.82693, 21.3969),(39.82679, 21.39172),(39.82659, 21.38808),(39.82672, 21.38766),(39.82705, 21.38702),(39.82746, 21.38644),(39.83156, 21.38522),(39.83244, 21.38503),(39.83282, 21.38502),(39.83372, 21.38517),(39.83421, 21.38535),(39.83473, 21.38565),(39.83527, 21.38603),(39.83533, 21.38622),(39.83555, 21.38655),(39.83588, 21.38676),(39.83607, 21.38681),(39.83738, 21.38827),(39.83788, 21.38875),(39.83886, 21.38944),(39.83905, 21.38954),(39.83962, 21.38978),(39.84022, 21.38998),(39.84135, 21.39018),(39.84179, 21.39021),(39.84192, 21.39029),(39.8423, 21.3904),(39.84269, 21.39035),(39.84282, 21.39029),(39.84546, 21.39049),(39.84593, 21.39055),(39.84632, 21.39064),(39.84672, 21.39079),(39.84703, 21.39096)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.84886, 21.43817),(39.85002, 21.43712),(39.85126, 21.43554),(39.85158, 21.43529),(39.85427, 21.4341),(39.85471, 21.4338),(39.85655, 21.43378),(39.85785, 21.43364),(39.85715, 21.43444),(39.85687, 21.43452),(39.85609, 21.43509),(39.85562, 21.43524),(39.85418, 21.43543),(39.85305, 21.43578),(39.85245, 21.43611),(39.85064, 21.43763),(39.85024, 21.43783),(39.84886, 21.43817)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.85537, 21.42292),(39.85579, 21.42569),(39.85581, 21.42611),(39.85559, 21.4266),(39.85335, 21.42856),(39.85159, 21.43039),(39.85001, 21.43114),(39.84921, 21.43092),(39.84693, 21.42992),(39.84558, 21.42953),(39.84158, 21.42902),(39.83488, 21.42846),(39.83661, 21.42511),(39.8371, 21.42353),(39.84406, 21.42267),(39.84527, 21.4226),(39.85309, 21.42252),(39.85438, 21.42267),(39.85537, 21.42292)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.85972, 21.41943),(39.86333, 21.41545),(39.8703, 21.40829),(39.87409, 21.40552),(39.87517, 21.40688),(39.87599, 21.40806),(39.87819, 21.41186),(39.87494, 21.41418),(39.87458, 21.41459),(39.87399, 21.41555),(39.87339, 21.41616),(39.86496, 21.42173),(39.86398, 21.42216),(39.86342, 21.42231),(39.86213, 21.42238),(39.85971, 21.42177),(39.86001, 21.42041),(39.85992, 21.41983),(39.85972, 21.41943)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.86021, 21.38932),(39.86365, 21.38583),(39.86459, 21.38516),(39.86624, 21.38442),(39.86768, 21.38403),(39.86962, 21.38393),(39.8717, 21.38431),(39.87299, 21.3847),(39.8729, 21.38575),(39.87303, 21.38632),(39.87188, 21.38979),(39.87157, 21.39051),(39.87068, 21.39174),(39.87013, 21.39226),(39.8681, 21.39384),(39.86709, 21.39285),(39.86632, 21.39229),(39.86021, 21.38932)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.86272, 21.42529),(39.86276, 21.42495),(39.86273, 21.42476),(39.86266, 21.42457),(39.86255, 21.42441),(39.8638, 21.42428),(39.8642, 21.42419),(39.86474, 21.42401),(39.86583, 21.42353),(39.86774, 21.42232),(39.87468, 21.41769),(39.87519, 21.41722),(39.87556, 21.41679),(39.87623, 21.41572),(39.87632, 21.41563),(39.87919, 21.41359),(39.88011, 21.41502),(39.88112, 21.41677),(39.88159, 21.4177),(39.88115, 21.41807),(39.88045, 21.41821),(39.87899, 21.41871),(39.87817, 21.41908),(39.87653, 21.41992),(39.87497, 21.42078),(39.87348, 21.42172),(39.87086, 21.42355),(39.86554, 21.42759),(39.86429, 21.4284),(39.86344, 21.42888),(39.86315, 21.42914),(39.86304, 21.42931),(39.86297, 21.42949),(39.86288, 21.42955),(39.86345, 21.42732),(39.86493, 21.42715),(39.86628, 21.42693),(39.86645, 21.42685),(39.86674, 21.42659),(39.86691, 21.42623),(39.86694, 21.42604),(39.86693, 21.42584),(39.8668, 21.42548),(39.86654, 21.42519),(39.86618, 21.42502),(39.86599, 21.42499),(39.86579, 21.425),(39.86465, 21.42517),(39.86303, 21.42536),(39.86272, 21.42529)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.87268, 21.3607),(39.87229, 21.37234),(39.87238, 21.37312),(39.8727, 21.37412),(39.87403, 21.3768),(39.87459, 21.37751),(39.87492, 21.3778),(39.87565, 21.3783),(39.87539, 21.37897),(39.87431, 21.38235),(39.87402, 21.38249),(39.87222, 21.38192),(39.87075, 21.38162),(39.86994, 21.38153),(39.86868, 21.38151),(39.86677, 21.38175),(39.86582, 21.382),(39.86468, 21.38241),(39.86373, 21.38286),(39.86273, 21.38347),(39.8619, 21.3841),(39.86106, 21.38489),(39.85782, 21.38829),(39.85728, 21.38809),(39.85678, 21.38807),(39.85608, 21.38827),(39.85576, 21.38852),(39.85553, 21.38885),(39.8554, 21.38933),(39.85538, 21.38957),(39.85547, 21.38999),(39.85567, 21.39042),(39.85495, 21.39109),(39.85387, 21.39231),(39.8531, 21.39292),(39.85269, 21.39312),(39.85256, 21.39313),(39.85225, 21.39306),(39.8512, 21.39193),(39.84972, 21.39016),(39.84959, 21.39004),(39.84879, 21.38937),(39.8481, 21.38893),(39.84746, 21.38863),(39.84605, 21.38825),(39.84136, 21.38785),(39.84054, 21.3877),(39.84015, 21.38753),(39.83982, 21.38734),(39.8394, 21.38701),(39.83693, 21.38443),(39.83665, 21.38418),(39.83518, 21.38321),(39.83492, 21.38309),(39.83413, 21.38287),(39.83345, 21.38279),(39.83236, 21.38277),(39.83156, 21.38286),(39.83051, 21.38312),(39.83637, 21.37503),(39.84749, 21.35985),(39.84785, 21.35942),(39.84912, 21.35812),(39.84948, 21.35783),(39.84985, 21.35763),(39.85045, 21.35745),(39.8545, 21.35696),(39.85519, 21.35698),(39.85738, 21.35754),(39.85971, 21.35848),(39.86135, 21.35892),(39.86264, 21.35917),(39.8703, 21.36038),(39.87268, 21.3607)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.8728, 21.40398),(39.86889, 21.40686),(39.86188, 21.41407),(39.8567, 21.41973),(39.85571, 21.42095),(39.85474, 21.4207),(39.85357, 21.42055),(39.8571, 21.4159),(39.8598, 21.4115),(39.86247, 21.40702),(39.86312, 21.40575),(39.86566, 21.39964),(39.86637, 21.39829),(39.86702, 21.39748),(39.86801, 21.39659),(39.86852, 21.39711),(39.86908, 21.39794),(39.87126, 21.40177),(39.87192, 21.40283),(39.8728, 21.40398)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.87571, 21.40434),(39.87841, 21.40243),(39.88448, 21.39962),(39.88786, 21.4056),(39.8874, 21.40591),(39.8848, 21.40843),(39.88417, 21.40934),(39.8834, 21.41072),(39.88317, 21.41098),(39.8828, 21.41129),(39.88232, 21.41144),(39.88197, 21.41139),(39.88098, 21.41104),(39.88003, 21.41105),(39.8777, 21.40702),(39.87679, 21.40571),(39.87571, 21.40434)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.87603, 21.38534),(39.88308, 21.38753),(39.88293, 21.38778),(39.88223, 21.38927),(39.88216, 21.3895),(39.88185, 21.39103),(39.88178, 21.39207),(39.88187, 21.39333),(39.8821, 21.39461),(39.88234, 21.39542),(39.88273, 21.39643),(39.88352, 21.39787),(39.87797, 21.4004),(39.87743, 21.40069),(39.87678, 21.4011),(39.87442, 21.40281),(39.87359, 21.40173),(39.87299, 21.40077),(39.87076, 21.39685),(39.87013, 21.39591),(39.8696, 21.39535),(39.8714, 21.39394),(39.87198, 21.39344),(39.87254, 21.39286),(39.87317, 21.39206),(39.87356, 21.39139),(39.87399, 21.39041),(39.87552, 21.3857),(39.87573, 21.38561),(39.87603, 21.38534)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.87658, 21.37651),(39.87598, 21.37607),(39.87578, 21.37582),(39.87453, 21.3733),(39.87429, 21.37232),(39.87467, 21.36095),(39.87758, 21.36131),(39.87798, 21.36151),(39.88107, 21.36223),(39.88281, 21.36325),(39.88379, 21.36404),(39.88498, 21.36539),(39.88608, 21.36683),(39.8788, 21.37364),(39.8776, 21.375),(39.87658, 21.37651)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.88137, 21.4133),(39.88234, 21.41345),(39.88299, 21.41336),(39.88369, 21.41308),(39.88421, 21.41275),(39.88498, 21.41196),(39.88634, 21.40971),(39.88889, 21.40731),(39.89212, 21.41262),(39.89182, 21.41282),(39.89033, 21.41422),(39.88928, 21.41434),(39.88824, 21.41479),(39.88626, 21.41669),(39.88579, 21.41696),(39.88471, 21.41737),(39.88379, 21.4176),(39.88287, 21.41579),(39.88137, 21.4133)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.88532, 21.36227),(39.89047, 21.36299),(39.88935, 21.36357),(39.889, 21.36359),(39.88711, 21.36335),(39.88654, 21.36324),(39.88587, 21.36295),(39.88576, 21.36273),(39.88532, 21.36227)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.88646, 21.39869),(39.89349, 21.39545),(39.8941, 21.39505),(39.89698, 21.39264),(39.89974, 21.3939),(39.89882, 21.39616),(39.89759, 21.39804),(39.8959, 21.40038),(39.89488, 21.40142),(39.89409, 21.40204),(39.89129, 21.40342),(39.88971, 21.40437),(39.88646, 21.39869)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.89317, 21.40473),(39.8952, 21.40371),(39.89574, 21.40332),(39.89629, 21.40285),(39.89739, 21.40172),(39.89925, 21.39916),(39.90055, 21.39718),(39.90145, 21.39501),(39.90173, 21.39491),(39.90189, 21.3948),(39.90252, 21.39409),(39.90289, 21.39384),(39.90396, 21.3934),(39.90422, 21.39338),(39.90436, 21.39343),(39.9044, 21.39349),(39.90404, 21.39369),(39.9037, 21.39396),(39.90351, 21.39416),(39.90319, 21.39463),(39.9027, 21.39571),(39.90267, 21.3959),(39.90268, 21.3961),(39.90281, 21.39646),(39.90293, 21.39662),(39.90307, 21.39675),(39.90324, 21.39685),(39.90362, 21.39695),(39.90382, 21.39694),(39.90418, 21.39681),(39.90447, 21.39655),(39.90505, 21.39544),(39.90523, 21.39531),(39.90547, 21.39528),(39.90556, 21.39529),(39.90572, 21.39537),(39.90592, 21.39552),(39.90662, 21.39645),(39.906, 21.39651),(39.9052, 21.39665),(39.90396, 21.39711),(39.90363, 21.39731),(39.9035, 21.39746),(39.90341, 21.39763),(39.90332, 21.39801),(39.90313, 21.39836),(39.90309, 21.39856),(39.90308, 21.39875),(39.90312, 21.39895),(39.90329, 21.39929),(39.90343, 21.39944),(39.90376, 21.39963),(39.90415, 21.39968),(39.90743, 21.39882),(39.90786, 21.39882),(39.90822, 21.39894),(39.9085, 21.39911),(39.90876, 21.39934),(39.9095, 21.40036),(39.90976, 21.40084),(39.90998, 21.40146),(39.91019, 21.40247),(39.90991, 21.40276),(39.90931, 21.40349),(39.90896, 21.40373),(39.90674, 21.40608),(39.90348, 21.40934),(39.9024, 21.41059),(39.90214, 21.4108),(39.90157, 21.41114),(39.90101, 21.41142),(39.90053, 21.41156),(39.90001, 21.41165),(39.89952, 21.41166),(39.89816, 21.41146),(39.89719, 21.4114),(39.8962, 21.41124),(39.89535, 21.41126),(39.89484, 21.41133),(39.89435, 21.41148),(39.89405, 21.41163),(39.89166, 21.4077),(39.89109, 21.40671),(39.89172, 21.4064),(39.89219, 21.40606),(39.89252, 21.40568),(39.89317, 21.40473)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.89343, 21.41478),(39.89599, 21.41909),(39.8969, 21.42055),(39.89729, 21.42134),(39.89771, 21.42243),(39.8981, 21.42371),(39.89874, 21.4253),(39.89905, 21.42595),(39.89945, 21.42665),(39.89984, 21.42723),(39.90044, 21.42799),(39.90305, 21.43104),(39.9031, 21.43127),(39.90311, 21.43155),(39.90306, 21.43194),(39.9017, 21.43639),(39.90122, 21.43585),(39.90098, 21.43544),(39.90059, 21.43417),(39.90029, 21.43348),(39.89965, 21.43238),(39.89683, 21.4285),(39.89643, 21.42802),(39.89572, 21.4274),(39.89208, 21.42467),(39.8859, 21.42038),(39.88621, 21.41977),(39.8863, 21.41948),(39.88648, 21.41926),(39.88752, 21.4184),(39.88777, 21.4181),(39.88784, 21.41793),(39.88939, 21.41644),(39.88975, 21.41629),(39.89056, 21.41626),(39.891, 21.41612),(39.89343, 21.41478)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.89348, 21.39296),(39.89286, 21.39348),(39.89194, 21.39401),(39.88552, 21.39692),(39.8847, 21.3955),(39.88413, 21.39366),(39.88401, 21.39185),(39.88434, 21.39012),(39.88475, 21.38944),(39.88506, 21.38913),(39.88593, 21.38845),(39.88615, 21.38848),(39.88648, 21.38874),(39.88738, 21.38915),(39.89272, 21.39085),(39.89371, 21.39128),(39.89392, 21.39143),(39.89398, 21.39158),(39.89408, 21.39224),(39.89348, 21.39296)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.89411, 21.37812),(39.89305, 21.37935),(39.89229, 21.38007),(39.89129, 21.38085),(39.88637, 21.38398),(39.88501, 21.38505),(39.88428, 21.38581),(39.87665, 21.38344),(39.87669, 21.38209),(39.87721, 21.38049),(39.87864, 21.37771),(39.8796, 21.37629),(39.88162, 21.37426),(39.88637, 21.36994),(39.88657, 21.36988),(39.88706, 21.37),(39.88876, 21.37081),(39.88896, 21.37101),(39.89013, 21.37233),(39.89156, 21.37426),(39.89332, 21.37678),(39.89411, 21.37812)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.89963, 21.38706),(39.8989, 21.38816),(39.8987, 21.38839),(39.89842, 21.38854),(39.89495, 21.38902),(39.8945, 21.38902),(39.89358, 21.38881),(39.89293, 21.38854),(39.88689, 21.38662),(39.88679, 21.38636),(39.88745, 21.38587),(39.89342, 21.38207),(39.89382, 21.38213),(39.89462, 21.38259),(39.89517, 21.38281),(39.8958, 21.38288),(39.89673, 21.3828),(39.89855, 21.38564),(39.89963, 21.38706)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.90063, 21.43987),(39.89683, 21.45214),(39.8956, 21.45625),(39.89544, 21.45648),(39.89523, 21.45671),(39.89504, 21.45685),(39.89446, 21.45714),(39.89298, 21.45776),(39.89025, 21.4587),(39.88889, 21.4589),(39.88829, 21.45893),(39.88695, 21.45888),(39.88613, 21.45869),(39.88496, 21.45834),(39.88205, 21.45719),(39.88115, 21.45672),(39.87854, 21.45483),(39.87734, 21.45423),(39.87619, 21.45386),(39.871, 21.45278),(39.87018, 21.45257),(39.86828, 21.45177),(39.86695, 21.45101),(39.86592, 21.45008),(39.86505, 21.44914),(39.86307, 21.44683),(39.86096, 21.44427),(39.86036, 21.44351),(39.85993, 21.44287),(39.85876, 21.44092),(39.85863, 21.4405),(39.85853, 21.4385),(39.85845, 21.43789),(39.85841, 21.4377),(39.85799, 21.43648),(39.85816, 21.43625),(39.85861, 21.4358),(39.86082, 21.43328),(39.86139, 21.43272),(39.86152, 21.43255),(39.86213, 21.43226),(39.86471, 21.4308),(39.86495, 21.4305),(39.86503, 21.43028),(39.86671, 21.42921),(39.87205, 21.42516),(39.87456, 21.4234),(39.87601, 21.42249),(39.87745, 21.42169),(39.87968, 21.42059),(39.88, 21.42048),(39.88078, 21.42029),(39.88189, 21.4201),(39.8827, 21.41988),(39.88297, 21.4204),(39.8836, 21.42141),(39.88376, 21.42162),(39.88439, 21.4222),(39.89129, 21.42698),(39.89334, 21.42853),(39.89452, 21.42953),(39.89488, 21.42994),(39.89779, 21.43386),(39.89841, 21.43486),(39.89868, 21.43546),(39.89962, 21.43833),(39.89972, 21.4385),(39.8999, 21.43867),(39.90027, 21.43939),(39.90063, 21.43987)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.9044, 21.42901),(39.90248, 21.42675),(39.90195, 21.4262),(39.90111, 21.42499),(39.90059, 21.42408),(39.90038, 21.42359),(39.89991, 21.42209),(39.89946, 21.42086),(39.89889, 21.41972),(39.89911, 21.41951),(39.89926, 21.41931),(39.89948, 21.41892),(39.89961, 21.41855),(39.89964, 21.41816),(39.89957, 21.41767),(39.89948, 21.41741),(39.89925, 21.417),(39.89899, 21.41667),(39.89887, 21.41624),(39.89879, 21.41607),(39.89867, 21.41591),(39.89852, 21.41578),(39.89835, 21.41569),(39.89816, 21.41562),(39.89777, 21.41561),(39.89741, 21.41575),(39.89725, 21.41587),(39.89712, 21.41602),(39.89703, 21.41619),(39.89696, 21.41645),(39.89537, 21.41379),(39.89576, 21.4136),(39.89645, 21.41343),(39.89707, 21.41339),(39.89798, 21.41346),(39.89948, 21.41366),(39.90026, 21.41364),(39.90105, 21.4135),(39.90182, 21.41325),(39.90257, 21.41288),(39.90323, 21.41248),(39.90385, 21.41197),(39.90475, 21.41093),(39.90476, 21.41108),(39.90482, 21.41126),(39.90492, 21.41143),(39.9052, 21.4117),(39.90538, 21.41179),(39.90589, 21.4119),(39.90633, 21.41211),(39.90744, 21.4129),(39.90772, 21.41318),(39.9078, 21.4133),(39.90791, 21.41361),(39.90793, 21.41377),(39.9079, 21.41405),(39.90795, 21.41444),(39.90814, 21.41478),(39.90724, 21.41976),(39.90704, 21.42054),(39.90545, 21.42577),(39.9044, 21.42901)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.91229, 21.40316),(39.91302, 21.40213),(39.91357, 21.40253),(39.91432, 21.40334),(39.91464, 21.40392),(39.91478, 21.40442),(39.91478, 21.40479),(39.91465, 21.40516),(39.91433, 21.40548),(39.914, 21.40563),(39.91331, 21.4056),(39.9128, 21.40534),(39.91261, 21.40516),(39.91238, 21.40474),(39.91229, 21.40316)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.93436, 21.4816),(39.93241, 21.48133),(39.92917, 21.48071),(39.92795, 21.48063),(39.92391, 21.48004),(39.92213, 21.47963),(39.92017, 21.47891),(39.91245, 21.47545),(39.91099, 21.47469),(39.9098, 21.47394),(39.90843, 21.47286),(39.90708, 21.4716),(39.90445, 21.46837),(39.90205, 21.46552),(39.90002, 21.46344),(39.89957, 21.4628),(39.8993, 21.46223),(39.89803, 21.45836),(39.898, 21.45747),(39.89804, 21.45702),(39.90192, 21.44447),(39.9022, 21.44387),(39.90238, 21.44363),(39.90272, 21.44337),(39.90406, 21.44277),(39.90471, 21.44266),(39.90601, 21.44278),(39.90621, 21.44277),(39.90655, 21.44267),(39.90946, 21.44274),(39.91033, 21.44282),(39.91091, 21.44294),(39.91136, 21.44311),(39.912, 21.44341),(39.91274, 21.44388),(39.91397, 21.44474),(39.9147, 21.44511),(39.91571, 21.44553),(39.91731, 21.44594),(39.9197, 21.44635),(39.92104, 21.44677),(39.92156, 21.44697),(39.92234, 21.44739),(39.92405, 21.44847),(39.92538, 21.44954),(39.92675, 21.45043),(39.92962, 21.4519),(39.93035, 21.45214),(39.93227, 21.45265),(39.93426, 21.45311),(39.93484, 21.45321),(39.93669, 21.45325),(39.9378, 21.4532),(39.93928, 21.45321),(39.94077, 21.45341),(39.94229, 21.45381),(39.94572, 21.45459),(39.94649, 21.45483),(39.94901, 21.45579),(39.93559, 21.4801),(39.93508, 21.48113),(39.93479, 21.48161),(39.93436, 21.4816)]);
SELECT pointInPolygon((39.840202, 21.451471), [(39.95221, 21.34705),(39.95232, 21.34622),(39.95252, 21.3457),(39.95278, 21.34519),(39.95313, 21.34467),(39.95355, 21.34423),(39.95402, 21.34383),(39.95944, 21.34052),(39.96716, 21.3359),(39.96818, 21.33546),(39.96952, 21.33507),(39.97082, 21.33491),(39.97164, 21.33491),(39.97628, 21.33524),(39.97843, 21.33549),(39.98862, 21.33691),(39.99004, 21.33729),(39.99099, 21.33767),(39.9921, 21.33826),(39.99311, 21.339),(39.99377, 21.33959),(39.99466, 21.34067),(39.99517, 21.3415),(39.9956, 21.34231),(39.99591, 21.34323),(39.99606, 21.34384),(39.99627, 21.34514),(39.99627, 21.34711),(39.99622, 21.34781),(39.99493, 21.3532),(39.99449, 21.35441),(39.99377, 21.35575),(39.99337, 21.3563),(39.99265, 21.35702),(39.99047, 21.35841),(39.98785, 21.36027),(39.98739, 21.36066),(39.98664, 21.36148),(39.98629, 21.36203),(39.98604, 21.36261),(39.98588, 21.36326),(39.98582, 21.36386),(39.98584, 21.36461),(39.98597, 21.36522),(39.98613, 21.36571),(39.98645, 21.36645),(39.98769, 21.36884),(39.98792, 21.36953),(39.98811, 21.37052),(39.98876, 21.37739),(39.98869, 21.37821),(39.98863, 21.37841),(39.98851, 21.37867),(39.98808, 21.37931),(39.98785, 21.37954),(39.98758, 21.37973),(39.98671, 21.38013),(39.98624, 21.38023),(39.98142, 21.38031),(39.9805, 21.38024),(39.97978, 21.38003),(39.97949, 21.37987),(39.97917, 21.37962),(39.97889, 21.37936),(39.97864, 21.37904),(39.9778, 21.37783),(39.97605, 21.37561),(39.96729, 21.36519),(39.96247, 21.36003),(39.95955, 21.35682),(39.95867, 21.35593),(39.95499, 21.3519),(39.95402, 21.35093),(39.95309, 21.34984),(39.95262, 21.34915),(39.95236, 21.34849),(39.95225, 21.34799),(39.95218, 21.34733),(39.95221, 21.34705)]);
SELECT pointInPolygon((4, 4), poly) FROM polygons ORDER BY id;
SELECT pointInPolygon((4, 9), poly) FROM polygons ORDER BY id;
SELECT pointInPolygon((4., 2.), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (3., 5.), (5., 5.), (5., 3.)]);
SELECT pointInPolygon((4., 2.), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (5., 3.), (5., 5.), (3., 5.)]);
SELECT pointInPolygon((4., 4.), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (3., 5.), (5., 5.), (5., 3.)]);
SELECT pointInPolygon((4., 4.), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (5., 3.), (5., 5.), (3., 5.)]);
SELECT pointInPolygon((4.1, .1), [(6., 0.), (0., 2.), (5., 8.), (8., 4.)]);
SELECT pointInPolygon((4.1, .9), [(6., 0.), (0., 2.), (5., 8.), (8., 4.)]);
SELECT pointInPolygon((4.1, 0.1), [(6., 0.), (8., 4.), (5., 8.), (0., 2.), (6., 0.)]);
SELECT pointInPolygon((4.5, 1.5), [(0., 0.), (7., 0.), (7., 3.), (0., 3.)], [(1., 1.), (2., 1.), (2., 2.), (1., 2.)], [(3., 1.), (4., 1.), (4., 2.), (3., 2.)], [(5., 1.), (6., 1.), (6., 2.), (5., 2.)]);
SELECT pointInPolygon((4.9, 0.9), [(6., 0.), (8., 4.), (5., 8.), (0., 2.), (6., 0.)]);
SELECT pointInPolygon((5.5, 1.5), [(0., 0.), (7., 0.), (7., 3.), (0., 3.)], [(1., 1.), (2., 1.), (2., 2.), (1., 2.)], [(3., 1.), (4., 1.), (4., 2.), (3., 2.)], [(5., 1.), (6., 1.), (6., 2.), (5., 2.)]);
SELECT pointInPolygon((6., 5.), [(6., 1.), (8., 4.), (5., 8.), (1., 2.), (6., 1.)]);
SELECT pointInPolygon((6.5, 1.5), [(0., 0.), (7., 0.), (7., 3.), (0., 3.)], [(1., 1.), (2., 1.), (2., 2.), (1., 2.)], [(3., 1.), (4., 1.), (4., 2.), (3., 2.)], [(5., 1.), (6., 1.), (6., 2.), (5., 2.)]);
SELECT pointInPolygon((9, 4), poly) FROM polygons ORDER BY id;
SELECT pointInPolygon((9, 9), poly) FROM polygons ORDER BY id;
SELECT pointInPolygon((9., 9.), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)], [(3., 3.), (3., 5.), (5., 5.), (5., 3.)]);
SELECT pointInPolygon((9., 9.), [(4., 0.), (8., 4.), (4., 8.), (0., 4.)],[(3., 3.), (5., 3.), (5., 5.), (3., 5.)]);
SELECT pointInPolygon((nan, 10.000100135803223), [(39.83154, 21.41527), (2., 1000.0001220703125), (39.90033, 21.37195), (1.000100016593933, 10.000100135803223), (39.83051, 21.42553), (39.82898, 21.41382), (39.83043, 21.41432), (39.83154, 21.41527)]);
SELECT pointInPolygon(pt, poly) FROM polygons ORDER BY id;
select polygonAreaCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.)]]]);
SELECT polygonAreaCartesian([]);
select polygonConvexHullCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.), (2., 3.)]]]);
select polygonPerimeterCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.), (0., 0.)]]]);
select polygonsDistanceCartesian([[[(0, 0), (0, 0.1), (0.1, 0.1), (0.1, 0)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
select polygonsDistanceCartesian([[[(0, 0),(0, 3),(1, 2.9),(2, 2.6),(2.6, 2),(2.9, 1),(3, 0),(0, 0)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
select polygonsDistanceSpherical([[[(23.725750, 37.971536)]]], [[[(4.3826169, 50.8119483)]]]);
select polygonsDistanceSpherical(x, y) from polygon_01302;
select polygonsEqualsCartesian([[[(0, 0),(0, 3),(1, 2.9),(2, 2.6),(2.6, 2),(2.9, 1),(3, 0),(0, 0)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
select polygonsEqualsCartesian([[[(1., 1.),(1., 4.),(4., 4.),(4., 1.)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
select polygonsIntersectionCartesian([[[(0., 0.),(0., 3.),(1., 2.9),(2., 2.6),(2.6, 2.),(2.9, 1.),(3., 0.),(0., 0.)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
select polygonsIntersectionCartesian([[[(0., 0.),(0., 3.),(1., 2.9),(2., 2.6),(2.6, 2.),(2.9, 1.),(3., 0.),(0., 0.)]]], [[[(3., 3.),(3., 4.),(4., 4.),(4., 3.),(3., 3.)]]]);
select polygonsSymDifferenceCartesian([[[(0, 0),(0, 3),(1, 2.9),(2, 2.6),(2.6, 2),(2.9, 1),(3, 0),(0, 0)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
SELECT polygonsSymDifferenceCartesian([[[(1., 1.)]] AS x], [x]) GROUP BY x WITH ROLLUP;
SELECT polygonsSymDifferenceCartesian([[[(100.0001, 1000.0001), (-20., 20.), (10., 10.), (20., 20.), (20., -20.), (1000.0001, 1.1920928955078125e-7)]],[[(0.0001, 100000000000000000000.)]] AS x],[x]) GROUP BY x WITH ROLLUP;
select polygonsUnionCartesian([[[(0., 0.),(0., 3.),(1., 2.9),(2., 2.6),(2.6, 2.),(2.9, 1),(3., 0.),(0., 0.)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
select polygonsWithinCartesian([[[(0, 0),(0, 3),(1, 2.9),(2, 2.6),(2.6, 2),(2.9, 1),(3, 0),(0, 0)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
select polygonsWithinCartesian([[[(2., 2.), (2., 3.), (3., 3.), (3., 2.)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);
select polygonsWithinSpherical([[[(4.3501568, 50.8518269), (4.3444920, 50.8439961), (4.3565941, 50.8443213), (4.3501568, 50.8518269)]]], [[[(4.3679450, 50.8524550),(4.3466930, 50.8583060),(4.3380740, 50.8486770),(4.3449610, 50.8332640),(4.3662270, 50.8408090),(4.3679450, 50.8524550)]]]);
select polygonsWithinSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]);
select position('' as h, '' as n) = positionCaseInsensitive(h, n);
select position('' as h, lower('' as n)) = positionCaseInsensitive(h, n);
select position('' as h, lower('аБв' as n)) = positionCaseInsensitive(h, n);
SELECT position('123' arg_1, '1234' arg_2), arg_1, arg_2;
select position('aaaaa\0x', pattern) from tab where id = 2;
select position('abc' as h, '' as n) = positionCaseInsensitive(n, n);
select position('abc' as h, lower('aBc' as n)) = positionCaseInsensitive(h, n);
select position('abc' as h, lower('Bc' as n)) = positionCaseInsensitive(h, n);
select position('abc' as h, lower('C' as n)) = positionCaseInsensitive(h, n);
SELECT POSITION('Hello', 'll');
SELECT POSITION('ll' IN 'Hello');
select position('абв' as h, lower('' as n)) = positionCaseInsensitive(h, n);
select position('абв' as h, lower('аБв' as n)) = positionCaseInsensitive(h, n);
select position('абв' as h, lower('Бв' as n)) = positionCaseInsensitive(h, n);
select position('абв' as h, lower('В' as n)) = positionCaseInsensitive(h, n);
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT position(concat('иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
select position(haystack, pattern) from tab where id = 2;
select position(materialize('') as h, lower('' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('') as h, lower('' as n)) = positionCaseInsensitive(h, n);
select position(materialize('') as h, lower('aBc' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('') as h, lower('аБв' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('') as h, lower('аБв' as n)) = positionCaseInsensitive(h, n);
select position(materialize('abc') as h, lower('' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('abc') as h, lower('aBc' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('abc') as h, lower('Bc' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('abc') as h, lower('C' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('абв') as h, lower('' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('абв') as h, lower('' as n)) = positionCaseInsensitive(h, n);
select position(materialize('абв') as h, lower('аБв' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('абв') as h, lower('аБв' as n)) = positionCaseInsensitive(h, n);
select position(materialize('абв') as h, lower('Бв' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('абв') as h, lower('Бв' as n)) = positionCaseInsensitive(h, n);
select position(materialize('абв') as h, lower('В' as n)) = positionCaseInsensitive(h, n) from system.numbers limit 10;
select position(materialize('абв') as h, lower('В' as n)) = positionCaseInsensitive(h, n);
select positionCaseInsensitive('aaaaa\0x', pattern) from tab where id = 2;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitive(concat('иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
select positionCaseInsensitive(haystack, pattern) from tab where id = 2;
select positionCaseInsensitive(materialize('') as h, '' as n) = positionCaseInsensitive(h, n);
select positionCaseInsensitive(materialize('') as h, lower('aBc' as n)) = positionCaseInsensitive(h, n);
select positionCaseInsensitive(materialize('abc') as h, '' as n) = positionCaseInsensitive(h, n);
select positionCaseInsensitive(materialize('abc') as h, lower('aBc' as n)) = positionCaseInsensitive(h, n);
select positionCaseInsensitive(materialize('abc') as h, lower('Bc' as n)) = positionCaseInsensitive(h, n);
select positionCaseInsensitive(materialize('abc') as h, lower('C' as n)) = positionCaseInsensitive(h, n);
select positionCaseInsensitiveUTF8('aaaaa\0x', pattern) from tab where id = 2;
SELECT positionCaseInsensitiveUTF8('Hello', materialize('%\xF0%'));
SELECT positionCaseInsensitiveUTF8('иголка.ру', 'иголка.р�\0') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionCaseInsensitiveUTF8(concat('иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
select positionCaseInsensitiveUTF8(haystack, pattern) from tab where id = 2;
SELECT positionCaseInsensitiveUTF8(materialize('test A1ß2a test'), '1ß2') AS res;
SELECT positionCaseInsensitiveUTF8(materialize('test AaßAa test'), 'aßa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize('test ß test'), 'ß') AS res;
SELECT positionCaseInsensitiveUTF8(materialize('xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest'), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize('сссссс'), 'Ё');
SELECT positionCaseInsensitiveUTF8(materialize('сссссссс'), 'ё');
SELECT positionCaseInsensitiveUTF8(materialize('ссссссссссссссссссс'), 'ёс');
SELECT positionCaseInsensitiveUTF8(materialize('ссссссссссссссссссс'), 'ёЁёЁёЁё');
SELECT positionCaseInsensitiveUTF8(materialize('ссссссссссссссссссс'), 'ёЁёЁёЁёссс');
SELECT positionCaseInsensitiveUTF8(materialize('ссссссссссссссссссс'), 'ЁЁЁЁЁЁЁЁЁЁ');
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat(' xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat('test a1ßAa test', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'a1ẞaa') AS res;
SELECT positionCaseInsensitiveUTF8(materialize(concat('xẞyyaa1ẞ1yzẞXẞẞ1ẞẞ1bctest', arrayStringConcat(arrayMap(x -> ' ', range(20000))))), 'aa1ẞ1Yzßxßß1ßß1BC') AS res;
select positionUTF8('' as h, lowerUTF8('' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8('' as h, lowerUTF8('аБв' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8('абв' as h, lowerUTF8('' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8('абв' as h, lowerUTF8('аБв' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8('абв' as h, lowerUTF8('Бв' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8('абв' as h, lowerUTF8('в' as n)) = positionCaseInsensitiveUTF8(h, n);
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat(' иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
SELECT positionUTF8(concat('иголка.ру', arrayStringConcat(arrayMap(x -> ' ', range(20000)))), 'иголка.ру') AS res;
select positionUTF8(materialize('') as h, lowerUTF8('' as n)) = positionCaseInsensitiveUTF8(h, n) from system.numbers limit 10;
select positionUTF8(materialize('') as h, lowerUTF8('' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8(materialize('') as h, lowerUTF8('аБв' as n)) = positionCaseInsensitiveUTF8(h, n) from system.numbers limit 10;
select positionUTF8(materialize('') as h, lowerUTF8('аБв' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8(materialize('абв') as h, lowerUTF8('' as n)) = positionCaseInsensitiveUTF8(h, n) from system.numbers limit 10;
select positionUTF8(materialize('абв') as h, lowerUTF8('' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8(materialize('абв') as h, lowerUTF8('аБв' as n)) = positionCaseInsensitiveUTF8(h, n) from system.numbers limit 10;
select positionUTF8(materialize('абв') as h, lowerUTF8('аБв' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8(materialize('абв') as h, lowerUTF8('Бв' as n)) = positionCaseInsensitiveUTF8(h, n) from system.numbers limit 10;
select positionUTF8(materialize('абв') as h, lowerUTF8('Бв' as n)) = positionCaseInsensitiveUTF8(h, n);
select positionUTF8(materialize('абв') as h, lowerUTF8('В' as n)) = positionCaseInsensitiveUTF8(h, n) from system.numbers limit 10;
select positionUTF8(materialize('абв') as h, lowerUTF8('В' as n)) = positionCaseInsensitiveUTF8(h, n);
SELECT positive_modulo(-1000, -32);
SELECT positive_modulo(-1000, 32);
SELECT positive_modulo(1000, -32);
SELECT positive_modulo(1000, 32);
SELECT pow('0.0000000257', NULL), pow(pow(NULL, NULL), NULL) - NULL, (val + NULL) = (rval * 0), * FROM (SELECT (val + 256) = (NULL * NULL), toLowCardinality(toNullable(dummy)) AS val FROM system.one) AS s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) AS s2 ON (val + 0) = (rval * 255) settings max_rows_in_join = 1;
select pow(1, 0) = 1;
select pow(1, 1) = 1;
select pow(2, 0) = 1;
select pow(2, 1) = 2;
SELECT pow(3, 2), POW(3, 2), power(3, 2), POWER(3, 2);
SELECT PP.Key2 AS `ym:s:pl2` FROM visits1 ARRAY JOIN `ParsedParams.Key2` AS `PP.Key2`, `ParsedParams.Key1` AS `PP.Key1`, arrayEnumerateUniq(`ParsedParams.Key2`, arrayMap(x_0 -> 1, `ParsedParams.Key1`)) AS `upp_==_yes_`, arrayEnumerateUniq(`ParsedParams.Key2`) AS _uniq_ParsedParams WHERE CounterID = 100500;
select Printer from test where Printer='printer1';
select product_name, price, group_name, round(avg0), round(avg1) from ( SELECT product_name, price, group_name, avg(price) OVER (PARTITION BY group_name ORDER BY price) avg0, avg(price) OVER (PARTITION BY group_name ORDER BY price RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) avg1 FROM products INNER JOIN product_groups USING (group_id)) t order by group_name, product_name, price;
SELECT ProfileEvents['CompileFunction'] FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND query == 'SELECT number + number + number FROM numbers(1);' AND event_date >= yesterday() AND event_time > now() - interval 10 minute LIMIT 1;
SELECT ProfileEvents['CompileFunction'] FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND query == 'SELECT sum(number), sum(number + 1), sum(number + 2) FROM numbers(1) GROUP BY number;' AND event_date >= yesterday() AND event_time > now() - interval 10 minute LIMIT 1;
SELECT ProfileEvents['CreatedReadBufferMMap'] as value FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE 'SELECT * FROM test_01344 WHERE x = ''Hello, world''%' AND type = 2 ORDER BY event_time DESC LIMIT 1;
SELECT ProfileEvents['CreatedReadBufferMMap'] AS value FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND event_time >= now() - 300 AND query LIKE 'SELECT * FROM test_01343%' AND type = 2 ORDER BY event_time DESC LIMIT 1;
SELECT ProfileEvents['ExecuteShellCommand'] FROM system.query_log WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND query == 'SELECT number FROM numbers(10) WHERE number > 15 and test_function(number, number) == 4;' AND event_date >= yesterday() AND event_time > now() - interval 10 minute LIMIT 1;
SELECT ProfileEvents['FileOpen'] - ProfileEvents['CreatedReadBufferDirectIOFailed'] FROM system.query_log WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT col1.a FROM %nested%')) AND event_date >= yesterday() AND current_database = currentDatabase();
SELECT ProfileEvents['FileOpen'] - ProfileEvents['CreatedReadBufferDirectIOFailed'] FROM system.query_log WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT col3.n2.s FROM %nested%')) AND event_date >= yesterday() AND current_database = currentDatabase();
select ProfileEvents['FileOpen'] from system.query_log where type = 'QueryFinish' and current_database = currentDatabase() and query ilike '%select sum(b) from t_multi_prewhere prewhere a < 5000%';
SELECT ProfileEvents['FileOpen'] FROM system.query_log WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT a.size0 FROM %t_arr%')) AND current_database = currentDatabase();
SELECT ProfileEvents['FileOpen'] FROM system.query_log WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT m.% FROM %t_map%')) AND current_database = currentDatabase();
SELECT ProfileEvents['FileOpen'] FROM system.query_log WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT n.null FROM %t_nul%')) AND current_database = currentDatabase();
SELECT ProfileEvents['FileOpen'] FROM system.query_log WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT t._ FROM %t_tup%')) AND current_database = currentDatabase();
SELECT ProfileEvents['InsertedRows'] as value FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'INSERT INTO /* test 01413, query 1 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;
SELECT ProfileEvents['InsertedRows'] as value FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'INSERT INTO /* test 01413, query 2 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;
SELECT ProfileEvents['ParallelReplicasUsedCount'] FROM system.query_log WHERE type = 'QueryFinish' AND query_id IN (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND log_comment = '02950_parallel_replicas_used_replicas_count' AND type = 'QueryFinish' AND initial_query_id = query_id) SETTINGS allow_experimental_parallel_reading_from_replicas=0;
SELECT ProfileEvents['ParallelReplicasUsedCount'] FROM system.query_log WHERE type = 'QueryFinish' AND query_id IN (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND log_comment = '02950_parallel_replicas_used_replicas_count_2' AND type = 'QueryFinish' AND initial_query_id = query_id) SETTINGS allow_experimental_parallel_reading_from_replicas=0;
SELECT ProfileEvents['QueryCacheHits'], ProfileEvents['QueryCacheMisses'] FROM system.query_log WHERE type = 'QueryFinish' AND current_database = currentDatabase() /* NOTE: client incorrectly join comments from the previous line into query, hence LIKE */ AND query LIKE '%\nSELECT 1 SETTINGS use_query_cache = true, enable_writes_to_query_cache = false;' ORDER BY event_time_microseconds;
SELECT ProfileEvents['QueryCacheHits'], ProfileEvents['QueryCacheMisses'] FROM system.query_log WHERE type = 'QueryFinish' AND current_database = currentDatabase() AND query = 'SELECT 1 SETTINGS use_query_cache = true, enable_writes_to_query_cache = false, max_threads = 16;';
SELECT ProfileEvents['QueryCacheHits'], ProfileEvents['QueryCacheMisses'] FROM system.query_log WHERE type = 'QueryFinish' AND current_database = currentDatabase() AND query = 'SELECT 1 SETTINGS use_query_cache = true;' ORDER BY event_time_microseconds;
SELECT ProfileEvents['QueryCacheHits'], ProfileEvents['QueryCacheMisses'] FROM system.query_log WHERE type = 'QueryFinish' AND current_database = currentDatabase() AND query = 'select 1 SETTINGS use_query_cache = true;';
SELECT ProfileEvents['SelectedRows'] as value FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'SELECT * FROM /* test 01413, query 3 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;
select project in ('val1', 'val2') from test where project in ('val1', 'val2');
SELECT proportionsZTest(10, 11, 100, 101, 0.95, 'unpooled');
SELECT proportionsZTest(sx, sy, tx, ty, 0.95, 'unpooled') FROM proportions_ztest;
SELECT puny, punycodeDecode(puny) AS original FROM tab;
SELECT punycodeDecode('');
SELECT punycodeDecode('no punycode');
SELECT punycodeDecode(NULL);
SELECT punycodeEncode('');
SELECT punycodeEncode();
SELECT punycodeEncode(NULL);
SELECT q FROM (select [1,2,3] AS q UNION ALL select groupArray(arrayJoin([4,5,6])) AS q ORDER BY q) ORDER BY q;
SELECT quantile(0.0)(a), quantile(0.0)(b), quantile(0.0)(c) FROM decimal WHERE a >= 0;
SELECT quantile(0.1)(d), quantile(0.5)(d) FROM datetime;
SELECT quantile(0.2)(a), quantile(0.2)(b), quantile(0.2)(c) FROM decimal WHERE a >= 0;
SELECT quantile(0.2)(d) FROM datetime;
SELECT quantile(0.4)(a), quantile(0.4)(b), quantile(0.4)(c) FROM decimal WHERE a >= 0;
SELECT quantile(0.5)(b), quantile(0.9)(b) from (SELECT x + 1 as b FROM (SELECT quantile(0.5)(b) as x, quantile(0.9)(b) FROM fuse_tbl) GROUP BY x);
SELECT quantile(0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;
SELECT quantile(0.5)(now()::DateTime('UTC')) WHERE 0;
SELECT quantile(0.6)(a), quantile(0.6)(b), quantile(0.6)(c) FROM decimal WHERE a >= 0;
SELECT quantile(0.8)(a), quantile(0.8)(b), quantile(0.8)(c) FROM decimal WHERE a >= 0;
SELECT quantile(0.8)(a), toTypeName(quantile(0.8)(a)), quantile(0.9)(a), toTypeName(quantile(0.9)(a)) FROM fuse_tbl;
SELECT quantile(0.8)(b), toTypeName(quantile(0.8)(b)), quantile(0.1)(b), toTypeName(quantile(0.1)(b)) FROM fuse_tbl;
SELECT quantile(0.8)(b), toTypeName(quantile(0.8)(b)), quantile(0.9)(b), toTypeName(quantile(0.9)(b)) FROM fuse_tbl;
SELECT quantile(1.0)(a), quantile(1.0)(b), quantile(1.0)(c) FROM decimal WHERE a >= 0;
SELECT quantile(a - 1), quantile(b - 1) + 1, quantile(0.8)(b - 1) + 1, quantile(0.8)(b - 1) + 2, quantile(0.9)(b - 1) + 1 FROM fuse_tbl;
SELECT quantile(a) as qa, quantile(b) as qb, quantile(c) as qc, toTypeName(qa),toTypeName(qb),toTypeName(qc) FROM decimal WHERE a < 0;
SELECT quantile(a), quantile(b), quantile(c) as x, toTypeName(x) FROM decimal WHERE a < 0;
SELECT quantileBFloat16(0.2)(d) FROM datetime;
SELECT quantileBFloat16Weighted(0.2)(d, 1) FROM datetime;
SELECT quantileDeterministic(0.2)(d, 1) FROM datetime;
SELECT quantileDeterministic([], identity(( SELECT subtractDays((CAST((566450.398706) AS DateTime)), 54) ) )), '\0', [];
SELECT quantileDeterministic(number, sipHash64(number)) FROM remote('127.0.0.{1,2}', numbers(8193));
SELECT quantileExact(0)(x), quantileTiming(0)(x) FROM (SELECT number + 100 AS x FROM system.numbers LIMIT 10000);
SELECT quantileExact(0.0)(a), quantileExact(0.0)(b), quantileExact(0.0)(c) FROM decimal WHERE a >= 0;
SELECT quantileExact(0.2)(a), quantileExact(0.2)(b), quantileExact(0.2)(c) FROM decimal WHERE a >= 0;
SELECT quantileExact(0.2)(d) FROM datetime;
SELECT quantileExact(0.4)(a), quantileExact(0.4)(b), quantileExact(0.4)(c) FROM decimal WHERE a >= 0;
SELECT quantileExact(0.6)(a), quantileExact(0.6)(b), quantileExact(0.6)(c) FROM decimal WHERE a >= 0;
SELECT quantileExact(0.6)(x) FROM (SELECT number AS x FROM num);
SELECT quantileExact(0.8)(a), quantileExact(0.8)(b), quantileExact(0.8)(c) FROM decimal WHERE a >= 0;
SELECT quantileExact(1.0)(a), quantileExact(1.0)(b), quantileExact(1.0)(c) FROM decimal WHERE a >= 0;
SELECT quantileExact(a), quantileExact(b), quantileExact(c) as x, toTypeName(x) FROM decimal WHERE a < 0;
SELECT quantileExact(x), quantileTiming(x) FROM (SELECT number % 123 AS x FROM system.numbers LIMIT 10000);
SELECT quantileExactExclusive(0.6)(x) FROM (SELECT number AS x FROM num);
SELECT quantileExactHigh(0.0)(a), quantileExactHigh(0.0)(b), quantileExactHigh(0.0)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactHigh(0.2)(a), quantileExactHigh(0.2)(b), quantileExactHigh(0.2)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactHigh(0.4)(a), quantileExactHigh(0.4)(b), quantileExactHigh(0.4)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactHigh(0.6)(a), quantileExactHigh(0.6)(b), quantileExactHigh(0.6)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactHigh(0.8)(a), quantileExactHigh(0.8)(b), quantileExactHigh(0.8)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactHigh(1.0)(a), quantileExactHigh(1.0)(b), quantileExactHigh(1.0)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactHigh(a), quantileExactHigh(b), quantileExactHigh(c) as x, toTypeName(x) FROM decimal WHERE a < 0;
SELECT quantileExactIf(number, number > 0) FROM numbers(90);
SELECT quantileExactIf(number, number > 100) FROM numbers(90);
SELECT quantileExactIf(toFloat32(number) , number > 100) FROM numbers(90);
SELECT quantileExactIf(toFloat64(number) , number > 100) FROM numbers(90);
SELECT quantileExactInclusive(0.6)(x) FROM (SELECT number AS x FROM num);
SELECT quantileExactLow(0.0)(a), quantileExactLow(0.0)(b), quantileExactLow(0.0)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactLow(0.2)(a), quantileExactLow(0.2)(b), quantileExactLow(0.2)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactLow(0.4)(a), quantileExactLow(0.4)(b), quantileExactLow(0.4)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactLow(0.6)(a), quantileExactLow(0.6)(b), quantileExactLow(0.6)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactLow(0.8)(a), quantileExactLow(0.8)(b), quantileExactLow(0.8)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactLow(1.0)(a), quantileExactLow(1.0)(b), quantileExactLow(1.0)(c) FROM decimal WHERE a >= 0;
SELECT quantileExactLow(a), quantileExactLow(b), quantileExactLow(c) as x, toTypeName(x) FROM decimal WHERE a < 0;
SELECT quantileExactWeighted((NULL, NULL, NULL, NULL))((NULL), number, (NULL, 0, 255), 9223372036854775807), quantilesExactWeighted(0, 1., 0.9998999834060669, 0.00009999999747378752, 0., 0., 0.9998999834060669, 0., 0.00009999999747378752, 0.5, 1., 0.9998999834060669, 0.00009999999747378752, 0., 1., 1)(number, 9223372036854775807) FROM (SELECT (NULL, NULL, NULL, 0.9998999834060669), number FROM system.numbers LIMIT 10);
SELECT quantileExactWeighted(0.0)(a, 1), quantileExactWeighted(0.0)(b, 2), quantileExactWeighted(0.0)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileExactWeighted(0.2)(a, 1), quantileExactWeighted(0.2)(b, 2), quantileExactWeighted(0.2)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileExactWeighted(0.2)(d, 1) FROM datetime;
SELECT quantileExactWeighted(0.4)(a, 1), quantileExactWeighted(0.4)(b, 2), quantileExactWeighted(0.4)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileExactWeighted(0.5)(number, 0.1) FROM numbers(10);
SELECT quantileExactWeighted(0.5)(number, 1) FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_1001);
SELECT quantileExactWeighted(0.5)(number, number) FROM numbers(10);
SELECT quantileExactWeighted(0.5)(x, 1) AS q5, quantilesExactWeighted(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)(x, 1) AS qs FROM (SELECT arrayJoin([1, 1, 1, 10, 10, 10, 10, 100, 100, 100]) AS x);
SELECT quantileExactWeighted(0.5)(x, y) FROM ( SELECT CAST(1 AS Nullable(UInt8)) AS x, CAST(0 AS Nullable(UInt8)) AS y UNION ALL SELECT CAST(NULL AS Nullable(UInt8)) AS x, CAST(1 AS Nullable(UInt8)) AS y UNION ALL SELECT CAST(2 AS Nullable(UInt8)) AS x, CAST(NULL AS Nullable(UInt8)) AS y UNION ALL SELECT CAST(number AS Nullable(UInt8)) AS x, CAST(number AS Nullable(UInt8)) AS y FROM system.numbers LIMIT 10 );
SELECT quantileExactWeighted(0.5)(x, y) FROM ( SELECT CAST(NULL AS Nullable(UInt8)) AS x, 1 AS y UNION ALL SELECT CAST(2 AS Nullable(UInt8)) AS x, 1 AS y );
SELECT quantileExactWeighted(0.5)(x, y) FROM ( SELECT CAST(NULL AS Nullable(UInt8)) AS x, 1 AS y );
SELECT quantileExactWeighted(0.5)(x, y) FROM ( SELECT CAST(NULL AS Nullable(UInt8)) AS x, CAST(1 AS Nullable(UInt8)) AS y UNION ALL SELECT CAST(2 AS Nullable(UInt8)) AS x, CAST(NULL AS Nullable(UInt8)) AS y );
SELECT quantileExactWeighted(0.6)(a, 1), quantileExactWeighted(0.6)(b, 2), quantileExactWeighted(0.6)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileExactWeighted(0.8)(a, 1), quantileExactWeighted(0.8)(b, 2), quantileExactWeighted(0.8)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileExactWeighted(1)(number, 9223372036854775807) FROM numbers(6);
SELECT quantileExactWeighted(1.0)(a, 1), quantileExactWeighted(1.0)(b, 2), quantileExactWeighted(1.0)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileExactWeighted(a, 1), quantileExactWeighted(b, 2), quantileExactWeighted(c, 3) as x, toTypeName(x) FROM decimal WHERE a < 0;
select quantileGK(100)(number) from numbers(10);
select quantileGK(100, 0.5)(number) from numbers(10);
select quantileGK(100, 0.5, 0.75)(number) from numbers(10);
SELECT quantileIf(number, number > 100) FROM numbers(90);
SELECT quantileIf(toFloat32(number) , number > 100) FROM numbers(90);
SELECT quantileIf(toFloat64(number) , number > 100) FROM numbers(90);
SELECT quantileInterpolatedWeighted(0.0)(a, 1), quantileInterpolatedWeighted(0.0)(b, 2), quantileInterpolatedWeighted(0.0)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileInterpolatedWeighted(0.2)(a, 1), quantileInterpolatedWeighted(0.2)(b, 2), quantileInterpolatedWeighted(0.2)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileInterpolatedWeighted(0.2)(d, 1) FROM datetime;
SELECT quantileInterpolatedWeighted(0.4)(a, 1), quantileInterpolatedWeighted(0.4)(b, 2), quantileInterpolatedWeighted(0.4)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileInterpolatedWeighted(0.5)(x, 1) AS q5, quantilesInterpolatedWeighted(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)(x, 1) AS qs FROM (SELECT arrayJoin([1, 1, 1, 10, 10, 10, 10, 100, 100, 100]) AS x);
SELECT quantileInterpolatedWeighted(0.6)(a, 1), quantileInterpolatedWeighted(0.6)(b, 2), quantileInterpolatedWeighted(0.6)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileInterpolatedWeighted(0.8)(a, 1), quantileInterpolatedWeighted(0.8)(b, 2), quantileInterpolatedWeighted(0.8)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileInterpolatedWeighted(1.0)(a, 1), quantileInterpolatedWeighted(1.0)(b, 2), quantileInterpolatedWeighted(1.0)(c, 3) FROM decimal WHERE a >= 0;
SELECT quantileInterpolatedWeighted(a, 1), quantileInterpolatedWeighted(b, 2), quantileInterpolatedWeighted(c, 3) as x, toTypeName(x) FROM decimal WHERE a < 0;
SELECT quantileMerge(*) FROM (SELECT quantilesState(0.5)(1) AS a UNION ALL SELECT quantileStateIf(2, identity(1)));
SELECT quantileResampleMerge(0.5, 257, 65536, 1)(tuple(*).1) FROM (SELECT quantileResampleState(0.10, 1, 2, 42)(number, number) FROM numbers(100));
SELECT quantiles(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantiles(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a) FROM decimal;
SELECT quantiles(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b) FROM decimal;
SELECT quantiles(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c) FROM decimal;
SELECT quantiles(0.2)(d) FROM datetime;
SELECT quantiles(0.5)(-inf) FROM numbers(300);
SELECT quantiles(0.5)(-inf) FROM numbers(5);
SELECT quantiles(0.5)(arrayJoin([-inf, -inf, 0, inf, inf, -0]));
SELECT quantiles(0.5)(arrayJoin([-inf, 0, inf]));
SELECT quantiles(0.5)(arrayJoin([-inf, inf, 0]));
SELECT quantiles(0.5)(arrayJoin([inf, -inf, 0, -inf, inf, -0]));
SELECT quantiles(0.5)(arrayJoin([inf, -inf, 0]));
SELECT quantiles(0.5)(arrayJoin([inf, 0, -inf]));
SELECT quantiles(0.5)(arrayJoin([inf, inf, 0, -inf, -inf, -0]));
SELECT quantiles(0.5)(inf) FROM numbers(300);
SELECT quantiles(0.5)(inf) FROM numbers(5);
SELECT quantiles(0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;
SELECT quantiles(0.5)(now()::DateTime('UTC')) WHERE 0;
SELECT quantiles(0.5)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantiles(0.5, 0.9)(c1) FROM VALUES(0::Nullable(UInt8));
SELECT quantiles(0.5, 1.1754943508222875e-38, 0.0001, -0., 0.0001, -0., 0.0001, 0., 0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;
SELECT quantiles(0.95)(number) FROM (SELECT number FROM numbers(10) WHERE number > 10);
SELECT quantiles(0.95)(x) FROM (SELECT 1 x WHERE 0);
SELECT quantiles(1, 0.001, 0.01, 0.05, 0.9, 0.2, 0.3, 0.6, 0.5, 0.4, 0.7, 0.8, 0.1, 0.95, 0.99, 0.999, 0, 0.5, 0.3, 0.4)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesBFloat16(0.2)(d) FROM datetime;
SELECT quantilesBFloat16Weighted(0.2)(d, 1) FROM datetime;
SELECT quantilesDeterministic(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x, x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesDeterministic(0.2)(d, 1) FROM datetime;
SELECT quantilesDeterministic(0.5)(x, x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesDeterministic(0.5, 0.9)(number, number) FROM remote('127.0.0.{1,2}', numbers(10));
SELECT quantilesDeterministic(1, 0.001, 0.01, 0.05, 0.9, 0.2, 0.3, 0.6, 0.5, 0.4, 0.7, 0.8, 0.1, 0.95, 0.99, 0.999, 0, 0.5, 0.3, 0.4)(x, x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesExact(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesExact(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a) FROM decimal;
SELECT quantilesExact(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b) FROM decimal;
SELECT quantilesExact(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c) FROM decimal;
SELECT quantilesExact(0.2)(d) FROM datetime;
SELECT quantilesExact(0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999)(x) FROM (SELECT number AS x FROM num);
SELECT quantilesExact(0.5)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesExact(0.5, 0.9)(number) FROM remote('127.0.0.{1,2}', numbers(10));
SELECT quantilesExact(1, 0.001, 0.01, 0.05, 0.9, 0.2, 0.3, 0.6, 0.5, 0.4, 0.7, 0.8, 0.1, 0.95, 0.99, 0.999, 0, 0.5, 0.3, 0.4)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesExactExclusive(0.1, 0.9)(n) FROM nums;
SELECT quantilesExactExclusive(0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999)(x) FROM (SELECT number AS x FROM num);
SELECT quantilesExactHigh(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a) FROM decimal;
SELECT quantilesExactHigh(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b) FROM decimal;
SELECT quantilesExactHigh(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c) FROM decimal;
SELECT quantilesExactInclusive(0, 1)(n) FROM nums;
SELECT quantilesExactInclusive(0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999)(x) FROM (SELECT number AS x FROM num);
SELECT quantilesExactLow(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a) FROM decimal;
SELECT quantilesExactLow(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b) FROM decimal;
SELECT quantilesExactLow(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c) FROM decimal;
SELECT quantilesExactWeighted(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(number, 1) FROM (SELECT number FROM system.numbers LIMIT 1001);
SELECT quantilesExactWeighted(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(number, 1) FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_1001);
SELECT quantilesExactWeighted(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(number, number) FROM (SELECT number FROM system.numbers LIMIT 1001);
SELECT quantilesExactWeighted(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(number, number) FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_1001);
SELECT quantilesExactWeighted(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a, 1) FROM decimal;
SELECT quantilesExactWeighted(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b, 2) FROM decimal;
SELECT quantilesExactWeighted(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c, 3) FROM decimal;
SELECT quantilesExactWeighted(0.2)(d, 1) FROM datetime;
SELECT quantilesExactWeighted(1, 0.001, 0.01, 0.05, 0.9, 0.2, 0.3, 0.6, 0.5, 0.4, 0.7, 0.8, 0.1, 0.95, 0.99, 0.999, 0, 0.5, 0.3, 0.4)(x, 1) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
select quantilesGK('abc', 0.5, 0.75)(number) from numbers(10);
select quantilesGK(1, 100/1000, 200/1000, 250/1000, 314/1000, 777/1000)(number + 1) from numbers(1000);
select quantilesGK(10, 100/1000, 200/1000, 250/1000, 314/1000, 777/1000)(number + 1) from numbers(1000);
select quantilesGK(100, 100/1000, 200/1000, 250/1000, 314/1000, 777/1000)(number + 1) from numbers(1000);
select quantilesGK(1000, 100/1000, 200/1000, 250/1000, 314/1000, 777/1000)(number + 1) from numbers(1000);
select quantilesGK(10000, 0.01, 0.1, 0.11)(number + 1) from numbers(10);
select quantilesGK(10000, 0.25, 0.5, 0.75, 0.0, 1.0, 0, 1)(number + 1) from numbers(1000);
select quantilesGK(10000, 100/1000, 200/1000, 250/1000, 314/1000, 777/1000)(number + 1) from numbers(1000);
SELECT quantilesInterpolatedWeighted(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a, 1) FROM decimal;
SELECT quantilesInterpolatedWeighted(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b, 2) FROM decimal;
SELECT quantilesInterpolatedWeighted(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c, 3) FROM decimal;
SELECT quantilesInterpolatedWeighted(0.2)(d, 1) FROM datetime;
SELECT quantilesTDigest(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesTDigest(0.05)(x) FROM (SELECT inf*(number%2-0.5) x FROM numbers(300));
SELECT quantilesTDigest(0.2)(d) FROM datetime;
SELECT quantilesTDigest(0.5)(x) FROM (SELECT inf*(number%2-0.5) x FROM numbers(300));
SELECT quantilesTDigest(0.5)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesTDigest(0.5, 0.9)(number) FROM remote('127.0.0.{1,2}', numbers(10));
SELECT quantilesTDigest(0.95)(x) FROM (SELECT inf*(number%2-0.5) x FROM numbers(300));
SELECT quantilesTDigestArray(0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99)(arrayResize(arrayResize([0], 500000, -inf), 1000000, inf));
SELECT quantilesTDigestArray(0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99)(arrayResize(arrayResize([0], 500000, inf), 1000000, -inf));
SELECT quantilesTDigestArray(0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99)(arrayResize(arrayResize([inf], 500000, -inf), 1000000, 0));
SELECT quantilesTDigestArray(0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99)(arrayResize(arrayResize([inf], 500000, -inf), 1000000, inf));
SELECT quantilesTDigestArray(0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99)(arrayResize(arrayResize([inf], 500000, inf), 1000000, -inf));
SELECT quantilesTDigestArray(0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99)(arrayResize(arrayResize([inf], 500000, inf), 1000000, 0));
SELECT quantilesTDigestWeighted(0.2)(d, 1) FROM datetime;
SELECT quantilesTiming(0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99)(number) FROM (SELECT number FROM system.numbers LIMIT 100);
SELECT quantilesTiming(0.1, 0.5, 0.9)(dummy) FROM remote('127.0.0.{2,3}', system, one) GROUP BY 1 WITH TOTALS;
SELECT quantilesTiming(0.2)(d) FROM datetime;
SELECT quantilesTiming(0.5, 0.9)(number) FROM (SELECT number FROM system.numbers LIMIT 100);
SELECT quantilesTiming(0.5, 0.9)(t), quantilesTimingWeighted(0.5, 0.9)(t, w) FROM (SELECT number AS t, number = 77 ? 10 : 1 AS w FROM system.numbers LIMIT 100);
SELECT quantilesTiming(0.9, 0.5)(number) FROM (SELECT number FROM system.numbers LIMIT 100);
SELECT quantilesTiming(0.99)(arrayJoin(range(100000)));
SELECT quantilesTiming(0.99, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.01)(number) FROM (SELECT number FROM system.numbers LIMIT 100);
SELECT quantilesTiming(1, 0.001, 0.01, 0.05, 0.9, 0.2, 0.3, 0.6, 0.5, 0.4, 0.7, 0.8, 0.1, 0.95, 0.99, 0.999, 0, 0.5, 0.3, 0.4)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);
SELECT quantilesTimingWeighted(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(number, 1) FROM (SELECT number FROM system.numbers LIMIT 1001);
SELECT quantilesTimingWeighted(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(number, 1) FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_1001);
SELECT quantilesTimingWeighted(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(number, number) FROM (SELECT number FROM system.numbers LIMIT 1001);
SELECT quantilesTimingWeighted(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(number, number) FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_1001);
SELECT quantilesTimingWeighted(0.2)(d, 1) FROM datetime;
SELECT quantileTDigest(-inf) FROM numbers(200);
SELECT quantileTDigest(-inf) FROM numbers(500);
SELECT quantileTDigest(0.2)(d) FROM datetime;
SELECT quantileTDigest(0.5)(arrayJoin([-1, -2, -3]));
SELECT quantileTDigest(inf) FROM numbers(200);
SELECT quantileTDigest(inf) FROM numbers(500);
SELECT quantileTDigest(x) FROM (SELECT -inf AS x UNION ALL SELECT -inf UNION ALL SELECT -inf);
SELECT quantileTDigest(x) FROM (SELECT -inf AS x UNION ALL SELECT -inf UNION ALL SELECT inf);
SELECT quantileTDigest(x) FROM (SELECT -inf AS x UNION ALL SELECT inf UNION ALL SELECT -inf);
SELECT quantileTDigest(x) FROM (SELECT -inf AS x UNION ALL SELECT inf UNION ALL SELECT inf);
SELECT quantileTDigest(x) FROM (SELECT -inf AS x UNION ALL SELECT inf);
SELECT quantileTDigest(x) FROM (SELECT inf AS x UNION ALL SELECT -inf UNION ALL SELECT -inf);
SELECT quantileTDigest(x) FROM (SELECT inf AS x UNION ALL SELECT -inf UNION ALL SELECT inf);
SELECT quantileTDigest(x) FROM (SELECT inf AS x UNION ALL SELECT -inf);
SELECT quantileTDigest(x) FROM (SELECT inf AS x UNION ALL SELECT inf UNION ALL SELECT -inf);
SELECT quantileTDigest(x) FROM (SELECT inf AS x UNION ALL SELECT inf UNION ALL SELECT inf);
SELECT quantileTDigestWeighted(-0.)(toDateTime(10000000000.), 1);
SELECT quantileTDigestWeighted(0.2)(d, 1) FROM datetime;
SELECT quantileTiming(-0.)(number / 1.1754943508222875e-38) FROM numbers(257);
SELECT quantileTiming(0.2)(d) FROM datetime;
SELECT quantileTiming(0.5)(number / 2) FROM numbers(10);
SELECT quantileTiming(0.5)(number) FROM numbers(10);
SELECT quantileTiming(0.5)(t), quantileTimingWeighted(0.5)(t, w) FROM (SELECT number AS t, number = 77 ? 10 : 0 AS w FROM system.numbers LIMIT 100);
SELECT quantileTimingWeighted(0.2)(d, 1) FROM datetime;
SELECT quantileTimingWeighted(0.5)(number, 1) FROM (SELECT number FROM system.numbers LIMIT 1001);
SELECT quantileTimingWeighted(0.5)(number, 1) FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_1001);
SELECT query FROM system.query_log WHERE initial_query_id = (SELECT * FROM tmp) AND current_database = currentDatabase() LIMIT 1;
SELECT query FROM system.query_log WHERE query_id = (SELECT * FROM tmp) AND current_database = currentDatabase() LIMIT 1;
select query, formatted_query from system.query_log where current_database = currentDatabase() and query = 'select \'02005_log_formatted_queries.sql\' from system.one;' and event_date >= yesterday() and event_time > now() - interval 5 minute;
SELECT query, used_row_policies FROM system.query_log WHERE current_database == currentDatabase() AND type == 'QueryStart' AND query_kind == 'Select' ORDER BY event_time_microseconds;
SELECT query_count FROM system.dictionaries WHERE database = 'dict_db_01036' AND name = 'dict';
SELECT query_count FROM system.dictionaries WHERE database = 'dict_db_02179' AND name = 'dict';
SELECT query_count FROM system.dictionaries WHERE database = 'foo 1234' AND name = 'dict';
SELECT query_count, status FROM system.dictionaries WHERE database = 'dict_db_01254' AND name = 'dict';
select queryID() as t from numbers(10) with totals having t = initialQueryID();
SELECT rand() % 2 = 0 ? number : number FROM numbers(5);
SELECT rand() % 2 = 0 ? number : toString(number) FROM numbers(5);
select rand(cast(4 as Nullable(UInt8))) * 0;
select rand(Null) * 0;
select randCanonical(cast(4 as Nullable(UInt8))) * 0;
select randCanonical(Null) * 0;
select randConstant() % 10 < 10;
select randConstant() >= 0;
select randConstant(CAST(4 as Nullable(UInt8))) * 0;
select randConstant(Null) * 0;
SELECT randomFixedString('string');
SELECT randomStringUTF8('string');
SELECT randomStringUTF8(0);
select range('string', Null);
SELECT range(-1, 1);
SELECT range(-1, 1, 2);
SELECT range(0)[-1];
SELECT range(0)[1];
SELECT range(0::Nullable(Int64), 10::Nullable(Int64), 2::Nullable(Int64));
SELECT range(0::Nullable(UInt64), 10::Nullable(UInt64), 2::Nullable(UInt64));
SELECT range(1, 257, 65535);
SELECT range(1,1);
SELECT range(10, 2, null);
SELECT range(10, null);
SELECT range(100) == range(0, 100) and range(0, 100) == range(0, 100, 1);
SELECT range(100) == range(0, 100) and range(0, 100) == range(0, 100, 1);
SELECT range(100) == range(cast('100', 'Int8')) and range(100) == range(cast('100', 'Int16')) and range(100) == range(cast('100', 'Int32')) and range(100) == range(cast('100', 'Int64'));
SELECT range(1025, 1048576 + (9223372036854775807 AS i), i);
SELECT range(1025, 18446744073709551615, 1);
SELECT range(2887712768, toIPv4('172.31.0.10'));
SELECT range(5, -1, -1);
SELECT range(5, 0, -1);
SELECT range(65535) FROM system.one ARRAY JOIN range(65536) AS number;
SELECT range(cast('100', 'Int8')) == range(0, cast('100', 'Int8')) and range(0, cast('100', 'Int8')) == range(0, cast('100', 'Int8'), 1) and range(0, cast('100', 'Int8')) == range(0, cast('100', 'Int8'), cast('1', 'Int8'));
SELECT range(cast(number - 5, 'Int8'), cast(number + 5, 'Int8')) from system.numbers limit 10;
SELECT range(k) FROM t_sparse_pk LIMIT 3;
SELECT range(materialize(0), 10::Nullable(UInt64), 2::Nullable(UInt64));
SELECT range(null);
SELECT range(Null::Nullable(UInt64), 10::Nullable(UInt64), 2::Nullable(UInt64));
SELECT range(number % 3) FROM numbers(10);
SELECT range(number % 3) FROM numbers(11);
SELECT range(number % 3) FROM numbers(12);
SELECT range(number) * 42 FROM numbers(5);
SELECT range(number) FROM system.numbers LIMIT 100 FORMAT PrettyCompactNoEscapes;
SELECT range(number)[-1] FROM system.numbers LIMIT 10;
SELECT range(number)[2 - number] FROM system.numbers LIMIT 10;
SELECT range(number)[2] FROM system.numbers LIMIT 10;
SELECT range(number)[number] FROM system.numbers LIMIT 10;
SELECT range(toIPv4('172.31.0.0'), 2887712778);
SELECT range(toIPv4('172.31.0.0'), toIPv4('172.31.0.10'));
SELECT range(toNullable(1));
SELECT range(toUInt256(1), 1);
SELECT range(x) AS k, count() FROM (SELECT number % 2 ? number : 0 AS x FROM system.numbers LIMIT 10) GROUP BY k ORDER BY k;
SELECT range(x) AS k1, range(y) AS k2, count() FROM (SELECT number % 2 ? number : 0 AS x, number % 3 ? toUInt64(20 - number) : 0 AS y FROM system.numbers LIMIT 20) GROUP BY k1, k2 ORDER BY k1, k2;
SELECT rank() OVER (ORDER BY price) AS rank FROM products ORDER BY rank;
SELECT rankCorr(number, -1 * CAST(number AS Int64)) FROM numbers(100);
SELECT rankCorr(number, nan) FROM numbers(10);
SELECT rankCorr(number, number) FROM numbers(100);
SELECT rdb.key % 2, sum(k), max(value2) FROM t2 INNER JOIN rdb ON rdb.key == t2.k GROUP BY (rdb.key % 2) WITH TOTALS;
SELECT read_rows < 110000 FROM system.query_log WHERE type = 'QueryFinish' AND current_database = currentDatabase() AND event_date >= yesterday() AND lower(query) LIKE lower('SELECT s FROM order_by_desc ORDER BY u%');
SELECT read_rows = written_rows, read_rows = result_rows, read_bytes = written_bytes, read_bytes = result_bytes FROM system.query_log where normalized_query_hash = 1214411238725380014 and type='QueryFinish' and current_database = currentDatabase() FORMAT CSV;
SELECT read_rows FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'SELECT * FROM /* test 01413, query 3 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;
SELECT read_rows, query FROM system.query_log WHERE event_date >= yesterday() AND type = 'QueryFinish' AND current_database == currentDatabase() AND query LIKE 'SELECT ''#02136_scalar_subquery_%' ORDER BY query ASC;
select read_rows, read_bytes, written_rows, written_bytes from system.query_log where type = 'QueryFinish' and query_kind = 'Insert' and current_database = currentDatabase() format Vertical;
SELECT read_rows==2 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s == \'Alick a01\';') AND type='QueryFinish' AND result_rows==1 LIMIT 1;
SELECT read_rows==2 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \'%你好%\' ORDER BY k;') AND type='QueryFinish' AND result_rows==1 LIMIT 1;
SELECT read_rows==2 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE has(s, \'Click a03\') ORDER BY k;') AND type='QueryFinish' AND result_rows==1 LIMIT 1;
SELECT read_rows==4 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \'%01%\' ORDER BY k;') AND type='QueryFinish' AND result_rows==2 LIMIT 1;
SELECT read_rows==4 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE multiSearchAny(s, [\'a01\', \'b01\']) ORDER BY k;') AND type='QueryFinish' AND result_rows==2 LIMIT 1;
SELECT read_rows==4 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE s IN (\'Alick a01\', \'Alick a06\') ORDER BY k;') AND type='QueryFinish' AND result_rows==2 LIMIT 1;
SELECT read_rows==6 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s LIKE \'%01%\' ORDER BY k;') AND type='QueryFinish' AND result_rows==3 LIMIT 1;
SELECT read_rows==8 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE hasToken(s, \'Click\') ORDER BY k;') AND type='QueryFinish' AND result_rows==4 LIMIT 1;
SELECT read_rows==8 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE mapContains(s, \'Click\') ORDER BY k;') AND type='QueryFinish' AND result_rows==4 LIMIT 1;
SELECT read_rows==8 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE s[\'Click\'] = \'Click a03\';') AND type='QueryFinish' AND result_rows==1 LIMIT 1;
SELECT read_rows==8 from system.query_log WHERE query_kind ='Select' AND current_database = currentDatabase() AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE hasToken(s, \'Alick\');') AND type='QueryFinish' AND result_rows==4 LIMIT 1;
SELECT readWKTMultiPolygon('MULTIPOLYGON(((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))');
SELECT readWKTMultiPolygon(s) FROM geo ORDER BY id;
SELECT readWKTPoint('POINT(0 0)');
SELECT readWKTPoint(s) FROM geo ORDER BY id;
SELECT readWKTPolygon('POLYGON((0 0,10 0,10 10,0 10,0 0),(4 4,5 4,5 5,4 5,4 4))');
SELECT readWKTPolygon('POLYGON((1 0,10 0,10 10,0 10,1 0))');
SELECT readWKTPolygon(s) FROM geo ORDER BY id;
SELECT ref_5.pkey AS c_2_c2392_6 FROM t0 AS ref_5 WHERE 'J[' < multiIf(ref_5.pkey IN ( SELECT 1 ), bitShiftLeft(multiIf(ref_5.c0 > NULL, '1', ')'), 40), NULL);
select REGEXP_EXTRACT('100-200', '(\\d+)-(\\d+)');
select REGEXP_EXTRACT('100-200', '(\\d+)-(\\d+)', 0);
select REGEXP_EXTRACT('100-200', '(\\d+)-(\\d+)', 1);
select REGEXP_REPLACE('bar', '.', 'z');
select regexpExtract('0123456789', '(\d+)(\d+)', 0);
select regexpExtract('0123456789', '(\d+)(\d+)', 1);
select regexpExtract('0123456789', '(\d+)(\d+)', 2);
select regexpExtract('100-200');
select regexpExtract('100-200', '([a-z])', 1);
select regexpExtract('100-200', '([a-z])', materialize(1));
select regexpExtract('100-200', '([a-z])', materialize(null));
select regexpExtract('100-200', '([a-z])', null);
select regexpExtract('100-200', '(\\d+)-(\\d+)');
select regexpExtract('100-200', '(\\d+)-(\\d+)', 0);
select regexpExtract('100-200', '(\\d+)-(\\d+)', 2);
select regexpExtract('100-200', '(\\d+)-(\\d+)', materialize(1));
select regexpExtract('100-200', '(\\d+)-(\\d+)', materialize(2));
select regexpExtract('100-200', '(\\d+)-(\\d+)', number) from numbers(3);
select regexpExtract('100-200', '(\\d+).*', 1);
select regexpExtract('100-200', '(\\d+).*', materialize(1));
select regexpExtract('100-200', '\\d+-\\d+', 1);
select regexpExtract('100-200', null, 1);
select regexpExtract('100-200', null, materialize(1));
select regexpExtract('100-200100-200', '(\\d+)-(\\d+)(\\d+)-(\\d+)', materialize(3));
select regexpExtract(materialize('100-200'), '([a-z])', 1);
select regexpExtract(materialize('100-200'), '([a-z])', materialize(1));
select regexpExtract(materialize('100-200'), '([a-z])', materialize(null));
select regexpExtract(materialize('100-200'), '([a-z])', null);
select regexpExtract(materialize('100-200'), '(\\d+)-(\\d+)');
select regexpExtract(materialize('100-200'), '(\\d+)-(\\d+)', 1);
select regexpExtract(materialize('100-200'), '(\\d+)-(\\d+)', 2);
select regexpExtract(materialize('100-200'), '(\\d+)-(\\d+)', materialize(1));
select regexpExtract(materialize('100-200'), '(\\d+)-(\\d+)', materialize(2));
select regexpExtract(materialize('100-200'), '(\\d+)-(\\d+)', number) from numbers(3);
select regexpExtract(materialize('100-200'), '(\\d+).*', 1);
select regexpExtract(materialize('100-200'), '(\\d+).*', materialize(1));
select regexpExtract(materialize('100-200'), null, 1);
select regexpExtract(materialize('100-200'), null, materialize(1));
select regexpExtract(materialize(null), '([a-z])', 1);
select regexpExtract(materialize(null), '([a-z])', materialize(1));
select regexpExtract(null, '([a-z])', 1);
select regexpExtract(null, '([a-z])', materialize(1));
select regexpExtract(number::String || '-' || (2*number)::String, '(\\d+)-(\\d+)', 1) from numbers(3);
select regexpExtract(number::String || '-' || (2*number)::String, '(\\d+)-(\\d+)', number%3) from numbers(5);
SELECT regexpQuoteMeta('');
SELECT regexpQuoteMeta('(');
SELECT regexpQuoteMeta('(((((((((');
SELECT regexpQuoteMeta('(Hello');
SELECT regexpQuoteMeta('(h{ell}o)');
SELECT regexpQuoteMeta('\0\\|()^$.[?*+{');
SELECT regexpQuoteMeta('\\');
SELECT regexpQuoteMeta('hel\\lo');
SELECT regexpQuoteMeta('hello');
SELECT regexpQuoteMeta('Hello(');
SELECT regexpQuoteMeta('h{ell}o');
SELECT regionHierarchy(number::UInt32) AS arr, arrayMap(id -> regionToName(id, 'en'), arr) FROM numbers(13);
SELECT regionToName(n1.number::UInt32, 'en') || (regionIn(n1.number::UInt32, n2.number::UInt32) ? ' is in ' : ' is not in ') || regionToName(n2.number::UInt32, 'en') FROM numbers(13) AS n1 CROSS JOIN numbers(13) AS n2;
SELECT regionToName(number::UInt32, 'en'), regionToArea(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);
SELECT regionToName(number::UInt32, 'en'), regionToContinent(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);
SELECT regionToName(number::UInt32, 'en'), regionToCountry(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);
SELECT regionToName(number::UInt32, 'en'), regionToDistrict(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);
SELECT regionToName(number::UInt32, 'en'), regionToPopulation(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);
SELECT regionToName(number::UInt32, 'en'), regionToTopContinent(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);
SELECT regionToName(number::UInt32, 'xy') FROM numbers(13);
SELECT reinterpret('123', 'FixedString(1)');
SELECT reinterpret(0, 'Date'), reinterpret('', 'Date');
SELECT reinterpret(0, 'DateTime(''Asia/Istanbul'')'), reinterpret('', 'DateTime(''Asia/Istanbul'')');
SELECT reinterpret(0, 'DateTime64(3, ''Asia/Istanbul'')'), reinterpret('', 'DateTime64(3, ''Asia/Istanbul'')');
SELECT reinterpret(257, 'Int128'), reinterpretAsInt128(257);
SELECT reinterpret(257, 'Int16'), reinterpretAsInt16(257);
SELECT reinterpret(257, 'Int256'), reinterpretAsInt256(257);
SELECT reinterpret(257, 'Int32'), reinterpretAsInt32(257);
SELECT reinterpret(257, 'Int64'), reinterpretAsInt64(257);
SELECT reinterpret(257, 'Int8'), reinterpretAsInt8(257);
SELECT reinterpret(257, 'UInt16'), reinterpretAsUInt16(257);
SELECT reinterpret(257, 'UInt256'), reinterpretAsUInt256(257);
SELECT reinterpret(257, 'UInt32'), reinterpretAsUInt32(257);
SELECT reinterpret(257, 'UInt64'), reinterpretAsUInt64(257);
SELECT reinterpret(257, 'UInt8'), reinterpretAsUInt8(257);
SELECT reinterpret(49, 'FixedString(1)');
SELECT reinterpret(49, 'FixedString(2)');
SELECT reinterpret(49, 'FixedString(3)');
SELECT reinterpret(49, 'FixedString(4)');
SELECT reinterpret(49, 'String');
SELECT reinterpret(a, 'String'), reinterpretAsString(a), reinterpretAsUInt16('11') as a;
SELECT reinterpret(a, 'String'), reinterpretAsString(a), reinterpretAsUInt8('1') as a;
SELECT reinterpret(a, 'String'), reinterpretAsString(a), reinterpretAsUInt8('11') as a;
SELECT reinterpret(toDateTime64(0, 0), 'Decimal64(2)');
SELECT reinterpret(toDecimal128(5, 2), 'Decimal128(2)'), reinterpret('1', 'Decimal128(2)');
SELECT reinterpret(toDecimal256(5, 2), 'Decimal256(2)'), reinterpret('1', 'Decimal256(2)');
SELECT reinterpret(toDecimal32(5, 2), 'Decimal32(2)'), reinterpret('1', 'Decimal32(2)');
SELECT reinterpret(toDecimal64(5, 2), 'Decimal64(2)'), reinterpret('1', 'Decimal64(2)');
SELECT reinterpret(toFloat32(0.2), 'UInt32'), reinterpretAsUInt32(toFloat32(0.2));
SELECT reinterpret(toFloat64(0.2), 'UInt64'), reinterpretAsUInt64(toFloat64(0.2));
SELECT reinterpret(unhex(hex(1.234567890123456789012345678901::Decimal(60, 30))), 'Decimal(60, 30)');
select reinterpret(x, 'UInt8') from generateRandom('x Bool', 42) limit 5;
SELECT reinterpretAsFixedString(49);
SELECT reinterpretAsFloat32(a), reinterpretAsUInt32(toFloat32(0.2)) as a;
SELECT reinterpretAsFloat32(CAST(123456 AS Int32));
SELECT reinterpretAsFloat32(CAST(123456 AS UInt32));
SELECT reinterpretAsFloat32(x), reinterpretAsFloat64(x) FROM t_uuid;
SELECT reinterpretAsFloat64(a), reinterpretAsUInt64(toFloat64(0.2)) as a;
SELECT reinterpretAsFloat64(CAST(123456 AS Int64));
SELECT reinterpretAsFloat64(CAST(123456 AS UInt64));
SELECT reinterpretAsInt32(CAST(1.23456 AS Float32));
SELECT reinterpretAsInt64(CAST(1.23456 AS Float64));
SELECT reinterpretAsInt8(x), reinterpretAsInt16(x), reinterpretAsInt32(x), reinterpretAsInt64(x), reinterpretAsInt128(x), reinterpretAsInt256(x) FROM t_uuid;
SELECT reinterpretAsUInt32(CAST(1.23456 AS Float32));
SELECT reinterpretAsUInt64(CAST(1.23456 AS Float64));
SELECT reinterpretAsUInt8(x), reinterpretAsUInt16(x), reinterpretAsUInt32(x), reinterpretAsUInt64(x), reinterpretAsUInt128(x), reinterpretAsUInt256(x) FROM t_uuid;
SELECT reinterpretAsUUID(reinterpretAsUInt128(reinterpretAsUInt32(reinterpretAsUInt256(x)))) FROM t_uuid;
SELECT reinterpretAsUUID(x) FROM t_uuid;
SELECT renamed_value1 FROM table_for_rename WHERE key = 1;
SELECT renamed_value1 FROM table_for_rename_nested WHERE key = 7;
SELECT renamed_value1 FROM table_with_compact_parts WHERE key = 1;
SELECT renamed_value2, renamed_value3 FROM table_for_rename WHERE key = 7;
SELECT renamed_value2, renamed_value3 FROM table_with_compact_parts WHERE key = 7;
SELECT repeat('a', ALL) FROM (SELECT number AS ALL FROM numbers(10));
SELECT repeat('a', DISTINCT) FROM (SELECT number AS DISTINCT FROM numbers(10));
SELECT repeat('aa', number) FROM numbers(10e3) SETTINGS max_memory_usage=4e6, max_block_size=100 FORMAT Null;
SELECT repeat('abc', 10);
SELECT repeat('abc', i8) FROM defaults;
SELECT repeat('abc', u16) FROM defaults;
SELECT repeat('abc', u32) FROM defaults;
SELECT repeat('abc', u64) FROM defaults;
SELECT repeat('abcdefghijklmnopqrstuvwxyz', number * 100) AS haystack, extractAllGroupsHorizontal(haystack, '(\\w)') AS matches FROM numbers(1023);
SELECT repeat('Hello, world! ', 3);
SELECT repeat(ALL, 5) FROM (SELECT 'a' AS ALL);
SELECT repeat(ALL, DISTINCT) FROM (SELECT 'a' AS ALL, 5 AS DISTINCT);
SELECT repeat(DISTINCT, 5) FROM (SELECT 'a' AS DISTINCT);
SELECT repeat(strings, 10) FROM defaults;
SELECT repeat(strings, i8) FROM defaults;
SELECT repeat(strings, u16) FROM defaults;
SELECT repeat(strings, u32) from defaults;
SELECT repeat(strings, u64) FROM defaults;
select REPLACE('bar', 'r', 'z');
SELECT replaceRegexpAll(',,1', '^[,]*|[,]*$', '');
SELECT replaceRegexpAll(',,1,,', '^[,]*|[,]*$', '');
SELECT replaceRegexpAll('1,,', '^[,]*|[,]*$', '');
SELECT replaceRegexpAll('a', 'z*', '') == 'a';
SELECT replaceRegexpAll('aa', 'z*', '') == 'aa';
SELECT replaceRegexpAll('aaq', 'z*', '') == 'aaq';
SELECT replaceRegexpAll('aazq', 'z*', '') == 'aaq';
SELECT replaceRegexpAll('aazzq', 'z*', '') == 'aaq';
SELECT replaceRegexpAll('aazzqa', 'z*', '') == 'aaqa';
select replaceRegexpAll('Hello, World!', '^', 'here: ');
SELECT replaceRegexpAll(materialize(',,1'), '^[,]*|[,]*$', '');
SELECT replaceRegexpAll(materialize(',,1,,'), '^[,]*|[,]*$', '');
SELECT replaceRegexpAll(materialize('1,,'), '^[,]*|[,]*$', '');
SELECT replaceRegexpAll(materialize('a'), 'z*', '') == 'a';
SELECT replaceRegexpAll(materialize('aa'), 'z*', '') == 'aa';
SELECT replaceRegexpAll(materialize('aaq'), 'z*', '') == 'aaq';
SELECT replaceRegexpAll(materialize('aazq'), 'z*', '') == 'aaq';
SELECT replaceRegexpAll(materialize('aazzq'), 'z*', '') == 'aaq';
SELECT replaceRegexpAll(materialize('aazzqa'), 'z*', '') == 'aaqa';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select a from t15 group by a ) where explain like '%Skip merging: %' settings force_aggregate_partitions_independently = 0;
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select a from t16 group by a ) where explain like '%Skip merging: %' settings force_aggregate_partitions_independently = 0, max_number_of_partitions_for_independent_aggregation = 4;
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select a from t17 group by a ) where explain like '%Skip merging: %' settings force_aggregate_partitions_independently = 0, max_threads = 4;
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select a from t22 final group by a ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select a, b from t12 group by a, b, pi() ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select a1 from t18 group by intDiv(a, 2) as a1 ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select a1 from t19 group by blockNumber() as a1 ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select a1 from t20 group by rand(a) as a1 ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select intDiv(a, 2) + 1 as a1 from t8 group by a1 ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select intDiv(a, 2) + 1 as a1, intDiv(b, 3) * 2 as b1 from t11 group by a1, b1, pi() ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select intDiv(a, 2) + 1 as a1, intDiv(b, 3) as b1 from t10 group by a1, b1, pi() ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select intDiv(a, 2) as a1 from t7 group by a1 ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select intDiv(a, 2) as a1, intDiv(b, 3) as b1 from t14 group by a1, b1, pi() ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select intDiv(a, 3) as a1 from t9 group by a1 ) where explain like '%Skip merging: %';
select replaceRegexpOne(explain, '^[ ]*(.*)', '\\1') from ( explain actions=1 select s from t13 group by intDiv(a, 2) + intDiv(b, 3) as s, pi() ) where explain like '%Skip merging: %';
SELECT replicate('hello', emptyArrayString()) FROM system.one ARRAY JOIN emptyArrayString() AS unused WHERE NOT ignore(replicate('hello', emptyArrayString()));
SELECT res FROM (SELECT arrayJoin(x) AS res FROM (SELECT [1, 2, 3] AS x UNION ALL SELECT [nan, NULL]) ORDER BY res) ORDER BY res DESC;
SELECT res FROM (SELECT arrayPartialReverseSort(2, number % 2 ? emptyArrayUInt64() : range(number)) AS arr, arrayResize(arr, if(empty(arr), 0, 2)) AS res FROM system.numbers LIMIT 10);
SELECT res FROM (SELECT col1, assumeNotNull(col1) AS res FROM test1_00395) WHERE col1 IS NOT NULL ORDER BY res ASC;
SELECT result FROM ( SELECT (lat, lon) AS input_geo, h3ToGeo(geoToH3(lat, lon, res)) AS output_geo, if(abs(input_geo.1 - output_geo.1) < 0.001 AND abs(input_geo.2 - output_geo.2) < 0.001, 'ok', 'fail') AS result FROM h3_geo );
select result_rows, result_bytes >= 8 from system.query_log where current_database = currentDatabase() AND event_date >= today() - 1 and lower(query) like '%select count() > 0 from system.settings%' and type = 'QueryFinish' order by query_start_time desc limit 1;
SELECT reverse('Hello');
SELECT reverse(['Hello', 'World']);
SELECT reverse(['Hello', 'world']);
SELECT reverse(['Hello', NULL, 'world']);
SELECT reverse([(1, 'Hello', []), (nan, 'World', [NULL])]);
SELECT reverse([[[[]]]]);
SELECT reverse([[], [''], [' ']]);
SELECT reverse([[], [''], [NULL]]);
SELECT reverse([]);
SELECT reverse([NULL, '\0']);
SELECT reverse([NULL, 123, NULL]);
SELECT reverse([NULL, NULL, NULL]);
SELECT reverse([toFixedString('Hello', 5), NULL]);
SELECT reverse(arrayMap(x -> toString(round(exp10(x))), range(number))) FROM system.numbers LIMIT 10;
SELECT reverse(materialize('Hello'));
SELECT reverse(materialize(['Hello', 'World']));
SELECT reverse(NULL);
SELECT reverse(range(number)) FROM system.numbers LIMIT 10;
SELECT reverse(toFixedString(toString(round(exp10(number))), 10)) FROM system.numbers LIMIT 10;
SELECT reverse(toString(round(exp10(number)))) FROM system.numbers LIMIT 10;
SELECT revision()=Revision(), REVISION()=Revision(), revisiON()=reVision();
select RIGHT('bar', 1);
select right('bar', 123);
SELECT right('Hello', -3);
SELECT right('Hello', -5);
SELECT right('Hello', -6);
SELECT right('Hello', -number) FROM numbers(10);
SELECT right('Hello', 0);
SELECT right('Hello', 3);
SELECT right('Hello', 5);
SELECT right('Hello', 6);
SELECT right('Hello', NULL);
SELECT right('Hello', number) FROM numbers(10);
SELECT right('Привет', -12);
SELECT right('Привет', -13);
SELECT right('Привет', -4);
SELECT rIgHt('Привет', 0);
SELECT RiGhT('Привет', NULL);
SELECT RIGHT(materialize('Привет'), 4);
SELECT rIGHT(materialize(toNullable('Привет')), 13);
SELECT Right(toNullable('Привет'), 12);
SELECT rightPad('abc', 0), rightPad('abc', 0::Int32);
SELECT rightPad('abc', 1), rightPad('abc', 1::Int32);
SELECT rightPad('abc', 10), rightPad('abc', 10::Int32);
SELECT rightPad('abc', 10, '*'), rightPad('abc', 10::Int32, '*');
SELECT rightPad('abc', 10, '*.'), rightPad('abc', 10::Int32, '*.');
SELECT rightPad('abc', 2), rightPad('abc', 2::Int32);
SELECT rightPad('abc', 2, '*'), rightPad('abc', 2::Int32, '*');
SELECT rightPad('abc', 2, '*.'), rightPad('abc', 2::Int32, '*.');
SELECT rightPad('abc', 3), rightPad('abc', 3::Int32);
SELECT rightPad('abc', 4), rightPad('abc', 4::Int32);
SELECT rightPad('abc', 4, '*'), rightPad('abc', 4::Int32, '*');
SELECT rightPad('abc', 4, '*.'), rightPad('abc', 4::Int32, '*.');
SELECT rightPad('abc', 5), rightPad('abc', 5::Int32);
SELECT rightPad('abc', 5, '*'), rightPad('abc', 5::Int32, '*');
SELECT rightPad('abc', 5, '*.'), rightPad('abc', 5::Int32, '*.');
SELECT rightPad('абвг', 12, 'ЧАС'), rightPad('абвг', 12::Int32, 'ЧАС');
SELECT rightPad('абвг', 2), rightPad('абвг', 2::Int32);
SELECT rightPad('абвг', 4), rightPad('абвг', 4::Int32);
SELECT rightPad(leftPad(toString(number), number, '_'), number*2, '^') FROM numbers(7);
SELECT rightPad(leftPad(toString(number), number::Int64, '_'), number::Int64*2, '^') FROM numbers(7);
SELECT rightPadUTF8('абвг', 12, 'ЧАС'), rightPadUTF8('абвг', 12::Int32, 'ЧАС');
SELECT rightPadUTF8('абвг', 2), rightPadUTF8('абвг', 2::Int32);
SELECT rightPadUTF8('абвг', 4), rightPadUTF8('абвг', 4::Int32);
SELECT rightUTF8('Привет', -12);
SELECT rightUTF8('Привет', -13);
SELECT rightUTF8('Привет', -4);
SELECT rightUTF8('Привет', -number) FROM numbers(10);
SELECT rightUTF8('Привет', 0);
SELECT rightUTF8('Привет', 12);
SELECT rightUTF8('Привет', 13);
SELECT rightUTF8('Привет', 4);
SELECT rightUTF8('Привет', NULL);
SELECT rightUTF8('Привет', number % 3 = 0 ? NULL : (number % 2 ? toInt64(number) : -number)) FROM numbers(10);
SELECT rightUTF8('Привет', number) FROM numbers(10);
SELECT rightUTF8(number < 5 ? 'Hello' : 'Привет', number % 3 = 0 ? NULL : (number % 2 ? toInt64(number) : -number)) FROM numbers(10);
SELECT root.nested_array FROM data_compact;
SELECT root.nested_array FROM data_wide;
select round( float64Field1 * if(strField1 != '', 1.0, dictGetFloat64('dict', 'float64Field', (strField1, toDate('2021-01-01')))) + if(strField2 != '', 1.0, dictGetFloat64('dict', 'float64Field', (strField2, toDate('2021-01-01')))) * if(isFinite(float64Field2), float64Field2, 0), 2) from data_table;
SELECT round((countIf(rating = 5)) - (countIf(rating < 5)), 4) as nps, dense_rank() OVER (ORDER BY nps DESC) as rank FROM (select number as rating, number%3 rest_id from numbers(10)) group by rest_id order by rank;
SELECT round((sum(multiIf(s IN ('a', 'b'), 1, 0)) / count()) * 100) AS r FROM cluster('test_cluster_two_shards', currentDatabase(), t);
SELECT round(0.00001 * toDecimal32(12, 2), 6);
SELECT round(1.1::Decimal(60, 30));
SELECT round(1.1::Decimal(60, 30), 1);
SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 1);
SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 20);
SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 30);
SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 31);
select round(1000 * ngramDistance('', ''));
select round(1000 * ngramDistance('', 'abc'));
select round(1000 * ngramDistance('', materialize('abc')))=round(1000 * ngramDistance(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramDistance('',materialize('')))=round(1000 * ngramDistance(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistance('abc', ''));
select round(1000 * ngramDistance('abc', materialize('')))=round(1000 * ngramDistance(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramDistance('abcdefgh', 'aaaaaaaa'));
select round(1000 * ngramDistance('abcdefgh', 'abcdefg'));
select round(1000 * ngramDistance('abcdefgh', 'abcdefgh'));
select round(1000 * ngramDistance('abcdefgh', 'defgh'));
select round(1000 * ngramDistance('abcdefgh', materialize('aaaaaaaa')))=round(1000 * ngramDistance(materialize('abcdefgh'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramDistance('abcdefgh', materialize('abcdefg')))=round(1000 * ngramDistance(materialize('abcdefgh'), 'abcdefg')) from system.numbers limit 5;
select round(1000 * ngramDistance('abcdefgh', materialize('abcdefgh')))=round(1000 * ngramDistance(materialize('abcdefgh'), 'abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramDistance('abcdefgh', materialize('defgh')))=round(1000 * ngramDistance(materialize('abcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize(''), materialize('abc')))=round(1000 * ngramDistance(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize(''),materialize('')))=round(1000 * ngramDistance(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abc'),materialize('')))=round(1000 * ngramDistance(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abcdefgh'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abcdefgh'), 'abcdefg')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abcdefgh'), 'abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abcdefgh'), materialize('aaaaaaaa')))=round(1000 * ngramDistance(materialize('abcdefgh'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abcdefgh'), materialize('abcdefg')))=round(1000 * ngramDistance(materialize('abcdefgh'), 'abcdefg')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abcdefgh'), materialize('abcdefgh')))=round(1000 * ngramDistance(materialize('abcdefgh'), 'abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramDistance(materialize('abcdefgh'), materialize('defgh')))=round(1000 * ngramDistance(materialize('abcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive('', ''));
select round(1000 * ngramDistanceCaseInsensitive('', 'abc'));
select round(1000 * ngramDistanceCaseInsensitive('', materialize('')))=round(1000 * ngramDistanceCaseInsensitive(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive('', materialize('abc')))=round(1000 * ngramDistanceCaseInsensitive(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive('AAAAbcdefgh', 'defgh'));
select round(1000 * ngramDistanceCaseInsensitive('AAAAbcdefgh', materialize('defgh')))=round(1000 * ngramDistanceCaseInsensitive(materialize('AAAAbcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive('abc', ''));
select round(1000 * ngramDistanceCaseInsensitive('abc', materialize('')))=round(1000 * ngramDistanceCaseInsensitive(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive('ABCdefgH', 'aaaaaaaa'));
select round(1000 * ngramDistanceCaseInsensitive('abcdefgh', 'abcdeFG'));
select round(1000 * ngramDistanceCaseInsensitive('abCdefgH', 'Abcdefgh'));
select round(1000 * ngramDistanceCaseInsensitive('ABCdefgH', materialize('aaaaaaaa')))=round(1000 * ngramDistanceCaseInsensitive(materialize('ABCdefgH'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive('abcdefgh', materialize('abcdeFG')))=round(1000 * ngramDistanceCaseInsensitive(materialize('abcdefgh'), 'abcdeFG')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive('abCdefgH', materialize('Abcdefgh')))=round(1000 * ngramDistanceCaseInsensitive(materialize('abCdefgH'), 'Abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize(''), materialize('')))=round(1000 * ngramDistanceCaseInsensitive(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize(''), materialize('abc')))=round(1000 * ngramDistanceCaseInsensitive(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('AAAAbcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('AAAAbcdefgh'), materialize('defgh')))=round(1000 * ngramDistanceCaseInsensitive(materialize('AAAAbcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('abc'), materialize('')))=round(1000 * ngramDistanceCaseInsensitive(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('ABCdefgH'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('abcdefgh'), 'abcdeFG')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('abCdefgH'), 'Abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('ABCdefgH'), materialize('aaaaaaaa')))=round(1000 * ngramDistanceCaseInsensitive(materialize('ABCdefgH'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('abcdefgh'), materialize('abcdeFG')))=round(1000 * ngramDistanceCaseInsensitive(materialize('abcdefgh'), 'abcdeFG')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitive(materialize('abCdefgH'), materialize('Abcdefgh')))=round(1000 * ngramDistanceCaseInsensitive(materialize('abCdefgH'), 'Abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8('', ''));
select round(1000 * ngramDistanceCaseInsensitiveUTF8('', 'абв'));
select round(1000 * ngramDistanceCaseInsensitiveUTF8('', materialize(''))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8('', materialize('абв'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8('абв', ''));
select round(1000 * ngramDistanceCaseInsensitiveUTF8('абв',materialize(''))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8('аБВГдеёЖз', 'АбвГдеёж'));
select round(1000 * ngramDistanceCaseInsensitiveUTF8('абвГДЕёжз', 'АбвгдЕЁжз'));
select round(1000 * ngramDistanceCaseInsensitiveUTF8('абвгдеёжз', 'гдеёЗД'));
select round(1000 * ngramDistanceCaseInsensitiveUTF8('АБВГДеёжз', 'ЁЁЁЁЁЁЁЁ'));
select round(1000 * ngramDistanceCaseInsensitiveUTF8('аБВГдеёЖз', materialize('АбвГдеёж'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('аБВГдеёЖз'), 'АбвГдеёж')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8('абвГДЕёжз', materialize('АбвгдЕёжз'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвГДЕёжз'), 'АбвгдЕёжз')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8('абвгдеёжз', materialize('гдеёЗД'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'гдеёЗД')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8('абвгдеёжз', materialize('ЁЁЁЁЁЁЁЁ'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'ЁЁЁЁЁЁЁЁ')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize(''), materialize('абв'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize(''),materialize(''))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абв'),materialize(''))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('аБВГдеёЖз'), 'АбвГдеёж')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвГДЕёжз'), 'АбвгдЕёжз')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'гдеёЗД')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'ЁЁЁЁЁЁЁЁ')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('аБВГдеёЖз'), materialize('АбвГдеёж'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('аБВГдеёЖз'), 'АбвГдеёж')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвГДЕёжз'), materialize('АбвгдЕёжз'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвГДЕёжз'), 'АбвгдЕёжз')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвгдеёжз'), materialize('гдеёЗД'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'гдеёЗД')) from system.numbers limit 5;
select round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвгдеёжз'), materialize('ЁЁЁЁЁЁЁЁ'))) = round(1000 * ngramDistanceCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'ЁЁЁЁЁЁЁЁ')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8('', ''));
select round(1000 * ngramDistanceUTF8('', 'абв'));
select round(1000 * ngramDistanceUTF8('', materialize('')))=round(1000 * ngramDistanceUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8('', materialize('абв')))=round(1000 * ngramDistanceUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8('абв', ''));
select round(1000 * ngramDistanceUTF8('абв', materialize('')))=round(1000 * ngramDistanceUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8('абвгдеёжз', 'абвгдеёж'));
select round(1000 * ngramDistanceUTF8('абвгдеёжз', 'абвгдеёжз'));
select round(1000 * ngramDistanceUTF8('абвгдеёжз', 'гдеёзд'));
select round(1000 * ngramDistanceUTF8('абвгдеёжз', 'ёёёёёёёё'));
select round(1000 * ngramDistanceUTF8('абвгдеёжз', materialize('абвгдеёж')))=round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'абвгдеёж')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8('абвгдеёжз', materialize('абвгдеёжз')))=round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'абвгдеёжз')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8('абвгдеёжз', materialize('гдеёзд')))=round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'гдеёзд')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8('абвгдеёжз', materialize('ёёёёёёёё')))=round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'ёёёёёёёё')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize(''), materialize('')))=round(1000 * ngramDistanceUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize(''), materialize('абв')))=round(1000 * ngramDistanceUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абв'), materialize('')))=round(1000 * ngramDistanceUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'абвгдеёж')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'абвгдеёжз')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'гдеёзд')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'ёёёёёёёё')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), materialize('абвгдеёж')))=round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'абвгдеёж')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), materialize('абвгдеёжз')))=round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'абвгдеёжз')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), materialize('гдеёзд')))=round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'гдеёзд')) from system.numbers limit 5;
select round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), materialize('ёёёёёёёё')))=round(1000 * ngramDistanceUTF8(materialize('абвгдеёжз'), 'ёёёёёёёё')) from system.numbers limit 5;
select round(1000 * ngramSearch('', ''));
select round(1000 * ngramSearch('', 'abc'));
select round(1000 * ngramSearch('', materialize('abc')))=round(1000 * ngramSearch(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramSearch('',materialize('')))=round(1000 * ngramSearch(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearch('abc', ''));
select round(1000 * ngramSearch('abc', materialize('')))=round(1000 * ngramSearch(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramSearch('abcdefgh', 'abcdefg'));
select round(1000 * ngramSearch('abcdefgh', 'abcdefgh'));
select round(1000 * ngramSearch('abcdefgh', 'defgh'));
select round(1000 * ngramSearch('abcdefgh', materialize('aaaaaaaa')))=round(1000 * ngramSearch(materialize('abcdefgh'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramSearch('abcdefgh', materialize('abcdefg')))=round(1000 * ngramSearch(materialize('abcdefgh'), 'abcdefg')) from system.numbers limit 5;
select round(1000 * ngramSearch('abcdefgh', materialize('abcdefgh')))=round(1000 * ngramSearch(materialize('abcdefgh'), 'abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramSearch('abcdefgh', materialize('defgh')))=round(1000 * ngramSearch(materialize('abcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramSearch('abcdefghaaaaaaaaaa', 'aaaaaaaa'));
select round(1000 * ngramSearch(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize(''), materialize('abc')))=round(1000 * ngramSearch(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize(''),materialize('')))=round(1000 * ngramSearch(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abc'),materialize('')))=round(1000 * ngramSearch(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abcdefgh'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abcdefgh'), 'abcdefg')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abcdefgh'), 'abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abcdefgh'), materialize('aaaaaaaa')))=round(1000 * ngramSearch(materialize('abcdefgh'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abcdefgh'), materialize('abcdefg')))=round(1000 * ngramSearch(materialize('abcdefgh'), 'abcdefg')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abcdefgh'), materialize('abcdefgh')))=round(1000 * ngramSearch(materialize('abcdefgh'), 'abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramSearch(materialize('abcdefgh'), materialize('defgh')))=round(1000 * ngramSearch(materialize('abcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive('', ''));
select round(1000 * ngramSearchCaseInsensitive('', 'abc'));
select round(1000 * ngramSearchCaseInsensitive('', materialize('')))=round(1000 * ngramSearchCaseInsensitive(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive('', materialize('abc')))=round(1000 * ngramSearchCaseInsensitive(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive('AAAAbcdefgh', 'defgh'));
select round(1000 * ngramSearchCaseInsensitive('AAAAbcdefgh', materialize('defgh')))=round(1000 * ngramSearchCaseInsensitive(materialize('AAAAbcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive('abc', ''));
select round(1000 * ngramSearchCaseInsensitive('abc', materialize('')))=round(1000 * ngramSearchCaseInsensitive(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive('abcdefgh', 'abcdeFG'));
select round(1000 * ngramSearchCaseInsensitive('abCdefgH', 'Abcdefgh'));
select round(1000 * ngramSearchCaseInsensitive('ABCdefgH', materialize('aaaaaaaa')))=round(1000 * ngramSearchCaseInsensitive(materialize('ABCdefgH'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive('abcdefgh', materialize('abcdeFG')))=round(1000 * ngramSearchCaseInsensitive(materialize('abcdefgh'), 'abcdeFG')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive('abCdefgH', materialize('Abcdefgh')))=round(1000 * ngramSearchCaseInsensitive(materialize('abCdefgH'), 'Abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive('ABCdefgHaAaaaAaaaAA', 'aaaaaaaa'));
select round(1000 * ngramSearchCaseInsensitive(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize(''), materialize('')))=round(1000 * ngramSearchCaseInsensitive(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize(''), materialize('abc')))=round(1000 * ngramSearchCaseInsensitive(materialize(''), 'abc')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('AAAAbcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('AAAAbcdefgh'), materialize('defgh')))=round(1000 * ngramSearchCaseInsensitive(materialize('AAAAbcdefgh'), 'defgh')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('abc'), materialize('')))=round(1000 * ngramSearchCaseInsensitive(materialize('abc'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('ABCdefgH'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('abcdefgh'), 'abcdeFG')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('abCdefgH'), 'Abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('ABCdefgH'), materialize('aaaaaaaa')))=round(1000 * ngramSearchCaseInsensitive(materialize('ABCdefgH'), 'aaaaaaaa')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('abcdefgh'), materialize('abcdeFG')))=round(1000 * ngramSearchCaseInsensitive(materialize('abcdefgh'), 'abcdeFG')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitive(materialize('abCdefgH'), materialize('Abcdefgh')))=round(1000 * ngramSearchCaseInsensitive(materialize('abCdefgH'), 'Abcdefgh')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8('', ''));
select round(1000 * ngramSearchCaseInsensitiveUTF8('', 'абв'));
select round(1000 * ngramSearchCaseInsensitiveUTF8('', materialize(''))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8('', materialize('абв'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8('абв', ''));
select round(1000 * ngramSearchCaseInsensitiveUTF8('абв',materialize(''))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8('аБВГдеёЖз', 'АбвГдеёж'));
select round(1000 * ngramSearchCaseInsensitiveUTF8('абвГДЕёжз', 'АбвгдЕЁжз'));
select round(1000 * ngramSearchCaseInsensitiveUTF8('абвгдеёжз', 'гдеёЗД'));
select round(1000 * ngramSearchCaseInsensitiveUTF8('АБВГДеёжз', 'ЁЁЁЁЁЁЁЁ'));
select round(1000 * ngramSearchCaseInsensitiveUTF8('аБВГдеёЖз', materialize('АбвГдеёж'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('аБВГдеёЖз'), 'АбвГдеёж')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8('абвГДЕёжз', materialize('АбвгдЕёжз'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвГДЕёжз'), 'АбвгдЕёжз')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8('абвгдеёжз', materialize('гдеёЗД'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'гдеёЗД')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8('абвгдеёжз', materialize('ЁЁЁЁЁЁЁЁ'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'ЁЁЁЁЁЁЁЁ')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize(''), materialize('абв'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize(''),materialize(''))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абв'),materialize(''))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('аБВГдеёЖз'), 'АбвГдеёж')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвГДЕёжз'), 'АбвгдЕёжз')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'гдеёЗД')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'ЁЁЁЁЁЁЁЁ')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('аБВГдеёЖз'), materialize('АбвГдеёж'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('аБВГдеёЖз'), 'АбвГдеёж')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвГДЕёжз'), materialize('АбвгдЕёжз'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвГДЕёжз'), 'АбвгдЕёжз')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвгдеёжз'), materialize('гдеёЗД'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'гдеёЗД')) from system.numbers limit 5;
select round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвгдеёжз'), materialize('ЁЁЁЁЁЁЁЁ'))) = round(1000 * ngramSearchCaseInsensitiveUTF8(materialize('абвгдеёжз'), 'ЁЁЁЁЁЁЁЁ')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8('', ''));
select round(1000 * ngramSearchUTF8('', 'абв'));
select round(1000 * ngramSearchUTF8('', materialize('')))=round(1000 * ngramSearchUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8('', materialize('абв')))=round(1000 * ngramSearchUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8('абв', ''));
select round(1000 * ngramSearchUTF8('абв', materialize('')))=round(1000 * ngramSearchUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8('абвгдеёжз', 'абвгдеёж'));
select round(1000 * ngramSearchUTF8('абвгдеёжз', 'абвгдеёжз'));
select round(1000 * ngramSearchUTF8('абвгдеёжз', 'гдеёзд'));
select round(1000 * ngramSearchUTF8('абвгдеёжз', 'ёёёёёёёё'));
select round(1000 * ngramSearchUTF8('абвгдеёжз', materialize('абвгдеёж')))=round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'абвгдеёж')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8('абвгдеёжз', materialize('абвгдеёжз')))=round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'абвгдеёжз')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8('абвгдеёжз', materialize('гдеёзд')))=round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'гдеёзд')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8('абвгдеёжз', materialize('ёёёёёёёё')))=round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'ёёёёёёёё')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize(''), materialize('')))=round(1000 * ngramSearchUTF8(materialize(''), '')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize(''), materialize('абв')))=round(1000 * ngramSearchUTF8(materialize(''), 'абв')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абв'), materialize('')))=round(1000 * ngramSearchUTF8(materialize('абв'), '')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'абвгдеёж')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'абвгдеёжз')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'гдеёзд')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'ёёёёёёёё')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), materialize('абвгдеёж')))=round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'абвгдеёж')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), materialize('абвгдеёжз')))=round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'абвгдеёжз')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), materialize('гдеёзд')))=round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'гдеёзд')) from system.numbers limit 5;
select round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), materialize('ёёёёёёёё')))=round(1000 * ngramSearchUTF8(materialize('абвгдеёжз'), 'ёёёёёёёё')) from system.numbers limit 5;
SELECT round(1000000 / (number + 1)) AS k, count() AS c, arrayMap(x -> round(x, 6), quantilesDeterministic(0.1, 0.5, 0.9)(number, intHash64(number))) AS q1, quantilesExact(0.1, 0.5, 0.9)(number) AS q2 FROM (SELECT number FROM system.numbers LIMIT 1000000) GROUP BY k ORDER BY k;
select round(2, 4) round2, round(20, 4) round20, round(200, 4) round200, round(5, 4) round5, round(50, 4) round50, round(500, 4) round500, round(toInt32(5), 4) roundInt5, round(toInt32(50), 4) roundInt50, round(toInt32(500), 4) roundInt500;
SELECT round(30.033 * toDecimal32(5, 1), 6);
SELECT round(abs(corr(x1,x2) - corrMatrix(x1,x2)[1][2]), 5), round(abs(corr(x1,x1) - corrMatrix(x1,x2)[1][1]), 5), round(abs(corr(x2,x2) - corrMatrix(x1,x2)[2][2]), 5) from (select randNormal(100, 1) as x1, randNormal(100,5) as x2 from numbers(100000));
SELECT round(abs(corr(x_value, y_value) - covarPop(x_value, y_value) / (stddevPop(x_value) * stddevPop(y_value))), 6) FROM series;
SELECT round(abs(corrStable(x_value, y_value) - covarPopStable(x_value, y_value) / (stddevPopStable(x_value) * stddevPopStable(y_value))), 6) FROM series;
SELECT round(abs(COVAR1 - COVAR2), 6) FROM ( SELECT arrayJoin([1]) AS ID2, covarPop(x_value, y_value) AS COVAR1 FROM series ) ANY INNER JOIN ( SELECT arrayJoin([1]) AS ID2, sum(VAL) / count() AS COVAR2 FROM ( SELECT (X - AVG_X) * (Y - AVG_Y) AS VAL FROM ( SELECT toUInt32(arrayJoin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) AS ID, avg(x_value) AS AVG_X, avg(y_value) AS AVG_Y FROM series ) ANY INNER JOIN ( SELECT i AS ID, x_value AS X, y_value AS Y FROM series ) USING ID ) ) USING ID2;
SELECT round(abs(COVAR1 - COVAR2), 6) FROM ( SELECT arrayJoin([1]) AS ID2, covarPopStable(x_value, y_value) AS COVAR1 FROM series ) ANY INNER JOIN ( SELECT arrayJoin([1]) AS ID2, sum(VAL) / count() AS COVAR2 FROM ( SELECT (X - AVG_X) * (Y - AVG_Y) AS VAL FROM ( SELECT toUInt32(arrayJoin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) AS ID, avg(x_value) AS AVG_X, avg(y_value) AS AVG_Y FROM series ) ANY INNER JOIN ( SELECT i AS ID, x_value AS X, y_value AS Y FROM series ) USING ID ) ) USING ID2;
SELECT round(abs(COVAR1 - COVAR2), 6) FROM ( SELECT arrayJoin([1]) AS ID2, covarSamp(x_value, y_value) AS COVAR1 FROM series ) ANY INNER JOIN ( SELECT arrayJoin([1]) AS ID2, sum(VAL) / (count() - 1) AS COVAR2 FROM ( SELECT (X - AVG_X) * (Y - AVG_Y) AS VAL FROM ( SELECT toUInt32(arrayJoin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) AS ID, avg(x_value) AS AVG_X, avg(y_value) AS AVG_Y FROM series ) ANY INNER JOIN ( SELECT i AS ID, x_value AS X, y_value AS Y FROM series ) USING ID ) ) USING ID2;
SELECT round(abs(COVAR1 - COVAR2), 6) FROM ( SELECT arrayJoin([1]) AS ID2, covarSampStable(x_value, y_value) AS COVAR1 FROM series ) ANY INNER JOIN ( SELECT arrayJoin([1]) AS ID2, sum(VAL) / (count() - 1) AS COVAR2 FROM ( SELECT (X - AVG_X) * (Y - AVG_Y) AS VAL FROM ( SELECT toUInt32(arrayJoin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) AS ID, avg(x_value) AS AVG_X, avg(y_value) AS AVG_Y FROM series ) ANY INNER JOIN ( SELECT i AS ID, x_value AS X, y_value AS Y FROM series ) USING ID ) ) USING ID2;
SELECT round(abs(covarPop(x1,x2) - covarPopMatrix(x1,x2)[1][2]), 5), round(abs(covarPop(x1,x1) - covarPopMatrix(x1,x2)[1][1]), 5), round(abs(covarPop(x2,x2) - covarPopMatrix(x1,x2)[2][2]), 5) from (select randNormal(100, 1) as x1, randNormal(100,5) as x2 from numbers(100000));
SELECT round(abs(covarSamp(x1,x2) - covarSampMatrix(x1,x2)[1][2]), 5), round(abs(covarSamp(x1,x1) - covarSampMatrix(x1,x2)[1][1]), 5), round(abs(covarSamp(x2,x2) - covarSampMatrix(x1,x2)[2][2]), 5) from (select randNormal(100, 1) as x1, randNormal(100,5) as x2 from numbers(100000));
SELECT round(abs(res1 - res2), 6) FROM ( SELECT kurtPop(x_value) AS res1, ( sum(x_value * x_value * x_value * x_value) / count() - 4 * sum(x_value * x_value * x_value) / count() * sum(x_value) / count() + 6 * sum(x_value * x_value) / count() * sum(x_value) / count() * sum(x_value) / count() - 3 * sum(x_value) / count() * sum(x_value) / count() * sum(x_value) / count() * sum(x_value) / count() ) / pow((sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / count(), 2) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT kurtSamp(x_value) AS res1, ( sum(x_value * x_value * x_value * x_value) / count() - 4 * sum(x_value * x_value * x_value) / count() * sum(x_value) / count() + 6 * sum(x_value * x_value) / count() * sum(x_value) / count() * sum(x_value) / count() - 3 * sum(x_value) / count() * sum(x_value) / count() * sum(x_value) / count() * sum(x_value) / count() ) / pow((sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / (count() - 1), 2) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT skewPop(x_value) AS res1, ( sum(x_value * x_value * x_value) / count() - 3 * sum(x_value * x_value) / count() * sum(x_value) / count() + 2 * sum(x_value) / count() * sum(x_value) / count() * sum(x_value) / count() ) / pow((sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / count(), 1.5) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT skewSamp(x_value) AS res1, ( sum(x_value * x_value * x_value) / count() - 3 * sum(x_value * x_value) / count() * sum(x_value) / count() + 2 * sum(x_value) / count() * sum(x_value) / count() * sum(x_value) / count() ) / pow((sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / (count() - 1), 1.5) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT stddevPop(x_value) AS res1, sqrt((sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / count()) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT stddevPopStable(x_value) AS res1, sqrt((sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / count()) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT stddevSamp(x_value) AS res1, sqrt((sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / (count() - 1)) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT stddevSampStable(x_value) AS res1, sqrt((sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / (count() - 1)) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT varPop(x_value) AS res1, (sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / count() AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT varPopStable(x_value) AS res1, (sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / count() AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT varSamp(x_value) AS res1, (sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / (count() - 1) AS res2 FROM series );
SELECT round(abs(res1 - res2), 6) FROM ( SELECT varSampStable(x_value) AS res1, (sum(x_value * x_value) - ((sum(x_value) * sum(x_value)) / count())) / (count() - 1) AS res2 FROM series );
SELECT round(arrayJoin(categoricalInformationValue(c1, c2)), 3) FROM VALUES((0, 0), (NULL, 1), (1, 0), (1, 1));
SELECT round(arrayJoin(categoricalInformationValue(c1, c2)), 3) FROM VALUES((0, 0), (NULL, 2), (1, 0), (1, 1));
SELECT round(arrayJoin(categoricalInformationValue(x.1, x.2)), 3) FROM (SELECT arrayJoin([(0, 0), (NULL, 2), (1, 0), (1, 1)]) AS x);
SELECT round(arrayProduct([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]), 6);
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) % 3, number % 2 ORDER BY k;
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3 ORDER BY k;
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k SETTINGS allow_experimental_analyzer=1;
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k;
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 ORDER BY k;
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 3, number % 2;
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k SETTINGS allow_experimental_analyzer=1;
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;
SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) ORDER BY k;
SELECT round(avg(number * log(2)), 6) AS k FROM numbers(10000000) GROUP BY number % 3, number % 2;
SELECT round(avgWeighted(x, y)) FROM (SELECT 1023 AS x, 1000000000 AS y UNION ALL SELECT 10 AS x, -9223372036854775808 AS y);
SELECT round(corrStable(DISTINCT x, y), 5) FROM (SELECT number % 10 AS x, number % 5 AS y FROM numbers(1000));
SELECT round(corrStable(DISTINCT x, y), 5) FROM (SELECT number % 10 AS x, number % 5 AS y FROM remote('127.0.0.{1,2}', numbers(1000)));
SELECT round(corrStable(x, y), 5) FROM (SELECT DISTINCT number % 10 AS x, number % 5 AS y FROM numbers(1000));
SELECT round(cramersV(a, b), 2), round(cramersVBiasCorrected(a, b), 2), round(theilsU(a, b), 2), round(theilsU(b, a), 2), round(contingency(a, b), 2) FROM (SELECT number % 10 AS a, number % 10 = 0 ? number : a AS b FROM numbers(150));
SELECT round(cramersV(a, b), 2), round(cramersVBiasCorrected(a, b), 2), round(theilsU(a, b), 2), round(theilsU(b, a), 2), round(contingency(a, b), 2) FROM (SELECT number % 10 AS a, number % 10 AS b FROM numbers(150));
SELECT round(cramersV(a, b), 2), round(cramersVBiasCorrected(a, b), 2), round(theilsU(a, b), 2), round(theilsU(b, a), 2), round(contingency(a, b), 2) FROM (SELECT number % 10 AS a, number % 5 AS b FROM numbers(150));
SELECT round(cramersV(a, b), 2), round(cramersVBiasCorrected(a, b), 2), round(theilsU(a, b), 2), round(theilsU(b, a), 2), round(contingency(a, b), 2) FROM (SELECT number % 3 AS a, number % 5 AS b FROM numbers(150));
SELECT round(cramersV(a, b), 2), round(cramersVBiasCorrected(a, b), 2), round(theilsU(a, b), 2), round(theilsU(b, a), 2), round(contingency(a, b), 2) FROM (SELECT number AS a, number + 1 AS b FROM numbers(150));
SELECT round(dotProduct([-1, 2, 3.002], [2, 3.4, 4]) - dotProduct((-1, 2, 3.002), (2, 3.4, 4)), 2);
SELECT round(dotProduct([12345678901234567], [1]) - dotProduct(tuple(12345678901234567), tuple(1)), 2);
select round(geohashDecode('ezs42').1, 5), round(geohashDecode('ezs42').2, 5);
SELECT round(greatCircleAngle(0, 45, 0.1, 45.1), 4);
SELECT round(greatCircleAngle(0, 45, 1, 45), 4);
SELECT round(greatCircleAngle(0, 45, 1, 45.1), 4);
SELECT round(greatCircleDistance(0, 0, 0, 90), 4);
SELECT round(greatCircleDistance(0, 0, 90, 0), 4);
SELECT round(h3CellAreaM2(arrayJoin([579205133326352383,589753847883235327,594082350283882495])), 2);
SELECT round(h3CellAreaM2(h3_index), 2) FROM h3_indexes ORDER BY h3_index;
SELECT round(h3EdgeAngle(arrayJoin([0,1,2])), 2);
SELECT round(h3EdgeLengthKm(arrayJoin([0,1,2])), 2);
SELECT round(h3EdgeLengthM(arrayJoin([0,1,2])), 2);
SELECT round(h3ExactEdgeLengthKm(arrayJoin([1298057039473278975,1370114633511206911,1442172227549134847,1514229821587062783])), 2);
SELECT round(h3ExactEdgeLengthKm(h3_index), 2) FROM h3_indexes ORDER BY h3_index;
SELECT round(h3ExactEdgeLengthM(arrayJoin([1298057039473278975,1370114633511206911,1442172227549134847,1514229821587062783])), 2);
SELECT round(h3ExactEdgeLengthM(h3_index), 2) FROM h3_indexes ORDER BY h3_index;
SELECT round(h3ExactEdgeLengthRads(arrayJoin([1298057039473278975,1370114633511206911,1442172227549134847,1514229821587062783])), 2);
SELECT round(h3ExactEdgeLengthRads(h3_index), 5) FROM h3_indexes ORDER BY h3_index;
SELECT round(h3HexAreaKm2(arrayJoin([1,2])), 2);
SELECT round(h3HexAreaM2(arrayJoin([1,2])), 2);
select round(h3PointDistKm(lat1, lon1,lat2, lon2), 2) AS k from table1 order by k;
select round(h3PointDistM(lat1, lon1,lat2, lon2), 2) AS k from table1 order by k;
select round(h3PointDistRads(-10.0 ,0.0, 10.0, arrayJoin([0.0])), 5) as h3PointDistRads;
select round(h3PointDistRads(-10.0 ,0.0, 10.0, toFloat64(0)) , 5)as h3PointDistRads;
select round(h3PointDistRads(lat1, lon1,lat2, lon2), 5) AS k from table1 order by k;
SELECT round(max(log(2) * 3 * sin(0.3) * number * 4)) FROM numbers(100);
SELECT round(max(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 2, number % 3, (number % 2 + number % 3) % 2 ORDER BY k;
SELECT round(number % 3) AS number FROM remote('127.{1,1}', numbers(20)) GROUP BY number ORDER BY number ASC;
select round(polygonAreaSpherical([[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]), 14);
SELECT round(quantileArrayMerge(0.10)((*,).1)) FROM t0;
SELECT round(quantileDistinctMerge(0.10)((*,).1)) FROM t1;
SELECT round(quantileIfMerge(0.10)((*,).1)) FROM t3;
SELECT round(quantileMerge(0.10)((*,).1)) FROM t4;
SELECT round(quantileMerge(0.10)((*,).1)) FROM t8;
SELECT round(quantileOrDefaultMerge(0.10)((*,).1)) FROM t6;
SELECT round(quantileOrNullMerge(0.10)((*,).1)) FROM t5;
SELECT round(rankCorr(number, -number)) FROM numbers(5000000);
SELECT round(round(round(round(round(100)), round(round(round(round(NULL), round(65535)), toTypeName(now() + 9223372036854775807) LIKE 'DateTime%DateTime%DateTime%DateTime%', round(-2)), 255), round(NULL))));
SELECT round(sum(8.01 * d), 6) FROM test01603;
SELECT round(sum(d * 1.1), 6) FROM test01603;
SELECT round(sum(d * f32), 6) FROM test01603;
SELECT round(sum(d * f64), 6) FROM test01603;
SELECT round(sum(f32 * d), 6) FROM test01603;
SELECT round(sum(f64 * d), 6) FROM test01603;
SELECT round(sum(f64 * toDecimal64(0.1, 2)), 6) FROM test01603;
SELECT round(sum(f64 * toDecimal64(80, 2)), 6) FROM test01603;
SELECT round(sum(log(2) * number), 6) AS k FROM numbers(10000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING sum(log(2) * number) > 346.57353 ORDER BY k SETTINGS allow_experimental_analyzer=1;
SELECT round(sum(log(2) * number), 6) AS k FROM numbers(10000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING sum(log(2) * number) > 346.57353 ORDER BY k;
SELECT round(sum(toDecimal64(0.3, 2) * f32), 6) FROM test01603;
SELECT round(sum(toDecimal64(40, 2) * f32), 6) FROM test01603;
SELECT round(toDecimal32(1, 0), -9223372036854775806);
SELECT round(toDecimal32(2, 2) * 1.2, 6);
SELECT round(toDecimal64(0.5, 2) * 20.33, 6);
SELECT roundAge(0);
SELECT roundAge(18);
SELECT roundAge(25);
SELECT roundAge(35);
SELECT roundAge(45);
SELECT roundAge(55);
SELECT roundAge(56);
select roundBankers(2, 4) round2, roundBankers(20, 4) round20, roundBankers(200, 4) round200, roundBankers(5, 4) round5, roundBankers(50, 4) round50, roundBankers(500, 4) round500, roundBankers(toInt32(5), 4) roundInt5, roundBankers(toInt32(50), 4) roundInt50, roundBankers(toInt32(500), 4) roundInt500;
SELECT roundBankers(meanZTest(833.0, 800.0, 0.95)(v, s).1, 16) as z_stat, roundBankers(meanZTest(833.0, 800.0, 0.95)(v, s).2, 16) as p_value, roundBankers(meanZTest(833.0, 800.0, 0.95)(v, s).3, 16) as ci_low, roundBankers(meanZTest(833.0, 800.0, 0.95)(v, s).4, 16) as ci_high FROM mean_ztest;
SELECT roundBankers(rankCorr(a, b), 3) from circles;
SELECT roundBankers(rankCorr(a, b), 3) from moons;
SELECT roundBankers(rankCorr(exp(number), sin(number)), 3) FROM numbers(100);
SELECT roundBankers(result.1, 5), roundBankers(result.2, 5 ) FROM ( SELECT studentTTest(sample, variant) as result FROM ( SELECT toFloat64(number) % 30 AS sample, 0 AS variant FROM system.numbers limit 50000000 UNION ALL SELECT toFloat64(number) % 30 + 0.0022 AS sample, 1 AS variant FROM system.numbers limit 50000000));
SELECT roundBankers(result.1, 5), roundBankers(result.2, 5) FROM ( SELECT studentTTest(sample, variant) as result FROM ( SELECT toFloat64(number) % 30 AS sample, 0 AS variant FROM system.numbers limit 500000 UNION ALL SELECT toFloat64(number) % 30 + 0.0022 AS sample, 1 AS variant FROM system.numbers limit 500000));
SELECT roundBankers(result.2, 1025) FROM ( SELECT studentTTest(sample, variant) AS result FROM ( SELECT toFloat64(number) % 30 AS sample, 1048576 AS variant FROM system.numbers LIMIT 1 UNION ALL SELECT (toFloat64(number) % 7) + inf AS sample, 255 AS variant FROM system.numbers LIMIT 1023 ) );
SELECT roundBankers(studentTTest(0.95)(left, right).3, 6) as t_stat, roundBankers(studentTTest(0.95)(left, right).4, 6) as p_value from student_ttest;
SELECT roundBankers(studentTTest(left, right).1, 6) as t_stat, roundBankers(studentTTest(left, right).2, 6) as p_value from student_ttest;
SELECT roundBankers(studentTTest(left, right).2, 6) from welch_ttest__fuzz_7;
SELECT roundBankers(welchTTest(0.95)(left, right).3, 6) as t_stat, roundBankers(welchTTest(0.95)(left, right).4, 6) as p_value from welch_ttest;
SELECT roundBankers(welchTTest(left, right).1, 6) as t_stat, roundBankers(welchTTest(left, right).2, 6) as p_value from welch_ttest;
SELECT roundBankers(welchTTest(left, right).2, 6) from welch_ttest;
SELECT roundBankers(welchTTest(left, right).2, 6) from welch_ttest__fuzz_7;
SELECT roundDuration(240);
SELECT roundDuration(30);
SELECT roundDuration(300);
SELECT roundDuration(3600);
SELECT roundDuration(36000);
SELECT roundDuration(37000);
SELECT roundDuration(60);
SELECT roundDuration(600);
SELECT roundDuration(7200);
SELECT roundToExp2(0.9), roundToExp2(0), roundToExp2(-0.5), roundToExp2(-0.6), roundToExp2(-0.2);
SELECT roundToExp2(100), roundToExp2(64), roundToExp2(3), roundToExp2(0), roundToExp2(-1);
SELECT roundToExp2(number) AS k, length(groupArray(1)([hex(number)] AS i)), length(groupArray(1024)(i)), length(groupArray(65536)(i)) AS s FROM numbers_mt GROUP BY k ORDER BY k LIMIT 9, 11;
SELECT roundToExp2(number) AS k, length(groupArray(1)([hex(number)] AS i)), length(groupArray(1500)(i)), length(groupArray(70000)(i)) AS s FROM remote('127.0.0.{2,3}', currentDatabase(), 'numbers_mt') GROUP BY k ORDER BY k LIMIT 9, 11;
SELECT roundToExp2(number) AS k, length(groupArray(1)(hex(number) AS i)), length(groupArray(1024)(i)), length(groupArray(65536)(i)) AS s FROM numbers_mt GROUP BY k ORDER BY k LIMIT 9, 11;
SELECT roundToExp2(number) AS k, length(groupArray(1)(hex(number) AS i)), length(groupArray(1500)(i)), length(groupArray(70000)(i)) AS s FROM remote('127.0.0.{2,3}', currentDatabase(), 'numbers_mt') GROUP BY k ORDER BY k LIMIT 9, 11;
SELECT roundToExp2(number) AS k, length(groupArray(1)(number AS i)), length(groupArray(1024)(i)), length(groupArray(65536)(i)) AS s FROM numbers_mt GROUP BY k ORDER BY k LIMIT 9, 11;
SELECT roundToExp2(number) AS k, length(groupArray(1)(number AS i)), length(groupArray(1500)(i)), length(groupArray(70000)(i)) AS s FROM remote('127.0.0.{2,3}', currentDatabase(), 'numbers_mt') GROUP BY k ORDER BY k LIMIT 9, 11;
SELECT roundToExp2(number) AS x FROM numbers(3) ORDER BY x DESC, toFloat32(x) DESC;
SELECT roundToExp2(number) AS x FROM numbers(3) ORDER BY x, toFloat32(x);
SELECT roundToExp2(x) as k FROM test GROUP BY k ORDER BY k;
SELECT roundToExp2(x) as k From test GROUP BY k ORDER BY k;
SELECT roundToExp2(x) as k, y, z FROM test WHERE k >= 1 ORDER BY k, y, z;
select row_number() over (order by dummy) as x from remote('127.0.0.{1,2}', system, one) order by x;
SELECT rows > 1000 FROM (EXPLAIN ESTIMATE SELECT sum(a) FROM t1);
SELECT rows, delete_ttl_info_min, delete_ttl_info_max, move_ttl_info.expression, move_ttl_info.min, move_ttl_info.max FROM system.parts WHERE database = currentDatabase() AND table = 'ttl';
SELECT rows, toTimeZone(delete_ttl_info_min, 'UTC'), toTimeZone(delete_ttl_info_max, 'UTC'), move_ttl_info.expression, move_ttl_info.min, move_ttl_info.max FROM system.parts WHERE database = currentDatabase() AND table = 'ttl' AND active;
select RTRIM(' foo ');
SELECT RTRIM(' abcdef ');
SELECT runningConcurrency(begin, end) FROM runningConcurrency_test;
select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105727]::Array(Int128)) as x);
select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105727]::Array(UInt128)) as x);
select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105728]::Array(Int256)) as x);
select runningDifference(x) from (select arrayJoin([0, 1, 5, 10, 170141183460469231731687303715884105728]::Array(UInt256)) as x);
select runningDifference(x) from (select arrayJoin([0, 1, 5, 10]) as x);
select runningDifference(x) from (select arrayJoin([2, Null, 3, Null, 10]) as x);
select runningDifference(x) from (select arrayJoin([Null, 1]) as x);
select runningDifference(x) from (select arrayJoin([Null, Null, 1, 3, Null, Null, 5]) as x);
select runningDifference(x) from (select arrayJoin([Null, Null, toDate('1970-1-1'), toDate('1970-12-31'), Null, Null, toDate('2010-8-9')]) as x);
select runningDifference(x) from (select arrayJoin([Null, Null, toDate32('1900-1-1'), toDate32('1930-5-25'), toDate('1990-9-4'), Null, toDate32('2279-5-4')]) as x);
select runningDifference(x) from (select arrayJoin([Null, Null, toDateTime('1970-06-28 23:48:12', 'Asia/Istanbul'), toDateTime('2070-04-12 21:16:41', 'Asia/Istanbul'), Null, Null, toDateTime('2106-02-03 06:38:52', 'Asia/Istanbul')]) as x);
SELECT s FROM (SELECT 5 AS x, 'Hello' AS s ORDER BY x WITH FILL FROM 1 TO 10) ORDER BY s;
SELECT s FROM (SELECT s, SUM(i*2) AS i FROM test_00562 GROUP BY s UNION ALL SELECT s, SUM(i*2) AS i FROM test_00562 GROUP BY s);
SELECT s from array_of_tuples;
select s from buffer_table1 where x = 1;
select s from buffer_table1 where x = 2;
SELECT s FROM buffer_table1;
SELECT s FROM index_for_like WHERE s LIKE '%';
SELECT s FROM index_for_like WHERE s LIKE '%Hello%';
SELECT s FROM index_for_like WHERE s LIKE '%Hello';
SELECT s FROM index_for_like WHERE s LIKE 'Good%';
SELECT s FROM index_for_like WHERE s LIKE 'H%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello %';
SELECT s FROM index_for_like WHERE s LIKE 'Hello%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, Wor%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, Worl\\_%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, Worl_%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, World %';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, World 1%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, World 2%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, World% %';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, World%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello, Worle%';
SELECT s FROM index_for_like WHERE s LIKE 'Hello,%';
SELECT s FROM low_cardinality_all;
SELECT s FROM mergetree_00712 PREWHERE x AND y ORDER BY s;
SELECT s FROM nullable_00457 ORDER BY s;
SELECT s FROM order_by_desc ORDER BY u DESC LIMIT 10 FORMAT Null SETTINGS max_memory_usage = '400M';
SELECT s FROM order_by_desc ORDER BY u LIMIT 10 FORMAT Null SETTINGS max_memory_usage = '400M';
select s from t join (select toUInt16(1) as s) x using (s) order by s settings optimize_use_projections = 0;
select s from t join (select toUInt16(1) as s) x using (s) order by s settings optimize_use_projections = 1;
select s from t prewhere a != 1 where rowNumberInBlock() % 2 = 0 limit 1;
select s from t prewhere a = 1;
SELECT s FROM t WHERE s LIKE '%inverted%' SETTINGS force_data_skipping_indices='idx';
SELECT s FROM t1 as lhs LEFT JOIN (SELECT * FROM t2 WHERE id2 = 2) as rhs ON lhs.id = rhs.id2;
SELECT s FROM t1 PREWHERE e;
SELECT s FROM t1 PREWHERE f AND (e = 1);
SELECT s FROM t1 PREWHERE f;
SELECT s FROM t1 WHERE f AND (e = 1) SETTINGS optimize_move_to_prewhere=false;
SELECT s FROM t1 WHERE f AND (e = 1) SETTINGS optimize_move_to_prewhere=true;
SELECT s FROM t1 WHERE f AND (e = 1);
select s from tab_00484 where s == '' format Null;
SELECT s FROM test1 WHERE toString(s) = '1234' SETTINGS max_rows_to_read = 2;
SELECT s FROM test2 WHERE toFloat32(s) = 7777.0;
SELECT s FROM test2 WHERE toFloat64(s) = 7777.0;
SELECT s FROM test2 WHERE toString(s) = '1234' SETTINGS max_rows_to_read = 2;
SELECT s FROM test_02559 PREWHERE y AND z ORDER BY s;
SELECT s FROM test_02559 PREWHERE z ORDER BY s;
select s, (s=21 or 22=s or 23=s) from bug SETTINGS allow_experimental_analyzer = 1;
select s, (s=21 or 22=s or 23=s) from bug;
select s, (s=21 or s=22 or s=23) from bug SETTINGS allow_experimental_analyzer = 1;
select s, (s=21 or s=22 or s=23) from bug;
SELECT s, arr FROM arrays_test ARRAY JOIN arr;
SELECT s, arr, a FROM arrays_test ARRAY JOIN arr AS a;
SELECT s, arr, a, mapped FROM arrays_test ARRAY JOIN arr AS a, arrayMap(x -> x + 1, arr) AS mapped;
SELECT s, arr, a, num FROM arrays_test ARRAY JOIN arr AS a, arrayEnumerate(arr) AS num;
SELECT s, arr, a, num, arrayEnumerate(arr) FROM arrays_test ARRAY JOIN arr AS a, arrayEnumerate(arr) AS num;
SELECT s, arr, a, num, mapped FROM arrays_test ARRAY JOIN arr AS a, arrayEnumerate(arr) AS num, arrayMap(x -> x + 1, arr) AS mapped;
select s, arr1, map1 from arrays_test array join arr1, map1 settings enable_unaligned_array_join = 1;
select s, arr1, map1 from arrays_test left array join arr1, map1 settings enable_unaligned_array_join = 1;
SELECT s, count() FROM t_00284_lc_str GROUP BY s ORDER BY s LIMIT 10 OFFSET 42;
SELECT s, count() FROM t_00284_str GROUP BY s ORDER BY s LIMIT 10 OFFSET 42;
select s, map1 from arrays_test array join map1;
select s, map1 from arrays_test left array join map1;
select s, map1, map2 from arrays_test array join map1, map2 settings enable_unaligned_array_join = 1;
select s, map1, map2 from arrays_test left array join map1, map2 settings enable_unaligned_array_join = 1;
SELECT s, n.x, n.y FROM nested_test ARRAY JOIN nest AS n;
SELECT s, n.x, n.y, nest.x FROM nested_test ARRAY JOIN nest AS n;
SELECT s, n.x, n.y, nest.x, nest.y FROM nested_test ARRAY JOIN nest AS n;
SELECT s, n.x, n.y, nest.x, nest.y, num FROM nested_test ARRAY JOIN nest AS n, arrayEnumerate(nest.x) AS num;
SELECT s, narr FROM nullable_00457 ORDER BY s;
SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest.x, nest.y;
SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest.x;
SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest;
SELECT s, replaceAll(s, '_', 'o') AS a, REGEXP_REPLACE(s, '_', 'o') AS b, a = b FROM (SELECT arrayJoin(['.', '.']) AS s);
SELECT s, replaceAll(s, '_', 'o') AS a, REGEXP_REPLACE(s, '_', 'o') AS b, a = b FROM (SELECT arrayJoin(['.', '._']) AS s);
SELECT s, replaceAll(s, '_', 'o') AS a, REGEXP_REPLACE(s, '_', 'o') AS b, a = b FROM (SELECT arrayJoin(['.', '.__']) AS s);
SELECT s, replaceAll(s, '_', 'o') AS a, REGEXP_REPLACE(s, '_', 'o') AS b, a = b FROM (SELECT arrayJoin(['.', '_.']) AS s);
SELECT s, replaceAll(s, '_', 'o') AS a, REGEXP_REPLACE(s, '_', 'o') AS b, a = b FROM (SELECT arrayJoin(['.__', '.']) AS s);
SELECT s, SUM(i*2) AS i FROM test_00562 GROUP BY s UNION ALL SELECT s, SUM(i*2) AS i FROM test_00562 GROUP BY s;
select s, sum(n) from v group by s format Null;
SELECT s, x FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;
SELECT s, y FROM mergetree_00712 PREWHERE x AND y ORDER BY s;
SELECT s, y FROM test_02559 PREWHERE (NOT y) AND x ORDER BY s;
SELECT s, y FROM test_02559 PREWHERE NOT y ORDER BY s;
SELECT s, y FROM test_02559 PREWHERE x AND NOT y ORDER BY s;
SELECT s, y FROM test_02559 PREWHERE x AND y ORDER BY s;
SELECT s, y FROM test_02559 PREWHERE y AND x ORDER BY s;
SELECT s, y FROM test_02559 PREWHERE y ORDER BY s;
SELECT s, z FROM test_02559 PREWHERE NOT y AND z ORDER BY s;
select s.* from t left outer join s on (t.a=s.a and t.b=s.b) where s.a is null;
select s.*, j.* from (select * from X) as s full join (select * from Y) as j on s.id = j.id order by s.id, s.x_a, s.x_b, j.id, j.y_a, j.y_b;
select s.*, j.* from (select * from X) as s full join (select * from Y) as j using id order by s.id, j.id, s.x_name, j.y_name;
select s.*, j.* from (select * from X) as s right join (select * from Y) as j on s.id = j.id order by s.id, s.x_a, s.x_b, j.id, j.y_a, j.y_b;
select s.*, j.* from (select * from X) as s right join (select * from Y) as j using id order by s.id, j.id, s.x_name, j.y_name;
select s.a + 1 as a, s.a + 1 as b from (select 10 as a) s;
select s.a + 1 as a, s.a + 2 as b from (select 10 as a) s;
select s.a + 1 as a, s.a as b from (select 10 as a) s;
select s.a + 1 as b, s.a + 2 as a from (select 10 as a) s;
select s.a + 2 as b, b - 1 as a from (select 10 as a) s;
select s.a + 2 as b, s.a + 1 as a from (select 10 as a) s;
select s.a as a, s.a + 1 as b from (select 10 as a) s;
select s.a as a, s.a + 2 as b from (select 10 as a) s;
select s.a, a, a + 1 as a from (select 10 as a) as s;
select s.a, s.a, s.b as s_b, s.b from t left join s on s.a = t.a left join y on s.b = y.b order by t.a format PrettyCompactNoEscapes;
select s.a, s.a, s.b as s_b, s.b from t left join s on s.a = t.a left join y on s.b = y.b order by t.a, s.a, s.b;
select s.a, s.b, max(s.dt1) dt1, s.c, s.d, s.f, s.i, max(s.dt2) dt2 from ( select toUInt64(4360430) a , toUInt64(5681495) b , toDateTime('2018-11-01 10:44:58', 'Asia/Istanbul') dt1 , 'txt' c , toDecimal128('274.350000000000', 12) d , toDecimal128(268.970000000000, 12) f , toDecimal128(0.000000000000, 12) i , toDateTime('2018-11-02 00:00:00', 'Asia/Istanbul') dt2 union all select toUInt64(4341757) a , toUInt64(5657967) b , toDateTime('2018-11-01 16:47:46', 'Asia/Istanbul') dt1 , 'txt' c , toDecimal128('321.380000000000', 12) d , toDecimal128(315.080000000000, 12) f , toDecimal128(0.000000000000, 12) i , toDateTime('2018-11-02 00:00:00', 'Asia/Istanbul') dt2 union all select toUInt64(4360430) a , toUInt64(5681495) b , toDateTime('2018-11-02 09:00:07', 'Asia/Istanbul') dt1 , 'txt' c , toDecimal128('274.350000000000', 12) d , toDecimal128(268.970000000000, 12) f , toDecimal128(0.000000000000, 12) i , toDateTime('2018-11-02 00:00:00', 'Asia/Istanbul') dt2 ) s group by s.a, s.b, s.c, s.d, s.f, s.i ORDER BY s.a, s.b, s.c, s.d, s.f, s.i;
SELECT s1.other, s2.other, count_a, count_b, toTypeName(s1.other), toTypeName(s2.other) FROM ( SELECT other, count() AS count_a FROM table_a GROUP BY other ) s1 ALL FULL JOIN ( SELECT other, count() AS count_b FROM table_b GROUP BY other ) s2 ON s1.other = s2.other ORDER BY s2.other DESC, count_a, s1.other;
SELECT s1.something, s2.something, count_a, count_b, toTypeName(s1.something), toTypeName(s2.something) FROM ( SELECT something, count() AS count_a FROM table_a GROUP BY something ) s1 ALL FULL JOIN ( SELECT something, count() AS count_b FROM table_b GROUP BY something ) s2 ON s1.something = s2.something ORDER BY count_a DESC, something, s2.something;
SELECT s1.something, s2.something, count_a, count_b, toTypeName(s1.something), toTypeName(s2.something) FROM ( SELECT something, count() AS count_a FROM table_a GROUP BY something ) s1 ALL RIGHT JOIN ( SELECT something, count() AS count_b FROM table_b GROUP BY something ) s2 ON s1.something = s2.something ORDER BY count_a DESC, s1.something, s2.something;
select s1.x, s2.x from (select 1 as x) s1 left join (select 1 as x) s2 using x;
select s2CapContains(1157339245694594829, 1.0, 1152921504606846977);
select s2CapContains(1157339245694594829, 3.14, 1157339245694594829);
SELECT s2CapContains(1157339245694594829, toFloat64(1), arrayJoin([1157347770437378819,1157347770437378389]));
select s2CapContains(nan, 3.14, 1157339245694594829);
select s2CapUnion(1157339245694594829, -1.0, 1152921504606846977, -1.0);
select s2CapUnion(1157339245694594829, toFloat64(toUInt64(-1)), 1157339245694594829, toFloat64(toUInt64(-1)));
SELECT s2CapUnion(3814912406305146967, toFloat64(1), 1157347770437378819, toFloat64(1));
select s2CapUnion(nan, 3.14, 1157339245694594829, 3.14);
SELECT s2CellsIntersect(9926595209846587392, 9223372036854775806);
select s2CellsIntersect(9926595209846587392, 9937259648002293760);
SELECT s2CellsIntersect(9926595209846587392, arrayJoin([9926594385212866560, 5074766849661468672]));
SELECT s2GetNeighbors(arrayJoin([1157339245694594829, 5074766849661468672]));
SELECT s2RectAdd(5178914411069187297, 5177056748191934217, arrayJoin([5179056748191934217,5177914411069187297]));
SELECT s2RectContains(5179062030687166815, 5177056748191934217, arrayJoin([5177914411069187297, 5177914411069187297]));
SELECT s2RectIntersection(5178914411069187297, 5177056748191934217, 5179062030687166815, arrayJoin([5177056748191934217,5177914411069187297]));
SELECT s2RectUnion(5178914411069187297, 5177056748191934217, 5179062030687166815, arrayJoin([5177056748191934217, 5177914411069187297]));
select s2ToGeo(4573517609713934091);
SELECT s2ToGeo(arrayJoin([4704772434919038107,9926594385212866560]));
SELECT s2ToGeo(s2_index), geoToS2(longitude, latitude) FROM s2_indexes ORDER BY s2_index;
SELECT s2ToGeo(toUInt64(-1));
SELECT scalarProduct([12, 2.22, 302], [1.32, 231.2, 11.1]);
SELECT scalarProduct(tuple(1), tuple(0));
SELECT second_column FROM {CLICKHOUSE_DATABASE:Identifier}.dict1 WHERE key_column = 11;
SELECT serialization_kind FROM system.parts_columns WHERE table = 't_sparse_s3' AND active AND column = 's' AND database = currentDatabase();
SELECT seriesDecomposeSTL([10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34], 3);
SELECT seriesDecomposeSTL([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 0);
SELECT seriesDecomposeSTL([2,2,2,2,2,2,2,2,2,2,2,2,2,2], -5);
SELECT seriesDecomposeSTL(ts, period) FROM tb2 ORDER BY period;
SELECT seriesPeriodDetectFFT();
SELECT seriesPeriodDetectFFT([1,2,3]);
SELECT seriesPeriodDetectFFT([10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30]);
SELECT seriesPeriodDetectFFT([10.1, 10, 400, 10.1, 10, 400, 10.1, 10, 400, 10.1, 10, 400, 10.1, 10, 400, 10.1, 10, 400, 10.1, 10, 400, 10.1, 10, 400]);
SELECT seriesPeriodDetectFFT([10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34]);
SELECT seriesPeriodDetectFFT([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]);
SELECT seriesPeriodDetectFFT(a) FROM tb1;
SELECT seriesPeriodDetectFFT(arrayMap(x -> abs((x % 6) - 3), range(1000)));
SELECT seriesPeriodDetectFFT(arrayMap(x -> if((x % 6) < 3, 3, 0), range(1000)));
SELECT seriesPeriodDetectFFT(arrayMap(x -> sin(x / 10), range(1000)));
SELECT shardNum() AS shard_num, sum(1) as rows FROM remote('127.{1,2}', system, one) GROUP BY shard_num ORDER BY shard_num;
select shardNum() n, shardCount() c from remote('127.0.0.{1,2,3}', system.one) order by n settings prefer_localhost_replica = 0;
select shardNum() n, shardCount() c from remote('127.0.0.{1,2,3}', system.one) order by n settings prefer_localhost_replica = 1;
SELECT sign(-1);
SELECT sign(0);
SELECT sign(1);
SELECT sign(n1) FROM test;
SELECT sign(n2) FROM test;
SELECT sign(n3) FROM test;
SELECT sign(n4) FROM test;
SELECT sign(n5) FROM test;
SELECT simpleJSONExtractBool('{"myparam":true}', 'myparam');
SELECT simpleJSONExtractFloat('{"myparam":-1}', 'myparam');
SELECT simpleJSONExtractFloat('{"myparam":null}', 'myparam');
SELECT simpleJSONExtractInt('{"myparam":-1}', 'myparam');
SELECT simpleJSONExtractString('{"myparam":"test\\"string"}', 'myparam');
SELECT simpleJSONExtractString('{"myparam":"test_string"}', 'myparam');
SELECT simpleJSONExtractUInt('{"myparam":-1}', 'myparam');
select sin(0) = 0;
select sin(3 * pi() / 2) = -1;
SELECT sin(a) < a FROM t_02559 PREWHERE sin(a) < b AND a <= c AND sin(a) > -a;
SELECT sin(a) < a FROM t_02559 PREWHERE sin(a) < b AND sin(a) < c AND sin(a) > -a;
SELECT sin(a) > 2 FROM t_02559 PREWHERE sin(a) < b AND sin(a) < c;
select sin(pi() / 2) = 1;
select sin(pi() / 4) = 1 / sqrt(2);
SELECT singleValueOrNull((SELECT 'Hello'));
select singleValueOrNull(number) from numbers(0) with totals;
SELECT singleValueOrNull(toNullable(''));
SELECT singleValueOrNull(toNullable('Hello'));
SELECT singleValueOrNull(toNullable(123));
select sinh(0) = 0;
select sinh(1) = -sinh(-1);
SELECT sipHash128((toUInt64(9223372036854775806), 1)) = sipHash128(1) GROUP BY sipHash128(1::UInt8), toUInt64(9223372036854775806);
select sipHash128Keyed((toUInt64(0),toUInt64(0)),char(0)) == sipHash128(char(0));
select sipHash128Keyed((toUInt64(0),toUInt64(0)),char(0, 1)) == sipHash128(char(0, 1));
select sipHash128Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2)) == sipHash128(char(0, 1, 2));
select sipHash128Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3)) == sipHash128(char(0, 1, 2, 3));
select sipHash128Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4)) == sipHash128(char(0, 1, 2, 3, 4));
select sipHash128ReferenceKeyed((0, 0), '1');
select sipHash128ReferenceKeyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3)) == sipHash128Reference(char(0, 1, 2, 3));
select sipHash128ReferenceKeyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4)) == sipHash128Reference(char(0, 1, 2, 3, 4));
SELECT sipHash64(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2))));
SELECT sipHash64(1, 3, 2);
SELECT sipHash64(123456);
SELECT sipHash64([(1, 'a'), (2, 'b')]);
SELECT sipHash64(a) as a from optimize_sorting order by a;
SELECT sipHash64(map(1, 'a', 2, 'b'));
SELECT sipHash64(materialize([(1, 'a'), (2, 'b')]));
SELECT sipHash64(materialize(map(1, 'a', 2, 'b')));
SELECT sipHash64(tuple(*)) FROM sipHashKeyed_test;
select sipHash64(x) from tab sample 1/2 order by x, sipHash64(x) limit 5;
select sipHash64Keyed((0, 0), '1');
SELECT sipHash64Keyed((2::UInt64, 2::UInt64), val) FROM sipHashKeyed_keys ORDER by val;
SELECT sipHash64Keyed((2::UInt64, toUInt64(2)), 4) GROUP BY toUInt64(2);
SELECT sipHash64Keyed((key0, key1), 4::UInt64) FROM sipHashKeyed_keys ORDER by key0;
SELECT sipHash64Keyed((key0, key1), val) FROM sipHashKeyed_keys ORDER by key0;
SELECT sipHash64Keyed((toUInt64(0), toUInt64(0)), 1, 'test');
SELECT sipHash64Keyed((toUInt64(0), toUInt64(0)), a, b) FROM sipHashKeyed_test;
SELECT sipHash64Keyed((toUInt64(0), toUInt64(0)), tuple(*)) FROM sipHashKeyed_test;
select sipHash64Keyed((toUInt64(0),toUInt64(0)),char(0, 1)) == sipHash64(char(0, 1));
select sipHash64Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2)) == sipHash64(char(0, 1, 2));
select sipHash64Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3)) == sipHash64(char(0, 1, 2, 3));
select sipHash64Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4)) == sipHash64(char(0, 1, 2, 3, 4));
select sipHash64Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4, 5)) == sipHash64(char(0, 1, 2, 3, 4, 5));
SELECT sipHash64Keyed((toUInt64(9223372036854775806), 9223372036854775808::UInt64), char(2)) GROUP BY toUInt64(9223372036854775806);
SELECT sipHash64Keyed(key, 4::UInt64) FROM tab;
SELECT sipHash64Keyed(key, val) FROM sipHashKeyed_keys ORDER by key;
SELECT skewPop(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT skewSamp(x_value) FROM (SELECT x_value as x_value FROM series__fuzz_35 LIMIT 2) FORMAT Null;
SELECT skewSamp(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT sleep(0.5) Format Null;
SELECT sleep(0.5), ignore('test real time query profiler');
SELECT sleep(0.7) Format Null;
SELECT sleep(0.7) FORMAT Null;
SELECT sleep(1) FORMAT Null;
select sleep(1) format Null;
SELECT sleep(1) SETTINGS log_processors_profiles=true, log_queries=1, log_queries_min_type='QUERY_FINISH';
SELECT sleep(1);
select sleep(1.1) format Null;
select sleep(2) format Null;
select sleep(2);
select sleep(3) FORMAT Null;
SELECT sleep(3) FORMAT Null;
SELECT sleep(3) format Null;
SELECT sleep(3) from numbers(4) settings max_block_size= 1 format Null;
SELECT sleep(3);
SELECT sleep(3.40282e+44);
SELECT sleep(4295.967296);
SELECT sleep(nan);
select sleepEachRow(0.5) as test_does_not_rely_on_this;
select sleepEachRow(1) from numbers(3*2) format Null;
select sleepEachRow(2) as higher_probablility_of_reproducing_the_issue format Null;
select so, r from (select [('y',0),('n',1)] as cg, if( arrayMap( x -> x.1, cg ) != ['y', 'n'], 'y', 'n') as so, arrayFilter( x -> x.1 = so , cg) as r );
SELECT something, count_a, count_b, toTypeName(something) FROM ( SELECT something, count() AS count_a FROM table_a GROUP BY something ) as s1 ALL FULL JOIN ( SELECT something, count() AS count_b FROM table_b GROUP BY something ) as s2 ON s1.something = s2.something ORDER BY count_a DESC, something DESC;
SELECT soundex('');
SELECT soundex('12345');
SELECT soundex('341Jons54326ton');
SELECT soundex('A2222222');
SELECT soundex('Fairdale');
SELECT soundex('Faredale');
SELECT soundex('Jon1s2o3n');
SELECT soundex('Jonson');
SELECT soundex('Jonston');
SELECT soundex('M\acDonald22321');
SELECT soundex('MacDonald');
SELECT soundex('S3344mith0000');
SELECT soundex('Smith');
SELECT soundex(col) FROM tab;
SELECT source.key, max(target.key) FROM (SELECT 1 key, 'x' name) source INNER JOIN (SELECT 2 key, 'x' name) target ON source.name = target.name GROUP BY source.key;
SELECT space('abc');
SELECT space(-3::Int16), length(space(-3::Int16));
SELECT space(-3::Int32), length(space(-3::Int32));
SELECT space(-3::Int64), length(space(-3::Int64));
SELECT space(-3::Int8), length(space(-3::Int8));
SELECT space(30::Int16) FROM defaults;
SELECT space(30::Int32) FROM defaults;
SELECT space(30::Int64) FROM defaults;
SELECT space(30::Int8) FROM defaults;
SELECT space(30::UInt16) FROM defaults;
SELECT space(30::UInt32) FROM defaults;
SELECT space(30::UInt64) FROM defaults;
SELECT space(30::UInt8) FROM defaults;
SELECT space(3::Int16), length(space(3::Int16));
SELECT space(3::Int32), length(space(3::Int32));
SELECT space(3::Int64), length(space(3::Int64));
SELECT space(3::Int8), length(space(3::Int8));
SELECT space(3::UInt16), length(space(3::UInt16));
SELECT space(3::UInt32), length(space(3::UInt32));
SELECT space(3::UInt64), length(space(3::UInt64));
SELECT space(3::UInt8), length(space(3::UInt8));
SELECT space(i16), length(space(i16)) FROM defaults;
SELECT space(i32), length(space(i32)) from defaults;
SELECT space(i64), length(space(i64)) FROM defaults;
SELECT space(i8), length(space(i8)) FROM defaults;
SELECT space(NULL);
SELECT space(u16), length(space(u16)) FROM defaults;
SELECT space(u32), length(space(u32)) from defaults;
SELECT space(u64), length(space(u64)) FROM defaults;
SELECT space(u8), length(space(u8)) FROM defaults;
SELECT sparkbar(10)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(10)(number, -number) FROM numbers(toUInt64(9223372036854775807), 7) FORMAT Null;
SELECT sparkbar(10)(number, number - 7) FROM numbers(10);
SELECT sparkbar(10)(number, number) FROM numbers(18446744073709551615, 7) FORMAT Null;
SELECT sparkbar(1024)(number, 0) FROM numbers(1024);
SELECT sparkbar(1024)(number, 1) FROM numbers(1024);
SELECT sparkbar(1024)(number, number) FROM numbers(1024);
SELECT sparkbar(11)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(11,2,5)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(11,3,7)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(11,4,11)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(11,toDate('2020-01-02'),toDate('2020-01-05'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(11,toDate('2020-01-03'),toDate('2020-01-07'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(11,toDate('2020-01-04'),toDate('2020-01-11'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(128)(toUInt64(9223372036854775806), number % 65535) FROM numbers(100);
SELECT sparkbar(128, 0, 9223372036854775806)(toUInt64(9223372036854775806), number % 65535) FROM numbers(100);
SELECT sparkbar(16)(number, number) FROM numbers(18446744073709551600, 16) FORMAT Null;
SELECT sparkbar(2)(number, -number) FROM numbers(10);
SELECT sparkbar(2,toDate('2020-01-01'),toDate('2020-01-08'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(2,toDate('2020-01-02'),toDate('2020-01-09'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(3)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(3,toDate('2020-01-01'),toDate('2020-01-09'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(3,toDate('2020-01-01'),toDate('2020-01-10'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(4)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(4,toDate('2020-01-01'),toDate('2020-01-08'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(5)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(5,toDate('2020-01-01'),toDate('2020-01-10'))(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(6)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(7)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(8)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(8, 0, 7)((number + 1) % 8, 1), sparkbar(8, 0, 7)((number + 2) % 8, 1), sparkbar(8, 0, 7)((number + 3) % 8, 1) FROM numbers(7);
SELECT sparkbar(9)(event_date,cnt) FROM (SELECT sum(value) as cnt, event_date FROM spark_bar_test GROUP BY event_date);
SELECT sparkBar(9)(event_date,cnt) FROM (SELECT sum(value) as cnt, event_date FROM spark_bar_test GROUP BY event_date);
SELECT sparkbar(9)(event_date,cnt) FROM spark_bar_test;
SELECT sparkbar(9)(x, y) FROM (SELECT * FROM Values('x UInt64, y UInt8', (18446744073709551615,255), (0,0), (0,0), (4036797895307271799,254)));
SELECT sparkbar(9,toDate('2020-01-01'),toDate('2020-01-10'))(event_date,cnt) FROM spark_bar_test;
SELECT splitByAlpha('ab.cd.ef.gh') SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByAlpha('ab.cd.ef.gh');
SELECT splitByAlpha('ab.cd.ef.gh', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByAlpha('ab.cd.ef.gh', -1);
SELECT splitByAlpha('ab.cd.ef.gh', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByAlpha('ab.cd.ef.gh', 0);
SELECT splitByAlpha('ab.cd.ef.gh', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByAlpha('ab.cd.ef.gh', 1);
SELECT splitByAlpha('ab.cd.ef.gh', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByAlpha('ab.cd.ef.gh', 2);
SELECT splitByAlpha('ab.cd.ef.gh', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByAlpha('ab.cd.ef.gh', 3);
SELECT splitByAlpha('ab.cd.ef.gh', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByAlpha('ab.cd.ef.gh', 4);
SELECT splitByAlpha('ab.cd.ef.gh', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByAlpha('ab.cd.ef.gh', 5);
select splitByChar(',', '1,2,3');
SELECT splitByChar(',', '1,2,3', '');
SELECT splitByChar('0', toString(intHash64(number))) AS arr, 3 AS lim, arrayResize(arrayPartialSort(lim, arr), lim) AS sorted, arrayResize(arrayPartialSort(x -> toUInt64OrZero(x), lim, arr), lim) AS sorted_nums FROM system.numbers LIMIT 10;
SELECT splitByChar('0', toString(intHash64(number))) AS arr, arraySort(arr) AS sorted, arraySort(x -> toUInt64OrZero(x), arr) AS sorted_nums FROM system.numbers LIMIT 10;
SELECT splitByChar('=', 'a==b=c=d') SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d');
SELECT splitByChar('=', 'a==b=c=d', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d', -1);
SELECT splitByChar('=', 'a==b=c=d', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d', 0);
SELECT splitByChar('=', 'a==b=c=d', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d', 1);
SELECT splitByChar('=', 'a==b=c=d', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d', 2);
SELECT splitByChar('=', 'a==b=c=d', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d', 3);
SELECT splitByChar('=', 'a==b=c=d', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d', 4);
SELECT splitByChar('=', 'a==b=c=d', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d', 5);
SELECT splitByChar('=', 'a==b=c=d', 6) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByChar('=', 'a==b=c=d', 6);
SELECT splitByNonAlpha('128.0.0.1') SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByNonAlpha('128.0.0.1');
SELECT splitByNonAlpha('128.0.0.1', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByNonAlpha('128.0.0.1', -1);
SELECT splitByNonAlpha('128.0.0.1', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByNonAlpha('128.0.0.1', 0);
SELECT splitByNonAlpha('128.0.0.1', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByNonAlpha('128.0.0.1', 1);
SELECT splitByNonAlpha('128.0.0.1', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByNonAlpha('128.0.0.1', 2);
SELECT splitByNonAlpha('128.0.0.1', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByNonAlpha('128.0.0.1', 3);
SELECT splitByNonAlpha('128.0.0.1', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByNonAlpha('128.0.0.1', 4);
SELECT splitByNonAlpha('128.0.0.1', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByNonAlpha('128.0.0.1', 5);
SELECT splitByNonAlpha('22:00 email@tut.by');
SELECT splitByNonAlpha('It is quite a wonderful day, isn\'t it?');
SELECT splitByNonAlpha('There is.... so much to learn!');
SELECT splitByNonAlpha('Токенизация каких-либо других языков?');
select splitByRegexp('', '');
SELECT splitByRegexp('', 'a12bc23de345f') SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('', 'a12bc23de345f');
SELECT splitByRegexp('', 'a12bc23de345f', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('', 'a12bc23de345f', -1);
SELECT splitByRegexp('', 'a12bc23de345f', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('', 'a12bc23de345f', 0);
SELECT splitByRegexp('', 'a12bc23de345f', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('', 'a12bc23de345f', 1);
SELECT splitByRegexp('', 'a12bc23de345f', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('', 'a12bc23de345f', 2);
SELECT splitByRegexp('', 'a12bc23de345f', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('', 'a12bc23de345f', 3);
SELECT splitByRegexp('', 'a12bc23de345f', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('', 'a12bc23de345f', 4);
SELECT splitByRegexp('', 'a12bc23de345f', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('', 'a12bc23de345f', 5);
select splitByRegexp('', 'abcde');
select splitByRegexp('<[^<>]*>', x) from (select arrayJoin(['<h1>hello<h2>world</h2></h1>', 'gbye<split>bug']) x);
SELECT splitByRegexp('\\d+', 'a12bc23de345f') SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('\\d+', 'a12bc23de345f');
SELECT splitByRegexp('\\d+', 'a12bc23de345f', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('\\d+', 'a12bc23de345f', -1);
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 0);
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 1);
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 2);
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 3);
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 4);
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByRegexp('\\d+', 'a12bc23de345f', 5);
select splitByRegexp('\\d+', x) from (select arrayJoin(['a1ba5ba8b', 'a11ba5689ba891011b']) x);
select splitByRegexp('ab', '');
select splitByString('', '');
SELECT splitByString('', 'a==b=c=d') SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d') SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 6) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 6) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 7) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 7) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 8) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 8) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('', 'a==b=c=d', 9) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('', 'a==b=c=d', 9) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
select splitByString('', 'abcde');
select splitByString(', ', x) from (select arrayJoin(['hello, world', 'gbye, bug']) x);
SELECT splitByString('=', 'a==b=c=d') SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d') SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('=', 'a==b=c=d', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('=', 'a==b=c=d', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('=', 'a==b=c=d', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('=', 'a==b=c=d', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('=', 'a==b=c=d', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('=', 'a==b=c=d', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('=', 'a==b=c=d', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByString('=', 'a==b=c=d', 6) SETTINGS splitby_max_substrings_includes_remaining_string = 0;
SELECT splitByString('=', 'a==b=c=d', 6) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
select splitByString('ab', '');
select splitByString('ab', 'ababab');
select splitByString('ab', 'abcdeabcdeab');
select splitByString('ab', 'cdeabcde');
select splitByString('ababab', 'ababab');
select splitByString('IN', query)[-1] from system.query_log where event_date >= yesterday() and event_time > now() - interval 1 hour and not is_initial_query and query not like '%system%query_log%' and query like concat('%', currentDatabase(), '%AS%id_00%') and type = 'QueryFinish' order by query;
select splitByString('IN', query)[-1] from system.query_log where event_date >= yesterday() and event_time > now() - interval 1 hour and not is_initial_query and query not like '%system%query_log%' and query like concat('%', currentDatabase(), '%AS%id_02%') and type = 'QueryFinish' order by query;
select splitByString('IN', query)[-1] from system.query_log where event_date >= yesterday() and event_time > now() - interval 1 hour and not is_initial_query and query not like '%system%query_log%' and query like concat('%', currentDatabase(), '%AS%id_2%') and type = 'QueryFinish' order by query;
select splitByString('IN', query)[-1] from system.query_log where event_date >= yesterday() and event_time > now() - interval 1 hour and not is_initial_query and query not like '%system%query_log%' and query like concat('%', currentDatabase(), '%AS%id_no%') and type = 'QueryFinish' order by query;
select splitByString('IN', query)[-1] from system.query_log where event_date >= yesterday() and event_time > now() - interval 1 hour and not is_initial_query and query not like '%system%query_log%' and query like concat('%', currentDatabase(), '%AS%key_signed%') and type = 'QueryFinish' order by query;
SELECT splitByWhitespace('22:00 email@tut.by');
SELECT splitByWhitespace('It is quite a wonderful day, isn\'t it?');
SELECT splitByWhitespace('Nein, nein, nein! Doch!') SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByWhitespace('Nein, nein, nein! Doch!');
SELECT splitByWhitespace('Nein, nein, nein! Doch!', -1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByWhitespace('Nein, nein, nein! Doch!', -1);
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 0) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 0);
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 1) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 1);
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 2);
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 3) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 3);
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 4) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 4);
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 5) SETTINGS splitby_max_substrings_includes_remaining_string = 1;
SELECT splitByWhitespace('Nein, nein, nein! Doch!', 5);
SELECT splitByWhitespace('There is.... so much to learn!');
SELECT splitByWhitespace('Токенизация каких-либо других языков?');
SELECT sqid(1, 2);
SELECT sqidDecode('invalid sqid');
SELECT sqidEncode();
SELECT sqidEncode(1) AS sqid, sqidDecode(sqid);
SELECT sqidEncode(1, 2) AS sqid, sqidDecode(sqid);
SELECT sqidEncode(1, 2, 3) AS sqid, sqidDecode(sqid);
SELECT sqidEncode(1::UInt8, 2::UInt16, 3::UInt32, 4::UInt64) AS sqid, sqidDecode(sqid);
SELECT sqidEncode(materialize(1)) AS sqid, sqidDecode(sqid);
SELECT sqidEncode(materialize(1), materialize(2)) AS sqid, sqidDecode(sqid);
SELECT sqidEncode(materialize(1), materialize(2), materialize(3)) AS sqid, sqidDecode(sqid);
SELECT sqidEncode(materialize(1::UInt8), materialize(2::UInt16), materialize(3::UInt32), materialize(4::UInt64)) AS sqid, sqidDecode(sqid);
SELECT sqidEncode(toNullable(1), toLowCardinality(2)) AS sqid;
SELECT sqidEncode(toNullable(materialize(1)), toLowCardinality(materialize(2)));
SELECT sqrt(-1) as x, not(x), not(not(x)), (not(x)) IS NULL SETTINGS allow_experimental_analyzer=0;
select sqrt(0) = 0;
select sqrt(1) = 1;
select sqrt(4) = 2;
SELECT stale FROM system.query_cache;
SELECT startsWith('123', '');
SELECT startsWith('123', '12');
SELECT startsWith('123', '123');
SELECT startsWith('123', '1234');
select startsWith(['a', 'b', 'c'], ['a', 'b']);
select startsWith(['a', 'b', 'c'], ['b']);
select startsWith([1, 2, 3, 4], [1, 2, 3]);
select startsWith([1, 2, 3, 4], [1, 2, 4]);
select startsWith([1], []);
select startsWith([1], emptyArrayUInt8());
select startsWith([], [1]);
select startsWith([], []);
select startsWith([], [NULL]);
select startsWith([NULL, 1], [1]);
select startsWith([NULL, 1], [NULL]);
select startsWith([NULL], []);
select startsWith([NULL], [NULL]);
SELECT startsWith(s, '') FROM (SELECT arrayJoin(['', 'h', 'hi']) AS s);
SELECT startsWith(s, 'He') FROM (SELECT arrayJoin(['', 'H', 'He', 'Hellow', '3434', 'fffffffffdHe']) AS s);
select startsWith(trimLeft(explain),'Resize') as resize from (explain pipeline select * from file(data_02723.csv)) where resize;
SELECT startsWithUTF8('123', '');
SELECT startsWithUTF8('123', '12');
SELECT startsWithUTF8('123', '123');
SELECT startsWithUTF8('123', '1234');
select startsWithUTF8('富强民主文明和谐', '');
select startsWithUTF8('富强民主文明和谐', '\xe5');
select stat_year, stat_month, out_buid, out_shop_id, in_shop_id, datasource, venderid, categorytreeid, categoryid, goodsid, logistics, buntype, dctype, shopformid, sum(rt_qty), sum(rt_cost), sum(rt_taxcost), sum(rt_boxes), max(rt_shops), sum(rt_drygood_qty), sum(rt_drygood_cost), sum(rt_drygood_boxes), max(rt_drygood_shops), sum(rt_fresh_qty), sum(rt_fresh_cost), max(rt_fresh_shops), sum(rt_supshop_cost), sum(rt_supshop_qty), sum(rt_supshop_boxes), max(rt_supshop_shops), sum(rt_smallshop_cost), sum(rt_smallshop_qty), sum(rt_smallshop_boxes), max(rt_smallshop_shops), sum(rt_dc_cost), sum(rt_dc_qty), sum(rt_dc_boxes), max(rt_dc_shops), sum(rt_drygood_supshop_cost), sum(rt_drygood_supshop_qty), sum(rt_drygood_supshop_boxes), max(rt_drygood_supshop_shops), sum(rt_drygood_smallshop_cost), sum(rt_drygood_smallshop_qty), sum(rt_drygood_smallshop_boxes), max(rt_drygood_smallshop_shops), sum(rt_drygood_dc_cost), sum(rt_drygood_dc_qty), sum(rt_drygood_dc_boxes), max(rt_drygood_dc_shops), sum(rt_fresh_supshop_cost), sum(rt_fresh_supshop_qty), max(rt_fresh_supshop_shops), sum(rt_fresh_smallshop_cost), sum(rt_fresh_smallshop_qty), max(rt_fresh_smallshop_shops), sum(rt_fresh_dc_cost), sum(rt_fresh_dc_qty), max(rt_fresh_dc_shops) from fct_rt_dc_shop_sku_vender_day frdssvd where stat_day >= toDate('2016-01-01') and stat_day < addMonths(toDate('2016-01-01'), 1) group by stat_year, stat_month, out_buid, out_shop_id, in_shop_id, datasource, venderid, categorytreeid, categoryid, goodsid, logistics, buntype, dctype, shopformid;
SELECT status FROM system.dictionaries WHERE database = 'dict_db_01224' AND name = 'dict';
SELECT status FROM system.dictionaries WHERE database='test_01676' AND name='dict';
SELECT std(x), std(y) FROM series;
SELECT stddevPop(0.1) FROM numbers(1000000);
SELECT stddevPop(a) AS da, stddevPop(b) AS db, stddevPop(c) AS dc, toTypeName(da), toTypeName(db), toTypeName(dc) FROM decimal;
SELECT stddevPop(toFloat64(a)), stddevPop(toFloat64(b)), stddevPop(toFloat64(c)) FROM decimal;
SELECT stddevPop(x), stddevPop(y) FROM series;
SELECT stddevPop(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT stddevPopStable(0.1) FROM numbers(1000000);
SELECT stddevPopStable(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT stddevSamp(0.1) FROM numbers(1000000);
SELECT stddevSamp(a) AS da, stddevSamp(b) AS db, stddevSamp(c) AS dc, toTypeName(da), toTypeName(db), toTypeName(dc) FROM decimal;
SELECT stddevSamp(toFloat64(a)), stddevSamp(toFloat64(b)), stddevSamp(toFloat64(c)) FROM decimal;
SELECT stddevSamp(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT stddevSampOrDefaultIf(x, x > 0) FROM (SELECT 1 AS x);
SELECT stddevSampOrDefaultIf(x, x > 1) FROM (SELECT 1 AS x);
SELECT stddevSampOrDefaultIfMerge(state) FROM (SELECT stddevSampOrDefaultIfState(x, x > 0) AS state FROM (SELECT 1 AS x));
SELECT stddevSampOrDefaultIfMerge(state) FROM (SELECT stddevSampOrDefaultIfState(x, x > 1) AS state FROM (SELECT 1 AS x));
SELECT stddevSampOrNullIf(x, x > 0) FROM (SELECT 1 AS x);
SELECT stddevSampOrNullIf(x, x > 1) FROM (SELECT 1 AS x);
SELECT stddevSampOrNullIfMerge(state) FROM (SELECT stddevSampOrNullIfState(x, x > 0) AS state FROM (SELECT 1 AS x));
SELECT stddevSampOrNullIfMerge(state) FROM (SELECT stddevSampOrNullIfState(x, x > 1) AS state FROM (SELECT 1 AS x));
SELECT stddevSampStable(0.1) FROM numbers(1000000);
SELECT stddevSampStable(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT stem('en', 'collection');
SELECT stem('en', 'combinatorial');
SELECT stem('en', 'commonplace');
SELECT stem('en', 'given');
SELECT stem('en', 'packing');
SELECT stem('en', 'possibility');
SELECT stem('en', 'studied');
SELECT stem('fr', 'dépasser');
SELECT stem('fr', 'intensivement');
SELECT stem('fr', 'maximiser');
SELECT stem('fr', 'peuvent');
SELECT stem('fr', 'remplissage');
SELECT stem('fr', 'valeur');
SELECT stem('fr', 'étudié');
SELECT stem('ru', 'комбинаторной');
SELECT stem('ru', 'конечной');
SELECT stem('ru', 'максимальной');
SELECT stem('ru', 'ограничена');
SELECT stem('ru', 'получила');
SELECT stem('ru', 'стоимостью');
SELECT stem('ru', 'суммарный');
select stochasticLinearRegressionState(0.03, 0.00001, 2, 'Momentum')(ss_sold_time_sk, ss_sold_time_sk, ss_sold_time_sk) as ss_wholesale_cost from store_sales format Null;
select storage, source, format, schema from system.schema_inference_cache where storage='File';
select storage, splitByChar('/', source)[-1], format, schema from system.schema_inference_cache where storage='File';
select str from lc_fix_str_0;
select str from lc_fix_str_1;
select str from lc_null_fix_str_0;
select str from lc_null_fix_str_1;
select str from lc_null_str_0;
select str from lc_null_str_1;
select str from lc_perm where val < 12 order by str;
select str from lc_str_0;
select str from lc_str_1;
select str, max(i) from test group by str order by str nulls first;
SELECT str, punycodeEncode(str) AS puny, punycodeDecode(puny) AS original, tryPunycodeDecode(puny) AS original_try FROM tab;
select str, str in ('a', 'd') from lc_00688;
select str, str in (select arrayJoin(['a', 'd'])) from lc_00688;
select str, str in (select str from lc_00688) from lc_00688;
select str1, str2, CRC32(str1), CRC32(str2) from table1 order by CRC32(str1), CRC32(str2);
select str_to_date('10:04:11 03-07-2019', '%s:%i:%H %d-%m-%Y', 'UTC') = toDateTime('2019-07-03 11:04:10', 'UTC');
select sTr_To_DaTe('10:04:11 03-07-2019', '%s:%i:%H %d-%m-%Y', 'UTC') = toDateTime('2019-07-03 11:04:10', 'UTC');
select str_to_date('10:04:11 invalid 03-07-2019', '%s:%i:%H %d-%m-%Y', 'UTC') IS NULL;
SELECT stringJaccardIndexUTF8(materialize('hello'), materialize('\x41\xE2\x82\xAC'));
SELECT stringJaccardIndexUTF8(materialize('hello'), materialize('\xC2\x01'));
SELECT stringJaccardIndexUTF8(materialize('hello'), materialize('\xF0\x9F\x99\x82'));
SELECT stringJaccardIndexUTF8(materialize('hello'), materialize('\xFF'));
SELECT stringJaccardIndexUTF8(materialize('hello'), materialize('\xFF\xFF\xFF\xFF'));
SELECT stringToH3(h3ToString(arrayJoin([579205133326352383,589753847883235327,594082350283882495])));
select struct.d1, struct.a1, struct.a2, struct.a3, struct.a4, struct.a5, struct.a6 from aliases_test;
select struct.key, struct.value from aliases_test array join struct as struct;
select struct.key, struct.value from aliases_test array join struct;
select struct.key, struct.value from aliases_test;
SELECT subcolumns.names, subcolumns.serializations, count() FROM system.parts_columns ARRAY JOIN subcolumns WHERE database = currentDatabase() AND table = 't_json_sparse' AND column = 'data' AND active GROUP BY subcolumns.names, subcolumns.serializations ORDER BY subcolumns.names;
SELECT subDate('2022-05-07'::Date);
SELECT subDate('2022-05-07'::Date, INTERVAL 5 MINUTE);
SELECT subDate('2022-05-07'::Date32, INTERVAL 5 MINUTE);
SELECT subDate('2022-05-07'::DateTime, INTERVAL 5 MINUTE);
SELECT subDate('2022-05-07'::DateTime64, INTERVAL 5 MINUTE);
SELECT subDate('2022-05-07'::String, INTERVAL 5 MINUTE);
SELECT SUBDATE(materialize('2022-05-07'::Date), INTERVAL 5 MINUTE);
SELECT subq_0.pkey as c_1_c1193_15 FROM t5 AS subq_0 WHERE sipHash128(0, subq_0.c18, bitShiftRight(case when false then (sipHash128(subq_0.pkey, subq_0.c18, 'S')) else '1' end, 0)) is not null;
SELECT subquery_1.id, subquery_2.id FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;
SELECT subquery_1.value, subquery_2.value FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;
select substr('aaaaaaaaaaaaaa', 8) as a group by a order by a;
select substr('aaaaaaaaaaaaaa', 8) as a group by substr('aaaaaaaaaaaaaa', 8) order by a;
select Substr('foo', 2);
SELECT substr(name, 1, 10) FROM system.tables WHERE database='test_01155_atomic';
SELECT substr(name, 1, 10) FROM system.tables WHERE database='test_01155_ordinary';
SELECT substr(toLowCardinality('abc'), 1 in 1) AS x GROUP BY x;
SELECT substring('1234' arg_1, 2 arg_2, 3 arg_3), arg_1, arg_2, arg_3;
SELECT substring('1234' AS lhs FROM 2 AS rhs), lhs, rhs;
SELECT substring('1234' AS lhs FROM 2), lhs;
SELECT substring('1234' FROM 2 AS rhs), rhs;
SELECT substring('1234' FROM 2 FOR 2 AS lhs), lhs;
SELECT substring('1234' FROM 2 FOR 2 lhs), lhs;
SELECT substring('1234' FROM 2 rhs), rhs;
SELECT substring('1234' lhs FROM 2 rhs), lhs, rhs;
SELECT substring('1234' lhs FROM 2), lhs;
SELECT substring('abc', number - 5) FROM system.numbers LIMIT 10;
SELECT substring('abcdefgh', -2, -1);
SELECT substring('abcdefgh', -2, -2);
SELECT substring('abcdefgh', 2, -2);
SELECT substring('abcdefgh', 2, materialize(-2));
SELECT substring('abcdefgh', materialize(2), -2);
SELECT substring('abcdefgh', materialize(2), materialize(-2));
SELECT substring('clickhouse', 2, -2);
SELECT substring('clickhouse', 2, materialize(-2));
SELECT substring('clickhouse', materialize(2), -2);
SELECT substring('clickhouse', materialize(2), materialize(-2));
select substring('foo' from 1 + 1);
select SUBSTRING('foo' FROM 2 FOR 1);
select SUBSTRING('foo', 1, 2);
SELECT substring('hello', []);
SELECT SUBSTRING('Hello, world' FROM 8 FOR 5);
SELECT SUBSTRING('Hello, world' FROM 8);
SELECT SUBSTRING('Hello, world', 8);
SELECT SUBSTRING('Hello, world', 8, 5);
SELECT substring(('1234' AS lhs) FROM (2 AS rhs)), lhs, rhs;
select substring(a, 1, 3), count(b) from group_by_all group by all;
select substring(a, 1, 3), substring(a, 1, count(b)) from group_by_all group by all;
select substring(a, 1, 3), substring(substring(a, 1, 2), 1, count(b)) from group_by_all group by all;
select substring(a, 1, 3), substring(substring(a, 1, 2), c, count(b)) from group_by_all group by all;
select substring(a, 1, 3), substring(substring(a, c + 1, 2), 1, count(b)) from group_by_all group by all;
select substring(a, 1, 3), substring(substring(a, c + 1, 2), c, count(b)) from group_by_all group by all;
select substring(a, 1, 3), substring(substring(a, c, 2), c, count(b)) from group_by_all group by all;
select substring(a, 1, 3), substring(substring(substring(a, c, count(b)), 1, count(b)), 1, count(b)) from group_by_all group by all;
SELECT substring(cast('abcdefgh' AS FixedString(8)), -2, -1);
SELECT substring(cast('abcdefgh' AS FixedString(8)), -2, -2);
SELECT substring(cast('abcdefgh' AS FixedString(8)), 2, -2);
SELECT substring(cast('abcdefgh' AS FixedString(8)), 2, materialize(-2));
SELECT substring(cast('abcdefgh' AS FixedString(8)), materialize(2), -2);
SELECT substring(cast('abcdefgh' AS FixedString(8)), materialize(2), materialize(-2));
SELECT substring(CAST('foo', 'Enum8(\'foo\' = 1)'), 1, 1), substring(CAST('foo', 'Enum16(\'foo\' = 1111)'), 1, 2);
SELECT substring(e8, -2, 10), substring (e16, -2, 10) FROM tab;
SELECT substring(e8, 2, 10), substring (e16, 2, 10) FROM tab;
SELECT substring(explain, 1, 13) FROM (EXPLAIN SYNTAX SELECT * FROM t_02809 WHERE a IN (1,2,3) ) WHERE explain LIKE '%WHERE%';
SELECT substring(explain, 1, 13) FROM (EXPLAIN SYNTAX SELECT * FROM t_02809 WHERE a IN t_02809_aux ) WHERE explain LIKE '%WHERE%';
SELECT substring(explain, 1, 13) FROM (EXPLAIN SYNTAX SELECT * FROM t_02809 WHERE a IN t_02809_set ) WHERE explain LIKE '%WHERE%';
SELECT substring(explain, 1, 17) FROM (EXPLAIN SYNTAX SELECT * FROM t_02809 WHERE b NOT IN (1,2,3) ) WHERE explain LIKE '%WHERE%';
SELECT substring(explain, 1, 17) FROM (EXPLAIN SYNTAX SELECT * FROM t_02809 WHERE b NOT IN t_02809_aux ) WHERE explain LIKE '%WHERE%';
SELECT substring(explain, 1, 17) FROM (EXPLAIN SYNTAX SELECT * FROM t_02809 WHERE b NOT IN t_02809_set ) WHERE explain LIKE '%WHERE%';
SELECT substring(h3CellAreaRads2(h3_index)::String, 1, 10) FROM h3_indexes ORDER BY h3_index;
SELECT substring(materialize('abc'), number - 5) FROM system.numbers LIMIT 10;
SELECT substring(materialize('abcdefgh'), -2, -1);
SELECT substring(materialize('abcdefgh'), -2, -2);
SELECT substring(materialize('abcdefgh'), materialize(-2), materialize(-1));
SELECT substring(materialize('abcdefgh'), materialize(-2), materialize(-2));
SELECT substring(materialize('clickhouse'), 2, -2);
SELECT substring(materialize('clickhouse'), 2, materialize(-2));
SELECT substring(materialize('clickhouse'), materialize(2), -2);
SELECT substring(materialize('clickhouse'), materialize(2), materialize(-2));
SELECT substring(materialize('hello'), 0);
SELECT substring(materialize(cast('abcdefgh' AS FixedString(8))), -2, -1);
SELECT substring(materialize(cast('abcdefgh' AS FixedString(8))), -2, -2);
SELECT substring(materialize(cast('abcdefgh' AS FixedString(8))), materialize(-2), materialize(-1));
SELECT substring(materialize(cast('abcdefgh' AS FixedString(8))), materialize(-2), materialize(-2));
SELECT substring(materialize(toFixedString('abc', 3)), number - 5) FROM system.numbers LIMIT 10;
SELECT substring(name, 1, 2), value FROM system.zookeeper WHERE path='/clickhouse/' || currentDatabase() || '/01650_drop_part_and_deduplication_partitioned_table/blocks/' ORDER BY value;
SELECT substring(name, 1, length(name) - 2), default_compression_codec FROM system.parts WHERE table = 'recompression_table' and active = 1 and database = currentDatabase() ORDER BY name;
SELECT substring(name, 1, length(name) - 2), default_compression_codec FROM system.parts WHERE table = 'recompression_table_compact' and active = 1 and database = currentDatabase() ORDER BY name;
SELECT substring(name, 1, length(name) - 4), default_compression_codec FROM system.parts WHERE table = 'recompression_table' and active = 1 and database = currentDatabase() ORDER BY name;
SELECT substring(name, 1, length(name) - 4), recompression_ttl_info.expression FROM system.parts WHERE table = 'recompression_table' and active = 1 and database = currentDatabase() ORDER BY name;
SELECT substring(s, -2, -2) FROM t;
SELECT substring(s, -2, r) FROM t;
SELECT substring(s, 2, -2) FROM tab;
SELECT substring(s, 2, r) FROM tab;
SELECT substring(s, l, -2) FROM t;
SELECT substring(s, l, -2) FROM tab;
SELECT substring(s, l, r) FROM t;
SELECT substring(s, l, r) FROM tab;
SELECT substring(toFixedString('abc', 3), number - 5) FROM system.numbers LIMIT 10;
SELECT substring(toFixedString('hello', 16), 1, 8);
SELECT substring(toFixedString(materialize('hello'), 16), 1, 8);
SELECT substring(toFixedString(toString(number), 16), 1, 8) FROM system.numbers LIMIT 10;
SELECT substring(toFixedString(toString(number), 4), 1 + number % 5) FROM system.numbers LIMIT 995, 10;
SELECT substring(toFixedString(toString(number), 4), 1 + number % 5, 1 + number % 3) FROM system.numbers LIMIT 995, 10;
SELECT substring(toFixedString(toString(number), 4), 1, 3) FROM system.numbers LIMIT 995, 10;
SELECT substring(toFixedString(toString(number), 4), 1, number % 5) FROM system.numbers LIMIT 995, 10;
select SUBSTRING_INDEX('www.clickhouse.com', '.', 2);
select substringIndex('www.clickhouse.com', '.', -1);
select substringIndex('www.clickhouse.com', '.', -2);
select substringIndex('www.clickhouse.com', '.', -3);
select substringIndex('www.clickhouse.com', '.', 0);
select substringIndex('www.clickhouse.com', '.', 1);
select substringIndex('www.clickhouse.com', '.', 2);
select substringIndex('www.clickhouse.com', '.', 3);
select substringIndex('www.clickhouse.com', '.', 4);
select substringIndex('www.clickhouse.com', '.', materialize(-1));
select substringIndex('www.clickhouse.com', '.', materialize(-2));
select substringIndex('www.clickhouse.com', '.', materialize(-3));
select substringIndex('www.clickhouse.com', '.', materialize(-4));
select substringIndex('www.clickhouse.com', '.', materialize(0));
select substringIndex('www.clickhouse.com', '.', materialize(1));
select substringIndex('www.clickhouse.com', '.', materialize(2));
select substringIndex('www.clickhouse.com', '.', materialize(3));
select substringIndex('www.clickhouse.com', '.', materialize(4));
select substringIndex('www.clickhouse.com', '..', 2);
select substringIndex(materialize('www.clickhouse.com'), '.', -1);
select substringIndex(materialize('www.clickhouse.com'), '.', -2);
select substringIndex(materialize('www.clickhouse.com'), '.', -3);
select substringIndex(materialize('www.clickhouse.com'), '.', -4);
select substringIndex(materialize('www.clickhouse.com'), '.', 0);
select substringIndex(materialize('www.clickhouse.com'), '.', 1);
select substringIndex(materialize('www.clickhouse.com'), '.', 2);
select substringIndex(materialize('www.clickhouse.com'), '.', 3);
select substringIndex(materialize('www.clickhouse.com'), '.', 4);
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(-1));
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(-2));
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(-3));
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(-4));
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(0));
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(1));
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(2));
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(3));
select substringIndex(materialize('www.clickhouse.com'), '.', materialize(4));
select substringIndexUTF8('富强，民主，文明', '，', -1);
select substringIndexUTF8('富强，民主，文明', '，', -2);
select substringIndexUTF8('富强，民主，文明', '，', -3);
select substringIndexUTF8('富强，民主，文明', '，', 0);
select substringIndexUTF8('富强，民主，文明', '，', 1);
select substringIndexUTF8('富强，民主，文明', '，', 2);
select substringIndexUTF8('富强，民主，文明', '，', 3);
select substringIndexUTF8('富强，民主，文明', '，', 4);
select substringIndexUTF8('富强，民主，文明', '，', materialize(-1));
select substringIndexUTF8('富强，民主，文明', '，', materialize(-2));
select substringIndexUTF8('富强，民主，文明', '，', materialize(-3));
select substringIndexUTF8('富强，民主，文明', '，', materialize(-4));
select substringIndexUTF8('富强，民主，文明', '，', materialize(0));
select substringIndexUTF8('富强，民主，文明', '，', materialize(1));
select substringIndexUTF8('富强，民主，文明', '，', materialize(2));
select substringIndexUTF8('富强，民主，文明', '，', materialize(3));
select substringIndexUTF8('富强，民主，文明', '，', materialize(4));
select substringIndexUTF8('富强，民主，文明', '，，', 2);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', -1);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', -2);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', -3);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', -4);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', 0);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', 1);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', 2);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', 3);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', 4);
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(-1));
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(-2));
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(-3));
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(-4));
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(0));
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(1));
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(2));
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(3));
select substringIndexUTF8(materialize('富强，民主，文明'), '，', materialize(4));
SELECT substringUTF8('hello, привет', -1 - number) FROM numbers(16);
SELECT substringUTF8('hello, привет', -1 - number, 5) FROM numbers(16);
SELECT substringUTF8('hello, привет', -10, 5) FROM numbers(3);
SELECT substringUTF8('hello, привет', -5) FROM numbers(3);
SELECT substringUTF8('hello, привет', 1 + number) FROM numbers(16);
SELECT substringUTF8('hello, привет', 1) FROM numbers(3);
SELECT substringUTF8('hello, привет', 1, 10) FROM numbers(3);
SELECT substringUTF8('hello, привет', 1, number) FROM numbers(16);
SELECT substringUTF8('hello, привет', 5) FROM numbers(3);
SELECT substringUTF8('hello, привет', 5, 5) FROM numbers(3);
SELECT substringUTF8('hello, привет', number + 1, 3) FROM numbers(16);
SELECT substringUTF8('hello, привет', number + 1, number) FROM numbers(16);
SELECT substringUTF8(materialize(''), -9223372036854775808) FROM numbers(7);
SELECT substringUTF8(materialize('hello, привет'), -1 - number) FROM numbers(16);
SELECT substringUTF8(materialize('hello, привет'), -1 - number, 5) FROM numbers(16);
SELECT substringUTF8(materialize('hello, привет'), -10, 5) FROM numbers(3);
SELECT substringUTF8(materialize('hello, привет'), -5) FROM numbers(3);
SELECT substringUTF8(materialize('hello, привет'), 1 + number) FROM numbers(16);
SELECT substringUTF8(materialize('hello, привет'), 1) FROM numbers(3);
SELECT substringUTF8(materialize('hello, привет'), 1, 10) FROM numbers(3);
SELECT substringUTF8(materialize('hello, привет'), 1, number) FROM numbers(16);
SELECT substringUTF8(materialize('hello, привет'), 5) FROM numbers(3);
SELECT substringUTF8(materialize('hello, привет'), 5, 5) FROM numbers(3);
SELECT substringUTF8(materialize('hello, привет'), number + 1, 3) FROM numbers(16);
SELECT substringUTF8(materialize('hello, привет'), number + 1, number) FROM numbers(16);
SELECT subtractDays('2023-10-22', 1), subtractDays('2023-10-22 12:34:56.123', 1);
SELECT subtractDays('2023-10-22', materialize(1)), subtractDays('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractDays(materialize('2023-10-22'), 1), subtractDays(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractDays(materialize('2023-10-22'), materialize(1)), subtractDays(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractDays(x1, 7) from t1;
SELECT subtractHours('2023-10-22', 1), subtractHours('2023-10-22 12:34:56.123', 1);
SELECT subtractHours('2023-10-22', materialize(1)), subtractHours('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractHours(materialize('2023-10-22'), 1), subtractHours(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractHours(materialize('2023-10-22'), materialize(1)), subtractHours(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractHours(x1, 1) from t1;
SELECT subtractInterval(tuple(INTERVAL 1 DAY, INTERVAL 1 SECOND), INTERVAL 1 SECOND);
SELECT subtractInterval(tuple(INTERVAL 1 SECOND), INTERVAL 1 SECOND);
SELECT subtractMicroseconds('2023-10-22', 1), subtractMicroseconds('2023-10-22 12:34:56.123', 1);
SELECT subtractMicroseconds('2023-10-22', materialize(1)), subtractMicroseconds('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractMicroseconds(materialize('2023-10-22'), 1), subtractMicroseconds(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractMicroseconds(materialize('2023-10-22'), materialize(1)), subtractMicroseconds(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractMicroseconds(toDateTime64('2023-01-01 00:00:00.0000', 4, 'UTC'), -1);
select subtractMicroseconds(toDateTime64('2023-01-01 00:00:00.0000', 4, 'UTC'), -100);
select subtractMicroseconds(toDateTime64('2023-01-01 00:00:00.0000', 4, 'UTC'), 1);
select subtractMicroseconds(toDateTime64('2023-01-01 00:00:00.0000', 4, 'UTC'), 100);
SELECT subtractMilliseconds('2023-10-22', 1), subtractMilliseconds('2023-10-22 12:34:56.123', 1);
SELECT subtractMilliseconds('2023-10-22', materialize(1)), subtractMilliseconds('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractMilliseconds(materialize('2023-10-22'), 1), subtractMilliseconds(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractMilliseconds(materialize('2023-10-22'), materialize(1)), subtractMilliseconds(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractMilliseconds(toDateTime64('2023-01-01 00:00:00.0', 1, 'UTC'), -1);
select subtractMilliseconds(toDateTime64('2023-01-01 00:00:00.0', 1, 'UTC'), -100);
select subtractMilliseconds(toDateTime64('2023-01-01 00:00:00.0', 1, 'UTC'), 1);
select subtractMilliseconds(toDateTime64('2023-01-01 00:00:00.0', 1, 'UTC'), 100);
SELECT subtractMinutes('2023-10-22', 1), subtractMinutes('2023-10-22 12:34:56.123', 1);
SELECT subtractMinutes('2023-10-22', materialize(1)), subtractMinutes('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractMinutes(materialize('2023-10-22'), 1), subtractMinutes(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractMinutes(materialize('2023-10-22'), materialize(1)), subtractMinutes(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractMinutes(x1, 60) from t1;
SELECT subtractMonths('2023-10-22', 1), subtractMonths('2023-10-22 12:34:56.123', 1);
SELECT subtractMonths('2023-10-22', materialize(1)), subtractMonths('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractMonths(materialize('2023-10-22'), 1), subtractMonths(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractMonths(materialize('2023-10-22'), materialize(1)), subtractMonths(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractMonths(x1, 1) from t1;
SELECT subtractNanoseconds('2023-10-22', 1), subtractNanoseconds('2023-10-22 12:34:56.123', 1);
SELECT subtractNanoseconds('2023-10-22', materialize(1)), subtractNanoseconds('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractNanoseconds(materialize('2023-10-22'), 1), subtractNanoseconds(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractNanoseconds(materialize('2023-10-22'), materialize(1)), subtractNanoseconds(materialize('2023-10-22 12:34:56.123'), 1);
select subtractNanoseconds(toDateTime64('2023-01-01 00:00:00.0000000', 7, 'UTC'), -1);
select subtractNanoseconds(toDateTime64('2023-01-01 00:00:00.0000000', 7, 'UTC'), -100);
select subtractNanoseconds(toDateTime64('2023-01-01 00:00:00.0000000', 7, 'UTC'), 1);
select subtractNanoseconds(toDateTime64('2023-01-01 00:00:00.0000000', 7, 'UTC'), 100);
SELECT subtractQuarters('2023-10-22', 1), subtractQuarters('2023-10-22 12:34:56.123', 1);
SELECT subtractQuarters('2023-10-22', materialize(1)), subtractQuarters('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractQuarters(materialize('2023-10-22'), 1), subtractQuarters(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractQuarters(materialize('2023-10-22'), materialize(1)), subtractQuarters(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractQuarters(x1, 1) from t1;
SELECT subtractSeconds('2023-10-22', 1), subtractSeconds('2023-10-22 12:34:56.123', 1);
SELECT subtractSeconds('2023-10-22', materialize(1)), subtractSeconds('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractSeconds(materialize('2023-10-22'), 1), subtractSeconds(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractSeconds(materialize('2023-10-22'), materialize(1)), subtractSeconds(materialize('2023-10-22 12:34:56.123'), materialize(1));
SELECT subtractSeconds(toDate('2021-02-15'), 1);
SELECT subtractSeconds(today(), 1) - subtractSeconds(today(), 11);
select subtractSeconds(x1, 3600) from t1;
SELECT subtractTupleOfIntervals('2022-10-11'::Date, (INTERVAL 1 DAY, INTERVAL 1 MONTH));
SELECT subtractTupleOfIntervals('2022-10-11'::Date, tuple(INTERVAL 1 DAY));
SELECT subtractWeeks('2023-10-22', 1), subtractWeeks('2023-10-22 12:34:56.123', 1);
SELECT subtractWeeks('2023-10-22', materialize(1)), subtractWeeks('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractWeeks(materialize('2023-10-22'), 1), subtractWeeks(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractWeeks(materialize('2023-10-22'), materialize(1)), subtractWeeks(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractWeeks(x1, 1) from t1;
SELECT subtractYears('2023-10-22', 1), subtractYears('2023-10-22 12:34:56.123', 1);
SELECT subtractYears('2023-10-22', materialize(1)), subtractYears('2023-10-22 12:34:56.123', materialize(1));
SELECT subtractYears(date, 1), subtractYears(date_time, 1) FROM VALUES('date Date, date_time DateTime', (toDate('2019-01-01'), toDateTime('2019-01-01 00:00:00')));
SELECT subtractYears(materialize('2023-10-22'), 1), subtractYears(materialize('2023-10-22 12:34:56.123'), 1);
SELECT subtractYears(materialize('2023-10-22'), materialize(1)), subtractYears(materialize('2023-10-22 12:34:56.123'), materialize(1));
select subtractYears(x1, 1) from t1;
select sum from (select sum(dummy) sum from system.one where 0) where sum = 0;
select sum from (select sum(dummy) sum from system.one where 0) where sum is null;
SELECT sum((2 * id) as func), func FROM test_table GROUP BY id;
select sum(*) from (select * from url('http://127.0.0.1:8123?query=select+{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}+as+x+format+CSV', 'CSV') settings max_threads=1, max_download_threads=1);
select sum(*) from (select * from url('http://127.0.0.1:8123?query=select+{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}+as+x+format+JSONEachRow', 'JSONEachRow') settings max_threads=1, max_download_threads=1);
select sum(*) from (select * from url('http://127.0.0.1:8123?query=select+{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}+as+x+format+Native', 'Native') settings max_threads=1, max_download_threads=1);
select sum(*) from (select * from url('http://127.0.0.1:8123?query=select+{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}+as+x+format+TSKV', 'TSKV') settings max_threads=1, max_download_threads=1);
select sum(*) from (select * from url('http://127.0.0.1:8123?query=select+{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}+as+x+format+TSV', 'TSV') settings max_threads=1, max_download_threads=1);
select sum(*) from dist_01643;
SELECT sum(-8000000000000000000) FROM remote('127.0.0.{1,2,3,4,5,6,7,8,9,10,11}', system.one);
SELECT sum(1 + n * 2), sum(1 + 2 * n), sum(1 + n / 2), sum(1 + 1 / n) FROM (SELECT number n FROM numbers(10));
SELECT sum(1 + n + 1), sum(1 + 1 + n), sum(1 + n - 1), sum(1 + 1 - n) FROM (SELECT number n FROM numbers(10));
SELECT sum(1) FROM (SELECT * FROM system.numbers LIMIT 1000);
SELECT Sum(1);
SELECT sum(a + 1), sum(b), count(b), avg(b), count(a + 1), sum(a + 2), count(a) from fuse_tbl SETTINGS optimize_syntax_fuse_functions = 0;
SELECT sum(a + 1), sum(b), count(b), avg(b), count(a + 1), sum(a + 2), count(a) from fuse_tbl;
SELECT sum(a) as s FROM order_with_aggr ORDER BY s;
select sum(a) from (SELECT B, uniqExact(A) a FROM remote('localhost,127.0.0.1', currentDatabase(), da_memory_efficient_shard) GROUP BY B);
SELECT sum(A) FROM (SELECT multiIf(1, 1, NULL) as A);
SELECT sum(a) FROM remote('127.0.0.4', currentDatabase(), '02863_delayed_source') GROUP BY a ORDER BY a LIMIT 1 FORMAT JSON settings output_format_write_statistics=0;
SELECT sum(a) FROM remote('127.0.0.4', currentDatabase(), '02863_delayed_source') WITH TOTALS SETTINGS extremes = 1;
SELECT sum(a) FROM t PREWHERE isNotNull(a) WHERE isNotNull(b) AND c > 0;
select sum(a) from t where a in (0, 3) and b = 0;
SELECT sum(a), count() FROM replacing_table;
select sum(a), sum(b) from cluster(test_cluster_two_shards, view(select cast(number as Decimal(7, 2)) a, 0 as b from numbers(2) union all select 0, cast(number as Decimal(7, 2)) as b from numbers(2)));
SELECT sum(a), sum(b), sum(c), sumWithOverflow(a), sumWithOverflow(b), sumWithOverflow(c) FROM decimal WHERE a < 0;
SELECT sum(a), sum(b), sum(c), sumWithOverflow(a), sumWithOverflow(b), sumWithOverflow(c) FROM decimal WHERE a > 0;
SELECT sum(a), sum(b), sum(c), sumWithOverflow(a), sumWithOverflow(b), sumWithOverflow(c) FROM decimal;
SELECT sum(a+1), sum(b+1), sum(c+1), sumWithOverflow(a+1), sumWithOverflow(b+1), sumWithOverflow(c+1) FROM decimal;
SELECT sum(a-1), sum(b-1), sum(c-1), sumWithOverflow(a-1), sumWithOverflow(b-1), sumWithOverflow(c-1) FROM decimal;
SELECT sum(abs(2) * 2), sum(abs(2) * n), sum(n / abs(2)), sum(1 / abs(2)) FROM (SELECT number n FROM numbers(10));
SELECT sum(abs(2) + 1), sum(abs(2) + n), sum(n - abs(2)), sum(1 - abs(2)) FROM (SELECT number n FROM numbers(10));
select sum(abs(acosh(cosh(x)) - x) < 1e-9) / count() from system.one array join range(1, 101) as x;
select sum(abs(asinh(sinh(x)) - x) < 1e-9) / count() from system.one array join range(100) as x;
select sum(abs(atanh(tanh(x)) - x) < 1e-5) / count() from system.one array join range(10) as x;
select sum(abs(cbrt(x * x * x) - x) < 1.0e-9) / count() from system.one array join range(1000000) as x;
select sum(abs(cos(2 * pi() * x)) - 1 < 1.0e-9) / count() from system.one array join range(1000000) as x;
select sum(abs(cosh(x) * cosh(x) - sinh(x) * sinh(x) - 1) < 1e-6) / count() from system.one array join range(10) as x;
select sum(abs(lgamma(x + 1) - log(tgamma(x + 1))) < 1.0e-8) / count() from system.one array join range(10) as x;
select sum(abs(log(exp(x)) - x) < 1e-8) / count() from system.one array join range(100) as x;
select sum(abs(log1p(exp(x) - 1) - x) < 1e-8) / count() from system.one array join range(100) as x;
select sum(abs(log2(exp2(x)) - x) < 1.0e-9) / count() from system.one array join range(1000) as x;
SELECT sum(abs(n) * 2), sum(abs(n) * n), sum(n / abs(n)), sum(1 / abs(n)) FROM (SELECT number n FROM numbers(10));
SELECT sum(abs(n) + 1), sum(abs(n) + n), sum(n - abs(n)), sum(1 - abs(n)) FROM (SELECT number n FROM numbers(10));
select sum(abs(number - 10 as x) = (x < 0 ? -x : x)) / count() from system.one array join range(1000000) as number;
select sum(abs(pow(x, 1) - x) < 1.0e-9) / count() from system.one array join range(1000000) as x;
select sum(abs(sinh(x) - 0.5 * (exp(x) - exp(-x))) < 1e-6) / count() from system.one array join range(10) as x;
select sum(abs(tan(pi() / 4 + 2 * pi() * x) - 1) < 1.0e-8) / count() from system.one array join range(1000000) as x;
SELECT sum(ALL number) FROM numbers(10);
SELECT sum(ALL x) FROM (SELECT 1 x UNION ALL SELECT 1);
SELECT sum(ALL) FROM (SELECT 1 AS ALL);
select sum(amount) = 200 from realtimebuff;
SELECT sum(amount) FROM t FINAL WHERE (processed_at >= '2023-09-19 00:00:00') AND (processed_at <= '2023-09-20 01:00:00');
select sum(any(number + 1)) over (rows unbounded preceding) from numbers(1);
select sum(any(number) + 1) over (rows unbounded preceding) from numbers(1);
SELECT sum(arr.size0) FROM t_comp_subcolumns;
select sum(b) from t_multi_prewhere prewhere a < 5000;
SELECT sum(b), count(b) from (SELECT x as b FROM (SELECT sum(b) as x, count(b) FROM fuse_tbl) );
SELECT sum(b.ID + m.key) FROM m FULL JOIN b ON (m.key == b.key) GROUP BY key;
SELECT sum(b.ID), sum(m.key) FROM m FULL JOIN b ON (m.key == b.key) GROUP BY key;
SELECT sum(bytes) FROM derived_metrics_local;
SELECT sum(c = 1) IN (0, 10), sum(c = 2) IN (0, 5), sum(c) = 10 FROM (SELECT number, count() AS c FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_10_00223) WHERE number < (randConstant() % 2 ? 5 : 10) AND number >= (randConstant() % 2 ? 0 : 5) GROUP BY number);
SELECT sum(c = 1) IN (0, 5), sum(c = 2) IN (5, 10) FROM (SELECT number, count() AS c FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_10_00223) WHERE number < (randConstant() % 2 ? 5 : 10) GROUP BY number);
SELECT sum(c = 1) IN (0, 5), sum(c = 2) IN (5, 10), sum(c) IN (10, 15, 20) FROM (SELECT number AS k1, number + 1 AS k2, count() AS c FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_10_00223) WHERE number < (randConstant() % 2 ? 5 : 10) GROUP BY k1, k2 HAVING count() > 0 ORDER BY k1, k2);
SELECT sum(c = 20) IN (5, 10), sum(c = 10) IN (0, 5), sum(u != 10) = 0 FROM (SELECT intDiv(number, 10) AS k1, k1 + 1 AS k2, count() AS c, uniq(number) AS u FROM remote('127.0.0.{2,3}', currentDatabase(), numbers_10_00223) WHERE number < (randConstant() % 2 ? 50 : 100) GROUP BY k1, k2 HAVING count() > 0 ORDER BY k1, k2);
SELECT sum(c0 + 257) FROM t_having GROUP BY c0 = -9223372036854775808, NULL, -2147483649, c0 HAVING c0 = -9223372036854775808 SETTINGS enable_optimize_predicate_expression = 0;
SELECT sum(c0 = 0), min(c0 + 1), sum(c0 + 2) FROM t_having GROUP BY c0 HAVING c0 = 0 SETTINGS enable_optimize_predicate_expression=0;
select sum(C1) as C1, count(C1) as C2 from (select number as C1 from numbers(3)) as ITBL settings prefer_column_name_to_alias = 1;
SELECT sum(c1) AS v FROM ( SELECT 1 AS c1, ['v'] AS c2, ['d'] AS d ) WHERE arrayExists(i -> (d = ['d']), c2);
SELECT sum(cast(value as UInt64)) FROM alter_default;
SELECT sum(cast(value as UInt64)) from test_alter_on_mutation;
SELECT sum(cityHash64(*)) FROM compression_codec_multiple;
SELECT sum(cityHash64(*)) FROM compression_codec_multiple_log;
SELECT sum(cityHash64(*)) FROM compression_codec_multiple_replicated1;
SELECT sum(cityHash64(*)) FROM compression_codec_multiple_replicated2;
SELECT sum(cityHash64(*)) FROM compression_codec_multiple_tiny_log;
select sum(cityHash64(*)) from file(arrow_02735.parquet);
select sum(cityHash64(*)) from file(compressed_02735.parquet);
select sum(cityHash64(*)) from file(datetime64_02735.parquet);
select sum(cityHash64(*)) from file(single_thread_02735.parquet);
select sum(cityHash64(number)) from file(big_column_chunk_02735.parquet);
SELECT sum(cityHash64(toString(value))) FROM multidimensional;
SELECT sum(col1 * 7) FROM test1_00395;
SELECT sum(col1) FROM test1_00395;
select sum(cost) from projection_test;
select sum(cost) from projection_test_d;
SELECT sum(data.value) FROM t_json;
SELECT sum(data_compressed_bytes), sum(data_uncompressed_bytes) FROM system.parts WHERE table = 'codecs' AND database = currentDatabase();
SELECT sum(data_uncompressed_bytes) FROM system.columns WHERE database=currentDatabase() AND table LIKE 'clear_column_' AND (name = 'i' OR name = 's') GROUP BY table;
SELECT sum(DISTINCT number % 13) FROM numbers_mt(100000);
SELECT sum(DISTINCT number % 13) FROM remote('127.0.0.{1,2}', numbers_mt(100000));
SELECT sum(DISTINCT number) FROM numbers(10);
SELECT sum(DISTINCT number) FROM numbers_mt(100000);
SELECT sum(DISTINCT x) FROM (SELECT 1 x UNION ALL SELECT 1);
SELECT sum(DISTINCT y) FROM (SELECT number % 5 AS x, number % 15 AS y FROM numbers(1000)) GROUP BY x ORDER BY x;
SELECT sum(DISTINCT) FROM (SELECT 1 AS DISTINCT);
SELECT sum(divideDecimal(toDecimal64(number, 1), toDecimal64(number, 5))) FROM (select * from numbers(1000) OFFSET 1);
select sum(dummy) from remote('127.{2,3}', system.one);
select sum(e) from (select * from merged order by t limit 10) SETTINGS max_threads = 10;
select sum(e) from (select * from merged order by t limit 10) SETTINGS max_threads = 1;
select sum(e) from (select * from merged order by t limit 10) SETTINGS max_threads = 3;
select sum(e) from (select * from merged order by t limit 10) SETTINGS max_threads = 50;
select sum(e) from (select * from merged order by t limit 10) SETTINGS optimize_read_in_order = 0;
select sum(eventcnt) eventcnt, d1 from tp group by d1;
select sum(exp2(x) = pow(2, x)) / count() from system.one array join range(1000) as x;
SELECT sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_sparse_mutation' AND active;
SELECT sum(hasValidSizes17(obj.arr.k1.k2, obj.arr.k1.k3.k4)) == count() FROM t_json_17;
SELECT sum(hasValidSizes17(obj.arr.k1.k2, obj.arr.k1.k4.k5)) == count() FROM t_json_17;
SELECT sum(hasValidSizes17(obj.arr.k1.k3, obj.arr.k1.k2)) == count() FROM t_json_17;
select sum(hits), count() from wikistat1 GROUP BY project, subproject, path settings optimize_use_projections = 1, force_optimize_projection = 1;
select sum(hits), count() from wikistat2 GROUP BY project, subproject, path settings optimize_use_projections = 1, force_optimize_projection = 1;
select sum(i) from pd group by dt_m settings optimize_use_projections = 1, force_optimize_projection = 1;
SELECT sum(id = 3 OR id = 1 OR id = 2) AS x, sum(id = 3 OR id = 1 OR id = 2) AS x FROM foo_00234;
SELECT sum(id) FROM t_sparse_full GROUP BY u % 3 AS k ORDER BY k;
SELECT sum(id) FROM test FORMAT Null;
SELECT sum(id), sum(val), max(s) FROM codecs;
SELECT sum(id3) FROM t GROUP BY id2 FORMAT Null;
SELECT sum(if((number % 2) = 0 AS cond_expr, 1 AS one_expr, 0 AS zero_expr) AS if_expr), sum(cond_expr), sum(if_expr), one_expr, zero_expr FROM numbers(100);
SELECT sum(if((number % 2) == 0, 0, 1)) FROM numbers(10);
SELECT sum(if((number % 2) == 0, 1, 0)) FROM numbers(10);
select sum(if((number % NULL) = 2, 0, 1)) FROM numbers(1024) settings optimize_rewrite_sum_if_to_count_if=0;
select sum(if((number % NULL) = 2, 0, 1)) FROM numbers(1024) settings optimize_rewrite_sum_if_to_count_if=1, allow_experimental_analyzer=0;
select sum(if((number % NULL) = 2, 0, 1)) FROM numbers(1024) settings optimize_rewrite_sum_if_to_count_if=1, allow_experimental_analyzer=1;
SELECT sum(if(a % 10 = 0, CAST(b, 'UInt8'), 0)) FROM t_sparse_short_circuit;
SELECT sum(if(number % 2 == 0 as cond_expr, 0 as zero_expr, 1 as one_expr) as if_expr), sum(cond_expr), sum(if_expr), one_expr, zero_expr FROM numbers(100);
SELECT sum(if(number % 2 == 0 as cond_expr, 1 as one_expr, 0 as zero_expr) as if_expr), sum(cond_expr), sum(if_expr), one_expr, zero_expr FROM numbers(100);
SELECT sum(if(number % 2 == 0, 0, 1)) FROM numbers(100);
SELECT sum(if(number % 2 == 0, 1, 0)) FROM numbers(100);
SELECT sum(ignore(*)) FROM (SELECT arrayFirst(x -> empty(x), [[number]]) FROM numbers(10000000));
SELECT sum(ignore(*)) FROM (SELECT rand64() FROM remote('127.0.0.{2,3}', numbers(20000)));
SELECT sum(ignore(*, metadata_modification_time, engine_full, create_table_query)) FROM system.tables WHERE database = '{CLICKHOUSE_DATABASE:String}';
SELECT sum(ignore(bitTest(number, 65))) FROM numbers(10);
SELECT sum(ignore(positionCaseInsensitiveUTF8('иголка.ру', randomString(rand() % 2)))) FROM numbers(1000000);
SELECT sum(ignore(visitParamExtractRaw(concat('{"a":', reinterpretAsString(rand64())), 'a'))) FROM numbers(1000000);
select sum(IPv4NumToStringClassC(materialize(0x7f000001)) = '127.0.0.xxx') = count() from system.one array join range(1024) as n;
select sum(IPv4NumToStringClassC(materialize(toUInt32(0))) = '0.0.0.xxx') = count() from system.one array join range(1024) as n;
SELECT sum(isIPAddressInRange('0.0.0.0', cidr)) == 1 FROM test_data;
SELECT sum(isIPAddressInRange('127.0.0.0', cidr)) == 1 FROM test_data;
SELECT sum(isIPAddressInRange('128.0.0.0', cidr)) == 2 FROM test_data;
SELECT sum(isIPAddressInRange('255.0.0.0', cidr)) == 9 FROM test_data;
SELECT sum(isIPAddressInRange('255.0.0.1', cidr)) == 9 FROM test_data;
SELECT sum(isIPAddressInRange('255.0.0.255', cidr)) == 9 FROM test_data;
SELECT sum(isIPAddressInRange('255.255.255.254', cidr)) == 32 FROM test_data;
SELECT sum(isIPAddressInRange('255.255.255.255', cidr)) == 33 FROM test_data;
SELECT sum(isNull(t1.x)), count(t1.x) FROM nt AS t1 FULL JOIN nt AS t2 ON t1.x = t2.x;
SELECT sum(isNull(t1.x)), count(t1.x) FROM nt AS t1 FULL JOIN nt AS t2 USING(x);
SELECT sum(isNull(t1.x)), count(t1.x) FROM nt AS t1 INNER JOIN nt AS t2 ON t1.x = t2.x;
SELECT sum(isNull(t1.x)), count(t1.x) FROM nt AS t1 INNER JOIN nt AS t2 USING(x);
SELECT sum(isNull(t1.x)), count(t1.x) FROM nt AS t1 LEFT JOIN nt AS t2 ON t1.x = t2.x;
SELECT sum(isNull(t1.x)), count(t1.x) FROM nt AS t1 LEFT JOIN nt AS t2 USING(x);
SELECT sum(isNull(t1.x)), count(t1.x) FROM nt AS t1 RIGHT JOIN nt AS t2 ON t1.x = t2.x;
SELECT sum(isNull(t1.x)), count(t1.x) FROM nt AS t1 RIGHT JOIN nt AS t2 USING(x);
select sum(j), avg(k) from x where i in (select number from numbers(4));
SELECT sum(k), sum(c) FROM (SELECT number AS k, count() AS c FROM (SELECT * FROM system.numbers LIMIT 10000000) GROUP BY k);
SELECT sum(k), sum(c) FROM (SELECT number AS k, count() AS c FROM (SELECT * FROM system.numbers LIMIT 2097152) GROUP BY k) SETTINGS log_comment='02402_external_disk_mertrics/aggregation' FORMAT Null;
SELECT sum(k), sum(c), max(u) FROM (SELECT number AS k, count() AS c, uniqArray(range(number % 16)) AS u FROM (SELECT * FROM system.numbers LIMIT 1000000) GROUP BY k);
select sum(key) from projection_without_key settings optimize_use_projections = 0;
select sum(key) from projection_without_key settings optimize_use_projections = 1;
SELECT sum(key), count() from replacing_table;
SELECT sum(length(*)) FROM weird_mmx;
select sum(length(a)) from tab_00717 group by b, b || '_';
select sum(length(a)), b from tab_00717 group by b order by b;
SELECT sum(length(arr)) FROM (SELECT arrayMap(x -> toString(x), range(number % 10)) AS arr FROM (SELECT * FROM system.numbers LIMIT 1000) WHERE length(arr) % 2 = 0);
SELECT sum(length(arr)) FROM (SELECT range(number % 10) AS arr FROM (SELECT * FROM system.numbers LIMIT 1000) WHERE length(arr) % 2 = 0);
select sum(length(arr)) from perf_lc_num;
select sum(length(arr)), sum(num) from perf_lc_num;
select sum(length(b)), a from tab_00717 group by a order by a;
SELECT sum(length(nested.arr1)), sum(length(nested.arr2)) FROM t_update_empty_nested;
SELECT sum(length(runningAccumulate(x))) FROM (SELECT groupUniqArrayState(toString(number % 10)) AS x, number FROM (SELECT * FROM system.numbers LIMIT 11) GROUP BY number ORDER BY number);
select sum(lower(materialize('aaaaaaaaaaaaaaa012345789,.!aaaa') as str) = str) = count() from system.one array join range(16384) as n;
select sum(lower(materialize('AaAaAaAaAaAaAaA012345789,.!aAaA')) = materialize('aaaaaaaaaaaaaaa012345789,.!aaaa')) = count() from system.one array join range(16384) as n;
select sum(lower(materialize('aaaaАБВГAAAAaaAA')) = materialize('aaaaАБВГaaaaaaaa')) = count() from system.one array join range(16384) as n;
select sum(lowerUTF8(materialize('aaaaaaaaaaaaaaa012345789,.!aaaa') as str) = str) = count() from system.one array join range(16384) as n;
select sum(lowerUTF8(materialize('AaAaAaAaAaAaAaA012345789,.!aAaA')) = materialize('aaaaaaaaaaaaaaa012345789,.!aaaa')) = count() from system.one array join range(16384) as n;
select sum(lowerUTF8(materialize('aaaaАБВГAAAAaaAA')) = materialize('aaaaабвгaaaaaaaa')) = count() from system.one array join range(16384) as n;
SELECT sum(m['1']), sum(m['7']), sum(m['100']) FROM table_map;
SELECT sum(m['col1']), sum(m['col4']), sum(m['col7']), sum(m['col8'] = 0) FROM t_map;
SELECT sum(marks) from system.parts WHERE table = 'adaptive_granularity_alter' and database=currentDatabase() and active=1;
SELECT sum(marks) from system.parts WHERE table = 'adaptive_granularity_alter1' and database=currentDatabase() and active=1;
SELECT sum(marks) from system.parts WHERE table = 'adaptive_granularity_alter2' and database=currentDatabase() and active=1;
SELECT sum(marks) from system.parts WHERE table = 'four_rows_per_granule' and database=currentDatabase() and active=1;
SELECT sum(marks) FROM system.parts WHERE table = 'mt_with_pk' AND database = currentDatabase() AND active=1 AND database = currentDatabase();
SELECT sum(marks) FROM system.parts WHERE table = 'mt_with_small_granularity' AND active=1 AND database = currentDatabase();
SELECT sum(marks) FROM system.parts WHERE table = 'mt_without_pk' AND active=1 AND database = currentDatabase();
SELECT sum(marks) from system.parts WHERE table = 'zero_rows_per_granule' and database=currentDatabase() and active=1;
SELECT sum(mul)/sqrt(sum(sqr_dif_1) * sum(sqr_dif_2)) AS z_r FROM( SELECT (SELECT avg(z_1) AS z_1_avg, avg(z_2) AS z_2_avg FROM ( SELECT perf_1.site, perf_1.z AS z_1 FROM perf AS perf_1 WHERE user_id = 000 ) jss1 ALL INNER JOIN ( SELECT perf_2.site, perf_2.z AS z_2 FROM perf AS perf_2 WHERE user_id = 999 ) jss2 USING site) as avg_values, z_1 - avg_values.1 AS dif_1, z_2 - avg_values.2 AS dif_2, dif_1 * dif_2 AS mul, dif_1*dif_1 AS sqr_dif_1, dif_2*dif_2 AS sqr_dif_2 FROM ( SELECT perf_1.site, perf_1.z AS z_1 FROM perf AS perf_1 WHERE user_id = 000 ) js1 ALL INNER JOIN ( SELECT perf_2.site, perf_2.z AS z_2 FROM perf AS perf_2 WHERE user_id = 999 ) js2 USING site);
SELECT sum(multiIf(1, dummy, NULL)) OVER ();
SELECT sum(multiIf(number = NULL, 65536, 3)) FROM numbers(3);
SELECT sum(n * -2 * -1), sum(-2 * n * -1), sum(n / -2 / -1), sum(-1 / n / -1) FROM (SELECT number n FROM numbers(10));
SELECT sum(n * -2), sum(-2 * n), sum(n / -2), sum(-1 / n) FROM (SELECT number n FROM numbers(10));
SELECT sum(n * 2) + sum(2 * n) + sum(n / 2) + sum(1 / n) FROM (SELECT number n FROM numbers(10));
SELECT sum(n * 2), sum(2 * n), sum(n / 2), sum(1 / n) FROM (SELECT number n FROM numbers(10));
SELECT sum(n + -1 + -1), sum(-1 + n + -1), sum(n - -1 + -1), sum(-1 - n + -1) FROM (SELECT number n FROM numbers(10));
SELECT sum(n + -1), sum(-1 + n), sum(n - -1), sum(-1 - n) FROM (SELECT number n FROM numbers(10));
SELECT sum(n + 1) + sum(1 + n) + sum(n - 1) + sum(1 - n) FROM (SELECT number n FROM numbers(10));
SELECT sum(n + 1), sum(1 + n), sum(n - 1), sum(1 - n) FROM (SELECT number n FROM numbers(10));
SELECT sum(n) FROM (SELECT toUInt16(number) AS n FROM system.numbers LIMIT 100);
SELECT sum(n) FROM defaults;
SELECT sum(n), count() FROM t_uncompressed_cache PREWHERE id = 0 OR id = 5 OR id = 100 SETTINGS use_uncompressed_cache = 0;
SELECT sum(n), count() FROM t_uncompressed_cache PREWHERE id = 0 OR id = 5 OR id = 100 SETTINGS use_uncompressed_cache = 1;
SELECT sum(n*n * 2), sum(2 * n*n), sum(n*n / 2), sum(1 / n*n) FROM (SELECT number n FROM numbers(10));
SELECT sum(n*n + 1), sum(1 + n*n), sum(n*n - 1), sum(1 - n*n) FROM (SELECT number n FROM numbers(10));
SELECT sum(n.null) FROM t_comp_subcolumns;
SELECT sum(NULL);
SELECT sum(number * -3) + min(2 * number * -3) - max(-1 * -2 * number * -3) FROM numbers(100);
SELECT sum(number + 1) FROM dist;
SELECT sum(number + 1) FROM numbers(1);
SELECT sum(number / 2) FROM numbers(10);
SELECT Sum(number / 2) FROM numbers(10);
SELECT sum(number < 1000 ? NULL : number) FROM numbers(10);
SELECT sum(number number number) FROM numbers(10);
SELECT sum(number) + 1 AS x FROM numbers(100) GROUP BY number % 10 ORDER BY x;
SELECT sum(number) / sum(sum(number)) OVER (PARTITION BY (number % 10)) FROM numbers(10000) GROUP BY number % 10;
select sum(number) = any(number) from numbers(1) group by number;
SELECT SUM(number) as sum_value, count() AS count_value from numbers_mt(1000000) GROUP BY GROUPING SETS ((number % 10), (number % 100)) ORDER BY sum_value, count_value SETTINGS max_threads=3;
SELECT sum(number) FILTER(WHERE number % 2 == 0) FROM numbers(100);
SELECT SUM(number) FROM ( SELECT 10 AS number ) GROUP BY cos(min2(number, number) % number) - number HAVING ((-sign(-233841197)) IS NOT NULL) AND sin(lcm(SUM(number), SUM(number)) >= ('372497213' IS NOT NULL)) SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;
SELECT SUM(number) FROM ( SELECT 10 AS number ) GROUP BY number HAVING 1 AND sin(SUMOrNull(number)) SETTINGS enable_optimize_predicate_expression = 0;
SELECT sum(number) FROM (SELECT * FROM remote('127.0.0.1', system.numbers) LIMIT 5) with totals;
SELECT sum(number) FROM (SELECT * FROM remote('127.0.0.1', system.numbers) LIMIT 5);
SELECT sum(number) FROM (SELECT * FROM remote('127.0.0.2', system.numbers) LIMIT 5) with totals;
SELECT sum(number) FROM (SELECT * FROM remote('127.0.0.2', system.numbers) LIMIT 5);
SELECT sum(number) FROM (select * from remote('127.0.0.{1,1,1}', system.numbers) AS n WHERE n.number = 100 LIMIT 3) SETTINGS max_threads = 2, prefer_localhost_replica=1;
SELECT sum(number) FROM (SELECT * FROM remote('127.0.0.{1,2}', system.numbers) LIMIT 5 SETTINGS distributed_group_by_no_merge = 1) with totals;
select sum(number) FROM numbers(10) WHERE number != 0 and 3 % number and number != 1 and intDiv(1, number - 1) > 0;
SELECT sum(number) FROM numbers(10);
SELECT sum(number) FROM numbers2;
SELECT sum(number) FROM numbers3;
select sum(number) from remote('127.0.0.{1|2}', numbers_mt(1000000)) group by number % 2 order by number % 2;
select sum(number) from remote('127.0.0.{2,3}', numbers(2)) where number global in (select sum(number) from numbers(2) group by number with totals) group by number with totals order by number;
select sum(number) over w as x, max(number) over w as y from remote('127.0.0.{1,2}', '', t_01568) window w as (partition by p) order by x, y SETTINGS max_threads = 1;
select sum(number) over w as x, max(number) over w as y from remote('127.0.0.{1,2}', '', t_01568) window w as (partition by p) order by x, y;
select sum(number) over w as x, max(number) over w as y from t_01568 window w as (partition by p) order by x, y;
select sum(number) over w, max(number) over w from t_01568 window w as (partition by p) order by p;
select sum(number) over w1, sum(number) over w2 from numbers(10) window w1 as (rows unbounded preceding), w2 as (partition by intDiv(number, 3) as value order by number rows unbounded preceding) ;
SELECT sum(number), sum(number + 1), sum(number + 2) FROM numbers(1) GROUP BY number;
SELECT sum(obj.col1), sum(obj.col4), sum(obj.col7), sum(obj.col8 = 0) FROM t_json;
select sum(pow(x, 0) = 1) / count() from system.one array join range(1000000) as x;
select sum(pow(x, 2) = x * x) / count() from system.one array join range(10000) as x;
select sum(project in ('val1', 'val2')) from test where project in ('val1', 'val2');
select sum(project in ('val1', 'val2')) from test;
SELECT sum(r[1]) as r1, sum(r[2]) as r2 FROM (SELECT uid, retention(date = '2018-08-06', date = '2018-08-07') AS r FROM retention_test WHERE date IN ('2018-08-06', '2018-08-07') GROUP BY uid);
SELECT sum(r[1]) as r1, sum(r[2]) as r2 FROM (SELECT uid, retention(date = '2018-08-06', date = '2018-08-08') AS r FROM retention_test WHERE date IN ('2018-08-06', '2018-08-08') GROUP BY uid);
SELECT sum(r[1]) as r1, sum(r[2]) as r2, sum(r[3]) as r3 FROM (SELECT uid, retention(date = '2018-08-06', date = '2018-08-07', date = '2018-08-08') AS r FROM retention_test WHERE date IN ('2018-08-06', '2018-08-07', '2018-08-08') GROUP BY uid);
SELECT sum(rows), groupUniqArray(type) FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_ttl_modify_column' AND column = 'InsertionDateTime' AND active;
SELECT sum(rows), groupUniqArray(type) FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_ttl_modify_column' AND column = 'TTLDays' AND active;
SELECT sum(s) FROM (SELECT sum(number) as s FROM remote('127.0.0.1', numbers(5)) with totals);
SELECT sum(s) FROM (SELECT sum(number) as s FROM remote('127.0.0.1', numbers(5))) with totals;
SELECT sum(s) FROM (SELECT sum(number) as s FROM remote('127.0.0.2', numbers(5)) with totals);
SELECT sum(s) FROM (SELECT sum(number) as s FROM remote('127.0.0.2', numbers(5))) with totals;
SELECT sum(s) FROM (SELECT sum(number) as s FROM remote('127.0.0.{1,2}', numbers(5)) with totals);
SELECT sum(s) FROM (SELECT sum(number) as s FROM remote('127.0.0.{1,2}', numbers(5))) with totals;
SELECT sum(s) FROM (SELECT sum(number) as s FROM remote('127.0.0.{2,3}', numbers(5)) with totals);
SELECT sum(s) FROM (SELECT sum(number) as s FROM remote('127.0.0.{2,3}', numbers(5))) with totals;
SELECT sum(s) FROM (SELECT y AS s FROM remote('127.0.0.{2,3}', currentDatabase(), big_array) ARRAY JOIN x AS y);
SELECT sum(s) from mt_compact;
SELECT sum(s.1), sum(s.2), groupUniqArray(s.3), groupUniqArray(s.4), groupUniqArray(s.5) FROM t_sparse_mutations_3;
SELECT sum(s.1), sum(s.2), sum(s.3), sum(s.4), groupUniqArray(s.5) FROM t_sparse_mutations_3;
SELECT sum(Sign), count() from collapsing_suspicious_granularity;
SELECT sum(Sign), count() from collapsing_table;
select sum(sin(pi() / 2 + 2 * pi() * x) = 1) / count() from system.one array join range(1000000) as x;
SELECT sum(sleep(0.1)) FROM t;
select sum(sleep(0.1)) from tab settings max_block_size = 1, max_execution_time=1;
select sum(sqrt(x * x) = x) / count() from system.one array join range(1000000) as x;
SELECT sum(struct.key) == 30, sum(struct.value) == 30 FROM (SELECT struct.key, struct.value FROM test_table array join struct WHERE day = '2020-01-01');
SELECT sum(t) FROM XXXX WHERE indexHint(t = 42);
SELECT sum(toNullable('a') IN 'a');
SELECT sum(toNullable(number)) FROM numbers(10);
select sum(toUInt64(str)), sum(toUInt64(pat)) from lc_dict_reading where val < 8129 or val > 8192 * 4;
select sum(toUInt64(str)), sum(toUInt64(s)) from lc_prewhere prewhere val == 1;
select sum(toUInt64OrZero(str)) from lc_big_dict;
select sum(toUInt64OrZero(str)) from lc_small_dict;
SELECT SUM(trades.price - tvs.tv) FROM (SELECT k, t, t as price FROM (SELECT toUInt32(number) AS k FROM numbers(1000)) keys CROSS JOIN (SELECT toUInt32(number * 10) AS t FROM numbers(3000)) trade_times) trades ASOF LEFT JOIN tvs USING(k,t);
SELECT sum(u) AS value FROM t_sparse_full GROUP BY id % 3 AS k WITH CUBE ORDER BY value;
SELECT sum(u) AS value FROM t_sparse_full GROUP BY id % 3 AS k WITH ROLLUP ORDER BY value;
SELECT sum(u) FROM (SELECT intDiv(number, 16384) AS k, uniqCombined(18)(number % 16384) u FROM numbers(16384 * 100) GROUP BY k);
SELECT sum(u) FROM (SELECT intDiv(number, 2048) AS k, uniqCombined(16)(reinterpretAsString(number % 2048)) u FROM numbers(2048 * 100) GROUP BY k);
SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(16)(number % 4096) u FROM numbers(4096 * 100) GROUP BY k);
SELECT sum(u) FROM (SELECT intDiv(number, 4096) AS k, uniqCombined(reinterpretAsString(number % 4096)) u FROM numbers(4096 * 100) GROUP BY k);
SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(18)(reinterpretAsString(number % 8192)) u FROM numbers(8192 * 100) GROUP BY k);
SELECT sum(u) FROM (SELECT intDiv(number, 8192) AS k, uniqCombined(number % 8192) u FROM numbers(8192 * 100) GROUP BY k);
SELECT sum(u) FROM t_sparse;
SELECT sum(u) FROM t_sparse_full GROUP BY id % 3 AS k WITH TOTALS ORDER BY k;
select sum(upper(materialize('AAAAAAAAAAAAAAA012345789,.!AAAA') as str) = str) = count() from system.one array join range(16384) as n;
select sum(upper(materialize('AaAaAaAaAaAaAaA012345789,.!aAaA')) = materialize('AAAAAAAAAAAAAAA012345789,.!AAAA')) = count() from system.one array join range(16384) as n;
select sum(upper(materialize('aaaaАБВГAAAAaaAA')) = materialize('AAAAАБВГAAAAAAAA')) = count() from system.one array join range(16384) as n;
select sum(upperUTF8(materialize('AAAAAAAAAAAAAAA012345789,.!AAAA') as str) = str) = count() from system.one array join range(16384) as n;
select sum(upperUTF8(materialize('AaAaAaAaAaAaAaA012345789,.!aAaA')) = materialize('AAAAAAAAAAAAAAA012345789,.!AAAA')) = count() from system.one array join range(16384) as n;
select sum(upperUTF8(materialize('aaaaАБВГAAAAaaAA')) = materialize('AAAAАБВГAAAAAAAA')) = count() from system.one array join range(16384) as n;
SELECT sum(UserID GLOBAL IN (SELECT UserID FROM remote('127.0.0.{2,3}', currentDatabase(), storage))) FROM remote('127.0.0.{2,3}', currentDatabase(), storage);
SELECT sum(UserID GLOBAL IN (SELECT UserID FROM storage)) FROM remote('127.0.0.{2,3}', currentDatabase(), storage);
SELECT sum(v) AS s FROM group_by_pk GROUP BY k ORDER BY s DESC LIMIT 5 SETTINGS optimize_aggregation_in_order = 0, max_block_size = 1;
SELECT sum(v) AS s FROM group_by_pk GROUP BY k ORDER BY s DESC LIMIT 5 SETTINGS optimize_aggregation_in_order = 1, max_block_size = 1;
SELECT sum(val), count(val) FROM tab1 FULL OUTER JOIN tab2 ON b1 - 2 = a2 OR a1 = b2 SETTINGS join_use_nulls = 0;
SELECT sum(val), count(val) FROM tab1 FULL OUTER JOIN tab2 ON b1 - 2 = a2 OR a1 = b2 SETTINGS join_use_nulls = 1;
SELECT SUM(value) == 1 + 99 + 900 FROM 01504_test WHERE key IN ('1_1', '99_1', '900_1');
SELECT SUM(value) == 1 + 99 + 900 FROM 02416_test WHERE key IN ('1_1', '99_1', '900_1');
SELECT sum(value) as value FROM (SELECT 1 as value) as data WHERE data.value > 0;
SELECT sum(value) FROM (SELECT number, sum(number) AS value FROM (SELECT *, toDecimal64(number, 6) AS val FROM numbers) GROUP BY number);
SELECT sum(value) from alter_default;
SELECT sum(value) FROM replicated_mutations_empty_partitions;
SELECT sum(value) from test_alter_on_mutation;
SELECT sum(value) FROM test_mv;
SELECT sum(value), _table FROM merge(currentDatabase(), 'test_distributed_1') GROUP BY _table ORDER BY _table;
SELECT sum(value), _table FROM merge(currentDatabase(), 'test_distributed_1|test_distributed_2') GROUP BY _table ORDER BY _table;
SELECT sum(value), _table FROM merge(currentDatabase(), 'test_local_1') GROUP BY _table ORDER BY _table;
SELECT sum(value), _table FROM merge(currentDatabase(), 'test_local_1|test_distributed_2') GROUP BY _table ORDER BY _table;
SELECT sum(value), _table FROM merge(currentDatabase(), 'test_local_1|test_local_2') GROUP BY _table ORDER BY _table;
SELECT sum(value), min(min_value), max(max_value), uniqExact(key) FROM test_ttl_group_by01763 where key = 3 ;
SELECT sum(value), min(min_value), max(max_value), uniqExact(key) FROM test_ttl_group_by01763 where key = 3 and ts <= today() - interval 30 day ;
SELECT sum(value), min(min_value), max(max_value), uniqExact(key) FROM test_ttl_group_by01763;
SELECT sum(value1) from test_alter_on_mutation;
SELECT sum(w) FROM mt_with_pk;
SELECT sum(x) <= 10 FROM ( SELECT x FROM ( SELECT zero AS x FROM system.zeros SETTINGS max_block_size = 2, max_rows_to_read = 20, read_overflow_mode = 'break' ) UNION ALL SELECT x FROM ( SELECT zero + 1 AS x FROM system.zeros SETTINGS max_block_size = 2, max_rows_to_read = 10, read_overflow_mode = 'break' ) );
SELECT sum(x) == 42 FROM bar;
SELECT sum(x) == 42 FROM foo;
SELECT sum(x) == 9 FROM bar;
SELECT sum(x) == 9 FROM foo;
SELECT sum(x) >= 10 FROM ( SELECT x FROM ( SELECT zero AS x FROM system.zeros SETTINGS max_block_size = 2, max_rows_to_read = 10, read_overflow_mode = 'break' ) UNION ALL SELECT x FROM ( SELECT zero + 1 AS x FROM system.zeros SETTINGS max_block_size = 2, max_rows_to_read = 20, read_overflow_mode = 'break' ) );
SELECT sum(x) AS x, max(x) FROM (SELECT 1 AS x UNION ALL SELECT 2 AS x) t settings prefer_column_name_to_alias = 1;
SELECT sum(x) FROM ( SELECT x FROM ( SELECT number AS x FROM system.numbers SETTINGS max_rows_to_read = 10, read_overflow_mode = 'break', max_block_size = 2 ) SETTINGS max_rows_to_read = 20, read_overflow_mode = 'break', max_block_size = 2 );
SELECT sum(x) FROM ( SELECT x FROM ( SELECT number AS x FROM system.numbers SETTINGS max_rows_to_read = 20, read_overflow_mode = 'break', max_block_size = 2 ) SETTINGS max_rows_to_read = 10, read_overflow_mode = 'break', max_block_size = 2 );
SELECT sum(x) FROM (SELECT 1 AS x UNION ALL SELECT NULL);
select sum(x) from (select x from t order by x) settings max_threads=4, max_streams_for_merge_tree_reading=16, allow_asynchronous_read_from_io_pool_for_merge_tree=1, max_streams_to_max_threads_ratio=8, optimize_read_in_order=1, query_plan_read_in_order=1;
SELECT sum(x) FROM (SELECT x, y FROM (SELECT number AS x, number + 1 AS y FROM system.numbers LIMIT 10) ORDER BY y LIMIT 1 BY y);
SELECT sum(x) from empty_pk;
SELECT sum(x) FROM not_partitioned;
SELECT sum(x) FROM not_partitioned_replica2_00502;
SELECT sum(x) FROM partitioned_by_string;
SELECT sum(x) FROM partitioned_by_string_replica2;
SELECT sum(x) FROM partitioned_by_week;
SELECT sum(x) FROM partitioned_by_week_replica2;
SELECT sum(x) FROM quorum2;
SELECT sum(x) FROM replicated_with_sampling SAMPLE 1/2;
SELECT sum(x), count(x), avg(x) FROM (SELECT number :: Decimal32(0) AS x FROM numbers(0)) SETTINGS optimize_syntax_fuse_functions = 0;
SELECT sum(x), count(x), avg(x) FROM (SELECT number :: Decimal32(0) AS x FROM numbers(0));
SELECT sum(x), count(x), avg(x), toTypeName(sum(x)), toTypeName(count(x)), toTypeName(avg(x)) FROM (SELECT number :: Decimal32(0) AS x FROM numbers(10)) SETTINGS optimize_syntax_fuse_functions = 0;
SELECT sum(x), count(x), avg(x), toTypeName(sum(x)), toTypeName(count(x)), toTypeName(avg(x)) FROM (SELECT number :: Decimal32(0) AS x FROM numbers(10));
SELECT sum(x), sum(i256), sum(u256), sum(d256) FROM t;
select sum(x), sum(y) from t;
SELECT sum(y) AS s FROM remote('127.0.0.{2,3}', currentDatabase(), big_array) ARRAY JOIN x AS y;
SELECT sum(y) FROM partitioned_by_tuple;
SELECT sum(y) FROM partitioned_by_tuple_replica2_00502;
select sum(y) from t_delete_projection settings optimize_use_projections = 0, force_optimize_projection = 1;
select sum(y) from t_delete_projection settings optimize_use_projections = 0;
select sum(z) from test_parallel_index where z = 2 or z = 7 or z = 13 or z = 17 or z = 19 or z = 23;
select sum(zero), count() from (select * from system.zeros limit 10000000);
select sum(zero), count() from (select * from system.zeros_mt limit 10000000);
select sum(zero), count() from zeros(10000000);
select sum(zero), count() from zeros_mt(10000000);
select sumArgMin(number, number % 20), sumArgMax(number, number % 20) from numbers(100);
select sumArgMin(number, toString(number % 20)), sumArgMax(number, toString(number % 20)) from numbers(100);
select sumArgMinIf(number, number % 20, number % 2 = 0), sumArgMaxIf(number, number % 20, number % 2 = 0) from numbers(100);
select sumArray([NULL, NULL]);
SELECT sumArray(arr), sumArrayIf(arr, s LIKE '%l%'), sumArrayIf(arr, s LIKE '%e%') FROM arrays_test;
SELECT sumArray(arr.null), sum(arr.size0) FROM subcolumns;
SELECT sumArray(arr.size1) FROM t_comp_subcolumns;
SELECT sumCountIf(n, n > 10) FROM (SELECT If(number % 2 == 0, number, NULL) AS n FROM system.numbers LIMIT 100);
SELECT sumCountIf(n, n > 10) FROM (SELECT toNullable(number) AS n FROM system.numbers LIMIT 100);
SELECT sumDistinct(number + nan) FROM numbers(1000);
SELECT sumForEach(arr), sumForEachIf(arr, arr[1] = 1), sumIfForEach(arr, arrayMap(x -> x != 5, arr)) FROM (SELECT arrayJoin([[1, 2, 3], [4, 5, 6]]) AS arr);
SELECT sumForEachArray([[1],[2]]);
SELECT sumForEachArrayIf([[number],[number%2]], number < 5) from numbers(10);
SELECT sumForEachMergeArray(y) FROM (SELECT sumForEachStateForEachIfArrayMerge(x) AS y FROM (SELECT sumForEachStateForEachIfArrayState([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [1]) AS x));
SELECT sumIf( 1, if( 1, toDateTime('2020-01-01 00:00:00', 'UTC'), toDateTime('1970-01-01 00:00:00', 'UTC')) > t ) FROM e JOIN ( SELECT 1 joinKey) AS da ON joinKey = a WHERE t >= toDateTime('2020-01-01 00:00:00', 'UTC') AND t <= toDateTime('2021-07-19T13:59:59', 'UTC');
SELECT sumIf( 1, if( 1, toDateTime('2020-01-01 00:00:00', 'UTC'), toDateTime('1970-01-01 00:00:00', 'UTC')) > t ) FROM e JOIN ( SELECT 1 joinKey) AS da ON joinKey = a WHERE t >= toDateTime('2021-07-19T13:00:00', 'UTC') AND t <= toDateTime('2021-07-19T13:59:59', 'UTC');
SELECT sumIf(1 as one_expr, number % 2 == 0 as cond_expr), sum(cond_expr), one_expr FROM numbers(100);
SELECT sumIf(1 as one_expr, number % 2 > 2 as cond_expr), sum(cond_expr), one_expr FROM numbers(100);
SELECT sumIf(1, (number % 2) == 0) FROM numbers(10);
SELECT sumIf(1, 0);
SELECT SumIf(1, 0);
SELECT sUmIf(1, 0);
SELECT sumIF(1, 0);
SELECT sumIf(1, 1);
SELECT sumIf(1, number % 2 == 0) FROM numbers(100);
SELECT sumIf(1, number % 2 > 2) FROM numbers(100);
select sumIf(42, (a % 2) = 0) from remote('127.0.0.{1,2}', currentDatabase(), T);
select sumIf(42, (a % 2) = 0) from T;
select sumIf(42, toNullable(1)) from remote('127.0.0.{1,2}', currentDatabase(), T);
select sumIf(42, toNullable(1)) from T;
SELECT sumIf(DISTINCT number % 10, number % 5 = 2) FROM numbers(10000);
SELECT sumIf(dummy, 1) FROM remote('127.0.0.{1,2}', view(SELECT cast(dummy AS Nullable(UInt8)) AS dummy FROM system.one));
SELECT sumIf(dummy, 1) FROM remote('127.0.0.{1,2}', view(SELECT cast(Null AS Nullable(UInt8)) AS dummy FROM system.one));
SELECT sumIf(dummy, dummy) FROM remote('127.0.0.{1,2}', view(SELECT cast(Null AS Nullable(UInt8)) AS dummy FROM system.one));
select sumIf(NULL, 1);
select sumIf(NULL, NULL);
SELECT sumIf(number, arrayExists(x -> (x IN (SELECT 1)), [1])) FROM remote('127.0.0.{1,2}', numbers(10));
SELECT sumIf(number, x), sum(x) FROM (SELECT number, number IN (0 + 1, 2 + 3, toUInt64(concat('8', ''))) AS x FROM system.numbers LIMIT 10);
SELECT sumIf(toNullable(1), 1) FROM remote('127.0.0.{1,2}', system.one);
SELECT sumIfOrNull(1, 0);
SELECT sumIfOrNull(number, number % 2 == 1) FILTER(WHERE 0) FROM numbers(100);
SELECT sumIfOrNull(number, number % 2 == 1) FILTER(WHERE 1) FROM numbers(100);
SELECT sumKahan(-8000000000000000000) FROM numbers(11);
SELECT sumKahan(1e100) - 1e100 * 1000 FROM (SELECT * FROM system.numbers LIMIT 1000);
select sumKahan(dummy) from remote('127.{2,3}', system.one);
SELECT sumKahan(toFloat64(number)) FROM numbers(10);
SELECT sumKahan(toNullable(toFloat64(number))) FROM numbers(10);
SELECT sumMap((statusMap.status, statusMap.requests)) FROM sum_map;
SELECT sumMap(['a', 'b'], [1, NULL]);
SELECT sumMap(['a', 'b'], [1, toNullable(0)]);
SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;
SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;
SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;
SELECT sumMap([number], [number]) FROM system.numbers_mt;
select sumMap(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));
SELECT sumMap(events, counts) FROM sum_map_overflow;
select sumMap(map(1,2), 1, 2);
select sumMap(sMap), sumMapMerge(aMap) from test_smt;
SELECT sumMap(statusMap) FROM sum_map_decimal;
SELECT sumMap(statusMap.goal_id, statusMap.revenue) FROM sum_map_decimal;
SELECT sumMap(statusMap.goal_id, statusMap.revenue) FROM sum_map_decimal_nullable;
SELECT sumMap(statusMap.status, statusMap.requests) FROM sum_map;
select sumMap(val, cnt) from ( SELECT [ CAST('01234567-89ab-cdef-0123-456789abcdef', 'UUID') ] as val, [1] as cnt );
select sumMap(val, cnt) from ( SELECT [ CAST('a', 'Enum16(\'a\'=1)') ] as val, [1] as cnt );
select sumMap(val, cnt) from ( SELECT [ CAST('a', 'FixedString(1)'), CAST('b', 'FixedString(1)' ) ] as val, [1, 2] as cnt );
select sumMap(val, cnt) from ( SELECT [ CAST('abc', 'String'), CAST('ab', 'String'), CAST('a', 'String') ] as val, [1, 2, 3] as cnt );
select sumMap(val, cnt) from ( SELECT [ CAST(1, 'Date') ] as val, [1] as cnt );
select sumMap(val, cnt) from ( SELECT [ CAST(1, 'DateTime(\'Asia/Istanbul\')') ] as val, [1] as cnt );
select sumMap(val, cnt) from ( SELECT [ CAST(1, 'Float64') ] as val, [1] as cnt );
select sumMap(val, cnt) from ( SELECT [ CAST(1, 'UInt64') ] as val, [1] as cnt );
select sumMap(val, cnt) from ( SELECT [ CAST(1.01, 'Decimal(10,2)') ] as val, [1] as cnt );
select sumMap(val, cnt) from values ('val Array(UInt64), cnt Array(UInt64)', ([1], [0]), ([2], [0]));
SELECT sumMapFiltered([1, 4, 8])(statusMap.status, statusMap.requests) FROM sum_map;
SELECT sumMapFiltered([1])(statusMap.status, statusMap.requests) FROM sum_map;
SELECT sumMapFilteredMerge([1, 2])(*) FROM remote('127.0.0.{1,2}', view(SELECT sumMapFilteredState([1, 2])([1, 2, 3], [10, 10, 10])));
SELECT sumMapMerge(s) FROM (SELECT sumMapState(statusMap.status, statusMap.requests) AS s FROM sum_map);
select sumMapWithOverflow(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));
SELECT sumMapWithOverflow(events, counts) FROM sum_map_overflow;
SELECT sumMapWithOverflow(statusMap.goal_id, statusMap.revenue) FROM sum_map_decimal;
SELECT sumMerge(s) FROM (SELECT sumMergeState(n) s FROM (SELECT sumState(number) n FROM numbers(0)));
SELECT sumMerge(s) FROM (SELECT sumMergeState(n) s FROM (SELECT sumState(number) n FROM numbers(1)));
SELECT sumMerge(s) FROM (SELECT sumState(number) s FROM numbers(0));
SELECT sumMerge(s) FROM (SELECT sumState(number) s FROM numbers(1));
SELECT sumMerge(x * 5), sumMerge(x) FROM (SELECT sumState(b) AS x FROM mult_aggregation);
SELECT sumMerge(x + y), sumMerge(x), sumMerge(y) FROM (SELECT sumState(a) as x, sumState(b) as y from add_aggregate);
SELECT sumMerge(x) FROM (SELECT sumState(a) + countState(b) as x FROM add_aggregate);
SELECT sumMerge(y * a) FROM (SELECT a, sumState(b) AS y FROM mult_aggregation GROUP BY a);
SELECT sumMerge(y) AS z FROM ( SELECT 3 * sumState(x) * 2 AS y FROM ( SELECT 1 AS x UNION ALL SELECT 2 AS x));
SELECT sumMerge(y) AS z FROM ( SELECT sumState(x) * 11 AS y FROM ( SELECT 1 AS x UNION ALL SELECT 2 AS x));
select sumMerge(y) from ( select cast(x, 'AggregateFunction(sum, Decimal(50, 10))') y from ( select arrayReduce('sumState', [toDecimal256('0.000001', 10), toDecimal256('1.1', 10)]) x ) );
SELECT SumOrNull(1);
SELECT SUMOrNull(1);
SELECT sumOrNull(n) FROM defaults;
SELECT SUMOrNullIf(1, 0);
SELECT sumOrNullIf(1, 0);
SELECT SUMOrNullIf(1, 1);
select sumResample(0, 20, 1)(number, number % 20) from numbers(200);
SELECT sumWithOverflow(1) FROM (SELECT * FROM system.numbers LIMIT 1000);
select sumWithOverflow(dummy) from remote('127.{2,3}', system.one);
SELECT sumWithOverflow(n) FROM (SELECT toUInt16(number) AS n FROM system.numbers LIMIT 100);
SELECT sumWithOverflowMap(statusMap) FROM sum_map_decimal;
SELECT SVG((0., 0.));
SELECT SVG((0., 0.), 'b');
SELECT SVG((0., 0.), s) FROM geo ORDER BY id;
SELECT SVG([(0., 0.), (10, 0), (10, 10), (0, 10)]);
SELECT SVG([(0., 0.), (10, 0), (10, 10), (0, 10)], 'b');
SELECT SVG([(0., 0.), (10, 0), (10, 10), (0, 10)], s) FROM geo ORDER BY id;
SELECT SVG([[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]]);
SELECT SVG([[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], 'b');
SELECT SVG([[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], s) FROM geo ORDER BY id;
SELECT SVG([[[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], [[(-10., -10.), (-10, -9), (-9, 10)]]]);
SELECT SVG([[[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], [[(-10., -10.), (-10, -9), (-9, 10)]]], 'b');
SELECT SVG([[[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]], [[(-10., -10.), (-10, -9), (-9, 10)]]], s) FROM geo ORDER BY id;
SELECT SVG(p) FROM geo ORDER BY id;
SELECT SVG(p, 'b') FROM geo ORDER BY id;
SELECT SVG(p, s) FROM geo ORDER BY id;
SELECT synonyms('en', 'cheerful');
SELECT synonyms('en', 'crucial');
SELECT synonyms('en', 'quiz');
SELECT synonyms('en', 'yet');
SELECT synonyms('ru', 'веселый');
SELECT synonyms('ru', 'главный');
SELECT synonyms('ru', 'правда');
SELECT synonyms('ru', 'экзамен');
SELECT sys_num.number FROM system.numbers AS sys_num WHERE number > 2 LIMIT 2;
SELECT system.`one`.dummy FROM system.one;
SELECT system.detached_parts.* EXCEPT (bytes_on_disk, `path`, disk, modification_time) FROM system.detached_parts WHERE database = currentDatabase() AND table = 'not_partitioned';
SELECT system.one.* FROM one AS `t`;
SELECT system.one.* FROM one;
SELECT system.one.dummy FROM `one` AS `t`;
SELECT system.one.dummy FROM one;
SELECT system.one.dummy;
SELECT t = '2020-01-03' FROM (SELECT day AS t FROM test_table WHERE t = '2020-01-03' GROUP BY t SETTINGS max_rows_to_read = 10);
SELECT t = '2020-01-03' FROM (SELECT day1 AS t FROM test_table WHERE t = '2020-01-03' GROUP BY t SETTINGS max_rows_to_read = 10);
SELECT t = '2020-01-03' FROM (SELECT day2 AS t FROM test_table WHERE t = '2020-01-03' GROUP BY t SETTINGS max_rows_to_read = 10);
select t from data_order_by_proj_comp where t > 0 order by t settings max_threads=1;
select t from data_order_by_proj_comp where t > 0 order by t settings optimize_read_in_order=0;
select t from data_order_by_proj_incomp where t > 0 order by t settings max_threads=1;
select t from data_order_by_proj_incomp where t > 0 order by t settings optimize_read_in_order=0;
select t from data_proj_order_by_comp where t > 0 order by t settings max_threads=1;
select t from data_proj_order_by_comp where t > 0 order by t settings optimize_read_in_order=0;
select t from data_proj_order_by_incomp where t > 0 order by t settings max_threads=1;
select t from data_proj_order_by_incomp where t > 0 order by t settings optimize_read_in_order=0;
SELECT t FROM null_02902;
SELECT t FROM sparse_tuple ORDER BY id LIMIT 5;
SELECT t FROM sparse_tuple WHERE t.a != 0 ORDER BY id LIMIT 5;
SELECT t FROM sparse_tuple WHERE t.a != 0 ORDER BY t.a LIMIT 5;
select t from tab where t + 1 > '2020-01-01 01:01:01';
select t from tab where t > '2020-01-01 01:01:01';
SELECT t IS NULL, t.null FROM t_tuple_null;
SELECT t.* FROM system.one AS t;
SELECT t.* FROM system.one t;
select t.* from t left join s on (t.a=s.a and t.b=s.b) order by t.a;
select t.*, s.* from t left join s on (s.a = t.a and s.b = t.b) SETTINGS join_use_nulls = 1;
select t.*, s.* from t left join s on (s.a = t.a and s.b = t.b);
select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a;
select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b) order by t.a;
select t.*, s.* from t left join s on (s.a=t.a) order by t.a;
select t.*, s.* from t left join s on (t.a=s.a and t.b=s.b) order by t.a;
select t.*, s.* from t left join s on (t.b=toInt64(1) and s.a=t.a) where s.b=1;
select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where t.b=2;
select t.*, s.* from t right join s on (s.a = t.a and s.b = t.b) SETTINGS join_use_nulls = 1;
select t.*, s.* from t right join s on (s.a = t.a and s.b = t.b);
select t.*, s.* from t right join s on (t.a=s.a and t.b=s.b);
select t.*, s.a, s.b, s.c from t left join s on (s.a = t.a and s.b = t.b) SETTINGS join_use_nulls = 1;
select t.*, s.a, s.b, s.c from t left join s on (s.a = t.a and s.b = t.b);
select t.*, s.a, s.b, s.c from t right join s on (s.a = t.a and s.b = t.b) SETTINGS join_use_nulls = 1;
select t.*, s.a, s.b, s.c from t right join s on (s.a = t.a and s.b = t.b);
SELECT t.1.1, t.1.2, t.2 FROM t_tuple_numeric;
SELECT t.1.3 FROM t_tuple_numeric;
select t.a as t_a from t left join s on s.a = t_a order by t.a format PrettyCompactNoEscapes;
SELECT t.a FROM sparse_tuple ORDER BY id LIMIT 5;
SELECT t.a FROM sparse_tuple WHERE t.a != 0 ORDER BY id LIMIT 5;
SELECT t.a FROM sparse_tuple WHERE t.a != 0 ORDER BY t.a LIMIT 5;
SELECT t.a FROM sparse_tuple WHERE t.b.u != 0 ORDER BY id LIMIT 5;
select t.a, s.a as s_a from t left join s on s.a = t.a left join y on y.b = s.b order by t.a format PrettyCompactNoEscapes;
select t.a, s.b, s.a, s.b, y.a, y.b from t left join s on (t.a = s.a and s.b = t.b) left join y on (y.a = s.a and y.b = s.b) order by t.a format PrettyCompactNoEscapes;
select t.a, s.b, s.a, s.b, y.a, y.b from t left join s on (t.a = s.a and t.b = s.b) left join y on (y.a = s.a and y.b = s.b) order by t.a format Vertical;
select t.a, t.a as t_a, max(s.a) from t left join s on t.a = s.a left join y on y.b = s.b group by t.a order by t.a;
select t.a, t.a as t_a, s.a, s.a as s_a, y.a, y.a as y_a from t left join s on t.a = s.a left join y on y.b = s.b order by t.a format PrettyCompactNoEscapes;
select t.a, t.a as t_a, s.a, s.a as s_a, y.a, y.a as y_a from t left join s on t.a = s.a left join y on y.b = s.b order by t.a, s.a, y.a;
select t.a, t.a, t.b as t_b from t left join s on t.a = s.a left join y on y.b = s.b order by t.a format PrettyCompactNoEscapes;
SELECT t.a, t.u, t.s, nested.col1, nested.col2, lc FROM subcolumns;
SELECT t.a.size0, t.a.null, t.u, t.s, t.s.null FROM subcolumns;
SELECT t.a.y.i FROM nested_name_tuples as t;
SELECT t.b, t.b.c FROM test ORDER BY id FORMAT Null;
SELECT t.b, tj.b FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT t.b, tj.b FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT t.b.s FROM sparse_tuple ORDER BY id LIMIT 5;
SELECT t.b.s FROM sparse_tuple WHERE t.b.u != 0 ORDER BY id LIMIT 5;
SELECT t.database, t.name FROM system.tables AS t JOIN (SELECT name, name AS database FROM system.databases) AS db ON t.database = db.name WHERE t.database = 'system' AND t.name = 'one' FORMAT PrettyCompactNoEscapes;
SELECT t.database, t.name FROM system.tables t ANY LEFT JOIN (SELECT 'system' AS base, 'one' AS name) db USING name WHERE t.database = db.base FORMAT PrettyCompactNoEscapes;
SELECT t.dummy FROM system.one t;
SELECT t.key1, tj.key1 FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT t.key2, tj.key2 FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT t.key2, tj.key2 FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT t.num, t.str FROM null_02902;
SELECT t.number FROM numbers(2) t;
SELECT t.s FROM sparse_tuple ORDER BY id LIMIT 5;
SELECT t.s FROM sparse_tuple WHERE t.a != 0 ORDER BY id LIMIT 5;
SELECT t.s FROM t_tup;
SELECT t.t.t.* FROM system.tables WHERE database = currentDatabase();
SELECT t.t2.t3.t4.t5.s1.s2, t.t2.s3.s4.s5 FROM t_nested_with_dots;
SELECT t.t2.t3.t4.t5.s1.s2, t.t2.t3.t4.t5.u1.u2 FROM t_nested_with_dots;
SELECT t.u FROM t_tup;
SELECT t.val == t.expected AS ok, * FROM t_leading_zeroes t ORDER BY id;
SELECT t.val == t.expected AS ok, * FROM t_leading_zeroes_f t ORDER BY id;
SELECT t.val FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT t.val FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT t.x FROM (SELECT 1 AS x) t;
SELECT t.x FROM test_02771.t ORDER BY t.x;
SELECT t.x, l.s, r.s, toTypeName(l.s), toTypeName(r.s) FROM nr AS l FULL JOIN t AS r USING (x) ORDER BY t.x;
SELECT t.x, l.s, r.s, toTypeName(l.s), toTypeName(r.s) FROM nr AS l LEFT JOIN t AS r USING (x) ORDER BY t.x;
SELECT t.x, l.s, r.s, toTypeName(l.s), toTypeName(r.s) FROM nr AS l RIGHT JOIN t AS r USING (x) ORDER BY t.x;
SELECT t.x, l.s, r.s, toTypeName(l.s), toTypeName(r.s) FROM t AS l FULL JOIN nr AS r USING (x) ORDER BY t.x;
SELECT t.x, l.s, r.s, toTypeName(l.s), toTypeName(r.s) FROM t AS l RIGHT JOIN nr AS r USING (x) ORDER BY t.x;
SELECT t.x, tj.b FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT t.x, tj.b FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT t0.c1 FROM t0 WHERE NOT (t0.c1 OR (t0.c0 AND -1.0));
SELECT t0.c1 FROM t0 WHERE NOT (t0.c1 OR (t0.c0 AND -1524532316));
SELECT t0.c1 FROM t0 WHERE NOT (t0.c1 OR (t0.c0 AND nan));
SELECT t0.c2, t0.c1, t0.c0 FROM t0 PREWHERE t0.c0 ORDER BY ((t0.c2)>=(t0.c1)), (((- (((t0.c0)>(t0.c0))))) IS NULL) FORMAT TabSeparatedWithNamesAndTypes;
select t1.* from system.one t1 join system.one t2 on t1.dummy = t2.dummy join system.one t3 ON t1.dummy = t3.dummy;
select t1.* from t1_all t1 join t2_all t2 on t1.a = t2.a ORDER BY t1.a;
SELECT t1.*, t1.dt, t2.*, t2.dt FROM t1 JOIN t2 ON t1.foo = t2.bar WHERE t2.dt >= '2020-02-01';
SELECT t1.*, t2.* FROM (SELECT 1 AS k) t1 JOIN (SELECT -1 AS k) t2 ON t1.k = t2.k;
SELECT t1.*, t2.* FROM t1 ANTI LEFT JOIN t2 USING(x) ORDER BY t1.x, t2.x, t1.s, t2.s;
SELECT t1.*, t2.* FROM t1 ANTI LEFT JOIN t2 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t1 ANTI RIGHT JOIN t2 USING(x) ORDER BY t1.x, t2.x, t1.s, t2.s;
SELECT t1.*, t2.* FROM t1 ANTI RIGHT JOIN t2 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t1 ANY INNER JOIN t2 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t1 ANY LEFT JOIN t2 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t1 ANY RIGHT JOIN t2 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t1 FULL JOIN t2 ON t1.x = t2.x AND t1.y = t2.y ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 FULL JOIN t2 ON t1.x = t2.x AND toUInt32(intDiv(t1.y,10)) = t2.x ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 FULL JOIN t2 ON t1.x = t2.x AND toUInt64(t1.x) = intDiv(t2.y,10) ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 FULL JOIN t2 ON t1.x = t2.x ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 FULL JOIN t2 ON t1.y = t2.y ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ON t1.x = t2.x AND t1.y = t2.y ORDER BY x;
SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ON t1.x = t2.x AND toUInt32(intDiv(t1.y,10)) = t2.x ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ON t1.x = t2.x AND toUInt64(t1.x) = intDiv(t2.y,10) ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ON t1.x = t2.x ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ON t1.y = t2.y ORDER BY x;
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.x = t2.x AND t1.y = t2.y ORDER BY x;
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.x = t2.x AND toUInt32(intDiv(t1.y,10)) = t2.x ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.x = t2.x AND toUInt64(t1.x) = intDiv(t2.y,10) ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.x = t2.x ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.y = t2.y ORDER BY x;
SELECT t1.*, t2.* FROM t1 RIGHT JOIN t2 ON t1.x = t2.x AND t1.y = t2.y ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 RIGHT JOIN t2 ON t1.x = t2.x AND toUInt32(intDiv(t1.y,10)) = t2.x ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 RIGHT JOIN t2 ON t1.x = t2.x AND toUInt64(t1.x) = intDiv(t2.y,10) ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 RIGHT JOIN t2 ON t1.x = t2.x ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 RIGHT JOIN t2 ON t1.y = t2.y ORDER BY x, t2.y;
SELECT t1.*, t2.* FROM t1 SEMI LEFT JOIN t2 USING(x) ORDER BY t1.x, t2.x, t1.s, t2.s;
SELECT t1.*, t2.* FROM t1 SEMI LEFT JOIN t2 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t1 SEMI RIGHT JOIN t2 USING(x) ORDER BY t1.x, t2.x, t1.s, t2.s;
SELECT t1.*, t2.* FROM t1 SEMI RIGHT JOIN t2 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t2 ANY INNER JOIN t1 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t2 ANY LEFT JOIN t1 USING(x) ORDER BY t1.x, t2.x;
SELECT t1.*, t2.* FROM t2 ANY RIGHT JOIN t1 USING(x) ORDER BY t1.x, t2.x;
select t1.*, t2.* from table1 as t1 join table2 as t2 on t1_a = t2_a where (t1.a as t1_a) > 2 and (t2.a as t2_a) > 4;
select t1.*, t2.*, t3.* from table1 as t1 join table2 as t2 on table1.a = table2.a join table3 as t3 on table2.b = table3.b ORDER BY t1.a FORMAT PrettyCompactNoEscapes;
SELECT t1.*, t2.x FROM t1 ANY INNER JOIN t2 USING (x) ORDER BY x;
SELECT t1.*, t2.x FROM t1 ANY INNER JOIN t2 USING (x,y) ORDER BY x;
SELECT t1.*, t2.x FROM t1 ANY LEFT JOIN t2 USING (x) ORDER BY x;
SELECT t1.*, t2.x FROM t1 ANY LEFT JOIN t2 USING (x,y) ORDER BY x;
SELECT t1.1 FROM t_tuple_element;
select t1.a as a, t2.c as c from t1 join t2 on a = c;
select t1.a as a, t2.c as c from t1 join t2 on c = a;
select t1.a as c, t2.c as a from t1 join t2 on a = c;
select t1.a as c, t2.c as a from t1 join t2 on c = a;
select t1.a as c, t2.c as a from t1 join t2 on t1.a = t2.c;
select t1.a as c, t2.c as a from t1 join t2 on t2.c = t1.a;
SELECT t1.a as t1_a, t2.a as t2_a FROM distributed_table1 AS t1 GLOBAL JOIN distributed_table1 AS t2 ON t1_a = t2_a LIMIT 1;
SELECT t1.a as t1_a, t2.a as t2_a FROM source_table1 AS t1 JOIN source_table1 AS t2 ON t1_a = t2_a LIMIT 1;
select t1.a as t1_a, t2.a as t2_a, t2.b as t2_b, t3.b as t3_b from table1 as t1 join table2 as t2 on t1.a = t2.a join table3 as t3 on t2.b = t3.b ORDER BY t1.a ;
select t1.a as t1_a, t2.a as t2_a, t2.b as t2_b, t3.b as t3_b from table1 as t1 join table2 as t2 on t1.a = t2.a join table3 as t3 on t2.b = t3.b ORDER BY t1.a;
select t1.a as t1_a, t2.a as t2_a, t2.b as t2_b, t3.b as t3_b from table1 as t1 join table2 as t2 on t1_a = t2_a join table3 as t3 on t2_b = t3_b ORDER BY t1.a ;
select t1.a as t1_a, t2.a as t2_a, t2.b as t2_b, t3.b as t3_b from table1 as t1 join table2 as t2 on t1_a = t2_a join table3 as t3 on t2_b = t3_b ORDER BY t1.a;
select t1.a as t1_a, t2.a as t2_a, t2.b as t2_b, t3.b as t3_b from table1 as t1 join table2 as t2 on table1.a = table2.a join table3 as t3 on table2.b = table3.b ORDER BY t1.a ;
select t1.a as t1_a, t2.a as t2_a, t2.b as t2_b, t3.b as t3_b from table1 as t1 join table2 as t2 on table1.a = table2.a join table3 as t3 on table2.b = table3.b ORDER BY t1.a;
select t1.a as t1_a, t2.a as t2_a, t2.b as t2_b, t3.b as t3_b, (t1.a + table2.b) as t1_t2_x, (table1.a + table3.b) as t1_t3_x, (t2.b + t3.b) as t2_t3_x from table1 as t1 join table2 as t2 on t1_a = t2_a join table3 as t3 on t2_b = t3_b ORDER BY t1.a ;
select t1.a as t1_a, t2.a as t2_a, t2.b as t2_b, t3.b as t3_b, (t1.a + table2.b) as t1_t2_x, (table1.a + table3.b) as t1_t3_x, (t2.b + t3.b) as t2_t3_x from table1 as t1 join table2 as t2 on t1_a = t2_a join table3 as t3 on t2_b = t3_b ORDER BY t1.a;
select t1.a as t1_a, t2.a t2_a from table1 as t1 join table2 as t2 on table1.a = t2_a and t1.a = t2_a and t1_a = t2_a;
select t1.a as t1_a, t3.a as t3_a from t1 join t3 on t1_a = t3_a;
select t1.a t1_a, t2.a as t2_a from table1 as t1 join table2 as t2 on table1.a = table2.a and t1.a = t2.a and t1_a = t2_a;
select t1.a t1_a, t2.a from table1 as t1 join table2 as t2 on table1.a = t2.a and t1.a = t2.a and t1_a = t2.a;
select t1.a t1_a, t2.a from table1 as t1 join table2 as t2 on table1.a = table2.a and t1.a = t2.a and t1_a = t2.a;
select t1.a t1_a, t2.a from table1 as t1 join table2 as t2 on table1.a = table2.a and t1.a = table2.a and t1_a = table2.a;
select t1.a, t2.a, t2.b, t3.b from table1 as t1 join table2 as t2 on t1.a = t2.a join table3 as t3 on t2.b = t3.b ORDER BY t1.a ;
select t1.a, t2.a, t2.b, t3.b from table1 as t1 join table2 as t2 on t1.a = t2.a join table3 as t3 on t2.b = t3.b ORDER BY t1.a;
select t1.a, t2.a, t2.b, t3.b from table1 as t1 join table2 as t2 on table1.a = table2.a join table3 as t3 on table2.b = table3.b ORDER BY t1.a ;
select t1.a, t2.a, t2.b, t3.b from table1 as t1 join table2 as t2 on table1.a = table2.a join table3 as t3 on table2.b = table3.b ORDER BY t1.a;
select t1.a, t2.a, t2.b, t3.b, t3.c, t5.a, t5.b, t5.c from table1 as t1 join table2 as t2 on t1.a = t2.a join table3 as t3 on t2.b = t3.b join table5 as t5 on t3.c = t5.c ORDER BY t1.a FORMAT PrettyCompactNoEscapes;
SELECT t1.a, t2.b FROM t1, t2 WHERE t1.b = t2.b;
SELECT t1.a, t2.b, t3.b FROM t1, t2, t3 WHERE t1.a = t2.a AND t1.a = t3.a ORDER BY t2.b, t3.b;
SELECT t1.a, t2.b, t3.b FROM t1, t2, t3 WHERE t1.b = t2.b AND t1.b = t3.b;
SELECT t1.a, t2.b, t3.b, t4.b FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t1.a = t3.a AND t1.a = t4.a ORDER BY t2.b, t3.b, t4.b;
SELECT t1.a, t2.b, t3.b, t4.b FROM t1, t2, t3, t4 WHERE t1.a = t2.a AND t2.a = t3.a AND t3.a = t4.a ORDER BY t2.b, t3.b, t4.b;
SELECT t1.a, t2.b, t3.b, t4.b FROM t1, t2, t3, t4 WHERE t1.b = t2.b AND t1.b = t3.b AND t1.b = t4.b;
select t1.a, t2.b, t3.c from table1 as t1 join table2 as t2 on t1.a = t2.a join table3 as t3 on t2.b = t3.b ORDER BY t1.a;
select t1.a, t2.b, t5.c from table1 as t1 join table2 as t2 on t1.a = t2.a join table5 as t5 on t1.a = t5.a AND t2.b = t5.b ORDER BY t1.a;
select t1.a, t2.c from t1 join t2 on a = c;
select t1.a, t2.c from t1 join t2 on c = a;
select t1.a, t3.a from t1 join t3 on t1.a = t3.a;
SELECT t1.aliascol1, t2.aliascol2 FROM t1 JOIN t2 ON t1.foo = t2.bar ORDER BY t1.time, t2.time;
SELECT t1.B, t2.B FROM table1 t1 ALL INNER JOIN table2 t2 ON t1.B = t2.B ORDER BY t1.B, t2.B;
select t1.b, t2.d from t1 join t2 on a = c;
select t1.b, t2.d from t1 join t2 on c = a;
SELECT t1.dt, t2.dt FROM t1 JOIN t2 ON t1.foo = t2.bar ORDER BY t1.dt;
select t1.dummy, t2.*, t3.dummy from (select * from system.one) t1 join system.one t2 on t1.dummy = t2.dummy join system.one t3 ON t1.dummy = t3.dummy;
select t1.dummy, t2.*, t3.dummy from system.one t1 join (select dummy,0 as another_one from system.one) t2 on t1.dummy = t2.dummy OR t1.dummy = t2.another_one join system.one t3 ON t1.dummy = t3.dummy;
select t1.dummy, t2.*, t3.dummy from system.one t1 join system.one t2 on t1.dummy = t2.dummy join system.one t3 ON t1.dummy = t3.dummy;
select t1.dummy, t2.dummy, t3.dummy from system.one t1 join system.one t2 on t1.dummy = t2.dummy join system.one t3 ON t1.dummy = t3.dummy;
SELECT t1.id AS t1_id, t2.id AS t2_id, t1._sample_factor AS t1_sample_factor, t2._sample_factor AS t2_sample_factor FROM test_table_join_1 AS t1 SAMPLE 1/2 INNER JOIN test_table_join_2 AS t2 SAMPLE 1/2 ON t1.id = t2.id;
SELECT t1.id AS t1_id, t2.id AS t2_id, t1.value AS t1_value, t2.value AS t2_value FROM test_table_join_1 AS t1 FINAL INNER JOIN test_table_join_2 AS t2 FINAL ON t1.id = t2.id ORDER BY t1_id;
SELECT t1.id AS t1_id, toTypeName(t1_id), t1.value AS t1_value, toTypeName(t1_value), t2.id AS t2_id, toTypeName(t2_id), t2.value AS t2_value, toTypeName(t2_value) FROM test_table_join_1 AS t1 FULL JOIN test_table_join_2 AS t2 ON t1.id = t2.id;
SELECT t1.id AS t1_id, toTypeName(t1_id), t1.value AS t1_value, toTypeName(t1_value), t2.id AS t2_id, toTypeName(t2_id), t2.value AS t2_value, toTypeName(t2_value) FROM test_table_join_1 AS t1 LEFT JOIN test_table_join_2 AS t2 ON t1.id = t2.id;
SELECT t1.id AS t1_id, toTypeName(t1_id), t1.value AS t1_value, toTypeName(t1_value), t2.id AS t2_id, toTypeName(t2_id), t2.value AS t2_value, toTypeName(t2_value) FROM test_table_join_1 AS t1 RIGHT JOIN test_table_join_2 AS t2 ON t1.id = t2.id;
SELECT t1.id, t1.value, t2.id, t2.value FROM test_table_join_1 AS t1, test_table_join_2 AS t2;
SELECT t1.id, t1.value, t2.id, t2.value, t3.id, t3.value FROM test_table_join_1 AS t1, test_table_join_2 AS t2, test_table_join_3 AS t3;
SELECT t1.id, t1.value, t2.value FROM test_table AS t1 INNER JOIN test_table_join AS t2 ON t1.id = t2.id WHERE t1.id = 0;
SELECT t1.id, t2.id as id, t3.id as value FROM (select number as id, 42 as value from numbers(4)) t1 LEFT JOIN (select number as id, 42 as value from numbers(3)) t2 ON t1.id = t2.id LEFT JOIN (select number as id, 42 as value from numbers(2)) t3 ON t1.id = t3.id WHERE id > 0 AND value < 42 ORDER BY id;
select t1.id, t2.id FROM test_table_1 AS t1 RIGHT JOIN test_table_2 AS t2 ON (t1.id = t2.id) WHERE (acos(t2.id) <> atan(t1.id)) and (not (acos(t2.id) <> atan(t1.id)));
SELECT t1.id, test_table_join_1.id, t1.value, test_table_join_1.value, t2.id, test_table_join_2.id, t2.value, test_table_join_2.value FROM test_table_join_1 AS t1, test_table_join_2 AS t2;
SELECT t1.id, test_table_join_1.id, t1.value, test_table_join_1.value, t2.id, test_table_join_2.id, t2.value, test_table_join_2.value, t3.id, test_table_join_3.id, t3.value, test_table_join_3.value FROM test_table_join_1 AS t1, test_table_join_2 AS t2, test_table_join_3 AS t3;
SELECT t1.id1, t1.val, tj.key1, tj.b, tj.x FROM t1 ALL RIGHT JOIN tj ON t1.id1 == tj.key1 AND t1.id2 == tj.key2 ORDER BY key1 FORMAT TSVWithNames;
SELECT t1.k, t1.s, t2.x FROM ( SELECT number AS k, 'a' AS s FROM numbers(2) GROUP BY number WITH TOTALS ORDER BY number) AS t1 ANY LEFT JOIN t2 AS t2 USING(k);
SELECT t1.time as talias FROM t1 JOIN t2 ON talias = t2.time;
SELECT t1.time as talias FROM t1 JOIN t2 ON talias = t2.time_alias;
SELECT t1.time, t2.time FROM t1 JOIN t2 ON t1.aliascol1 = t2.aliascol2 ORDER BY t1.time, t2.time;
SELECT t1.value FROM (SELECT number > 5 ? 'censor.net' : 'google' as value FROM system.numbers LIMIT 10) as t1;
SELECT t1.value FROM (SELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') as value FROM system.numbers LIMIT 10) as t1;
select t1_00816.a, t2_00816.a from t1_00816 all inner join t2_00816 on t1_00816.a=t2_00816.a;
select t1_00844.f1,t2_00844.f3 from t1_00844 all inner join t2_00844 on t1_00844.f2 = t2_00844.f1 where t2_00844.f1 = '1';
select t1_distr.id from t1_distr join ( select t1_distr.id from t1_distr as d1 inner join t2_distr as d2 on t1_distr.id = t2_distr.id where t1_distr.id > 0 order by t1_distr.id ) s0 using id;
select t1_distr.id from t1_distr where t1_distr.id in ( select t1_distr.id from t1_distr as d1 inner join t2_distr as d2 on t1_distr.id = t2_distr.id where t1_distr.id > 0 order by t1_distr.id );
select t2.*, t3.* from system.one t1 join system.one t2 on t1.dummy = t2.dummy join system.one t3 ON t1.dummy = t3.dummy;
SELECT t2.`1b1` FROM t1 JOIN t2 ON a1 = b1;
select t2.name from other_table as t2 global right join remote('127.0.0.2', currentDatabase(), 'local_table') as t1 on t1.oth_id = t2.id order by t2.name;
select t2.name from remote('127.0.0.2', currentDatabase(), 'local_table') as t1 global left join other_table as t2 on t1.oth_id = t2.id order by t2.name;
SELECT t2.time as talias FROM t1 JOIN t2 ON t1.time = talias;
SELECT t2.time as talias FROM t1 JOIN t2 ON t1.time_alias = talias;
SELECT t3.id = 'l', t3.not_id = 'l' FROM t1_00848 t1 ANY LEFT JOIN t3_00848 t3 ON t1.id = t3.id ORDER BY t1.id, t3.id;
SELECT t3.id = 'l', t3.not_id = 'l' FROM t1_00848 t1 ANY LEFT JOIN t3_00848 t3 USING(id) ORDER BY id;
SELECT t3.id = 'l', t3.not_id = 'l' FROM t1_00848 t1 ANY LEFT JOIN t3_00848 t3 USING(id) ORDER BY t1.id, t3.id;
SELECT t3.id = 'l', t3.not_id = 'l' FROM t1_00848 t1 LEFT JOIN t3_00848 t3 ON t1.id = t3.id ORDER BY t1.id, t3.id;
SELECT t3.id = 'l', t3.not_id = 'l' FROM t1_00848 t1 LEFT JOIN t3_00848 t3 USING(id) ORDER BY id;
SELECT t3.id = 'l', t3.not_id = 'l' FROM t1_00848 t1 LEFT JOIN t3_00848 t3 USING(id) ORDER BY t1.id, t3.id;
select t_00725_2.*, s_00725_2.* from t_00725_2 all left join s_00725_2 on (s_00725_2.a = t_00725_2.a and s_00725_2.b = t_00725_2.b);
select t_00725_2.*, s_00725_2.* from t_00725_2 all left join s_00725_2 using (a,b);
select t_00725_4.* from t_00725_4 all left join s_00725_4 on (s_00725_4.a = t_00725_4.a and s_00725_4.b = t_00725_4.b) where s_00725_4.a = 0 and s_00725_4.b = 0;
select tab1.a1, a2, tab1.b1, second_.b2 from tab1 first any left join (select * from tab2) second_ on first.b1 = second_.a2;
select tab1.a1, tab1_copy.a1, tab1.b1 from tab1 any left join tab1_copy on tab1.b1 + 3 = tab1_copy.b1 + 2;
select tab2.*, tab3.* from tab2 any join tab3 on a2 = a3 or b2 = b3;
select tab2.*, tab3.* from tab2 any join tab3 on b2 = b3 or a2 = a3;
select table from system.dropped_tables where table = '02681_undrop_distributed' limit 1;
select table from system.dropped_tables where table = '02681_undrop_log' limit 1;
select table from system.dropped_tables where table = '02681_undrop_mergetree' limit 1;
select table from system.dropped_tables where table = '02681_undrop_multiple' limit 1;
select table from system.dropped_tables where table = '02681_undrop_no_uuid_on_cluster' limit 1;
select table from system.dropped_tables where table = '02681_undrop_replicatedmergetree' limit 1;
select table from system.dropped_tables where table = '02681_undrop_uuid_on_cluster' limit 1;
SELECT table, engine FROM system.dropped_tables WHERE database = currentDatabase() LIMIT 1;
SELECT table, name, comment FROM system.columns WHERE table = 'check_query_comment_column' AND database = currentDatabase() FORMAT PrettyCompactNoEscapes;
SELECT table, name, comment FROM system.columns WHERE table = 'check_query_comment_column' and database = currentDatabase() FORMAT PrettyCompactNoEscapes;
SELECT table, name, type FROM system.data_skipping_indices WHERE database = currentDatabase() AND table = 'tab';
select table, name, type, expr, granularity from system.data_skipping_indices where database = currentDatabase() and table = 't_index';
select table, name, type, expr, granularity from system.data_skipping_indices where database = currentDatabase() and table = 't_index_replica';
SELECT table, part_name, event_type, merge_algorithm FROM system.part_log WHERE event_date >= yesterday() AND database = currentDatabase() AND table = 'data_horizontal' ORDER BY event_time_microseconds;
SELECT table, part_name, event_type, merge_algorithm FROM system.part_log WHERE event_date >= yesterday() AND database = currentDatabase() AND table = 'data_vertical' ORDER BY event_time_microseconds;
SELECT table, part_type FROM system.parts WHERE table = 'data_compact' AND database = currentDatabase();
SELECT table, part_type FROM system.parts WHERE table = 'data_wide' AND database = currentDatabase();
SELECT table, partition, active FROM system.parts where table = 'empty' and active = 1 and database = currentDatabase();
SELECT table, partition, active FROM system.parts where table = 'empty1' and database=currentDatabase() and active = 1;
SELECT table, partition, active FROM system.parts where table = 'empty2' and database=currentDatabase() and active = 1;
SELECT table, partition, active, level from system.parts where table = 'optimize_final' and database = currentDatabase() and active = 1;
select table, partition, name, rows from system.parts where database = currentDatabase() AND active and table ='t_light' and rows > 0 order by name;
select table, partition, name, rows from system.parts where database = currentDatabase() AND active and table ='t_light' order by name;
select table, partition_id, name, rows from system.parts where database=currentDatabase() and table in ('mt', 'rmt') and active=1 order by table, name;
select table, sum(rows), sum(bytes_on_disk) sum_bytes, sum(marks_bytes) sum_marks_bytes, (sum_bytes - sum_marks_bytes) exclude_marks from system.parts_columns where active and database = currentDatabase() and table like 'test_02381%' group by table order by table;
select table1.a as t1_a, table3.a as t3_a from t1 as table1 join t3 as table3 on t1_a = t3_a;
select table1.a, table2.a, table2.b, table3.b from table1 as t1 join table2 as t2 on table1.a = table2.a join table3 as t3 on table2.b = table3.b ORDER BY t1.a ;
select table1.a, table2.a, table2.b, table3.b from table1 as t1 join table2 as t2 on table1.a = table2.a join table3 as t3 on table2.b = table3.b ORDER BY t1.a;
SELECT table1_id FROM ( SELECT first.table1_id FROM (SELECT number+1 as table1_id FROM numbers(1)) as first JOIN (SELECT number+1 as table2_id FROM numbers(1)) as second ON first.table1_id = second.table2_id JOIN (SELECT number+1 as table3_id FROM numbers(1)) as third ON first.table1_id = third.table3_id ) SETTINGS multiple_joins_try_to_keep_original_names = 1;
SELECT table1_id FROM ( SELECT first.table1_id FROM (SELECT number+1 as table1_id FROM numbers(1)) as first JOIN (SELECT number+1 as table2_id FROM numbers(1)) as second ON first.table1_id = second.table2_id JOIN (SELECT number+1 as table3_id FROM numbers(1)) as third ON first.table1_id = third.table3_id );
SELECT table2.parent_id = '', isNull(table2.parent_id) FROM table1 ANY LEFT JOIN table2 ON table1.id = table2.parent_id;
select tadig, ts, dow, sumMerge(traffic_bytes), maxMerge(last_stop), minMerge(min_radacctid), maxMerge(max_radacctid) from mv_traffic_by_tadig15min group by tadig, ts, dow;
SELECT tag_id, bitmapToArray(z), replace.from, replace.to, bitmapToArray(bitmapTransform(z, replace.from, replace.to)) FROM bitmap_column_expr_test3 ORDER BY tag_id;
select tan(0) = 0;
SELECT Tax FROM database_for_range_dict.range_dictionary ORDER BY CountryID, StartDate, EndDate;
SELECT Tax FROM database_for_range_dict.range_dictionary_nullable ORDER BY CountryID, StartDate, EndDate;
SELECT Tax FROM range_dictionary ORDER BY CountryID, StartDate, EndDate;
SELECT Tax FROM range_dictionary_nullable ORDER BY CountryID, StartDate, EndDate;
SELECT tens FROM vcounter ORDER BY tens ASC LIMIT 100 SETTINGS limit = 6, offset = 0;
SELECT tens FROM vcounter ORDER BY tens ASC LIMIT 100 SETTINGS limit = 6, offset = 5;
SELECT test, toTypeName(test), IF(test = 0, 1, 0) FROM test_nullable_float_issue7347;
SELECT test.id, test.value FROM test_table AS test;
SELECT test2.col1, test1.* FROM test2 RIGHT JOIN test1 ON test2.col1 = test1.col1 WHERE test2.col1 IS NOT NULL ORDER BY test2.col1 ;
SELECT test2.col3, test1.* FROM test2 RIGHT JOIN test1 ON test2.col1 = test1.col1 WHERE test2.col1 IS NOT NULL ORDER BY test2.col1 ;
select test2_00863.id from test1_00863, test2_00863, test3_00863 where test1_00863.code in ('1', '2', '3') and test2_00863.test1_id = test1_00863.id and test2_00863.test3_id = test3_00863.id;
SELECT test_00818.field AS other_field, test_00818.not_field AS field FROM test_00818;
select test_01103.t1_distr.id from test_01103.t1_distr join ( select test_01103.t1_distr.id from test_01103.t1_distr as d1 inner join test_01103.t2_distr as d2 on test_01103.t1_distr.id = test_01103.t2_distr.id where test_01103.t1_distr.id > 0 order by test_01103.t1_distr.id ) s0 using id;
select test_01103.t1_distr.id from test_01103.t1_distr where test_01103.t1_distr.id in ( select test_01103.t1_distr.id from test_01103.t1_distr as d1 inner join test_01103.t2_distr as d2 on test_01103.t1_distr.id = test_01103.t2_distr.id where test_01103.t1_distr.id > 0 order by test_01103.t1_distr.id );
SELECT test_function(2, 2);
SELECT test_function(number, number) as a FROM numbers(10) GROUP BY a ORDER BY a;
SELECT test_function(toUInt64(2), toUInt64(2));
SELECT test_id FROM test_table;
SELECT test_table.* FROM test_table;
SELECT test_table.a FROM test_table ORDER BY (test_table.a != test_table.a) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a != test_table.b) + 1 AND (test_table.a != test_table.c) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a < test_table.a) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a < test_table.b) + 1 AND (test_table.a < test_table.c) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a <= test_table.a) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a <= test_table.b) + 1 AND (test_table.a <= test_table.c) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a == test_table.a) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a == test_table.b) + 1 AND (test_table.a == test_table.c) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a > test_table.a) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a > test_table.b) + 1 AND (test_table.a > test_table.c) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a >= test_table.a) + 1;
SELECT test_table.a FROM test_table ORDER BY (test_table.a >= test_table.b) + 1 AND (test_table.a >= test_table.c) + 1;
SELECT test_table.COLUMNS('i'), test_table.COLUMNS('v') FROM test_table;
SELECT test_table.COLUMNS(id) FROM test_table;
SELECT test_table.COLUMNS(id), test_table.COLUMNS(value) FROM test_table;
SELECT test_table.id FROM test_table;
SELECT test_table.id, test_table.value FROM 02337_db.test_table AS test_table;
SELECT test_table.id, test_table.value FROM 02337_db.test_table;
SELECT test_table.id, test_table.value FROM test_table;
SELECT test_table.value FROM test_table;
SELECT test_table_alias.* FROM test_table AS test_table_alias SETTINGS asterisk_include_alias_columns = 1, asterisk_include_materialized_columns = 1;
SELECT test_table_alias.* FROM test_table AS test_table_alias SETTINGS asterisk_include_alias_columns = 1;
SELECT test_table_alias.* FROM test_table AS test_table_alias SETTINGS asterisk_include_materialized_columns = 1;
SELECT test_table_alias.* FROM test_table AS test_table_alias;
SELECT test_table_join_1.id, test_table_join_1.value, test_table_join_2.id, test_table_join_2.value FROM test_table_join_1, test_table_join_2;
SELECT test_table_join_1.id, test_table_join_1.value, test_table_join_2.id, test_table_join_2.value, test_table_join_3.id, test_table_join_3.value FROM test_table_join_1, test_table_join_2, test_table_join_3;
select tgamma(0) = inf;
select tgamma(1) = 1;
select tgamma(2) = 1;
select tgamma(3) = 2;
select tgamma(4) = 6;
SELECT third_column FROM {CLICKHOUSE_DATABASE:Identifier}.dict1 WHERE key_column = 12;
SELECT throwIf(0 AND 2147483646) FROM system.numbers LIMIT 10;
select throwIf(count() != 4) from remote('127.0.0.{1,2}', currentDatabase(), t3) group by a format Null;
SELECT throwIf(number == 0) FROM numbers(100) SETTINGS implicit_transaction=True;
SELECT throwIf(number == 0) FROM numbers(100);
SELECT tid, processed_at, created_at, amount FROM t FINAL ORDER BY tid;
SELECT time as talias FROM t1 JOIN t2 ON t1.time = talias;
select time FROM remote('127.0.0.{1,2}', currentDatabase(), tab) WHERE date = '2018-01-21' limit 2;
SELECT time, round(exp_smooth, 10), bar(exp_smooth, -9223372036854775807, 1048575, 50) AS bar FROM (SELECT 2 OR (number = 0) OR (number >= 1) AS value, number AS time, exponentialTimeDecayedSum(2147483646)(value, time) OVER (RANGE BETWEEN CURRENT ROW AND CURRENT ROW) AS exp_smooth FROM numbers(1) WHERE 10) WHERE 25;
SELECT timeDiff(UTCTimestamp(), now('UTC')) <= 2;
SELECT timeSlot(toDateTime('2000-01-02 03:04:05', 'UTC'));
SELECT timeslot, sumMap(statusMap.status, statusMap.requests) FROM sum_map GROUP BY timeslot ORDER BY timeslot;
SELECT timeslot, sumMap(statusMap.status, statusMap.requests).1, sumMap(statusMap.status, statusMap.requests).2 FROM sum_map GROUP BY timeslot ORDER BY timeslot;
SELECT timeSlots(toDateTime('2000-01-02 03:04:05', 'UTC'), 'wrong argument');
SELECT timeSlots(toDateTime('2000-01-02 03:04:05', 'UTC'), toUInt32(10000));
SELECT timeSlots(toDateTime('2000-01-02 03:04:05', 'UTC'), toUInt32(10000), 600);
SELECT timeSlots(toDateTime('2000-01-02 03:04:05', 'UTC'), toUInt32(600), 30);
SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.12', 2, 'UTC'), toDecimal64(10000, 0));
SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.23', 2, 'UTC'));
SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.233', 3, 'UTC'), toDecimal64(10000.12, 2), toDecimal64(634.1, 1));
SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.3456', 4, 'UTC'), toDecimal64(600, 0), toDecimal64(30, 0));
select timestamp '2001-09-28 01:00:00' + interval 23 hour;
select timestamp '2001-09-28 23:00:00' - interval 23 hour;
SELECT timestamp FROM test_datetime;
SELECT timestamp('2013-12-31 12:00:00');
SELECT timestamp('2013-12-31 12:00:00', '-100:01:02.111111');
SELECT timestamp('2013-12-31 12:00:00', '-12:01:02.111111');
SELECT timestamp('2013-12-31 12:00:00', '-1:01:02.111111');
SELECT timestamp('2013-12-31 12:00:00', '12:01:02.1');
SELECT timestamp('2013-12-31 12:00:00', '12:01:02.11');
SELECT timestamp('2013-12-31 12:00:00', '12:01:02.111');
SELECT timestamp('2013-12-31 12:00:00', '12:01:02.1111');
SELECT timestamp('2013-12-31 12:00:00', '12:01:02.11111');
SELECT timestamp('2013-12-31 12:00:00', '12:01:02.111111');
SELECT timestamp('2013-12-31 12:00:00', '32767:01:02.111111');
SELECT timestamp('2013-12-31 12:00:00', '32768:01:02.111111');
SELECT timestamp('2013-12-31 12:00:00.111111');
SELECT timestamp('2013-12-31 12:00:00.1111111');
SELECT timestamp('2013-12-31');
SELECT TIMESTAMP('2013-12-31');
SELECT timestamp();
SELECT timestamp(materialize('2013-12-31 12:00:00'), materialize('12:00:00'));
SELECT timestamp, timestamp_h, bytes FROM derived_metrics_local;
SELECT timestamp, value FROM mytable FINAL WHERE key = 5 ORDER BY timestamp DESC;
SELECT TIMESTAMP_ADD(INTERVAL 1 YEAR, DATE '2022-01-01');
select timestamp_ADD(toDate('2018-01-01'), INTERVAL 3 MONTH);
SELECT TIMESTAMP_ADD(YEAR, 1, DATE '2022-01-01');
SELECT TIMESTAMP_SUB (SELECT ILIKE INTO OUTFILE , accurateCast ) FROM TIMESTAMP_SUB ( MINUTE , ) GROUP BY accurateCast;
SELECT TIMESTAMP_SUB(DATE '2022-01-01', INTERVAL 1 YEAR);
select timestamp_sub(SQL_TSI_MONTH, 5, toDateTime('2018-12-18 01:02:03'));
SELECT TIMESTAMP_SUB(YEAR, 1, DATE '2022-01-01');
SELECT TIMESTAMPADD(INTERVAL 1 YEAR, DATE '2022-01-01');
SELECT TIMESTAMPADD(YEAR, 1, DATE '2022-01-01');
SELECT TIMESTAMPSUB(DATE '2022-01-01', INTERVAL 1 YEAR);
SELECT TIMESTAMPSUB(YEAR, 1, DATE '2022-01-01');
SELECT timezone(), timezoneOf(now());
SELECT timezoneOffset(toDateTime('2018-02-21 22:20:00', 'Australia/Lord_Howe'));
SELECT timezoneOffset(toDateTime('2018-08-21 22:20:00', 'Australia/Lord_Howe'));
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistance(Title, 'bigmir') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistance(Title, 'metrica') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistance(Title, 'metrics') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistance(Title, 'metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistance(Title, 'metriks') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistance(Title, 'как привет дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistance(Title, 'привет как дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitive(Title, 'BigMIR') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitive(Title, 'mEtrica') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitive(Title, 'metrics') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitive(Title, 'metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitive(Title, 'Metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitive(Title, 'metriKS') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitive(Title, 'как ПРИВЕТ дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitive(Title, 'ПрИвЕт кАК ДЕЛа') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'BigMIR') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'mEtrica') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'metrics') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'Metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'metriKS') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'как ПРИВЕТ дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'приВЕТ КАк ДеЛа КлИп - TuT.by') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, 'ПрИвЕт кАК ДЕЛа') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, extract(Title, 'metr')) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, extract(Title, 'как дела')) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceCaseInsensitiveUTF8(Title, Title) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, 'bigmir') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, 'metrica') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, 'metrics') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, 'metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, 'metriks') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, 'как привет дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, 'привет как дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, extract(Title, 'metr')) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, extract(Title, 'как дела')) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_distance ORDER BY ngramDistanceUTF8(Title, Title) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearch(Title, 'bigmir') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearch(Title, 'metrica') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearch(Title, 'metrics') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearch(Title, 'metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearch(Title, 'metriks') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearch(Title, 'как привет дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearch(Title, 'привет как дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitive(Title, 'BigMIR') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitive(Title, 'mEtrica') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitive(Title, 'metrics') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitive(Title, 'metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitive(Title, 'Metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitive(Title, 'metriKS') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitive(Title, 'как ПРИВЕТ дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitive(Title, 'ПрИвЕт кАК ДЕЛа') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'BigMIR') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'mEtrica') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'metrics') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'Metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'metriKS') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'как ПРИВЕТ дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'приВЕТ КАк ДеЛа КлИп - bigMir.Net') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, 'ПрИвЕт кАК ДЕЛа') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, extract(Title, 'metr')) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, extract(Title, 'как дела')) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchCaseInsensitiveUTF8(Title, Title) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, 'bigmir') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, 'metrica') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, 'metrics') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, 'metrika') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, 'metriks') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, 'как привет дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, 'привет как дела') as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, extract(Title, 'metr')) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, extract(Title, 'как дела')) as distance, Title;
SELECT Title, round(1000 * distance) FROM test_entry_distance ORDER BY ngramSearchUTF8(Title, Title) as distance, Title;
SELECT tj.a FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT tj.a FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT tj.b FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT tj.b FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT tj.x FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT tj.x FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT tj.y FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT tj.y FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT to_days(toDate('2023-09-08'));
SELECT TO_DAYS(toDate('2023-09-08'));
SELECT toBool('disable');
SELECT toBool('disabled');
SELECT toBool('enable');
SELECT toBool('enabled');
SELECT toBool('f');
SELECT toBool('false');
SELECT toBool('n');
SELECT toBool('no');
SELECT toBool('off');
SELECT toBool('on');
SELECT toBool('t');
SELECT toBool('true');
SELECT toBool('y');
SELECT toBool('yes');
SELECT toBool(-10000000000);
SELECT toBool(0);
SELECT toBool(100000000000);
SELECT toBool(100000000000.0000001);
select toBool(CAST(NULL, 'Nullable(String)'));
select toBool(number % 2 ? 'true' : NULL) from numbers(2);
SELECT toBool(sin(SUM(number))) AS x FROM ( SELECT 1 AS number ) GROUP BY number HAVING 1 AND sin(1) ORDER BY ALL SETTINGS enable_optimize_predicate_expression = 0;
SELECT toBool(sin(SUM(number))) AS x FROM ( SELECT 1 AS number ) GROUP BY number HAVING 1 AND sin(sum(number)) ORDER BY ALL SETTINGS enable_optimize_predicate_expression = 0;
SELECT toBool(sin(SUM(number))) AS x FROM ( SELECT 1 AS number ) GROUP BY number HAVING 1 AND sin(sum(number)) ORDER BY ALL SETTINGS enable_optimize_predicate_expression = 1;
SELECT toBool(sin(SUM(number))) AS x FROM ( SELECT 1 AS number ) GROUP BY number HAVING x AND sin(sum(number)) ORDER BY ALL SETTINGS enable_optimize_predicate_expression = 1;
SELECT toBool(toDecimal32(0, 2));
SELECT toBool(toDecimal32(10.10, 2));
SELECT toBool(toDecimal64(100000000000.1, 2));
select toColumnTypeName([assumeNotNull(materialize(NULL))]);
select toColumnTypeName(arrayMap(x -> [x], []));
select toColumnTypeName(arrayMap(x -> map(1, x), []));
select toColumnTypeName(arrayMap(x -> toInt32(x), []));
select toColumnTypeName(arrayMap(x -> tuple(1, x), []));
select toColumnTypeName(assumeNotNull(materialize(NULL)) * 2);
select toColumnTypeName(assumeNotNull(materialize(NULL)));
select toColumnTypeName(generateRandomStructure(5, 42));
select toColumnTypeName(map(1, assumeNotNull(materialize(NULL))));
select toColumnTypeName(toDecimal32OrZero(toString(number), 5)) from numbers(5);
select toColumnTypeName(toInt32(assumeNotNull(materialize(NULL))));
select toColumnTypeName(toInt64OrZero(toString(number))) from numbers(5);
SELECT toColumnTypeName(toLowCardinality(1));
SELECT toColumnTypeName(toLowCardinality(materialize('foo')));
select toColumnTypeName(toString(number)) from numbers(5);
select toColumnTypeName(tuple(1, assumeNotNull(materialize(NULL))));
SELECT toDate('07-08-2019');
SELECT toDate('1970-01-01') + number AS d, toISOWeek(d), toISOYear(d) FROM numbers(15);
select toDate('1991-01-02') > toDate32('1990-02-01');
select toDate('1991-02-01') < toDate32('2283-11-11');
SELECT toDate('2000-01-01') < toDateTime('2000-01-01 00:00:01', 'Asia/Istanbul');
SELECT toDate('2000-01-01') < toDateTime64('2000-01-01 00:00:01', 0, 'Asia/Istanbul');
SELECT toDate('2000-01-01') AS x, toDateTime('2000-01-01 00:00:01', 'Asia/Istanbul') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toDate('2010-01-02') AS x, toDate('2011-02-03') AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
SELECT toDate('2015-02-03') < '2015-02-04';
SELECT toDate('2015-02-03') <= '2015-02-04';
SELECT toDate('2015-02-03') = '2015-02-03';
SELECT toDate('2015-02-03') = '2015-02-04';
SELECT toDate('2015-02-03') > '2015-02-04';
SELECT toDate('2015-02-03') >= '2015-02-04';
SELECT toDate('2015-02-05') < '2015-02-04';
SELECT toDate('2015-02-05') <= '2015-02-04';
SELECT toDate('2015-02-05') > '2015-02-04';
SELECT toDate('2015-02-05') >= '2015-02-04';
SELECT toDate('2015-02-05') IN ('2015-02-04', '2015-02-05');
SELECT toDate('2015-02-05') IN ('2015-02-04', '2015-02-06');
SELECT toDate('2015-02-05') NOT IN ('2015-02-04', '2015-02-05');
SELECT toDate('2015-02-05') NOT IN ('2015-02-04', '2015-02-06');
SELECT toDate('2015-06-12') IN (toDate('2015-06-12'));
SELECT toDate('2015-06-12') IN toDate('2015-06-12');
SELECT toDate('2016-08-02 12:34:19');
SELECT toDate('2016-12-25') + number AS x, toDateTime(x) AS x_t, toISOWeek(x) AS w, toISOWeek(x_t) AS wt, toISOYear(x) AS y, toISOYear(x_t) AS yt, toStartOfISOYear(x) AS ys, toStartOfISOYear(x_t) AS yst, toDayOfYear(x) AS dy, toDayOfYear(x_t) AS dyt FROM system.numbers LIMIT 10;
SELECT toDate('2017-01-01') + INTERVAL -1 MONTH AS x;
SELECT toDate('2017-01-01') + INTERVAL -1 YEAR AS x;
SELECT toDate('2017-01-01') + INTERVAL -11 MONTH AS x;
SELECT toDate('2017-01-01') + INTERVAL -12 MONTH AS x;
SELECT toDate('2017-01-01') + INTERVAL -13 MONTH AS x;
SELECT toDate('2017-01-01') + INTERVAL 0 MONTH AS x;
SELECT toDate('2017-01-01') + INTERVAL 0 YEAR AS x;
SELECT toDate('2017-01-01') + INTERVAL 1 MONTH AS x;
SELECT toDate('2017-01-01') + INTERVAL 1 YEAR AS x;
SELECT toDate('2017-01-01') + INTERVAL 11 MONTH AS x;
SELECT toDate('2017-01-01') + INTERVAL 12 MONTH AS x;
SELECT toDate('2017-01-01') + INTERVAL 13 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL -1 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL -1 YEAR AS x;
SELECT toDate('2017-01-01') - INTERVAL -11 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL -12 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL -13 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL 0 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL 0 YEAR AS x;
SELECT toDate('2017-01-01') - INTERVAL 1 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL 1 YEAR AS x;
SELECT toDate('2017-01-01') - INTERVAL 11 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL 12 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL 13 MONTH AS x;
SELECT toDate('2017-01-01') - INTERVAL number - 15 MONTH AS x FROM system.numbers LIMIT 30;
SELECT toDate('2017-01-01') - INTERVAL number - 15 YEAR AS x FROM system.numbers LIMIT 30;
SELECT toDate('2017-06-28') < toDate('2017-07-01');
SELECT toDate('2017-06-28') > toDate('2017-07-01');
select toDate('2018-01-01') != '2018-01-01';
select toDate('2018-01-01') != toDate('2018-01-01');
select toDate('2018-01-01') < '2018-01-01';
select toDate('2018-01-01') < 1;
select toDate('2018-01-01') < toDate('2018-01-01');
select toDate('2018-01-01') == '2018-01-01';
select toDate('2018-01-01') == toDate('2018-01-01');
SELECT toDate('2018-06-21') % 12376 = toUInt16(toDate('2018-06-21')) % 12376;
SELECT toDate('2018-06-21') % 12376.8 = toUInt16(toDate('2018-06-21')) % 12376.8;
SELECT toDate('2018-06-21') % 234 = toUInt16(toDate('2018-06-21')) % 234;
SELECT toDate('2018-06-21') % 234.8 = toUInt16(toDate('2018-06-21')) % 234.8;
SELECT toDate('2018-06-21') % 23456 = toUInt16(toDate('2018-06-21')) % 23456;
SELECT toDate('2018-06-21') % 23456.8 = toUInt16(toDate('2018-06-21')) % 23456.8;
SELECT toDate('2018-09-17') AS x, toDateTime(x) AS x_t, toISOWeek(x), toISOWeek(x_t), toISOYear(x), toISOYear(x_t), toStartOfISOYear(x), toStartOfISOYear(x_t);
SELECT toDate('2018-12-25') + number AS x, toDateTime(x) AS x_t, toISOWeek(x) AS w, toISOWeek(x_t) AS wt, toISOYear(x) AS y, toISOYear(x_t) AS yt, toStartOfISOYear(x) AS ys, toStartOfISOYear(x_t) AS yst, toDayOfYear(x) AS dy, toDayOfYear(x_t) AS dyt FROM system.numbers LIMIT 10;
select toDate('2020-01-01') in (toDate32('2020-01-01'));
select toDate('2020-01-01') in 1::Int64;
select toDate('2020-01-01'), byteSize(toDate('2020-01-01')), toDateTime('2020-01-01 01:02:03'), byteSize(toDateTime('2020-01-01 01:02:03')), toDateTime64('2020-01-01 01:02:03',3), byteSize(toDateTime64('2020-01-01 01:02:03',3));
SELECT toDate('2022-02-01') AS d1 FROM numbers(18) AS number ORDER BY d1 ASC WITH FILL FROM toDateTime('2022-02-01') TO toDateTime('2022-07-01') STEP toIntervalMonth(1);
SELECT toDate('2022-08-22 01:02:03');
SELECT toDate('2022-08-22 01:02:03.1');
SELECT toDate('2022-08-22 01:02:03.123456');
SELECT toDate('2022-08-22+01:02:03');
SELECT toDate('2022-08-22T01:02:03');
SELECT toDate('2022-08-22T01:02:03.1');
SELECT toDate('2022-08-22T01:02:03.123456');
SELECT toDate('2105-12-31') + INTERVAL number MONTH FROM system.numbers LIMIT 25000 FORMAT Null;
SELECT toDate(-1), toDate(10000000000000, 'Asia/Istanbul'), toDate(100), toDate(65536, 'UTC'), toDate(65535, 'Asia/Istanbul');
SELECT toDate(0) AS x, toDecimal32(1, 0) AS y, ((x = 0) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toDate(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
select toDate(0);
SELECT toDate(1412106600, 'Asia/Istanbul');
SELECT toDate(1412106600, 'Asia/Tokyo');
SELECT toDate(1412106600, 'Europe/London');
SELECT toDate(1412106600, 'Europe/Paris');
SELECT toDate(1412106600, 'Pacific/Pitcairn');
SELECT toDate(16343);
SELECT toDate(d) AS dd FROM foo_c WHERE (dd >= '2019-02-06') AND (toDate(d) <= toDate('2019-08-09')) GROUP BY dd ORDER BY dd;
SELECT toDate(d) FROM foo_c WHERE (d > toDate('2019-02-10')) AND (d <= toDate('2022-01-01')) ORDER BY d;
SELECT toDate(d), ui FROM pk_func FINAL order by d;
SELECT toDate(s) FROM (SELECT arrayJoin(['2017-01-02', '2017-1-02', '2017-01-2', '2017-1-2', '2017/01/02', '2017/1/02', '2017/01/2', '2017/1/2', '2017-11-12']) AS s);
SELECT toDate(toDate32('1900-01-01'));
SELECT toDate(toDate32('2299-12-31'));
SELECT toDate(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toDate(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toDate(toDateTime(1412106600), 'Europe/London');
SELECT toDate(toDateTime(1412106600), 'Europe/Paris');
SELECT toDate(toDateTime(1412106600), 'Pacific/Pitcairn');
SELECT toDate(toDateTime64('1900-01-01 00:00:00.123', 3));
SELECT toDate(toDateTime64('2149-06-07 00:00:00.123', 3));
SELECT toDate(toDateTime64('2299-12-31 23:59:59.999', 3));
SELECT toDate(toDateTime64(today(), 0, 'UTC')) = toDate(toDateTime(today(), 'UTC'));
SELECT toDate(toString(toDateTime('2000-01-01 00:00:00') + number)) FROM system.numbers LIMIT 3;
select toDate(x) from values('x Nullable(String)', '2020-12-24', NULL, '0000-00-00', '', '9999-01-01');
select toDate32('1900-01-01'), toDate32(toDate('2000-01-01'));
select toDate32('1925-02-01') <= toDate('1990-02-01');
select toDate32('1925-02-01') <= toDateTime('1990-02-01');
select toDate32('1925-02-01') = '1925-02-01';
select toDate32('1925-02-01') = toDateTime64('1925-02-01',2);
select toDate32('1990-02-01') = '1990-02-01';
select toDate32('1990-02-01') = toDate('1990-02-01');
select toDate32('1990-02-01') = toDateTime('1990-02-01');
select toDate32('1990-02-01') = toDateTime64('1990-02-01',2);
select toDate32('2020-01-01') in (toDate('2020-01-01'));
select toDate32('2020-01-01') in 1::UInt64;
SELECT toDate32('2022-08-22 01:02:03');
SELECT toDate32('2022-08-22 01:02:03.1');
SELECT toDate32('2022-08-22 01:02:03.123456');
SELECT toDate32('2022-08-22T01:02:03');
SELECT toDate32('2022-08-22T01:02:03.1');
SELECT toDate32('2022-08-22T01:02:03.123456');
SELECT toDate32('2217-01-01') + INTERVAL number * 20 - 100 DAY AS x FROM system.numbers LIMIT 10;
SELECT toDate32('2217-01-01') - INTERVAL number * 4 - 20 MONTH AS x FROM system.numbers LIMIT 10;
SELECT toDate32('2217-01-01') - INTERVAL number * 4 - 20 YEAR AS x FROM system.numbers LIMIT 10;
select toDate32('2283-11-11') = toDateTime64('2283-11-11',2);
select toDate32OrZero(''), toDate32OrNull('');
select toDate32OrZero('1899-01-01'), toDate32OrNull('1899-01-01');
select toDateOrDefault('1xx', '2023-05-30'::Date);
select toDateOrDefault('1xxx');
select toDateOrDefault('2023-05-30');
select toDateOrDefault('2023-05-30', '2000-01-01'::Date);
select toDateOrDefault(-1);
select toDateOrDefault(-1, '2023-05-30'::Date);
select toDateOrDefault(19507, '2000-01-01'::Date);
select toDateOrDefault(65535);
select toDateOrDefault(65536) in ('1970-01-01', '1970-01-02');
select toDateOrDefault(cast(19 as Int128));
select toDateOrDefault(cast(19 as Int16));
select toDateOrDefault(cast(19 as Int256));
select toDateOrDefault(cast(19 as Int32));
select toDateOrDefault(cast(19 as Int64));
select toDateOrDefault(cast(19 as Int8));
select toDateOrDefault(cast(19 as UInt128));
select toDateOrDefault(cast(19 as UInt16));
select toDateOrDefault(cast(19 as UInt256));
select toDateOrDefault(cast(19 as UInt32));
select toDateOrDefault(cast(19 as UInt64));
select toDateOrDefault(cast(19 as UInt8));
SELECT toDateOrNull(arrayJoin(['', '2018', '2018-01-02', '2018-1-2', '2018-01-2', '2018-1-02', '2018-ab-cd', '2018-01-02a']));
SELECT toDateOrZero(arrayJoin(['', '2018', '2018-01-02', '2018-1-2', '2018-01-2', '2018-1-02', '2018-ab-cd', '2018-01-02a']));
select toDateTime('1991-01-02') > toDate32('1990-02-01');
select toDateTime('1991-02-01') < toDate32('2283-11-11');
SELECT toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul') AS x, materialize(toDate('2000-01-02')) AS y, 0 ? x : y AS z;
SELECT toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul') AS x, materialize(toDate('2000-01-02')) AS y, 1 ? x : y AS z;
SELECT toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul') AS x, materialize(toDate('2000-01-02')) AS y, x > y ? x : y AS z;
SELECT toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul') AS x, toDate('2000-01-02') AS y, 0 ? x : y AS z;
SELECT toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul') AS x, toDate('2000-01-02') AS y, 1 ? x : y AS z;
SELECT toDateTime('2000-01-01 00:00:00', 'Asia/Istanbul') AS x, toDate('2000-01-02') AS y, x > y ? x : y AS z;
SELECT toDateTime('2010-01-02 03:04:05') AS x, toDateTime('2011-02-03 04:05:06') AS y, least(x, y), greatest(x, y), least(x, materialize(y)), greatest(materialize(x), y), greatest(materialize(x), materialize(y)), toTypeName(least(x, y));
SELECT toDateTime('2010-10-31 00:00:00', 'Europe/Moscow') + INTERVAL 15 * number MINUTE AS src, toStartOfInterval(src, INTERVAL 2 HOUR) AS rounded, toUnixTimestamp(src) AS t FROM numbers(20);
SELECT toDateTime('2015-02-03 04:05:06') < '2015-02-03 05:06:07';
SELECT toDateTime('2015-02-03 04:05:06') <= '2015-02-03 05:06:07';
SELECT toDateTime('2015-02-03 04:05:06') = '2015-02-03 04:05:06';
SELECT toDateTime('2015-02-03 04:05:06') = '2015-02-03 05:06:07';
SELECT toDateTime('2015-02-03 04:05:06') > '2015-02-03 05:06:07';
SELECT toDateTime('2015-02-03 04:05:06') >= '2015-02-03 05:06:07';
SELECT toDateTime('2015-02-03 04:05:06') IN ('2015-02-03 04:05:06', '2015-02-03 05:06:07');
SELECT toDateTime('2015-02-03 04:05:06') IN ('2015-02-04 04:05:06', '2015-02-03 05:06:07');
SELECT toDateTime('2015-02-03 04:05:06') NOT IN ('2015-02-03 04:05:06', '2015-02-03 05:06:07');
SELECT toDateTime('2015-02-03 04:05:06') NOT IN ('2015-02-04 04:05:06', '2015-02-03 05:06:07');
SELECT toDateTime('2015-02-03 06:07:08') < '2015-02-03 05:06:07';
SELECT toDateTime('2015-02-03 06:07:08') <= '2015-02-03 05:06:07';
SELECT toDateTime('2015-02-03 06:07:08') > '2015-02-03 05:06:07';
SELECT toDateTime('2015-02-03 06:07:08') >= '2015-02-03 05:06:07';
SELECT toDateTime('2016-02-29 01:02:03') + INTERVAL number YEAR, toDateTime('2016-02-29 01:02:03') + INTERVAL number MONTH FROM system.numbers LIMIT 16;
SELECT toDateTime('2016-02-29 01:02:03') - INTERVAL 1 QUARTER;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL -1 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL -1 YEAR AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL -11 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL -12 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL -13 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL 0 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL 0 YEAR AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL 1 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL 1 YEAR AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL 11 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL 12 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') + INTERVAL 13 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL -1 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL -1 YEAR AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL -11 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL -12 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL -13 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL 0 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL 0 YEAR AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL 1 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL 1 YEAR AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL 11 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL 12 MONTH AS x;
SELECT toDateTime('2017-01-01 00:00:00') - INTERVAL 13 MONTH AS x;
SELECT toDateTime('2017-06-28 12:01:01') < toDate('2017-07-01');
SELECT toDateTime('2017-06-28 12:01:01') > toDate('2017-07-01');
SELECT toDateTime('2017-10-30 08:18:19') + INTERVAL 1 DAY + INTERVAL 1 MONTH - INTERVAL 1 YEAR;
SELECT toDateTime('2017-10-30 08:18:19') + INTERVAL 1 DAY + INTERVAL number MONTH FROM system.numbers LIMIT 20;
SELECT toDateTime('2017-10-30 08:18:19') + INTERVAL 1 HOUR + INTERVAL 1000 MINUTE + INTERVAL 10 SECOND;
SELECT toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul');
SELECT toDateTime('2018-06-21 12:12:12') % 12376 = toUInt32(toDateTime('2018-06-21 12:12:12')) % 12376;
SELECT toDateTime('2018-06-21 12:12:12') % 12376.8 = toUInt32(toDateTime('2018-06-21 12:12:12')) % 12376.8;
SELECT toDateTime('2018-06-21 12:12:12') % 234 = toUInt32(toDateTime('2018-06-21 12:12:12')) % 234;
SELECT toDateTime('2018-06-21 12:12:12') % 234.8 = toUInt32(toDateTime('2018-06-21 12:12:12')) % 234.8;
SELECT toDateTime('2018-06-21 12:12:12') % 23456 = toUInt32(toDateTime('2018-06-21 12:12:12')) % 23456;
SELECT toDateTime('2018-06-21 12:12:12') % 23456.8 = toUInt32(toDateTime('2018-06-21 12:12:12')) % 23456.8;
SELECT toDateTime('2020-01-01 00:00:00') AS a, toTypeName(a), toDateTime('2020-01-01 00:02:00.11', 2) AS b, toTypeName(b), toDateTime('2020-01-01 00:03:00', 'Asia/Istanbul') AS c, toTypeName(c), toDateTime('2020-01-01 00:04:00.22', 3, 'Asia/Istanbul') AS d, toTypeName(d), toDateTime('2020-01-01 00:05:00', 0) AS e, toTypeName(e);
SELECT toDateTime('2020-01-01 00:00:00', 'UTC') AS t, t + 1, toDate(t) + 1, t + INTERVAL 1 SECOND, t + INTERVAL 1 DAY, toTypeName(t + 1), toDateTime64(t, 3, 'UTC') + 1 AS dt64, toTypeName(dt64);
SELECT toDateTime('2020-03-21 23:00:00', 'Asia/Tehran');
SELECT toDateTime('2020-06-13 01:02:03') = '2020-06-13T01:02:03';
SELECT toDateTime('2020-10-04 00:00:00', 'Australia/Lord_Howe') + INTERVAL 15 * number MINUTE AS src, toStartOfInterval(src, INTERVAL 2 HOUR) AS rounded, toUnixTimestamp(src) AS t FROM numbers(20);
SELECT toDateTime('9223372036854775806', 7, 'Asia/Istanbul');
SELECT toDateTime('9223372036854775806', 8, 'Asia/Istanbul');
SELECT toDateTime('<Empty>');
SELECT toDateTime(-1, 'Asia/Istanbul'), toDateTime(10000000000000, 'Asia/Istanbul'), toDateTime(1000, 'Asia/Istanbul');
select toDateTime(0, '/abc');
select toDateTime(0, 'America/Los_Angeles');
SELECT toDateTime(0, 'Asia/Istanbul') AS x, toDateTime(1, 'Asia/Istanbul') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toDateTime(0, 'Asia/Istanbul') AS x, toDecimal32(1, 0) AS y, ((x = 0) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
select toDateTime(0, 'Asia/Istanbul');
SELECT toDateTime(1) + 1 = toDateTime(2);
SELECT toDateTime(1) - 1 = toDateTime(0);
SELECT toDateTime(10000, 'Asia/Calcutta');
SELECT toDateTime(1111111111.222, 3, 'Asia/Istanbul');
SELECT toDateTime(65537, toDateTime(NULL), NULL) FROM tab WHERE ((x + CAST('1', 'Nullable(UInt8)')) <= 2) AND ((x + CAST('', 'Nullable(UInt8)')) <= 256) ORDER BY toDateTime(toDateTime(-2, NULL, NULL) + 100.0001, NULL, -2, NULL) DESC NULLS LAST, x ASC NULLS LAST;
SELECT toDateTime(foo.server_time, 'UTC') FROM foo ANY INNER JOIN bar USING (dimension_1) WHERE toDate(foo.server_time, 'UTC') <= toDate('2020-04-30');
SELECT toDateTime(foo.server_time, 'UTC') FROM foo SEMI JOIN bar USING (dimension_1) WHERE toDate(foo.server_time, 'UTC') <= toDate('2020-04-30');
SELECT toDateTime(hopEnd(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, INTERVAL '3' DAY, 'US/Samoa'), 'US/Samoa');
SELECT toDateTime(hopStart(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, INTERVAL '3' DAY, 'US/Samoa'), 'US/Samoa');
SELECT toDateTime(timestamp) FROM tdm2 WHERE toHour(toDateTime(timestamp)) = 13;
SELECT toDateTime(timestamp, 'Asia/Jerusalem') FROM 02680_datetime_monotonic_check_lc WHERE toHour(toDateTime(timestamp, 'Asia/Jerusalem')) = 2;
SELECT toDateTime(toDate('2016-12-22') + number, 'Asia/Istanbul' ) AS d, toWeek(d, 8, 'Asia/Istanbul') AS week8, toWeek(d, 9, 'Asia/Istanbul') AS week9, toYearWeek(d, 8, 'Asia/Istanbul') AS yearWeek8, toYearWeek(d, 9, 'Asia/Istanbul') AS yearWeek9 FROM numbers(21);
SELECT toDateTime(toDate('2149-06-06'));
SELECT toDateTime(toDate32('1900-01-01'));
SELECT toDateTime(toDate32('2299-12-31'));
SELECT toDateTime(toDateTime64('1900-01-01 00:00:00.123', 3));
SELECT toDateTime(toDateTime64('2299-12-31 23:59:59.999', 3));
SELECT toDateTime(tumbleEnd(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, 'US/Samoa'), 'US/Samoa');
SELECT toDateTime(tumbleStart(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, 'US/Samoa'), 'US/Samoa');
select toDateTime(x, 'Asia/Istanbul') from values('x Nullable(String)', '2020-12-24 01:02:03', NULL, '0000-00-00 00:00:00', '');
SELECT toDateTime32('2020-01-01 00:00:00') AS a, toTypeName(a);
SELECT toDateTime64('-123', 3, 'UTC');
SELECT toDateTime64('1111111111.222', 3, 'Asia/Istanbul');
SELECT toDateTime64('1111111111222', 3, 'Asia/Istanbul');
SELECT toDateTime64('1234', 3, 'UTC');
SELECT toDateTime64('1925-01-02 03:04:05.678901', 6);
select toDateTime64('1925-02-02',2) > toDate32('1925-02-01');
SELECT toDateTime64('1969-12-30 18:00:12', 0, 'America/Phoenix');
SELECT toDateTime64('1969-12-31 18:00:12', 0, 'America/Phoenix');
SELECT toDateTime64('1969-12-31 18:00:12', 0, 'Asia/Istanbul');
SELECT toDateTime64('1985-03-31', 0, 'Europe/Helsinki');
select toDateTime64('1991-01-02',2) > toDate32('1990-02-01');
SELECT toDateTime64('2002-12-12 23:23:23.123', 3) AS dt64, toString(dt64) SETTINGS session_timezone = 'Asia/Phnom_Penh';
SELECT toDateTime64('2011-11-11 11:11:11.-1', 0);
SELECT toDateTime64('2011-11-11 11:11:11.-12345678901234567890', 0);
SELECT toDateTime64('2011-11-11 11:11:11.11', 0);
SELECT toDateTime64('2011-11-11 11:11:11.111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.1111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.11111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.1111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.11111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.1111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.11111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.1111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.11111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.111111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.1111111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.11111111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.111111111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.1111111111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.11111111111111111111', 0);
SELECT toDateTime64('2011-11-11 11:11:11.111111111111111111111', 0);
SELECT toDateTime64('2019-09-16 19:20:11', 3, 'UTC');
SELECT toDateTime64('2019-09-16 19:20:11.234', 3, 'Europe/Minsk');
SELECT toDateTime64('2021-03-22', 3, 'Asia/Tehran');
SELECT toDateTime64('2021-03-23', 3);
SELECT toDateTime64('2205-12-12 12:12:12', 0, 'Asia/Istanbul');
SELECT toDateTime64('2205-12-12 12:12:12', 6, 'Asia/Istanbul');
select toDateTime64('2283-11-11',2) > toDate32('1925-02-01');
SELECT toDateTime64('2299-12-31 23:59:59', 3, 'UTC');
select toDateTime64('3000-01-01 12:00:00.12345', 0) + interval 0 nanosecond;
SELECT toDateTime64(-2, 2, 'Asia/Istanbul');
SELECT toDateTime64(-2., 2, 'Asia/Istanbul');
SELECT toDateTime64(-2200000000.0, 9, 'UTC');
SELECT toDateTime64(-2300000000.0, 9, 'UTC');
SELECT toDateTime64(-999999999999.0, 9, 'UTC');
SELECT toDateTime64(0, 9, 'UTC');
SELECT toDateTime64(0.0, 9, 'UTC') ;
SELECT toDateTime64(1111111111.222, 3, 'Asia/Istanbul');
SELECT toDateTime64(9200000000.0, 9, 'UTC');
SELECT toDateTime64(9300000000.0, 9, 'UTC');
SELECT toDateTime64(bitShiftLeft(toUInt64(1), 33), 2, 'Asia/Istanbul') FORMAT Null;
SELECT toDateTime64(bitShiftLeft(toUInt64(1), 35), 2, 'Asia/Istanbul');
SELECT toDateTime64(CAST('-10500000000.1' AS Decimal64(1)), 1, 'Asia/Istanbul');
SELECT toDateTime64(CAST('10500000000.1' AS Decimal64(1)), 1, 'Asia/Istanbul');
select toDateTime64(toDate(1), 2) FORMAT Null;
select toDateTime64(toDate(1), 2, 'Asia/Istanbul');
select toDateTime64(toDate(1), 2, 'GMT');
select toDateTime64(toDateTime(1), 2, 'GMT');
select toDateTime64(toDateTime(1, 'Asia/Istanbul'), 2);
SELECT toDateTime64(toDateTime64('2022-12-12 23:23:23.123', 3), 3, 'Europe/Zurich') SETTINGS session_timezone = 'America/Denver';
SELECT toDateTime64(toFloat32(bitShiftLeft(toUInt64(1),33)), 2, 'Asia/Istanbul');
SELECT toDateTime64(toFloat64(bitShiftLeft(toUInt64(1),33)), 2, 'Asia/Istanbul') FORMAT Null;
select toDateTime64(x, 2, 'Asia/Istanbul') from values('x Nullable(String)', '2020-12-24 01:02:03', NULL, '0000-00-00 00:00:00', '');
select toDateTime64OrDefault('Aaaa e a.a.aaaaaaaaa', 9, 'UTC');
select toDateTime64OrNull('9279104477', 9);
select toDateTimeOrDefault('1xxx', 'UTC', '2023-05-30 14:38:20'::DateTime('UTC'));
select toDateTimeOrDefault('2023-05-30 14:38:20', 'UTC');
select toDateTimeOrDefault(-1, 'UTC', '2023-05-30 14:38:20'::DateTime('UTC'));
select toDateTimeOrDefault(1685457500, 'UTC');
select toDateTimeOrDefault(cast(19 as Int128), 'UTC');
select toDateTimeOrDefault(cast(19 as Int16), 'UTC');
select toDateTimeOrDefault(cast(19 as Int256), 'UTC');
select toDateTimeOrDefault(cast(19 as Int32), 'UTC');
select toDateTimeOrDefault(cast(19 as Int64), 'UTC');
select toDateTimeOrDefault(cast(19 as Int8), 'UTC');
select toDateTimeOrDefault(cast(19 as UInt128), 'UTC');
select toDateTimeOrDefault(cast(19 as UInt16), 'UTC');
select toDateTimeOrDefault(cast(19 as UInt256), 'UTC');
select toDateTimeOrDefault(cast(19 as UInt32), 'UTC');
select toDateTimeOrDefault(cast(19 as UInt64), 'UTC');
select toDateTimeOrDefault(cast(19 as UInt8), 'UTC');
SELECT toDateTimeOrNull(arrayJoin(['', '2018', '2018-01-02 01:02:03', '2018-01-02T01:02:03', '2018-01-02 01:02:03 abc']));
SELECT toDateTimeOrZero('<Empty>', 'UTC');
SELECT toDateTimeOrZero(arrayJoin(['', '2018', '2018-01-02 01:02:03', '2018-01-02T01:02:03', '2018-01-02 01:02:03 abc']), 'UTC');
SELECT today() + INTERVAL 1::Int128 DAY - today();
SELECT today() + INTERVAL 1::Int256 DAY - today();
SELECT today() + INTERVAL 1::UInt128 DAY - today();
SELECT today() + INTERVAL 1::UInt256 DAY - today();
SELECT today() - 1 = yesterday();
select today() < 2018-11-14;
SELECT today() = curdate();
SELECT today() = CURDATE();
SELECT today() = curDATE();
SELECT today() = current_date();
SELECT today() = CURRENT_DATE();
SELECT today() = current_DATE();
SELECT today() = toDate(now());
SELECT today() AS a ORDER BY a ASC WITH FILL FROM now() - toIntervalMonth(1) TO now() + toIntervalDay(1) STEP 82600;
SELECT today() IN (toDate('2014-01-01'), toDate(now()));
SELECT toDayOfMonth(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toDayOfMonth(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toDayOfMonth(toDateTime(1412106600), 'Europe/London');
SELECT toDayOfMonth(toDateTime(1412106600), 'Europe/Paris');
SELECT toDayOfMonth(toDateTime(1412106600), 'Pacific/Pitcairn');
select toDayOfMonth(x1) from t1;
SELECT toDayOfWeek('invalid');
SELECT toDayOfWeek(d), toDayOfWeek(dt), toDayOfWeek(dt64), toDayOfWeek(str_d), toDayOfWeek(str_dt), toDayOfWeek(str_dt64) FROM tab ORDER BY d;
SELECT toDayOfWeek(invalid) FROM `tab`;
SELECT toDayOfWeek(toDateTime('2016-06-15 23:00:00')), toDayOfWeek('2016-06-15'), toDayOfWeek('2016-06-15 23:00:00'), toDayOfWeek('2016-06-15 23:00:00.123456');
SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Asia/Istanbul');
SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Asia/Tokyo');
SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Europe/London');
SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Europe/Paris');
SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Pacific/Pitcairn');
select toDayOfWeek(today(), -1);
select toDayOfWeek(x1) from t1;
select toDayOfYear(x1) from t1;
SELECT toDaysSinceYearZero();
SELECT toDaysSinceYearZero(materialize(toDate('2023-09-08')));
SELECT toDaysSinceYearZero(materialize(toDate32('2023-09-08')));
SELECT toDaysSinceYearZero(materialize(toDateTime('2023-09-08 11:11:11')));
SELECT toDaysSinceYearZero(materialize(toDateTime64('2023-09-08 11:11:11.123', 3)));
SELECT toDaysSinceYearZero(materialize(toDateTime64('2023-09-08 11:11:11.123123123', 9)));
SELECT toDaysSinceYearZero(NULL);
SELECT toDaysSinceYearZero(toDate('1970-01-01'));
SELECT toDaysSinceYearZero(toDate('2023-09-08'));
SELECT toDaysSinceYearZero(toDate('2023-09-08'), 'America/Los_Angeles');
SELECT toDaysSinceYearZero(toDate32('1900-01-01'));
SELECT toDaysSinceYearZero(toDate32('2023-09-08'));
SELECT toDaysSinceYearZero(toDate32('2023-09-08'), 'America/Los_Angeles');
SELECT toDaysSinceYearZero(toDateTime('1970-01-01 00:00:00'));
SELECT toDaysSinceYearZero(toDateTime('2023-09-08 11:11:11'));
SELECT toDaysSinceYearZero(toDateTime('2023-09-08 11:11:11'), 'America/Los_Angeles');
SELECT toDaysSinceYearZero(toDateTime64('1900-01-01 00:00:00.000', 3));
SELECT toDaysSinceYearZero(toDateTime64('2023-09-08 11:11:11.123', 3));
SELECT toDaysSinceYearZero(toDateTime64('2023-09-08 11:11:11.123', 3), 'America/Los_Angeles');
SELECT toDaysSinceYearZero(toDateTime64('2023-09-08 11:11:11.123123123', 9));
SELECT toDecimal128('-0.6', 6) AS x, toUInt8(x);
SELECT toDecimal128('-0.7', 2) AS x, toUInt16(x);
SELECT toDecimal128('-0.8', 4) AS x, toUInt32(x);
SELECT toDecimal128('-0.9', 8) AS x, toUInt64(x);
SELECT toDecimal128('-1', 7) AS x, toUInt64(x);
SELECT toDecimal128('0.0', 2) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
SELECT toDecimal128('1.0', 2) AS x, asin(x), acos(x), atan(x);
SELECT toDecimal128('1.0', 5) AS x, erf(x), erfc(x);
SELECT toDecimal128('1234567890', 28) AS x, toDecimal128(x, 29), toDecimal128(toDecimal128('1234567890', 28), 29);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, -3), ceil(y, -3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, 3), ceil(y, 3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, floor(x), floor(y), floor(x, -3), floor(y, -3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, floor(x), floor(y), floor(x, 3), floor(y, 3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, round(x), round(y), round(x, -3), round(y, -3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, round(x), round(y), round(x, 3), round(y, 3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, -3), roundBankers(y, -3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, 3), roundBankers(y, 3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, -3), trunc(y, -3);
SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, 3), trunc(y, 3);
SELECT toDecimal128('18446744073709551616', 0) AS x, toUInt64(x);
SELECT toDecimal128('18446744073709551616', 8) AS x, toUInt64(x);
SELECT toDecimal128('2147483647', 10) AS x, toInt32(x), toInt32(-x);
SELECT toDecimal128('2147483649', 10) AS x, toInt32(x), toInt32(-x);
SELECT toDecimal128('42.42', 4) AS x, round(lgamma(x), 6), round(tgamma(x) / 1e50, 6);
SELECT toDecimal128('42.42', 4) AS x, toDecimal32(cbrt(x), 4) AS y, toDecimal64(y, 4) * y * y;
SELECT toDecimal128('42.42', 4) AS x, toDecimal32(log(x), 4) AS y, round(exp(y), 6);
SELECT toDecimal128('42.42', 4) AS x, toDecimal32(log10(x), 4) AS y, round(exp10(y), 6);
SELECT toDecimal128('42.42', 4) AS x, toDecimal32(log2(x), 4) AS y, round(exp2(y), 6);
SELECT toDecimal128('42.42', 4) AS x, toDecimal32(sqrt(x), 3) AS y, y * y;
SELECT toDecimal128('4294967296', 0) AS x, toUInt32(x);
SELECT toDecimal128('4294967296', 10) AS x, toUInt32(x);
SELECT toDecimal128('65536', 0) AS x, toUInt16(x);
SELECT toDecimal128('65536', 10) AS x, toUInt16(x);
SELECT toDecimal128('9223372036854775809', 6) AS x, toInt64(x);
SELECT toDecimal128(-0.1234567891123456789, 18) AS x, countEqual([x+1, x, x], x), countEqual([x, x-1, x], x), countEqual([x, x], x+0);
SELECT toDecimal128(-12345.6789, 4) AS x, ceil(x), ceil(x, 1), ceil(x, 2), ceil(x, 3), ceil(x, 4), ceil(x, 5);
SELECT toDecimal128(-12345.6789, 4) AS x, ceil(x, -1), ceil(x, -2), ceil(x, -3), ceil(x, -4), ceil(x, -5);
SELECT toDecimal128(-12345.6789, 4) AS x, floor(x), floor(x, 1), floor(x, 2), floor(x, 3), floor(x, 4), floor(x, 5);
SELECT toDecimal128(-12345.6789, 4) AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5);
SELECT toDecimal128(-12345.6789, 4) AS x, round(x), round(x, 1), round(x, 2), round(x, 3), round(x, 4), round(x, 5);
SELECT toDecimal128(-12345.6789, 4) AS x, round(x, -1), round(x, -2), round(x, -3), round(x, -4), round(x, -5);
SELECT toDecimal128(-12345.6789, 4) AS x, roundBankers(x), roundBankers(x, 1), roundBankers(x, 2), roundBankers(x, 3), roundBankers(x, 4), roundBankers(x, 5);
SELECT toDecimal128(-12345.6789, 4) AS x, roundBankers(x, -1), roundBankers(x, -2), roundBankers(x, -3), roundBankers(x, -4), roundBankers(x, -5);
SELECT toDecimal128(-12345.6789, 4) AS x, trunc(x), trunc(x, 1), trunc(x, 2), trunc(x, 3), trunc(x, 4), trunc(x, 5);
SELECT toDecimal128(-12345.6789, 4) AS x, trunc(x, -1), trunc(x, -2), trunc(x, -3), trunc(x, -4), trunc(x, -5);
SELECT toDecimal128(0.123456789123456789, 18) AS x, countEqual([x+1, x, x], x), countEqual([x, x-1, x], x), countEqual([x, x], x-0);
SELECT toDecimal128(1, 1) * toDecimal32(1, 2) x, toTypeName(x);
SELECT toDecimal128(1, 1) * toDecimal64(1, 3) x, toTypeName(x);
SELECT toDecimal128(1, 19) / toDecimal128(1, 19) SETTINGS decimal_check_overflow=1;
SELECT toDecimal128(1, 2) * toDecimal128(1, 3) x, toTypeName(x);
SELECT toDecimal128(1, 2) * toDecimal32(1, 1) x, toTypeName(x);
SELECT toDecimal128(1, 20) / toDecimal128(1, 19) SETTINGS decimal_check_overflow=1;
SELECT toDecimal128(1, 3) * toDecimal128(1, 2) x, toTypeName(x);
SELECT toDecimal128(1, 3) * toDecimal64(1, 1) x, toTypeName(x);
SELECT toDecimal128(1, 37) / toDecimal128(1, 1) SETTINGS decimal_check_overflow=1;
SELECT toDecimal128(1, 38) / toDecimal128(1, 1) SETTINGS decimal_check_overflow=1;
SELECT toDecimal128(1.555,3) IN (1.550,1.5);
SELECT toDecimal128(1.555,3) IN (1.5551);
SELECT toDecimal128(1.555,3) IN (1.5551,1.555);
SELECT toDecimal128(1.555,3) IN (1.5551,1.555000);
SELECT toDecimal128(12345.6789, 4) AS x, ceil(x), ceil(x, 1), ceil(x, 2), ceil(x, 3), ceil(x, 4), ceil(x, 5);
SELECT toDecimal128(12345.6789, 4) AS x, ceil(x, -1), ceil(x, -2), ceil(x, -3), ceil(x, -4), ceil(x, -5);
SELECT toDecimal128(12345.6789, 4) AS x, floor(x), floor(x, 1), floor(x, 2), floor(x, 3), floor(x, 4), floor(x, 5);
SELECT toDecimal128(12345.6789, 4) AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5);
SELECT toDecimal128(12345.6789, 4) AS x, round(x), round(x, 1), round(x, 2), round(x, 3), round(x, 4), round(x, 5);
SELECT toDecimal128(12345.6789, 4) AS x, round(x, -1), round(x, -2), round(x, -3), round(x, -4), round(x, -5);
SELECT toDecimal128(12345.6789, 4) AS x, roundBankers(x), roundBankers(x, 1), roundBankers(x, 2), roundBankers(x, 3), roundBankers(x, 4), roundBankers(x, 5);
SELECT toDecimal128(12345.6789, 4) AS x, roundBankers(x, -1), roundBankers(x, -2), roundBankers(x, -3), roundBankers(x, -4), roundBankers(x, -5);
SELECT toDecimal128(12345.6789, 4) AS x, trunc(x), trunc(x, 1), trunc(x, 2), trunc(x, 3), trunc(x, 4), trunc(x, 5);
SELECT toDecimal128(12345.6789, 4) AS x, trunc(x, -1), trunc(x, -2), trunc(x, -3), trunc(x, -4), trunc(x, -5);
SELECT toDecimal128(1234567890.12345678901234567890, 20), JSONExtract('{"a":1234567890.12345678901234567890, "b":"test"}', 'Tuple(a Decimal(35,20), b LowCardinality(String))');
select toDecimal128(3.1, 12) as x group by x;
select toDecimal128(42.42, 5) as d format JSONEachRow settings output_format_json_quote_decimals=1;
SELECT toDecimal128(pi(), 14) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
SELECT toDecimal128(toDecimal128('1234567890', 28), 30);
SELECT toDecimal128OrDefault('Hello', 3, 123.456::Decimal128(3)) AS x, toTypeName(x);
SELECT toDecimal128OrDefault(333, 3, 123.456::Decimal128(3)) AS x, toTypeName(x);
SELECT toDecimal128OrNull('-99999999999999999999999999999999999999', 0);
SELECT toDecimal128OrNull('99999999999999999999999999999999999999', 0);
SELECT toDecimal128OrNull('e', 3) x, isNull(x);
SELECT toDecimal128OrZero('-99999999999999999999999999999999999999', 0);
SELECT toDecimal128OrZero('99999999999999999999999999999999999999', 0);
SELECT toDecimal256(1.555,3) IN (1.550,1.5);
SELECT toDecimal256(1.555,3) IN (1.5551);
SELECT toDecimal256(1.555,3) IN (1.5551,1.555);
SELECT toDecimal256(1.555,3) IN (1.5551,1.555000);
SELECT toDecimal256(1234567890.123456789012345678901234567890, 30), JSONExtract('{"a":1234567890.12345678901234567890, "b":"test"}', 'Tuple(a Decimal(45,30), b LowCardinality(String))');
SELECT toDecimal256OrDefault('Hello', 3, 123.456::Decimal256(3)) AS x, toTypeName(x);
SELECT toDecimal256OrDefault(444, 3, 123.456::Decimal256(3)) AS x, toTypeName(x);
SELECT toDecimal32('-0.6', 6) AS x, toUInt8(x);
SELECT toDecimal32('-0.7', 2) AS x, toUInt16(x);
SELECT toDecimal32('-0.8', 4) AS x, toUInt32(x);
SELECT toDecimal32('-0.9', 8) AS x, toUInt64(x);
SELECT toDecimal32('0.0', 2) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
SELECT toDecimal32('1.0', 2) AS x, asin(x), acos(x), atan(x);
SELECT toDecimal32('1.0', 5) AS x, erf(x), erfc(x);
SELECT toDecimal32('1.1', 0);
SELECT toDecimal32('1.1', 1), toDecimal32('1.1', 2), toDecimal32('1.1', 8);
SELECT toDecimal32('11.00', 2) > 1.;
SELECT toDecimal32('4.2', 1) AS x, pow(x, 2), pow(x, 0.5);
SELECT toDecimal32('42.42', 4) AS x, round(lgamma(x), 6), round(tgamma(x) / 1e50, 6);
SELECT toDecimal32('42.42', 4) AS x, toDecimal32(cbrt(x), 4) AS y, toDecimal64(y, 4) * y * y;
SELECT toDecimal32('42.42', 4) AS x, toDecimal32(log(x), 4) AS y, round(exp(y), 6);
SELECT toDecimal32('42.42', 4) AS x, toDecimal32(log10(x), 4) AS y, round(exp10(y), 6);
SELECT toDecimal32('42.42', 4) AS x, toDecimal32(log2(x), 4) AS y, round(exp2(y), 6);
SELECT toDecimal32('42.42', 4) AS x, toDecimal32(sqrt(x), 3) AS y, y * y;
SELECT toDecimal32('e', 1);
SELECT toDecimal32(-12345.6789, 4) AS x, ceil(x), ceil(x, 1), ceil(x, 2), ceil(x, 3), ceil(x, 4), ceil(x, 5);
SELECT toDecimal32(-12345.6789, 4) AS x, ceil(x, -1), ceil(x, -2), ceil(x, -3), ceil(x, -4), ceil(x, -5);
SELECT toDecimal32(-12345.6789, 4) AS x, countEqual([x+1, x, x], x), countEqual([x, x-1, x], x), countEqual([x, x], x+0);
SELECT toDecimal32(-12345.6789, 4) AS x, floor(x), floor(x, 1), floor(x, 2), floor(x, 3), floor(x, 4), floor(x, 5);
SELECT toDecimal32(-12345.6789, 4) AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5);
SELECT toDecimal32(-12345.6789, 4) AS x, round(x), round(x, 1), round(x, 2), round(x, 3), round(x, 4), round(x, 5);
SELECT toDecimal32(-12345.6789, 4) AS x, round(x, -1), round(x, -2), round(x, -3), round(x, -4), round(x, -5);
SELECT toDecimal32(-12345.6789, 4) AS x, roundBankers(x), roundBankers(x, 1), roundBankers(x, 2), roundBankers(x, 3), roundBankers(x, 4), roundBankers(x, 5);
SELECT toDecimal32(-12345.6789, 4) AS x, roundBankers(x, -1), roundBankers(x, -2), roundBankers(x, -3), roundBankers(x, -4), roundBankers(x, -5);
SELECT toDecimal32(-12345.6789, 4) AS x, trunc(x), trunc(x, 1), trunc(x, 2), trunc(x, 3), trunc(x, 4), trunc(x, 5);
SELECT toDecimal32(-12345.6789, 4) AS x, trunc(x, -1), trunc(x, -2), trunc(x, -3), trunc(x, -4), trunc(x, -5);
SELECT toDecimal32(1, 1) * toDecimal32(1, 2) x, toTypeName(x);
SELECT toDecimal32(1, 1) * toDecimal64(1, 3) x, toTypeName(x);
SELECT toDecimal32(1, 2) * toDecimal128(1, 3) x, toTypeName(x);
SELECT toDecimal32(1, 2) * toDecimal32(1, 1) x, toTypeName(x);
SELECT toDecimal32(1, 2) / CAST(1, 'Nullable(UInt32)');
SELECT toDecimal32(1, 2) / CAST(materialize(1), 'Nullable(UInt32)');
SELECT toDecimal32(1, 2) / CAST(materialize(NULL), 'Nullable(UInt32)');
SELECT toDecimal32(1, 2) / CAST(NULL, 'Nullable(UInt32)');
SELECT toDecimal32(1, 3) * toDecimal128(1, 2) x, toTypeName(x);
SELECT toDecimal32(1, 3) * toDecimal64(1, 1) x, toTypeName(x);
SELECT toDecimal32(1.1, 0), toDecimal32(1.1, 1), toDecimal32(1.1, 2), toDecimal32(1.1, 8);
select toDecimal32(1.1, 2) as x group by x;
SELECT toDecimal32(1.555,3) IN (1.550,1.5);
SELECT toDecimal32(1.555,3) IN (1.5551);
SELECT toDecimal32(1.555,3) IN (1.5551,1.555);
SELECT toDecimal32(1.555,3) IN (1.5551,1.555000);
SELECT toDecimal32(12345.6789, 4) AS x, ceil(x), ceil(x, 1), ceil(x, 2), ceil(x, 3), ceil(x, 4), ceil(x, 5);
SELECT toDecimal32(12345.6789, 4) AS x, ceil(x, -1), ceil(x, -2), ceil(x, -3), ceil(x, -4), ceil(x, -5);
SELECT toDecimal32(12345.6789, 4) AS x, countEqual([x+1, x, x], x), countEqual([x, x-1, x], x), countEqual([x, x], x-0);
SELECT toDecimal32(12345.6789, 4) AS x, floor(x), floor(x, 1), floor(x, 2), floor(x, 3), floor(x, 4), floor(x, 5);
SELECT toDecimal32(12345.6789, 4) AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5);
SELECT toDecimal32(12345.6789, 4) AS x, round(x), round(x, 1), round(x, 2), round(x, 3), round(x, 4), round(x, 5);
SELECT toDecimal32(12345.6789, 4) AS x, round(x, -1), round(x, -2), round(x, -3), round(x, -4), round(x, -5);
SELECT toDecimal32(12345.6789, 4) AS x, roundBankers(x), roundBankers(x, 1), roundBankers(x, 2), roundBankers(x, 3), roundBankers(x, 4), roundBankers(x, 5);
SELECT toDecimal32(12345.6789, 4) AS x, roundBankers(x, -1), roundBankers(x, -2), roundBankers(x, -3), roundBankers(x, -4), roundBankers(x, -5);
SELECT toDecimal32(12345.6789, 4) AS x, trunc(x), trunc(x, 1), trunc(x, 2), trunc(x, 3), trunc(x, 4), trunc(x, 5);
SELECT toDecimal32(12345.6789, 4) AS x, trunc(x, -1), trunc(x, -2), trunc(x, -3), trunc(x, -4), trunc(x, -5);
SELECT toDecimal32(number, 4) as n1, toDecimal32(n1 / 9, 2) as n2, toDecimal32(n2, 8) FROM system.numbers LIMIT 10;
SELECT toDecimal32(number, 4) as n1, toDecimal32(n1 / 9, 8) as n2, toDecimal32(n2, 2) FROM system.numbers LIMIT 10;
SELECT toDecimal32(number, 8) as n1, toDecimal32(n1 / 9, 4) as n2, toDecimal32(n2, 2) FROM system.numbers LIMIT 10;
SELECT toDecimal32(pi(), 8) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
SELECT toDecimal32(toDecimal32('12345678', 1), 3);
select toDecimal32(x, 2) from values ('x Nullable(String)', '42', NULL, '3.14159');
SELECT toDecimal32OrDefault('Hello', 3, 123.456::Decimal32(3)) AS x, toTypeName(x);
SELECT toDecimal32OrDefault(111, 3, 123.456::Decimal32(3)) AS x, toTypeName(x);
SELECT toDecimal32OrNull('', 0) AS x, toDecimal32OrNull('-0.42', 4) AS y;
SELECT toDecimal32OrNull('-999999999', 0), toDecimal32OrNull('-1000000000', 0);
SELECT toDecimal32OrNull('1', rowNumberInBlock());
SELECT toDecimal32OrNull('1.1', 0);
SELECT toDecimal32OrNull('1.1', 1), toDecimal32OrNull('1.1', 2), toDecimal32OrNull('1.1', 8);
SELECT toDecimal32OrNull('999999999', 0), toDecimal32OrNull('1000000000', 0);
SELECT toDecimal32OrNull(1.1, 0);
SELECT toDecimal32OrZero('', 0) AS x, toDecimal32OrZero('0.42', 4) AS y;
SELECT toDecimal32OrZero('-999999999', 0), toDecimal32OrZero('-1000000000', 0);
SELECT toDecimal32OrZero('1', rowNumberInBlock());
SELECT toDecimal32OrZero('1.1', 0);
SELECT toDecimal32OrZero('1.1', 1), toDecimal32OrZero('1.1', 2), toDecimal32OrZero('1.1', 8);
SELECT toDecimal32OrZero('999999999', 0), toDecimal32OrZero('1000000000', 0);
SELECT toDecimal32OrZero(1.1, 0);
SELECT toDecimal32OrZero(CAST(-7174046, 'String'), 6);
SELECT toDecimal64('-0.6', 6) AS x, toUInt8(x);
SELECT toDecimal64('-0.7', 2) AS x, toUInt16(x);
SELECT toDecimal64('-0.8', 4) AS x, toUInt32(x);
SELECT toDecimal64('-0.9', 8) AS x, toUInt64(x);
SELECT toDecimal64('0.0', 2) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
SELECT toDecimal64('1.0', 2) AS x, asin(x), acos(x), atan(x);
SELECT toDecimal64('1.0', 5) AS x, erf(x), erfc(x);
SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, 5), ceil(y, 5), ceil(x, -5), ceil(y, -5);
SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, floor(x), floor(y), floor(x, 5), floor(y, 5), floor(x, -5), floor(y, -5);
SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, round(x), round(y), round(x, 5), round(y, 5), round(x, -5), round(y, -5);
SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, 5), roundBankers(y, 5), roundBankers(x, -5), roundBankers(y, -5);
SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, 5), trunc(y, 5), trunc(x, -5), trunc(y, -5);
SELECT toDecimal64('1234567890', 8) AS x, toDecimal64(x, 9), toDecimal64(toDecimal64('1234567890', 8), 9);
SELECT toDecimal64('2147483640.99', 2) AS x, toInt32(x), toInt32(-x);
SELECT toDecimal64('2147483649', 2) AS x, toInt32(x), toInt32(-x);
SELECT toDecimal64('42.42', 4) AS x, round(lgamma(x), 6), round(tgamma(x) / 1e50, 6);
SELECT toDecimal64('42.42', 4) AS x, toDecimal32(cbrt(x), 4) AS y, toDecimal64(y, 4) * y * y;
SELECT toDecimal64('42.42', 4) AS x, toDecimal32(log(x), 4) AS y, round(exp(y), 6);
SELECT toDecimal64('42.42', 4) AS x, toDecimal32(log10(x), 4) AS y, round(exp10(y), 6);
SELECT toDecimal64('42.42', 4) AS x, toDecimal32(log2(x), 4) AS y, round(exp2(y), 6);
SELECT toDecimal64('42.42', 4) AS x, toDecimal32(sqrt(x), 3) AS y, y * y;
SELECT toDecimal64('4294967296', 0) AS x, toUInt32(x);
SELECT toDecimal64('4294967296', 4) AS x, toUInt32(x);
SELECT toDecimal64('65536', 0) AS x, toUInt16(x);
SELECT toDecimal64('65536', 4) AS x, toUInt16(x);
SELECT toDecimal64(-12345.6789, 4) AS x, ceil(x), ceil(x, 1), ceil(x, 2), ceil(x, 3), ceil(x, 4), ceil(x, 5);
SELECT toDecimal64(-12345.6789, 4) AS x, ceil(x, -1), ceil(x, -2), ceil(x, -3), ceil(x, -4), ceil(x, -5);
SELECT toDecimal64(-12345.6789, 4) AS x, floor(x), floor(x, 1), floor(x, 2), floor(x, 3), floor(x, 4), floor(x, 5);
SELECT toDecimal64(-12345.6789, 4) AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5);
SELECT toDecimal64(-12345.6789, 4) AS x, round(x), round(x, 1), round(x, 2), round(x, 3), round(x, 4), round(x, 5);
SELECT toDecimal64(-12345.6789, 4) AS x, round(x, -1), round(x, -2), round(x, -3), round(x, -4), round(x, -5);
SELECT toDecimal64(-12345.6789, 4) AS x, roundBankers(x), roundBankers(x, 1), roundBankers(x, 2), roundBankers(x, 3), roundBankers(x, 4), roundBankers(x, 5);
SELECT toDecimal64(-12345.6789, 4) AS x, roundBankers(x, -1), roundBankers(x, -2), roundBankers(x, -3), roundBankers(x, -4), roundBankers(x, -5);
SELECT toDecimal64(-12345.6789, 4) AS x, trunc(x), trunc(x, 1), trunc(x, 2), trunc(x, 3), trunc(x, 4), trunc(x, 5);
SELECT toDecimal64(-12345.6789, 4) AS x, trunc(x, -1), trunc(x, -2), trunc(x, -3), trunc(x, -4), trunc(x, -5);
SELECT toDecimal64(-123456789.123456789, 9) AS x, countEqual([x+1, x, x], x), countEqual([x, x-1, x], x), countEqual([x, x], x+0);
select toDecimal64(-9223372036854775808, 0);
SELECT toDecimal64(0, 18) AS x, multiIf(x = 0, NULL, intDivOrZero(1, x)), multiIf(x = 0, NULL, intDivOrZero(x, 0));
SELECT toDecimal64(0, 8) = 9223372036854775807;
SELECT toDecimal64(0, 8) AS x, multiIf(x = 0, NULL, intDivOrZero(1, x)), multiIf(x = 0, NULL, intDivOrZero(x, 0));
SELECT toDecimal64(1, 1) * toDecimal32(1, 2) x, toTypeName(x);
SELECT toDecimal64(1, 1) * toDecimal64(1, 3) x, toTypeName(x);
SELECT toDecimal64(1, 2) * toDecimal128(1, 3) x, toTypeName(x);
SELECT toDecimal64(1, 2) * toDecimal32(1, 1) x, toTypeName(x);
SELECT toDecimal64(1, 3) * toDecimal128(1, 2) x, toTypeName(x);
SELECT toDecimal64(1, 3) * toDecimal64(1, 1) x, toTypeName(x);
SELECT toDecimal64(1.555,3) IN (1.550,1.5);
SELECT toDecimal64(1.555,3) IN (1.5551);
SELECT toDecimal64(1.555,3) IN (1.5551,1.555);
SELECT toDecimal64(1.555,3) IN (1.5551,1.555000);
SELECT toDecimal64(12345.6789, 4) AS x, ceil(x), ceil(x, 1), ceil(x, 2), ceil(x, 3), ceil(x, 4), ceil(x, 5);
SELECT toDecimal64(12345.6789, 4) AS x, ceil(x, -1), ceil(x, -2), ceil(x, -3), ceil(x, -4), ceil(x, -5);
SELECT toDecimal64(12345.6789, 4) AS x, floor(x), floor(x, 1), floor(x, 2), floor(x, 3), floor(x, 4), floor(x, 5);
SELECT toDecimal64(12345.6789, 4) AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5);
SELECT toDecimal64(12345.6789, 4) AS x, round(x), round(x, 1), round(x, 2), round(x, 3), round(x, 4), round(x, 5);
SELECT toDecimal64(12345.6789, 4) AS x, round(x, -1), round(x, -2), round(x, -3), round(x, -4), round(x, -5);
SELECT toDecimal64(12345.6789, 4) AS x, roundBankers(x), roundBankers(x, 1), roundBankers(x, 2), roundBankers(x, 3), roundBankers(x, 4), roundBankers(x, 5);
SELECT toDecimal64(12345.6789, 4) AS x, roundBankers(x, -1), roundBankers(x, -2), roundBankers(x, -3), roundBankers(x, -4), roundBankers(x, -5);
SELECT toDecimal64(12345.6789, 4) AS x, trunc(x), trunc(x, 1), trunc(x, 2), trunc(x, 3), trunc(x, 4), trunc(x, 5);
SELECT toDecimal64(12345.6789, 4) AS x, trunc(x, -1), trunc(x, -2), trunc(x, -3), trunc(x, -4), trunc(x, -5);
SELECT toDecimal64(123456789.123456789, 9) AS x, countEqual([x+1, x, x], x), countEqual([x, x-1, x], x), countEqual([x, x], x-0);
SELECT toDecimal64(123456789012345.12, 4), JSONExtract('{"a":123456789012345.12}', 'a', 'Decimal(30, 4)');
select toDecimal64(2.1, 4) as x group by x;
SELECT toDecimal64(4,4) - materialize(toDecimal32(2,2));
SELECT toDecimal64(4,4) - toDecimal32(2,2);
SELECT toDecimal64(number, 4) as n1, toDecimal64(n1 / 9, 2) as n2, toDecimal64(n2, 8) FROM system.numbers LIMIT 10;
SELECT toDecimal64(number, 4) as n1, toDecimal64(n1 / 9, 8) as n2, toDecimal64(n2, 2) FROM system.numbers LIMIT 10;
SELECT toDecimal64(number, 5) / 100 as x, roundDown(x, [4, 5, 6]) FROM system.numbers LIMIT 10;
SELECT toDecimal64(number, 5) / 100 as x, roundDown(x, [toDecimal32(0.04, 2), toDecimal32(0.05, 2), toDecimal32(0.06, 2)]) FROM system.numbers LIMIT 10;
SELECT toDecimal64(number, 5) / 100 as x, roundDown(x, [toDecimal64(0.04, 5), toDecimal64(0.05, 5), toDecimal64(0.06, 5)]) FROM system.numbers LIMIT 10;
SELECT toDecimal64(number, 8) as n1, toDecimal64(n1 / 9, 4) as n2, toDecimal64(n2, 2) FROM system.numbers LIMIT 10;
SELECT toDecimal64(pi(), 17) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
SELECT toDecimal64(toDecimal64('1234567890', 8), 10);
SELECT toDecimal64(toDecimal64('92233720368547758.0', 1), 2) AS x, toInt64(x), toInt64(-x);
select toDecimal64(x, 8) from values ('x Nullable(String)', '42', NULL, '3.14159');
SELECT toDecimal64OrDefault('Hello', 3, 123.456::Decimal64(3)) AS x, toTypeName(x);
SELECT toDecimal64OrDefault(222, 3, 123.456::Decimal64(3)) AS x, toTypeName(x);
SELECT toDecimal64OrNull('', 0) AS x, toDecimal64OrNull('-0.42', 3) AS y;
SELECT toDecimal64OrNull('-100000000000000000000000000000000000000', 0);
SELECT toDecimal64OrNull('-999999999999999999', 0), toDecimal64OrNull('-1000000000000000000', 0);
SELECT toDecimal64OrNull('100000000000000000000000000000000000000', 0);
SELECT toDecimal64OrNull('999999999999999999', 0), toDecimal64OrNull('1000000000000000000', 0);
SELECT toDecimal64OrNull('e', 2) x, isNull(x);
SELECT toDecimal64OrZero('', 0) AS x, toDecimal64OrZero('0.42', 3) AS y;
SELECT toDecimal64OrZero('-100000000000000000000000000000000000000', 0);
SELECT toDecimal64OrZero('-999999999999999999', 0), toDecimal64OrZero('-1000000000000000000', 0);
SELECT toDecimal64OrZero('100000000000000000000000000000000000000', 0);
SELECT toDecimal64OrZero('999999999999999999', 0), toDecimal64OrZero('1000000000000000000', 0);
SELECT toDecimalString('-128.78932312332132985464123123'::Decimal128(26), 20);
SELECT toDecimalString('128.78932312332132985464'::Decimal128(20), 20);
SELECT toDecimalString(-64.123::Float32, 10);
SELECT toDecimalString(-64.234::Float64, 10);
SELECT toDecimalString(32.345::Decimal32(3), 77);
SELECT toDecimalString(64.234::Float64, 10);
SELECT toFixedString('!#$%&(*+,-./:<=>?@[^`{|}~', 25) AS a FORMAT Markdown;
SELECT toFixedString('', 16) as value, cast(value, 'IPv6');
SELECT toFixedString('', 16) as value, toIPv6(value);
SELECT toFixedString('', 4) AS str, empty(str) AS is_empty;
SELECT toFixedString('00000000-0000-02f8-9cb8-cb1b82fb3900', 36) AS str, toUUID(str);
SELECT toFixedString('00000000-0000-04f8-9cb8-cb1b82fb3900', 36) AS str, CAST(str, 'UUID');
SELECT toFixedString('::1', 5) as value, cast(value, 'IPv6'), toIPv6(value);
SELECT toFixedString('\0abc', 4) AS str, empty(str) AS is_empty;
SELECT toFixedString('aa' , 2 ) as a, concat(a, a);
SELECT toFixedString('aa' , 2 ) as a, length(concat(a, a));
SELECT toFixedString('aa' , 2 ) as a, toTypeName(concat(a, a));
SELECT toFixedString('Hello, world!!!!', 16) AS x, bitCount(x);
select toFixedString(unhex('202005295555'), 15) > unhex('20200529') r;
select toFixedString(x, 8) from values ('x Nullable(String)', '42', NULL, 'test');
SELECT toFloat32((number - 10) / 10) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toFloat32((number - 10) / 10) AS x, round(x, 1), roundBankers(x, 1), floor(x, 1), ceil(x, 1), trunc(x, 1) FROM system.numbers LIMIT 20;
SELECT toFloat32(0.9999999) as x, toDecimal32(x, 7), toDecimal32(-x, 7), toDecimal64(x, 7), toDecimal64(-x, 7);
SELECT toFloat32(0.999999999) as x, toDecimal32(x, 9), toDecimal32(-x, 9), toDecimal64(x, 9), toDecimal64(-x, 9);
SELECT toFloat32(21.99);
SELECT toFloat32(9.999999) as x, toDecimal32(x, 6), toDecimal32(-x, 6), toDecimal64(x, 6), toDecimal64(-x, 6);
SELECT toFloat32(9.99999999) as x, toDecimal32(x, 8), toDecimal32(-x, 8), toDecimal64(x, 8), toDecimal64(-x, 8);
SELECT toFloat32(99.99999) as x, toDecimal32(x, 5), toDecimal32(-x, 5), toDecimal64(x, 5), toDecimal64(-x, 5);
SELECT toFloat32(999.9999) as x, toDecimal32(x, 4), toDecimal32(-x, 4), toDecimal64(x, 4), toDecimal64(-x, 4);
SELECT toFloat32(9999.999) as x, toDecimal32(x, 3), toDecimal32(-x, 3), toDecimal64(x, 3), toDecimal64(-x, 3);
SELECT toFloat32(99999.99) as x, toDecimal32(x, 2), toDecimal32(-x, 2), toDecimal64(x, 2), toDecimal64(-x, 2);
SELECT toFloat32(999999.9) as x, toDecimal32(x, 1), toDecimal32(-x, 1), toDecimal64(x, 1), toDecimal64(-x, 1);
SELECT toFloat32(9999999) as x, toDecimal32(x, 0), toDecimal32(-x, 0), toDecimal64(x, 0), toDecimal64(-x, 0);
SELECT toFloat32(materialize(21.99));
SELECT toFloat32(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
SELECT toFloat32(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toFloat32(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toFloat32(number - 10) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toFloat32(number - 10) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toFloat32(number - 10) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
SELECT toFloat32(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(7, 1);
SELECT toFloat32(toDecimal32(number, 1)), toFloat32(toDecimal64(number, 2)), toFloat32(toDecimal128(number, 3)) FROM numbers(12, 1);
select toFloat32OrNull('2023-01-01');
SELECT toFloat64('inf'), toFloat64('-inf'), toFloat64('INF'), toFloat64('-INF'), toFloat64('Infinity'), toFloat64('-Infinity'), toFloat64('nan'), toFloat64('-nan'), toFloat64('NAN'), toFloat64('-NAN'), toFloat64('NaN'), toFloat64('-NaN'), toFloat64OrZero('in'), toFloat64OrZero('-in'), toFloat64OrZero('INFi'), toFloat64OrZero('-INFi'), toFloat64OrZero('Infinit'), toFloat64OrZero('-Infinit'), toFloat64OrZero('na'), toFloat64OrZero('-na'), toFloat64OrZero('NANo'), toFloat64OrZero('-NANo'), toFloat64OrZero('NaN+'), toFloat64OrZero('-NaNa'), toFloat64OrZero('+Na'), toFloat32('inf'), toFloat32('-inf'), toFloat32('INF'), toFloat32('-INF'), toFloat32('Infinity'), toFloat32('-Infinity'), toFloat32('nan'), toFloat32('-nan'), toFloat32('NAN'), toFloat32('-NAN'), toFloat32('NaN'), toFloat32('-NaN'), toFloat32OrZero('in'), toFloat32OrZero('-in'), toFloat32OrZero('INFi'), toFloat32OrZero('-INFi'), toFloat32OrZero('Infinit'), toFloat32OrZero('-Infinit'), toFloat32OrZero('na'), toFloat32OrZero('-na'), toFloat32OrZero('NANo'), toFloat32OrZero('-NANo'), toFloat32OrZero('NaN+'), toFloat32OrZero('-NaNa'), toFloat32OrZero('+Na') FORMAT TabSeparated;
SELECT toFloat64((number - 10) / 10) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toFloat64((number - 10) / 10) AS x, round(x, 1), roundBankers(x, 1), floor(x, 1), ceil(x, 1), trunc(x, 1) FROM system.numbers LIMIT 20;
SELECT toFloat64(-199) % 200 as k, toTypeName(k);
SELECT toFloat64(0.999999999) as x, toDecimal32(x, 9), toDecimal32(-x, 9), toDecimal64(x, 9), toDecimal64(-x, 9);
SELECT toFloat64(0.999999999999999999) as x, toDecimal128(x, 18), toDecimal128(-x, 18);
SELECT toFloat64(0.999999999999999999) as x, toDecimal64(x, 18), toDecimal64(-x, 18);
SELECT toFloat64(9.99999999) as x, toDecimal32(x, 8), toDecimal32(-x, 8), toDecimal64(x, 8), toDecimal64(-x, 8);
SELECT toFloat64(9.99999999999999999) as x, toDecimal128(x, 17), toDecimal128(-x, 17);
SELECT toFloat64(9.99999999999999999) as x, toDecimal64(x, 17), toDecimal64(-x, 17);
SELECT toFloat64(99.9999999) as x, toDecimal32(x, 7), toDecimal32(-x, 7), toDecimal64(x, 7), toDecimal64(-x, 7);
SELECT toFloat64(99.9999999999999999) as x, toDecimal128(x, 16), toDecimal128(-x, 16);
SELECT toFloat64(99.9999999999999999) as x, toDecimal64(x, 16), toDecimal64(-x, 16);
SELECT toFloat64(999.999999) as x, toDecimal32(x, 6), toDecimal32(-x, 6), toDecimal64(x, 6), toDecimal64(-x, 6);
SELECT toFloat64(999.999999999999999) as x, toDecimal128(x, 15), toDecimal128(-x, 15);
SELECT toFloat64(999.999999999999999) as x, toDecimal64(x, 15), toDecimal64(-x, 15);
SELECT toFloat64(9999.99999) as x, toDecimal32(x, 5), toDecimal32(-x, 5), toDecimal64(x, 5), toDecimal64(-x, 5);
SELECT toFloat64(9999.99999999999999) as x, toDecimal128(x, 14), toDecimal128(-x, 14);
SELECT toFloat64(9999.99999999999999) as x, toDecimal64(x, 14), toDecimal64(-x, 14);
SELECT toFloat64(99999.9999) as x, toDecimal32(x, 4), toDecimal32(-x, 4), toDecimal64(x, 4), toDecimal64(-x, 4);
SELECT toFloat64(99999.9999999999999) as x, toDecimal128(x, 13), toDecimal128(-x, 13);
SELECT toFloat64(99999.9999999999999) as x, toDecimal64(x, 13), toDecimal64(-x, 13);
SELECT toFloat64(999999.999) as x, toDecimal32(x, 3), toDecimal32(-x, 3), toDecimal64(x, 3), toDecimal64(-x, 3);
SELECT toFloat64(999999.999999999999) as x, toDecimal128(x, 12), toDecimal128(-x, 12);
SELECT toFloat64(999999.999999999999) as x, toDecimal64(x, 12), toDecimal64(-x, 12);
SELECT toFloat64(9999999.99) as x, toDecimal32(x, 2), toDecimal32(-x, 2), toDecimal64(x, 2), toDecimal64(-x, 2);
SELECT toFloat64(9999999.99999999999) as x, toDecimal128(x, 11), toDecimal128(-x, 11);
SELECT toFloat64(9999999.99999999999) as x, toDecimal64(x, 11), toDecimal64(-x, 11);
SELECT toFloat64(99999999.9) as x, toDecimal32(x, 1), toDecimal32(-x, 1), toDecimal64(x, 1), toDecimal64(-x, 1);
SELECT toFloat64(99999999.9999999999) as x, toDecimal128(x, 10), toDecimal128(-x, 10);
SELECT toFloat64(99999999.9999999999) as x, toDecimal64(x, 10), toDecimal64(-x, 10);
SELECT toFloat64(999999999) as x, toDecimal32(x, 0), toDecimal32(-x, 0), toDecimal64(x, 0), toDecimal64(-x, 0);
SELECT toFloat64(999999999.999999999) as x, toDecimal128(x, 9), toDecimal128(-x, 9);
SELECT toFloat64(999999999.999999999) as x, toDecimal64(x, 9), toDecimal64(-x, 9);
SELECT toFloat64(9999999999.99999999) as x, toDecimal128(x, 8), toDecimal128(-x, 8);
SELECT toFloat64(99999999999.9999999) as x, toDecimal128(x, 7), toDecimal128(-x, 7);
SELECT toFloat64(999999999999.999999) as x, toDecimal128(x, 6), toDecimal128(-x, 6);
SELECT toFloat64(9999999999999.99999) as x, toDecimal128(x, 5), toDecimal128(-x, 5);
SELECT toFloat64(99999999999999.9999) as x, toDecimal128(x, 4), toDecimal128(-x, 4);
SELECT toFloat64(999999999999999.999) as x, toDecimal128(x, 3), toDecimal128(-x, 3);
SELECT toFloat64(9999999999999999.99) as x, toDecimal128(x, 2), toDecimal128(-x, 2);
SELECT toFloat64(99999999999999999.9) as x, toDecimal128(x, 1), toDecimal128(-x, 1);
SELECT toFloat64(999999999999999999) as x, toDecimal128(x, 0), toDecimal128(-x, 0);
SELECT toFloat64(a) as a from optimize_sorting order by a;
SELECT toFloat64(concat('0.00000', toString(number))) FROM system.numbers LIMIT 100;
SELECT toFloat64(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
SELECT toFloat64(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toFloat64(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toFloat64(number - 10) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toFloat64(number - 10) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toFloat64(number - 10) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
SELECT toFloat64(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(8, 1);
SELECT toFloat64(toDecimal32(number, 1)), toFloat64(toDecimal64(number, 2)), toFloat64(toDecimal128(number, 3)) FROM numbers(13, 1);
select toFloat64OrNull('2023-01-01');
SELECT toFloat64OrZero('123.456a'), toFloat64OrZero('456.789');
select toFloat64OrZero('2023-01-01');
SELECT toFloat64OrZero(arrayJoin(['123.456a', '456.789']));
SELECT toHour(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toHour(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toHour(toDateTime(1412106600), 'Europe/London');
SELECT toHour(toDateTime(1412106600), 'Europe/Paris');
SELECT toHour(toDateTime(1412106600), 'Pacific/Pitcairn');
SELECT toHour(toTimeZone(t, 'UTC')) AS toHour_UTC, toHour(toTimeZone(t, 'Asia/Jerusalem')) AS toHour_Israel, count() FROM 02680_datetime64_monotonic_check WHERE toHour_Israel = 0 GROUP BY toHour_UTC, toHour_Israel;
select toHour(toTimeZone(t, 'UTC')) as toHour_UTC, toHour(toTimeZone(t, 'Asia/Jerusalem')) as toHour_Israel, count() from test_tz_hour where toHour_Israel = 8 group by toHour_UTC, toHour_Israel;
select toHour(x1) from t1;
SELECT toInt128(0), bitPositionsToArray(toInt128(0));
SELECT toInt128(1), bitPositionsToArray(toInt128(1));
SELECT toInt128(123) AS k GROUP BY k;
SELECT toInt128(123) IN (NULL);
SELECT toInt128(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
SELECT toInt128(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toInt128(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toInt128(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(4, 1);
select toInt128OrDefault('-1', cast(-2 as Int128));
select toInt128OrDefault('-1xx', cast(-2 as Int128));
SELECT toInt16('-32768');
SELECT toInt16(-1), bitPositionsToArray(toInt16(-1));
SELECT toInt16(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt16(0), bitPositionsToArray(toInt16(0));
SELECT toInt16(1), bitPositionsToArray(toInt16(1));
select toInt16(32765), bitPositionsToArray(toInt16(32765));
select toInt16(32768), bitPositionsToArray(toInt16(32768));
SELECT toInt16(9999) as x, toDecimal32(x, 0), toDecimal32(-x, 0), toDecimal64(x, 0), toDecimal64(-x, 0);
select toInt16(number * 2) as x from numbers(42) order by x desc;
SELECT toInt16(number - 10) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toInt16(number - 10) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toInt16(number - 10) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
SELECT toInt16(toRelativeWeekNum(toDateTime64('1960-11-30 18:00:11.999', 3, 'UTC')));
select toInt16OrDefault('-1', cast(-2 as Int16));
select toInt16OrDefault('-1xx', cast(-2 as Int16));
SELECT toInt256(0), bitPositionsToArray(toInt256(0));
SELECT toInt256(1), bitPositionsToArray(toInt256(1));
SELECT toInt256(123) AS k GROUP BY k;
SELECT toInt256(123) IN (NULL);
SELECT toInt256(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
SELECT toInt256(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toInt256(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toInt256(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(5, 1);
SELECT toInt256(toDecimal32(number, 1)), toInt256(toDecimal64(number, 2)), toInt256(toDecimal128(number, 3)) FROM numbers(14, 1);
select toInt256OrDefault('-1', cast(-2 as Int256));
select toInt256OrDefault('-1xx', cast(-2 as Int256));
SELECT toInt32('-2147483648');
SELECT toInt32(-199) % 200 as k, toTypeName(k);
SELECT toInt32(-199) % toInt16(-200) as k, toTypeName(k);
SELECT toInt32(-199) % toUInt16(200) as k, toTypeName(k);
SELECT toInt32(-199) % toUInt32(200) as k, toTypeName(k);
SELECT toInt32(-199) % toUInt64(200) as k, toTypeName(k);
SELECT toInt32(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt32(0), bitPositionsToArray(toInt32(0));
SELECT toInt32(1), bitPositionsToArray(toInt32(1));
SELECT toInt32(999999999) as x, toDecimal32(x, 0), toDecimal32(-x, 0), toDecimal64(x, 0), toDecimal64(-x, 0);
SELECT toInt32(999999999) as x, toDecimal64(x, 9), toDecimal64(-x, 9), toDecimal128(x, 29), toDecimal128(-x, 29);
SELECT toInt32([toUInt8(NULL)], NULL), (mapSubtract(([toUInt8(256), 10], [toInt32(-9223372036854775808), 1025]), ([toUInt8(65535), 0], [toInt16(0.), -9223372036854775808])), [toUInt8(-1), toInt32(([toUInt8(9223372036854775807), -1], [toInt32(255), 65536]), NULL)]), toUInt8(([2, 9223372036854775807], [toFloat32('0.0000065536'), 2]), 9223372036854775807, NULL), ([toUInt8(1024), 255], toUInt8(3), [toInt16(-2)]), [NULL];
SELECT toInt32(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
select toInt32(number * 2) as x from numbers(42) order by x desc;
SELECT toInt32(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toInt32(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toInt32(number - 10) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toInt32(number - 10) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toInt32(number - 10) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
select toInt32(number) as n, neighbor(n, 1, -10) from numbers(3);
SELECT toInt32(number) as x, roundDown(x, [e(), pi(), pi(), e()]) FROM system.numbers LIMIT 10;
SELECT toInt32(number) DIV -1 FROM numbers(1, 10);
SELECT toInt32(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(1, 1);
SELECT toInt32(toDecimal128(number, 3)), toInt64(toDecimal128(number, 3)), toInt128(toDecimal128(number, 3)) FROM numbers(11, 1);
SELECT toInt32(toDecimal32(number, 1)), toInt64(toDecimal32(number, 1)), toInt128(toDecimal32(number, 1)) FROM numbers(9, 1);
SELECT toInt32(toDecimal64(number, 2)), toInt64(toDecimal64(number, 2)), toInt128(toDecimal64(number, 2)) FROM numbers(10, 1);
select toInt32OrDefault('-1', cast(-2 as Int32));
select toInt32OrDefault('-1xx', cast(-2 as Int32));
SELECT toInt32OrNull('-2147483648');
select toInt64('-1');
SELECT toInt64('-2147483647') AS x, toDecimal32(x, 0);
SELECT toInt64('-9223372036854775808');
SELECT toInt64('2147483649') AS x, toDecimal32(x, 0);
SELECT toInt64(0) as i0, toUInt64(0) as u0, toInt64(9223372036854775807) as ip, toInt64(-9223372036854775808) as in, toUInt64(18446744073709551615) as up, [toInt64(0)] as arr, (toUInt64(0), toUInt64(0)) as tuple GROUP BY i0, u0, ip, in, up, arr, tuple WITH TOTALS FORMAT JSON;
SELECT toInt64(0) as i0, toUInt64(0) as u0, toInt64(9223372036854775807) as ip, toInt64(-9223372036854775808) as in, toUInt64(18446744073709551615) as up, [toInt64(0)] as arr, (toUInt64(0), toUInt64(0)) as tuple GROUP BY i0, u0, ip, in, up, arr, tuple WITH TOTALS FORMAT JSONCompact;
SELECT toInt64(0) as i0, toUInt64(0) as u0, toInt64(9223372036854775807) as ip, toInt64(-9223372036854775808) as in, toUInt64(18446744073709551615) as up, [toInt64(0)] as arr, (toUInt64(0), toUInt64(0)) as tuple GROUP BY i0, u0, ip, in, up, arr, tuple WITH TOTALS FORMAT JSONEachRow;
SELECT toInt64(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt64(0), bitPositionsToArray(toInt64(0));
SELECT toInt64(1), bitPositionsToArray(toInt64(1));
SELECT toInt64(999999999) as x, toDecimal32(x, 0), toDecimal32(-x, 0), toDecimal64(x, 0), toDecimal64(-x, 0);
SELECT toInt64(999999999) as x, toDecimal64(x, 9), toDecimal64(-x, 9), toDecimal128(x, 29), toDecimal128(-x, 29);
SELECT toInt64(999999999999999999) as x, toDecimal128(x, 0), toDecimal128(-x, 0);
SELECT toInt64(999999999999999999) as x, toDecimal128(x, 20), toDecimal128(-x, 20);
SELECT toInt64(999999999999999999) as x, toDecimal64(x, 0), toDecimal64(-x, 0);
SELECT toInt64(inf);
SELECT toInt64(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
select toInt64(number * 2) as x from numbers(42) order by x desc;
SELECT toInt64(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toInt64(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toInt64(number - 10) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toInt64(number - 10) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toInt64(number - 10) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
SELECT toInt64(number) DIV -1 FROM numbers(1, 10);
SELECT toInt64(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(2, 1);
SELECT toInt64(partition) as p FROM system.parts WHERE table='table1' and database=currentDatabase() ORDER BY p;
select toInt64(x) from values('x Nullable(String)', '42', NULL, '0', '', '256');
select toInt64OrDefault('-1', cast(-2 as Int64));
select toInt64OrDefault('-1xx', cast(-2 as Int64));
SELECT toInt8('-128');
SELECT toInt8(-1), bitPositionsToArray(toInt8(-1));
SELECT toInt8(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toInt8(0), bitPositionsToArray(toInt8(0));
SELECT toInt8(1), bitPositionsToArray(toInt8(1));
SELECT toInt8(127), bitPositionsToArray(toInt8(127));
SELECT toInt8(128), bitPositionsToArray(toInt8(128));
SELECT toInt8(99) as x, toDecimal32(x, 0), toDecimal32(-x, 0), toDecimal64(x, 0), toDecimal64(-x, 0);
select toInt8(number * 2) as x from numbers(42) order by x desc;
SELECT toInt8(number - 10) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toInt8(number - 10) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toInt8(number - 10) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
select toInt8OrDefault('-1', cast(-2 as Int8));
select toInt8OrDefault('-1xx', cast(-2 as Int8));
SELECT toIntervalDay(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT toIntervalDay(lc) as e, toTypeName(e) FROM t1;
SELECT toIntervalHour(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT toIntervalMinute(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT toIntervalMinute(lc) as e, toTypeName(e) FROM t1;
SELECT toIntervalMinute(lc), toTypeName(materialize(r.lc)) FROM t1 AS l INNER JOIN t2 as r USING (lc);
SELECT toIntervalMonth(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT toIntervalQuarter(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT toIntervalSecond(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT toIntervalSecond(now64());
SELECT toIntervalYear(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;
SELECT toIPv4('');
SELECT toIPv4('127.0.0.1');
SELECT toIPv4('test');
select toIPv4(CAST(NULL, 'Nullable(String)'));
select toIPv4(number % 2 ? '0.0.0.0' : NULL) from numbers(2);
SELECT toIPv4(toIPv6('::afff:1.2.3.4'));
SELECT toIPv4(toIPv6('::ffff:1.2.3.4'));
SELECT toIPv4OrDefault('127.0.0.1');
SELECT toIPv4OrDefault('hello') as v, toTypeName(v);
select toIPv4OrDefault(number % 2 ? '' : NULL) from numbers(2);
SELECT toIPv4OrDefault(toIPv6('::afff:1.2.3.4'));
SELECT toIPv4OrNull('127.0.0.1');
SELECT toIPv4OrNull('test');
select toIPv4OrNull(number % 2 ? '' : NULL) from numbers(2);
SELECT toIPv6('');
SELECT toIPv6('127.0.0.' || toString(number)) FROM numbers(13);
SELECT toIPv6('127.0.0.1');
SELECT toIPv6('::.1.2.3');
SELECT toIPv6('::ffff:127.0.0.1');
SELECT toIPv6('test');
select toIPv6(CAST(NULL, 'Nullable(String)'));
select toIPv6(number % 2 ? '0000:0000:0000:0000:0000:0000:0000:0000' : NULL) from numbers(2);
SELECT toIPv6OrDefault('::ffff:127.0.0.1');
SELECT toIPv6OrDefault('hello') as v, toTypeName(v);
select toIPv6OrDefault(number % 2 ? '' : NULL) from numbers(2);
SELECT toIPv6OrNull('::.1.2.3');
SELECT toIPv6OrNull('::ffff:127.0.0.1');
SELECT toIPv6OrNull('test');
select toIPv6OrNull(number % 2 ? '' : NULL) from numbers(2);
select toISOWeek(x1) from t1;
select toISOYear(x1) from t1;
select toJSONString(map('1234', '5678'));
SELECT tokens('test');
SELECT tokens('test1, test2, test3, test4');
SELECT tokens('test1, test2, test3');
SELECT tokens('test1,;
SELECT tokens('ё ё జ్ఞ‌ా 本気ですか ﷺ ᾂ ΐ שּ');
SELECT tokens('ё, ё, జ్ఞ‌ా, 本気ですか, ﷺ, ᾂ, ΐ, שּ');
SELECT tokens('ё, ё, జ్ఞ‌ా, 本気ですか, ﷺ, ᾂ, ΐ, שּ');
SELECT tokens('ё;
SELECT tokens(materialize('test'));
SELECT tokens(materialize('test1, test2, test3, test4'));
SELECT tokens(materialize('test1, test2, test3'));
SELECT tokens(materialize('test1,;
SELECT tokens(materialize('ё ё జ్ఞ‌ా 本気ですか ﷺ ᾂ ΐ שּ'));
SELECT tokens(materialize('ё, ё, జ్ఞ‌ా, 本気ですか, ﷺ, ᾂ, ΐ, שּ'));
SELECT tokens(materialize('ё, ё, జ్ఞ‌ా, 本気ですか, ﷺ, ᾂ, ΐ, שּ'));
SELECT tokens(materialize('ё;
SELECT toLastDayOfWeek(toDate(16433), 0, 'Asia/Istanbul');
SELECT toLastDayOfWeek(toDate(16433), 1, 'Asia/Istanbul');
SELECT toLastDayOfWeek(toDateTime(1419800400), 0, 'Asia/Istanbul');
SELECT toLastDayOfWeek(toDateTime(1419800400), 0, 'Asia/Tokyo');
SELECT toLastDayOfWeek(toDateTime(1419800400), 0, 'Europe/London');
SELECT toLastDayOfWeek(toDateTime(1419800400), 0, 'Europe/Paris');
SELECT toLastDayOfWeek(toDateTime(1419800400), 0, 'Pacific/Pitcairn');
SELECT toLastDayOfWeek(toDateTime(1419800400), 1, 'Asia/Istanbul');
SELECT toLastDayOfWeek(toDateTime(1419800400), 1, 'Asia/Tokyo');
SELECT toLastDayOfWeek(toDateTime(1419800400), 1, 'Europe/London');
SELECT toLastDayOfWeek(toDateTime(1419800400), 1, 'Europe/Paris');
SELECT toLastDayOfWeek(toDateTime(1419800400), 1, 'Pacific/Pitcairn');
select toLastDayOfWeek(x1) from t1;
SELECT toLowCardinality('a') AS s, toTypeName(s), toTypeName(length(s)) from system.one;
select toLowCardinality('a') as val group by val order by val;
SELECT toLowCardinality(toInt256(1));
SELECT toLowCardinality(toIntervalDay(1));
SELECT toLowCardinality(toIntervalHour(1));
SELECT toLowCardinality(toIntervalMinute(1));
SELECT toLowCardinality(toIntervalQuarter(1));
SELECT toLowCardinality(toIntervalSecond(1));
SELECT toLowCardinality(toIntervalWeek(1));
SELECT toLowCardinality(toIntervalYear(1));
select toLowCardinality(z) as val from (select arrayJoin(['c', 'd']) as z) group by val order by val;
SELECT toMinute(toDateTime(10000, 'Asia/Calcutta'));
SELECT toMinute(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toMinute(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toMinute(toDateTime(1412106600), 'Europe/London');
SELECT toMinute(toDateTime(1412106600), 'Europe/Paris');
SELECT toMinute(toDateTime(1412106600), 'Pacific/Pitcairn');
select toMinute(x1) from t1;
SELECT toModifiedJulianDay('1858-11-16');
SELECT toModifiedJulianDay('1858-11-17');
SELECT toModifiedJulianDay('2020-11-01');
SELECT toModifiedJulianDay('unparsable');
SELECT toModifiedJulianDay(d) FROM toModifiedJulianDay_test;
SELECT toModifiedJulianDay(NULL);
SELECT toModifiedJulianDayOrNull('1999-02-29');
SELECT toModifiedJulianDayOrNull('1999-13-32');
SELECT toModifiedJulianDayOrNull('2020-11-01');
SELECT toModifiedJulianDayOrNull('unparsable');
select toMonday(toDate(0));
SELECT toMonday(toDate(16433), 'Asia/Istanbul');
select toMonday(toDateTime(0, 'Africa/Monrovia'));
select toMonday(toDateTime(0, 'America/Los_Angeles'));
select toMonday(toDateTime(0, 'America/Paramaribo'));
select toMonday(toDateTime(0, 'Asia/Istanbul'));
SELECT toMonday(toDateTime(1419800400), 'Asia/Istanbul');
SELECT toMonday(toDateTime(1419800400), 'Asia/Tokyo');
SELECT toMonday(toDateTime(1419800400), 'Europe/London');
SELECT toMonday(toDateTime(1419800400), 'Europe/Paris');
SELECT toMonday(toDateTime(1419800400), 'Pacific/Pitcairn');
select toMonday(x1) from t1;
SELECT toMonth(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toMonth(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toMonth(toDateTime(1412106600), 'Europe/London');
SELECT toMonth(toDateTime(1412106600), 'Europe/Paris');
SELECT toMonth(toDateTime(1412106600), 'Pacific/Pitcairn');
select toMonth(x1) from t1;
SELECT toNullable('2023-02-09'::Date + number * 10) AS d FROM numbers(2) ORDER BY d WITH FILL;
SELECT toNullable(0) + 1 AS x, toTypeName(x), toColumnTypeName(x);
SELECT toNullable(0) + materialize(1) AS x, toTypeName(x), toColumnTypeName(x);
SELECT toNullable(materialize(0)) + 1 AS x, toTypeName(x), toColumnTypeName(x);
SELECT toNullable(materialize(0)) + materialize(1) AS x, toTypeName(x), toColumnTypeName(x);
SELECT toNullable(NULL);
select toNullable(os_name) AS os_name, count() from (SELECT CAST('iphone' AS Enum8('iphone' = 1, 'android' = 2)) AS os_name) group by os_name WITH TOTALS;
SELECT toNullable(toDecimal128(128, 0)) AS x, assumeNotNull(x);
SELECT toNullable(toDecimal32(32, 0)) AS x, assumeNotNull(x);
SELECT toNullable(toDecimal64(64, 0)) AS x, assumeNotNull(x);
SELECT toNullable(toInt128(321)) AS k GROUP BY k;
SELECT toNullable(toInt128(321)) IN (NULL);
SELECT toNullable(toInt256(321)) AS k GROUP BY k;
SELECT toNullable(toInt256(321)) IN (NULL);
SELECT toNullable(toInt32(2)) user_id WHERE joinGet(test_joinGet, 'name', user_id) != '';
SELECT toNullable(toUInt256(321)) AS k GROUP BY k;
SELECT toNullable(toUInt256(321)) IN (NULL);
SELECT TOP 5 * FROM numbers(10);
SELECT topK(10)(n) FROM (SELECT if(number % 100 < 10, number % 10, number) AS n FROM system.numbers LIMIT 100000);
SELECT topK(emptyArrayInt16());
SELECT topKWeighted(10)(toString(number), number) from numbers(3000000);
SELECT topKWeighted(2)(x, weight), topK(2)(x) FROM (SELECT t.1 AS x, t.2 AS weight FROM (SELECT arrayJoin([('hello', 1), ('world', 1), ('goodbye', 1), ('abc', 1)]) AS t));
SELECT topKWeighted(2)(x, weight), topK(2)(x) FROM (SELECT t.1 AS x, t.2 AS weight FROM (SELECT arrayJoin([('hello', 1), ('world', 1), ('goodbye', 2), ('abc', 1)]) AS t));
SELECT topKWeighted(5)(n, weight) FROM (SELECT number as n, number as weight from system.numbers LIMIT 100);
SELECT topKWeightedMerge(1)(initializeAggregation('topKWeightedState(1)', nan, arrayJoin(range(10))));
SELECT topKWeightedMerge(10)(state) FROM (SELECT initializeAggregation('topKWeightedState(10)', 1, number) AS state FROM system.numbers LIMIT 1000);
SELECT topKWeightedMerge(10)(state) FROM (SELECT initializeAggregation('topKWeightedState(10)', number, number) AS state FROM system.numbers LIMIT 1000);
SELECT topKWeightedState(2)(now(), 1) FORMAT Null;
select toQuarter(x1) from t1;
SELECT toRelativeDayNum(toDateTime(1412106600), 'Asia/Istanbul') - toRelativeDayNum(toDateTime(0), 'Asia/Istanbul');
SELECT toRelativeDayNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeDayNum(toDateTime(0), 'Asia/Tokyo');
SELECT toRelativeDayNum(toDateTime(1412106600), 'Europe/London') - toRelativeDayNum(toDateTime(0), 'Europe/London');
SELECT toRelativeDayNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeDayNum(toDateTime(0), 'Europe/Paris');
select toRelativeDayNum(x1, 'Asia/Istanbul') from t1;
SELECT toRelativeHourNum(toDateTime(1412106600), 'Asia/Istanbul') - toRelativeHourNum(toDateTime(0), 'Asia/Istanbul');
SELECT toRelativeHourNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeHourNum(toDateTime(0), 'Asia/Tokyo');
SELECT toRelativeHourNum(toDateTime(1412106600), 'Europe/London') - toRelativeHourNum(toDateTime(0), 'Europe/London');
SELECT toRelativeHourNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeHourNum(toDateTime(0), 'Europe/Paris');
SELECT toRelativeHourNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeHourNum(toDateTime(0), 'Pacific/Pitcairn');
select toRelativeHourNum(x1, 'Asia/Istanbul') from t1;
SELECT toRelativeMinuteNum(toDateTime(1412106600), 'Asia/Istanbul') - toRelativeMinuteNum(toDateTime(0), 'Asia/Istanbul');
SELECT toRelativeMinuteNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeMinuteNum(toDateTime(0), 'Asia/Tokyo');
SELECT toRelativeMinuteNum(toDateTime(1412106600), 'Europe/London') - toRelativeMinuteNum(toDateTime(0), 'Europe/London');
SELECT toRelativeMinuteNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeMinuteNum(toDateTime(0), 'Europe/Paris');
SELECT toRelativeMinuteNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeMinuteNum(toDateTime(0), 'Pacific/Pitcairn');
select toRelativeMinuteNum(x1, 'Asia/Istanbul') from t1;
SELECT toRelativeMonthNum(toDateTime(1412106600), 'Asia/Istanbul') - toRelativeMonthNum(toDateTime(0), 'Asia/Istanbul');
SELECT toRelativeMonthNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeMonthNum(toDateTime(0), 'Asia/Tokyo');
SELECT toRelativeMonthNum(toDateTime(1412106600), 'Europe/London') - toRelativeMonthNum(toDateTime(0), 'Europe/London');
SELECT toRelativeMonthNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeMonthNum(toDateTime(0), 'Europe/Paris');
SELECT toRelativeMonthNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeMonthNum(toDateTime(0), 'Pacific/Pitcairn');
select toRelativeMonthNum(x1, 'Asia/Istanbul') from t1;
select toRelativeQuarterNum(x1, 'Asia/Istanbul') from t1;
SELECT toRelativeSecondNum(toDateTime(1412106600), 'Asia/Istanbul') - toRelativeSecondNum(toDateTime(0), 'Asia/Istanbul');
SELECT toRelativeSecondNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeSecondNum(toDateTime(0), 'Asia/Tokyo');
SELECT toRelativeSecondNum(toDateTime(1412106600), 'Europe/London') - toRelativeSecondNum(toDateTime(0), 'Europe/London');
SELECT toRelativeSecondNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeSecondNum(toDateTime(0), 'Europe/Paris');
SELECT toRelativeSecondNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeSecondNum(toDateTime(0), 'Pacific/Pitcairn');
select toRelativeSecondNum(x1, 'Asia/Istanbul') from t1;
SELECT toRelativeWeekNum(toDateTime(1412106600), 'Asia/Istanbul') - toRelativeWeekNum(toDateTime(0), 'Asia/Istanbul');
SELECT toRelativeWeekNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeWeekNum(toDateTime(0), 'Asia/Tokyo');
SELECT toRelativeWeekNum(toDateTime(1412106600), 'Europe/London') - toRelativeWeekNum(toDateTime(0), 'Europe/London');
SELECT toRelativeWeekNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeWeekNum(toDateTime(0), 'Europe/Paris');
SELECT toRelativeWeekNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeWeekNum(toDateTime(0), 'Pacific/Pitcairn');
select toRelativeWeekNum(x1, 'Asia/Istanbul') from t1;
SELECT toRelativeYearNum(toDateTime(1412106600), 'Asia/Istanbul') - toRelativeYearNum(toDateTime(0), 'Asia/Istanbul');
SELECT toRelativeYearNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeYearNum(toDateTime(0), 'Asia/Tokyo');
SELECT toRelativeYearNum(toDateTime(1412106600), 'Europe/London') - toRelativeYearNum(toDateTime(0), 'Europe/London');
SELECT toRelativeYearNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeYearNum(toDateTime(0), 'Europe/Paris');
SELECT toRelativeYearNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeYearNum(toDateTime(0), 'Pacific/Pitcairn');
select toRelativeYearNum(x1, 'Asia/Istanbul') from t1;
SELECT toSecond(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toSecond(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toSecond(toDateTime(1412106600), 'Europe/London');
SELECT toSecond(toDateTime(1412106600), 'Europe/Paris');
SELECT toSecond(toDateTime(1412106600), 'Pacific/Pitcairn');
select toSecond(x1) from t1;
SELECT toStartOfDay(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 10 DAY LIMIT 5;
SELECT toStartOfDay(d64) as d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL 10 DAY LIMIT 5;
SELECT toStartOfDay(now()) = toDateTime(toDate(now()));
SELECT toStartOfDay(toDate(16343), 'Asia/Istanbul');
SELECT toStartOfDay(toDate(16343), 'Asia/Tokyo');
SELECT toStartOfDay(toDate(16343), 'Europe/London');
SELECT toStartOfDay(toDate(16343), 'Europe/Paris');
SELECT toStartOfDay(toDate(16343), 'Pacific/Pitcairn');
SELECT toStartOfDay(toDateTime('2017-12-31 00:00:00', 'UTC'), '');
SELECT toStartOfDay(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toStartOfDay(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toStartOfDay(toDateTime(1412106600), 'Europe/London');
SELECT toStartOfDay(toDateTime(1412106600), 'Europe/Paris');
SELECT toStartOfDay(toDateTime(1412106600), 'Pacific/Pitcairn');
select toStartOfDay(x1, 'Asia/Istanbul') from t1;
select toStartOfFifteenMinutes(toDateTime(0, 'Africa/Monrovia'));
select toStartOfFifteenMinutes(toDateTime(0, 'America/Los_Angeles'));
select toStartOfFifteenMinutes(toDateTime(0, 'America/Paramaribo'));
select toStartOfFifteenMinutes(toDateTime(0, 'Asia/Istanbul'));
select toStartOfFifteenMinutes(x1) from t1;
select toStartOfFiveMinute(toDateTime(0, 'Africa/Monrovia'));
select toStartOfFiveMinute(toDateTime(0, 'America/Paramaribo'));
select toStartOfFiveMinutes(toDateTime(0, 'America/Los_Angeles'));
select toStartOfFiveMinutes(toDateTime(0, 'Asia/Istanbul'));
select toStartOfFiveMinutes(x1) from t1;
SELECT toStartOfHour(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 6 HOUR LIMIT 5;
SELECT toStartOfHour(d) as d1 FROM pk_order ORDER BY d1 LIMIT 5;
SELECT toStartOfHour(d) as d1, min(a), max(b) FROM pk_order GROUP BY d1 ORDER BY d1 LIMIT 5;
SELECT toStartOfHour(d64) as d64, count() FROM with_fill_date GROUP BY d64 ORDER BY d64 WITH FILL STEP INTERVAL 6 HOUR LIMIT 5;
SELECT toStartOfHour(time) AS timex, id, count() FROM ( SELECT concat('id', toString(number % 3)) AS id, toDateTime('2020-01-01') + (number * 60) AS time FROM numbers(100) ) GROUP BY GROUPING SETS ( (timex, id), (timex)) ORDER BY timex ASC, id;
select toStartOfHour(toDateTime(0, 'Africa/Monrovia'));
select toStartOfHour(toDateTime(0, 'America/Los_Angeles'));
select toStartOfHour(toDateTime(0, 'America/Paramaribo'));
select toStartOfHour(toDateTime(0, 'Asia/Istanbul'));
SELECT toStartOfHour(toDateTime(10000, 'Asia/Calcutta'));
select toStartOfHour(toStartOfMinute(datetime)) dt_h, uniqHLL12(x_id), uniqHLL12(y_id) from projection_test group by dt_h order by dt_h;
select toStartOfHour(x1) from t1;
SELECT toStartOfInterval(toDate(17933), INTERVAL 1 month);
SELECT toStartOfInterval(toDate(17933), INTERVAL 1 quarter);
SELECT toStartOfInterval(toDate(17933), INTERVAL 1 week);
SELECT toStartOfInterval(toDate(17933), INTERVAL 1 year);
SELECT toStartOfInterval(toDate(17933), INTERVAL 2 month);
SELECT toStartOfInterval(toDate(17933), INTERVAL 2 quarter);
SELECT toStartOfInterval(toDate(17933), INTERVAL 2 week);
SELECT toStartOfInterval(toDate(17933), INTERVAL 2 year);
SELECT toStartOfInterval(toDate(17933), INTERVAL 3 quarter);
SELECT toStartOfInterval(toDate(17933), INTERVAL 5 month);
SELECT toStartOfInterval(toDate(17933), INTERVAL 5 year);
SELECT toStartOfInterval(toDate(17933), INTERVAL 6 week);
SELECT toStartOfInterval(toDateTime('2021-03-23 13:58:00'), INTERVAL 11 HOUR);
SELECT toStartOfInterval(toDateTime('2021-03-23 13:58:00', 'Asia/Kolkata'), INTERVAL 6 HOUR);
SELECT toStartOfInterval(toDateTime('2021-03-23 23:58:00'), INTERVAL 11 HOUR);
SELECT toStartOfInterval(toDateTime(-9223372036854775808), toIntervalYear(100), 'Asia/Istanbul') FORMAT Null;
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 1 month, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 1 quarter, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 1 week, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 1 year, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 2 month, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 2 quarter, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 2 week, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 2 year, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 3 quarter, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 5 month, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 5 year, 'Asia/Istanbul');
SELECT toStartOfInterval(toDateTime(1549483055), INTERVAL 6 week, 'Asia/Istanbul');
select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123', 3), INTERVAL 1 MILLISECOND);
select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123456', 6), INTERVAL 1 MICROSECOND);
select toStartOfInterval(toDateTime64('1980-12-12 12:12:12.123456789', 9), INTERVAL 1 NANOSECOND);
SELECT toStartOfInterval(toDateTime64('2023-10-09 10:11:12.000499', 6), toIntervalMillisecond(1));
SELECT toStartOfInterval(toDateTime64('2023-10-09 10:11:12.000500', 6), toIntervalMillisecond(1));
SELECT toStartOfInterval(toDateTime64('2023-10-09 10:11:12.000999', 6), toIntervalMillisecond(1));
SELECT toStartOfInterval(toDateTime64('2023-10-09 10:11:12.000999', 6), toIntervalMillisecond(10));
select toStartOfInterval(toDateTime64('\0930-12-12 12:12:12.1234567', 3), toIntervalNanosecond(1024));
select toStartOfISOYear(x1) from t1;
select toStartOfMinute(datetime) dt_m, count(), sum(block_count) / sum(duration), avg(block_count / duration) from projection_test group by dt_m order by dt_m;
select toStartOfMinute(datetime) dt_m, domain, sum(retry_count) / sum(duration), avg(retry_count / duration), countIf(block_count > 0) / count(), countIf(first_time = 0) / count() from projection_test group by dt_m, domain having domain = '19' order by dt_m, domain;
select toStartOfMinute(datetime) dt_m, sum(buffer_time) / sum(duration), avg(buffer_time / duration), sum(valid_bytes) / sum(total_bytes), sum(completed_bytes) / sum(total_bytes), sum(fixed_bytes) / sum(total_bytes), sum(force_bytes) / sum(total_bytes), sum(valid_bytes) / sum(total_bytes) from projection_test where domain in ('12', '14') group by dt_m order by dt_m;
select toStartOfMinute(dt) dt_m, sum(cost) from projection_test group by dt_m;
select toStartOfMinute(dt) dt_m, sum(cost) from projection_test_d group by dt_m;
SELECT toStartOfMinute(some_time) AS ts FROM ( SELECT toDateTime('2021-07-07 15:21:05') AS some_time ) ORDER BY ts ASC WITH FILL FROM toDateTime('2021-07-07 15:21:00') TO toDateTime('2021-07-07 15:21:15') STEP 5;
select toStartOfMinute(toDateTime(0, 'Africa/Monrovia'));
select toStartOfMinute(toDateTime(0, 'America/Los_Angeles'));
select toStartOfMinute(toDateTime(0, 'America/Paramaribo'));
select toStartOfMinute(toDateTime(0, 'Asia/Istanbul'));
select toStartOfMinute(x1) from t1;
SELECT toStartOfMonth(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL FROM toDate('2020-01-01') TO toDate('2021-01-01') STEP INTERVAL 3 MONTH;
SELECT toStartOfMonth(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 MONTH LIMIT 5;
SELECT toStartOfMonth(d) as d, id, count() FROM with_fill_date GROUP BY d, id ORDER BY d WITH FILL FROM toDate('2020-01-01') TO toDate('2020-05-01') STEP INTERVAL 1 MONTH, id WITH FILL FROM 1 TO 5;
SELECT toStartOfMonth(d), toUInt32(t) FROM default;
SELECT toStartOfMonth(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL FROM toDate('2020-01-01') TO toDate('2021-01-01') STEP INTERVAL 3 MONTH;
SELECT toStartOfMonth(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL 1 MONTH LIMIT 5;
SELECT toStartOfMonth(date) as d, i FROM t_read_in_order ORDER BY d DESC, -i LIMIT 5;
SELECT toStartOfMonth(date) as d, i FROM t_read_in_order ORDER BY d, i LIMIT 5;
select toStartOfMonth(toDate(0));
SELECT toStartOfMonth(toDate(16433), 'Asia/Istanbul');
select toStartOfMonth(toDateTime(0, 'Africa/Monrovia'));
select toStartOfMonth(toDateTime(0, 'America/Los_Angeles'));
select toStartOfMonth(toDateTime(0, 'America/Paramaribo'));
select toStartOfMonth(toDateTime(0, 'Asia/Istanbul'));
SELECT toStartOfMonth(toDateTime(1419800400), 'Asia/Istanbul');
SELECT toStartOfMonth(toDateTime(1419800400), 'Asia/Tokyo');
SELECT toStartOfMonth(toDateTime(1419800400), 'Europe/London');
SELECT toStartOfMonth(toDateTime(1419800400), 'Europe/Paris');
SELECT toStartOfMonth(toDateTime(1419800400), 'Pacific/Pitcairn');
select toStartOfMonth(x1) from t1;
select toStartOfQuarter(toDate(0));
SELECT toStartOfQuarter(toDate(16343), 'Asia/Istanbul');
select toStartOfQuarter(toDateTime(0, 'Africa/Monrovia'));
select toStartOfQuarter(toDateTime(0, 'America/Los_Angeles'));
select toStartOfQuarter(toDateTime(0, 'America/Paramaribo'));
select toStartOfQuarter(toDateTime(0, 'Asia/Istanbul'));
SELECT toStartOfQuarter(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toStartOfQuarter(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toStartOfQuarter(toDateTime(1412106600), 'Europe/London');
SELECT toStartOfQuarter(toDateTime(1412106600), 'Europe/Paris');
SELECT toStartOfQuarter(toDateTime(1412106600), 'Pacific/Pitcairn');
SELECT toStartOfQuarter(toDateTime64('1990-01-04 12:14:12', 0, 'UTC'));
select toStartOfQuarter(x1) from t1;
select toStartOfSecond(x1) from t1;
select toStartOfTenMinutes(toDateTime(0, 'Africa/Monrovia'));
select toStartOfTenMinutes(toDateTime(0, 'America/Los_Angeles'));
select toStartOfTenMinutes(toDateTime(0, 'America/Paramaribo'));
select toStartOfTenMinutes(toDateTime(0, 'Asia/Istanbul'));
select toStartOfTenMinutes(x1) from t1;
SELECT toStartOfWeek(d) as d, count() FROM with_fill_date GROUP BY d ORDER BY d WITH FILL STEP INTERVAL 1 WEEK LIMIT 5;
SELECT toStartOfWeek(d32) as d32, count() FROM with_fill_date GROUP BY d32 ORDER BY d32 WITH FILL STEP INTERVAL 1 WEEK LIMIT 5;
select toStartOfWeek(toDate(0));
SELECT toStartOfWeek(toDate(16433), 0, 'Asia/Istanbul');
SELECT toStartOfWeek(toDate(16433), 1, 'Asia/Istanbul');
SELECT toStartOfWeek(toDateTime('1970-01-01 00:00:00', 'Asia/Istanbul'));
SELECT toStartOfWeek(toDateTime('1970-01-01 00:00:00', 'Canada/Atlantic'));
SELECT toStartOfWeek(toDateTime('1970-01-01 00:00:00', 'UTC'));
SELECT toStartOfWeek(toDateTime('1970-01-04 00:00:00'));
select toStartOfWeek(toDateTime(0, 'Africa/Monrovia'));
select toStartOfWeek(toDateTime(0, 'America/Los_Angeles'));
select toStartOfWeek(toDateTime(0, 'America/Paramaribo'));
select toStartOfWeek(toDateTime(0, 'Asia/Istanbul'));
SELECT toStartOfWeek(toDateTime(1419800400), 0, 'Asia/Istanbul');
SELECT toStartOfWeek(toDateTime(1419800400), 0, 'Asia/Tokyo');
SELECT toStartOfWeek(toDateTime(1419800400), 0, 'Europe/London');
SELECT toStartOfWeek(toDateTime(1419800400), 0, 'Europe/Paris');
SELECT toStartOfWeek(toDateTime(1419800400), 0, 'Pacific/Pitcairn');
SELECT toStartOfWeek(toDateTime(1419800400), 1, 'Asia/Istanbul');
SELECT toStartOfWeek(toDateTime(1419800400), 1, 'Asia/Tokyo');
SELECT toStartOfWeek(toDateTime(1419800400), 1, 'Europe/London');
SELECT toStartOfWeek(toDateTime(1419800400), 1, 'Europe/Paris');
SELECT toStartOfWeek(toDateTime(1419800400), 1, 'Pacific/Pitcairn');
select toStartOfWeek(x1) from t1;
select toStartOfYear(toDate(0));
SELECT toStartOfYear(toDate(16433), 'Asia/Istanbul');
select toStartOfYear(toDateTime(0, 'Africa/Monrovia'));
select toStartOfYear(toDateTime(0, 'America/Los_Angeles'));
select toStartOfYear(toDateTime(0, 'America/Paramaribo'));
select toStartOfYear(toDateTime(0, 'Asia/Istanbul'));
SELECT toStartOfYear(toDateTime(1419800400), 'Asia/Istanbul');
SELECT toStartOfYear(toDateTime(1419800400), 'Asia/Tokyo');
SELECT toStartOfYear(toDateTime(1419800400), 'Europe/London');
SELECT toStartOfYear(toDateTime(1419800400), 'Europe/Paris');
SELECT toStartOfYear(toDateTime(1419800400), 'Pacific/Pitcairn');
select toStartOfYear(x1) from t1;
SELECT toString('0000-00-00 00:00:000000-00-00 00:00:00', toDateTime64(toDateTime64('655.36', -2, NULL)));
select toString('aaaa', NULL);
SELECT toString((1, 'Hello', toDate('2016-01-01'))), toString([1, 2, 3]);
SELECT toString((SELECT materialize(date) FROM Dates), number % 2 ? 'America/Los_Angeles' : '') FROM numbers(5);
SELECT toString((SELECT materialize(date) FROM Dates), number % 2 ? 'America/Los_Angeles' : 'Europe/Amsterdam') FROM numbers(5);
SELECT toString((toInt8(dummy)+2) * (toInt8(dummy)+2)) as dummy FROM remote('127.{1,1}', system.one) GROUP BY dummy;
SELECT toString(1) FROM numbers(10) INTERSECT DISTINCT SELECT toString(1) FROM numbers(10);
SELECT toString(1) FROM numbers(10) INTERSECT SELECT toString(1) FROM numbers(10);
SELECT toString(2) FROM numbers(10) EXCEPT DISTINCT SELECT toString(1) FROM numbers(5);
SELECT toString(2) FROM numbers(10) EXCEPT SELECT toString(1) FROM numbers(5);
SELECT toString(a) as r1, b, count() FROM test_group_by_with_rollup_order GROUP BY r1, b WITH ROLLUP ORDER BY b,r1;
SELECT toString(accurateCast(19, 'DateTime'), 'UTC');
SELECT toString(accurateCastOrNull('2023-05-30 14:38:20', 'DateTime'), timezone());
SELECT toString(accurateCastOrNull('2223-05-30 14:38:20', 'DateTime'), timezone()) SETTINGS session_timezone = 'UTC';
SELECT toString(accurateCastOrNull(19, 'DateTime'), 'UTC');
SELECT toString(accurateCastOrNull(70000, 'DateTime'), 'UTC');
SELECT toString(arrayCompact(arrayMap(x->0, [NULL])));
SELECT toString(arrayCumSumNonNegative(x->0, [1, 2]));
SELECT toString(arrayDifference(x->0, [1, 2]));
select toString(c) from test_enum;
select toString(CAST(NULL, 'Nullable(Bool)'));
select toString(CAST(NULL, 'Nullable(IPv4)'));
select toString(CAST(NULL, 'Nullable(IPv6)'));
SELECT toString(d), avg(a) FROM pk_order GROUP BY toString(d) ORDER BY toString(d) LIMIT 5;
SELECT toString(dummy+1) as dummy FROM remote('127.{1,1}', 'system.one') GROUP BY dummy;
SELECT toString(number) IN ('1', NULL, '3') FROM system.numbers LIMIT 5;
SELECT toString(number) IN (SELECT nullIf(toString(number), '2') FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT toString(number) IN (SELECT toString(number) FROM system.numbers LIMIT 1, 3) AS res FROM system.numbers LIMIT 5;
SELECT toString(t, 'UTC'), toDate(t), toStartOfDay(t), toStartOfQuarter(t), toTime(t), toStartOfMinute(t) FROM A ORDER BY t;
SELECT toString(toDateTime('-922337203.6854775808', 1, 'Asia/Istanbul'));
SELECT toString(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'));
SELECT toString(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata');
SELECT toString(toDateTime('9922337203.6854775808', 1, 'Asia/Istanbul'));
SELECT toString(toDateTime(1436956200), 'Asia/Istanbul');
SELECT toString(toDateTime(1436956200), 'Asia/Tokyo');
SELECT toString(toDateTime(1436956200), 'Europe/London');
SELECT toString(toDateTime(1436956200), 'Europe/Paris');
SELECT toString(toDateTime(1436956200), 'Pacific/Pitcairn');
select toString(toNullable(toIPv4('0.0.0.0')));
select toString(toNullable(toIPv6('::ffff:127.0.0.1')));
select toString(toNullable(true));
SELECT toString(toStartOfFifteenMinutes(toDateTime(1549483055), 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfFifteenMinutes(toDateTime(1549483055), 'Asia/Tokyo'), 'Asia/Tokyo');
SELECT toString(toStartOfFifteenMinutes(toDateTime(1549483055), 'Europe/London'), 'Europe/London');
SELECT toString(toStartOfFifteenMinutes(toDateTime(1549483055), 'Europe/Paris'), 'Europe/Paris');
SELECT toString(toStartOfFifteenMinutes(toDateTime(1549483055), 'Pacific/Pitcairn'), 'Pacific/Pitcairn');
SELECT toString(toStartOfFiveMinutes(toDateTime(1549483055), 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfFiveMinutes(toDateTime(1549483055), 'Asia/Tokyo'), 'Asia/Tokyo');
SELECT toString(toStartOfFiveMinutes(toDateTime(1549483055), 'Europe/London'), 'Europe/London');
SELECT toString(toStartOfFiveMinutes(toDateTime(1549483055), 'Europe/Paris'), 'Europe/Paris');
SELECT toString(toStartOfFiveMinutes(toDateTime(1549483055), 'Pacific/Pitcairn'), 'Pacific/Pitcairn');
SELECT toString(toStartOfHour(toDateTime(1549483055), 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfHour(toDateTime(1549483055), 'Asia/Tokyo'), 'Asia/Tokyo');
SELECT toString(toStartOfHour(toDateTime(1549483055), 'Europe/London'), 'Europe/London');
SELECT toString(toStartOfHour(toDateTime(1549483055), 'Europe/Paris'), 'Europe/Paris');
SELECT toString(toStartOfHour(toDateTime(1549483055), 'Pacific/Pitcairn'), 'Pacific/Pitcairn');
SELECT toString(toStartOfInterval(toDate(17933), INTERVAL 1 day, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDate(17933), INTERVAL 2 day, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDate(17933), INTERVAL 5 day, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 1 day, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 1 hour, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 1 minute, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 1 second, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 2 day, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 2 hour, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 2 minute, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 2 second, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 20 minute, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 24 hour, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 5 day, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 5 minute, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 5 second, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 6 hour, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfInterval(toDateTime(1549483055), INTERVAL 90 minute, 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfMinute(toDateTime(1549483055), 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfMinute(toDateTime(1549483055), 'Asia/Tokyo'), 'Asia/Tokyo');
SELECT toString(toStartOfMinute(toDateTime(1549483055), 'Europe/London'), 'Europe/London');
SELECT toString(toStartOfMinute(toDateTime(1549483055), 'Europe/Paris'), 'Europe/Paris');
SELECT toString(toStartOfMinute(toDateTime(1549483055), 'Pacific/Pitcairn'), 'Pacific/Pitcairn');
SELECT toString(toStartOfTenMinutes(toDateTime(1549483055), 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toStartOfTenMinutes(toDateTime(1549483055), 'Asia/Tokyo'), 'Asia/Tokyo');
SELECT toString(toStartOfTenMinutes(toDateTime(1549483055), 'Europe/London'), 'Europe/London');
SELECT toString(toStartOfTenMinutes(toDateTime(1549483055), 'Europe/Paris'), 'Europe/Paris');
SELECT toString(toStartOfTenMinutes(toDateTime(1549483055), 'Pacific/Pitcairn'), 'Pacific/Pitcairn');
SELECT toString(toTime(toDateTime(1420102800), 'Asia/Istanbul'), 'Asia/Istanbul'), toString(toTime(toDateTime(1428310800), 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toString(toTime(toDateTime(1420102800), 'Asia/Tokyo'), 'Asia/Tokyo'), toString(toTime(toDateTime(1428310800), 'Asia/Tokyo'), 'Asia/Tokyo');
SELECT toString(toTime(toDateTime(1420102800), 'Europe/London'), 'Europe/London'), toString(toTime(toDateTime(1428310800), 'Europe/London'), 'Europe/London');
SELECT toString(toTime(toDateTime(1420102800), 'Europe/Paris'), 'Europe/Paris'), toString(toTime(toDateTime(1428310800), 'Europe/Paris'), 'Europe/Paris');
SELECT toString(toTime(toDateTime(1420102800), 'Pacific/Pitcairn'), 'Pacific/Pitcairn'), toString(toTime(toDateTime(1428310800), 'Pacific/Pitcairn'), 'Pacific/Pitcairn');
SELECT toString(toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata'));
SELECT toString(toUUID('3f1ed72e-f7fe-4459-9cbe-95fe9298f845'));
SELECT toString(v) FROM (SELECT v FROM d ORDER BY v) FORMAT Null;
SELECT toString(value) AS value FROM (SELECT 1 AS value) WHERE value = '1';
select toString(x) from values ('x Nullable(String)', '42', NULL, 'test');
select toString(x)::Decimal(15, 9) from generateRandom('x Decimal(15, 9)', 42) limit 5;
select toString(x)::Decimal(30, 20) from generateRandom('x Decimal(30, 20)', 42) limit 5;
select toString(x)::Decimal(6, 3) from generateRandom('x Decimal(6, 3)', 42) limit 5;
select toString(x)::Decimal(60, 40) from generateRandom('x Decimal(60, 40)', 42) limit 5;
SELECT total FROM ( SELECT sum(total_count) AS total, domain FROM ( SELECT COUNT(*) AS total_count, toUInt64(0) AS facebookHits, domain FROM transactions GROUP BY domain UNION ALL SELECT COUNT(*) AS total_count, SUM(if(domain = 'facebook.com', 1, 0)) AS facebookHits, domain FROM clicks GROUP BY domain ) GROUP BY domain ORDER BY domain LIMIT 10 ) js1 ALL FULL OUTER JOIN ( SELECT sum(total_count) AS total, domain FROM ( SELECT COUNT(*) AS total_count, SUM(if(domain = 'facebook.com', 1, 0)) AS facebookHits, domain FROM clicks GROUP BY domain UNION ALL SELECT COUNT(*) AS total_count, toUInt64(0) AS facebookHits, domain FROM transactions GROUP BY domain ) GROUP BY domain ORDER BY domain LIMIT 10 ) js2 USING (total, domain) ORDER BY total, domain;
select total from (select first_col, count(second_col) as total from tp2 group by 1);
SELECT total_bytes BETWEEN 5000 AND 15000, total_rows FROM system.tables WHERE name = 'check_system_tables' AND database = currentDatabase();
SELECT total_bytes FROM system.tables WHERE name = 'test_buffer_table' and database = currentDatabase();
SELECT total_bytes, total_rows FROM system.tables WHERE database = currentDatabase() AND name = 'check_system_tables';
SELECT total_bytes, total_rows FROM system.tables WHERE name = 'check_system_tables' AND database = currentDatabase();
SELECT total_bytes>0, total_rows FROM system.tables WHERE database = currentDatabase() AND name = 'check_system_tables';
SELECT total_bytes_uncompressed > 0, total_bytes > 0, total_rows FROM system.tables WHERE name = 'check_system_tables_mv' AND database = currentDatabase();
SELECT total_bytes_uncompressed, total_bytes, total_rows FROM system.tables WHERE name = 'check_system_tables' AND database = currentDatabase();
SELECT total_bytes_uncompressed, total_bytes, total_rows FROM system.tables WHERE name = 'check_system_tables_mv' AND database = currentDatabase();
select total_compressed_size < 10000, total_uncompressed_size > 15000 from file(compressed_02735.parquet, ParquetMetadata);
SELECT total_rows, total_bytes > 0 FROM system.tables WHERE database = currentDatabase() AND name = 'dict' FORMAT CSV;
select toTime(toDateTime(0, 'Africa/Monrovia'), 'Africa/Monrovia');
select toTime(toDateTime(0, 'America/Los_Angeles'), 'America/Los_Angeles');
select toTime(toDateTime(0, 'America/Paramaribo'), 'America/Paramaribo');
select toTime(toDateTime(0, 'Asia/Istanbul'));
select toTime(x1) from t1;
select toTimeZone(c1, 'UTC') from format('TSV', '2022-04-22T03:45:06.381Z');
SELECT toTimeZone(CAST(1 AS TIMESTAMP), 'UTC');
SELECT toTimeZone(d, 'UTC') FROM test_00645;
SELECT toTimeZone(now(), 'Asia/Istanbul') > '1970-01-01 00:00:00';
SELECT toTimeZone(parseDateTimeBestEffort('Thu, 18 Aug 2018 07:22:16 GMT'), 'UTC');
SELECT toTimeZone(parseDateTimeBestEffort('Tue, 16 Aug 2018 07:22:16 GMT'), 'UTC');
SELECT toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata');
SELECT toTimeZone(toDateTime('2021-03-22 18:45:11', 'UTC'), 'Asia/Tehran');
SELECT toTimeZone(toDateTime(-2., 2), 'Asia/Istanbul');
SELECT toTimezone(ULIDStringToDateTime('01GWJWKW30MFPQJRYEAF4XFZ9E'), 'America/Costa_Rica');
SELECT toTypeName((*,)) FROM multiword_types;
SELECT toTypeName((*,)) FROM unsigned_types;
SELECT toTypeName((1,)), (1,);
select toTypeName(*), * from format(TSV, '0123');
SELECT toTypeName(0 and 10000000);
SELECT toTypeName(0 or 10000000);
SELECT toTypeName(1 + now()) LIKE 'DateTime%';
SELECT toTypeName(1 + today()) = 'Date';
SELECT toTypeName(1 and 10);
SELECT toTypeName(1 and true);
SELECT toTypeName(1 or 10);
SELECT toTypeName(1 or true);
select toTypeName([-1, toUInt32(1)]);
SELECT toTypeName([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]);
select toTypeName([assumeNotNull(materialize(NULL))]);
SELECT toTypeName([materialize(toLowCardinality('1')), '2']);
SELECT toTypeName([materialize(toLowCardinality('1')), materialize('2')]);
SELECT toTypeName([materialize(toLowCardinality('1')), materialize(toLowCardinality('2'))]);
SELECT toTypeName([materialize(toLowCardinality('1')), toLowCardinality('2')]);
SELECT toTypeName([toDate('2000-01-01'), toDateTime('2000-01-01', 'Asia/Istanbul'), toDateTime64('2000-01-01', 5, 'Asia/Istanbul'), toDateTime64('2000-01-01', 6, 'Asia/Istanbul')]);
SELECT toTypeName([toDate('2000-01-01'), toDateTime('2000-01-01', 'Asia/Istanbul'), toDateTime64('2000-01-01', 5, 'Asia/Istanbul')]);
SELECT toTypeName([toDate('2000-01-01'), toDateTime('2000-01-01', 'Asia/Istanbul')]);
select toTypeName([toInt64(-1), toInt128(1)]);
SELECT toTypeName([toLowCardinality('1'), '2']);
SELECT toTypeName([toLowCardinality('1'), materialize('2')]);
SELECT toTypeName([toLowCardinality('1'), materialize(toLowCardinality('2'))]);
SELECT toTypeName([toLowCardinality('1'), toLowCardinality('2')]);
select toTypeName([toUInt64(1), toUInt256(1)]);
SELECT toTypeName(a) FROM (SELECT number as a FROM numbers(11)) t1 PASTE JOIN (select number as a from numbers(10)) t2 SETTINGS join_use_nulls = 1;
select toTypeName(a) from test limit 1 format TSVRaw;
SELECT toTypeName(a), toTypeName(b), toTypeName(c) FROM decimal;
SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d) FROM data_null;
SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d), toTypeName(f) FROM set_null;
SELECT toTypeName(a[1]), toTypeName(b[2]), toTypeName(c[3]) FROM decimal;
SELECT toTypeName(alias) FROM data_01269;
SELECT toTypeName(any(number) RESPECT NULLS) from numbers(1) SETTINGS aggregate_functions_null_for_empty = 1;
SELECT toTypeName(anyOrNull(number) RESPECT NULLS) from numbers(1);
SELECT toTypeName(arr) FROM t_json_array LIMIT 1;
SELECT toTypeName(arrayAvg([toDecimal32(0, 8)])), toTypeName(arrayAvg([toDecimal64(0, 8)])), toTypeName(arrayAvg([toDecimal128(0, 8)]));
SELECT toTypeName(arrayAvg([toFloat32(0)])), toTypeName(arrayAvg([toFloat64(0)]));
SELECT toTypeName(arrayAvg([toInt128(0)])), toTypeName(arrayAvg([toInt256(0)])), toTypeName(arrayAvg([toUInt256(0)]));
SELECT toTypeName(arrayAvg([toInt8(0)])), toTypeName(arrayAvg([toInt16(0)])), toTypeName(arrayAvg([toInt32(0)])), toTypeName(arrayAvg([toInt64(0)]));
SELECT toTypeName(arrayAvg([toUInt8(0)])), toTypeName(arrayAvg([toUInt16(0)])), toTypeName(arrayAvg([toUInt32(0)])), toTypeName(arrayAvg([toUInt64(0)]));
select toTypeName(arrayFilter(x -> 2 * x < 0, []));
select toTypeName(arrayIntersect([(1, ['a', 'b']), (Null, ['c'])], [(2, ['c', Null]), (1, ['a', 'b'])]));
SELECT toTypeName(arrayJoin(arrayJoin(arr.k1))) AS arr FROM t_json_array LIMIT 1;
select toTypeName(arrayMap((x, y) -> x + y, [], []));
select toTypeName(arrayMap((x, y) -> x + y, [], CAST([], 'Array(Int32)')));
select toTypeName(arrayMap(x -> 2 * x, []));
select toTypeName(arrayMap(x -> [x], []));
select toTypeName(arrayMap(x -> CAST(x, 'String'), []));
select toTypeName(arrayMap(x -> toInt32(x), []));
select toTypeName(arrayMap(x ->map(1, x), []));
select toTypeName(arrayMap(x ->tuple(x), []));
SELECT toTypeName(arrayMax([toDecimal32(0, 8)])), toTypeName(arrayMax([toDecimal64(0, 8)])), toTypeName(arrayMax([toDecimal128(0, 8)]));
SELECT toTypeName(arrayMax([toFloat32(0)])), toTypeName(arrayMax([toFloat64(0)]));
SELECT toTypeName(arrayMax([toInt128(0)])), toTypeName(arrayMax([toInt256(0)])), toTypeName(arrayMax([toUInt256(0)]));
SELECT toTypeName(arrayMax([toInt8(0)])), toTypeName(arrayMax([toInt16(0)])), toTypeName(arrayMax([toInt32(0)])), toTypeName(arrayMax([toInt64(0)]));
SELECT toTypeName(arrayMax([toUInt8(0)])), toTypeName(arrayMax([toUInt16(0)])), toTypeName(arrayMax([toUInt32(0)])), toTypeName(arrayMax([toUInt64(0)]));
SELECT toTypeName(arrayMin([toDecimal32(0, 8)])), toTypeName(arrayMin([toDecimal64(0, 8)])), toTypeName(arrayMin([toDecimal128(0, 8)]));
SELECT toTypeName(arrayMin([toFloat32(0)])), toTypeName(arrayMin([toFloat64(0)]));
SELECT toTypeName(arrayMin([toInt128(0)])), toTypeName(arrayMin([toInt256(0)])), toTypeName(arrayMin([toUInt256(0)]));
SELECT toTypeName(arrayMin([toInt8(0)])), toTypeName(arrayMin([toInt16(0)])), toTypeName(arrayMin([toInt32(0)])), toTypeName(arrayMin([toInt64(0)]));
SELECT toTypeName(arrayMin([toUInt8(0)])), toTypeName(arrayMin([toUInt16(0)])), toTypeName(arrayMin([toUInt32(0)])), toTypeName(arrayMin([toUInt64(0)]));
SELECT toTypeName(arrayProduct([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]));
SELECT toTypeName(arrayProduct([toDecimal32(0, 8)])), toTypeName(arrayProduct([toDecimal64(0, 8)])), toTypeName(arrayProduct([toDecimal128(0, 8)]));
SELECT toTypeName(arrayProduct([toFloat32(0)])), toTypeName(arrayProduct([toFloat64(0)]));
SELECT toTypeName(arrayProduct([toInt128(0)])), toTypeName(arrayProduct([toInt256(0)])), toTypeName(arrayProduct([toUInt256(0)]));
SELECT toTypeName(arrayProduct([toInt8(0)])), toTypeName(arrayProduct([toInt16(0)])), toTypeName(arrayProduct([toInt32(0)])), toTypeName(arrayProduct([toInt64(0)]));
SELECT toTypeName(arrayProduct([toUInt8(0)])), toTypeName(arrayProduct([toUInt16(0)])), toTypeName(arrayProduct([toUInt32(0)])), toTypeName(arrayProduct([toUInt64(0)]));
SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int128))));
SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int8))));
SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(UInt128))));
SELECT toTypeName(arraySum([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]));
SELECT toTypeName(arraySum([toDecimal32(0, 8)])), toTypeName(arraySum([toDecimal64(0, 8)])), toTypeName(arraySum([toDecimal128(0, 8)]));
SELECT toTypeName(arraySum([toFloat32(0)])), toTypeName(arraySum([toFloat64(0)]));
SELECT toTypeName(arraySum([toInt128(0)])), toTypeName(arraySum([toInt256(0)])), toTypeName(arraySum([toUInt256(0)]));
SELECT toTypeName(arraySum([toInt8(0)])), toTypeName(arraySum([toInt16(0)])), toTypeName(arraySum([toInt32(0)])), toTypeName(arraySum([toInt64(0)]));
SELECT toTypeName(arraySum([toUInt8(0)])), toTypeName(arraySum([toUInt16(0)])), toTypeName(arraySum([toUInt32(0)])), toTypeName(arraySum([toUInt64(0)]));
select toTypeName(assumeNotNull(materialize(NULL)) * 2);
select toTypeName(assumeNotNull(materialize(NULL)));
SELECT toTypeName(bitCount(1::Int128));
SELECT toTypeName(bitCount(1::Int256));
SELECT toTypeName(bitCount(1::UInt128));
SELECT toTypeName(bitCount(1::UInt256));
SELECT toTypeName(CAST('a', 'Enum(\'a\' = 2, \'b\' = 127)'));
SELECT toTypeName(CAST('a', 'Enum(\'a\' = 2, \'b\' = 128)'));
select toTypeName(cast(makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 7, 'CET') as DateTime64(7, 'UTC')));
SELECT toTypeName(d), toTypeName(dt), toTypeName(dtm) FROM generateRandom('d Date, dt DateTime(\'UTC\'), dtm DateTime(\'UTC\')') LIMIT 1;
SELECT toTypeName(d2), toTypeName(d3) FROM decimal LIMIT 1;
SELECT toTypeName(d32) FROM generateRandom('d32 Date32') LIMIT 1;
SELECT toTypeName(data) FROM type_json_dst LIMIT 1;
SELECT toTypeName(data), toTypeName(flattenTuple(data)) FROM t_flatten_object LIMIT 1;
select toTypeName(dict), dict, lowCardinalityIndices(dict), lowCardinalityKeys(dict) from (select '123_' || toLowCardinality(v) as dict from (select arrayJoin(['a', 'bb', '', 'a', 'ccc', 'a', 'bb', '', 'dddd']) as v));
select toTypeName(dict), dict, lowCardinalityIndices(dict), lowCardinalityKeys(dict) from (select '123_' || toLowCardinality(v) as dict from (select arrayJoin(['a', Null, 'bb', '', 'a', Null, 'ccc', 'a', 'bb', '', 'dddd']) as v));
SELECT toTypeName(dotProduct(x, y)) from product_fp32_fp32;
SELECT toTypeName(dotProduct(x, y)) from product_fp32_fp64;
SELECT toTypeName(dotProduct(x, y)) from product_fp64_fp64;
SELECT toTypeName(dotProduct(x, y)) from product_int32_uint64;
SELECT toTypeName(dotProduct(x, y)) from product_uint64_uint64;
SELECT toTypeName(dotProduct(x, y)) from product_uint8_fp64;
SELECT toTypeName(dotProduct(x, y)) from product_uint8_uint8;
SELECT toTypeName(dt64), toTypeName(dts64), toTypeName(dtms64) FROM generateRandom('dt64 DateTime64(3, \'UTC\'), dts64 DateTime64(6, \'UTC\'), dtms64 DateTime64(6 ,\'UTC\')') LIMIT 1;
SELECT toTypeName(false and true);
SELECT toTypeName(false or true);
SELECT toTypeName(false);
SELECT toTypeName(first_value_respect_nullsState(dummy)), toTypeName(last_value_respect_nullsState(dummy)) from system.one;
SELECT toTypeName(first_valueIfState(number, isNull(number)) RESPECT NULLS) from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));
SELECT toTypeName(FIRST_VALUEIfState(number, isNull(number)) RESPECT NULLS) from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));
SELECT toTypeName(fuzzBits('stringstring', 0.5)) from numbers(3);
SELECT toTypeName(fuzzBits(randomString(100), 0.5));
SELECT toTypeName(fuzzBits(toFixedString('abacaba', 10), 0.9));
select toTypeName(generateRandomStructure(5, 42));
select toTypeName(generateUUIDv4()), byteSize(generateUUIDv4());
SELECT toTypeName(groupArrayMovingAvg(256)(toDecimal32(1, 9))) FROM numbers(300);
SELECT toTypeName(groupArrayMovingSum(256)(-1)) FROM remote('127.0.0.{1,2}', numbers(1000));
SELECT toTypeName(id0), toTypeName(id1) FROM uuid;
select toTypeName(if(toLowCardinality(number % 2), 1, 2)) from numbers(1);
SELECT toTypeName(initializeAggregation('anyState', initializeAggregation('uniqState', 0)));
SELECT toTypeName(initializeAggregation('sumState', initializeAggregation('quantileState', 0)));
SELECT toTypeName(initializeAggregation('uniqExact', 0));
SELECT toTypeName(initializeAggregation('uniqExactState', 0));
SELECT toTypeName(initializeAggregation('uniqExactState', initializeAggregation('quantileState', 0)));
SELECT toTypeName(initializeAggregation('uniqExactState', toNullable('foo')));
SELECT toTypeName(initializeAggregation('uniqExactState', toNullable(123)));
select toTypeName(js1.k), toTypeName(js2.k), toTypeName(js1.s), toTypeName(js2.s) from (select number k, toLowCardinality(toString(number)) s from numbers(2)) as js1 full join (select toLowCardinality(number+1) k, toString(number+1) s from numbers(2)) as js2 ON js1.k = js2.k order by js1.k, js2.k;
select toTypeName(key), toTypeName(value) from ( select 1 as key, '' as value union all select toUInt64(2) as key, toNullable('') as value );
select toTypeName(key), toTypeName(value) from ( select toDecimal64(2, 8) as key, toNullable('') as value union all select toDecimal32(2, 4) as key, toFixedString('', 1) as value );
SELECT toTypeName(last_valueIfState(number, isNull(number)) RESPECT NULLS) from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));
SELECT toTypeName(LAST_VALUEIfState(number, isNull(number)) RESPECT NULLS) from (SELECT if(number > 8, NULL, number) as number FROM numbers(10));
SELECT toTypeName(least(-9223372036854775808, 18446744073709551615)), toTypeName(greatest(-9223372036854775808, 18446744073709551615));
SELECT toTypeName(level) FROM errors_local FINAL PREWHERE isNotNull(level) WHERE isNotNull(level) LIMIT 1;
select toTypeName(makeDate(1991, 8));
select toTypeName(makeDate(1991, 8, 24));
select toTypeName(makeDate(1991, 8, cast(24 as Nullable(UInt64))));
select toTypeName(makeDate(1991, cast(8 as Nullable(UInt64))));
select toTypeName(makeDate(1991, cast(8 as Nullable(UInt64)), 24));
select toTypeName(makeDate(1991, cast(8 as Nullable(UInt64)), cast(24 as Nullable(UInt64))));
select toTypeName(makeDate(cast(1991 as Nullable(UInt64)), 8));
select toTypeName(makeDate(cast(1991 as Nullable(UInt64)), 8, 24));
select toTypeName(makeDate32(1991, 8));
select toTypeName(makeDate32(1991, 8, 24));
select toTypeName(makeDate32(1991, 8, cast(24 as Nullable(UInt64))));
select toTypeName(makeDate32(1991, cast(8 as Nullable(UInt64))));
select toTypeName(makeDate32(1991, cast(8 as Nullable(UInt64)), 24));
select toTypeName(makeDate32(1991, cast(8 as Nullable(UInt64)), cast(24 as Nullable(UInt64))));
select toTypeName(makeDate32(cast(1991 as Nullable(UInt64)), 8));
select toTypeName(makeDate32(cast(1991 as Nullable(UInt64)), 8, 24));
select toTypeName(makeDateTime(1991, 8, 24, 21, 4, 0));
select toTypeName(makeDateTime(1991, 8, 24, 21, 4, 0, 'CET'));
select toTypeName(makeDateTime64(1991, 8, 24, 21, 4, 0));
select toTypeName(makeDateTime64(1991, 8, 24, 21, 4, 0, 123));
select toTypeName(makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 6));
select toTypeName(makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 7, 'CET'));
select toTypeName(map(1, assumeNotNull(materialize(NULL))));
SELECT toTypeName(map(materialize(toLowCardinality('1')), materialize(toLowCardinality('2'))));
SELECT toTypeName(map(materialize(toLowCardinality('1')), toLowCardinality('2')));
SELECT toTypeName(map(toLowCardinality('1'), materialize(toLowCardinality('2'))));
SELECT toTypeName(map(toLowCardinality('1'), toLowCardinality('2')));
select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s)) from (select number k, toLowCardinality(toString(number)) s from numbers(2)) as js1 full join (select toLowCardinality(number+1) k, toString(number+1) s from numbers(2)) as js2 ON js1.k = js2.k order by js1.k, js2.k;
select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s)) from (select number k, toLowCardinality(toString(number)) s from numbers(2)) as js1 full join (select toLowCardinality(number+1) k, toString(number+1) s from numbers(2)) as js2 using k order by js1.k, js2.k;
select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s)) from (select number k, toLowCardinality(toString(number)) s from numbers(2)) as js1 join (select toLowCardinality(number+1) k, toString(number+1) s from numbers(2)) as js2 using k order by js1.k, js2.k;
select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s)) from (select toLowCardinality(number) k, toLowCardinality(toString(number)) s from numbers(2)) as js1 full join (select toLowCardinality(number+1) k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2 using k order by js1.k, js2.k;
select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s)) from (select toLowCardinality(number) k, toLowCardinality(toString(number)) s from numbers(2)) as js1 join (select toLowCardinality(number+1) k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2 using k order by js1.k, js2.k;
select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s)) from (select toLowCardinality(number) k, toString(number) s from numbers(2)) as js1 full join (select number+1 k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2 using k order by js1.k, js2.k;
select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s)) from (select toLowCardinality(number) k, toString(number) s from numbers(2)) as js1 join (select number+1 k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2 using k order by js1.k, js2.k;
select toTypeName(multiIf(toLowCardinality(number % 2), 1, 1, 2, 3)) from numbers(1);
SELECT toTypeName(nest.a), toTypeName(nest.b), toTypeName(nest.c) FROM decimal;
SELECT toTypeName(nest.a[1]), toTypeName(nest.b[1]), toTypeName(nest.c[1]) FROM decimal;
SELECT toTypeName(not 0);
SELECT toTypeName(not 1);
SELECT toTypeName(not 100000000);
SELECT toTypeName(not false);
SELECT toTypeName(now('UTC') - 1);
SELECT toTypeName(now() + 1) LIKE 'DateTime%';
SELECT toTypeName(now() - 1) LIKE 'DateTime%';
SELECT toTypeName(now() - 1);
SELECT toTypeName(now() - now()) = 'Int32';
SELECT toTypeName(now());
SELECT toTypeName(now64(3) - 1);
SELECT toTypeName(now64(3));
select toTypeName(nullable_str),toTypeName(low_str),toTypeName(ip),toTypeName(status), toTypeName(tup), toTypeName(tup_min), toTypeName(tup_max), toTypeName(arr), toTypeName(uniq_arr) from simple limit 1;
SELECT toTypeName(obj) FROM t_json LIMIT 1;
SELECT toTypeName(quantileState(x)) FROM (SELECT uniqState(number) AS x FROM numbers(1000));
select toTypeName(rand(cast(4 as Nullable(UInt8))));
select toTypeName(rand(Null));
select toTypeName(randCanonical(CAST(4 as Nullable(UInt8))));
select toTypeName(randCanonical(Null));
select toTypeName(randConstant(CAST(4 as Nullable(UInt8))));
select toTypeName(randConstant(Null));
SELECT toTypeName(randomPrintableASCII(1000));
SELECT toTypeName(randomStringUTF8(10));
select toTypeName(reinterpretAsFixedString(0xdeadbeef));
SELECT toTypeName(res), avgMap(statusMap) as res FROM map_comb;
SELECT toTypeName(res), sumMap(statusMap) as res FROM map_comb;
SELECT toTypeName(res), sumMapMerge(s) as res FROM (SELECT sumMapState(statusMap) AS s FROM map_comb);
SELECT toTypeName(res), sumWithOverflowMap(statusMap) as res FROM map_comb;
SELECT toTypeName(sum(n)) FROM (SELECT toFloat32(number) AS n FROM system.numbers LIMIT 100);
SELECT toTypeName(sum(n)) FROM (SELECT toUInt16(number) AS n FROM system.numbers LIMIT 100);
SELECT toTypeName(sumCount(number::UInt8)), sumCount(number::UInt8) FROM numbers(250);
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '16777216'::LowCardinality(Float32) AS v UNION ALL SELECT '1'::LowCardinality(Float32) AS v UNION ALL SELECT '1'::LowCardinality(Float32) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '16777216'::LowCardinality(Nullable(Float32)) AS v UNION ALL SELECT '1'::LowCardinality(Nullable(Float32)) AS v UNION ALL SELECT '1'::LowCardinality(Nullable(Float32)) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '16777216'::Nullable(Float32) AS v UNION ALL SELECT '1'::Nullable(Float32) AS v UNION ALL SELECT '1'::Nullable(Float32) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '9007199254740992'::LowCardinality(Float64) AS v UNION ALL SELECT '1'::LowCardinality(Float64) AS v UNION ALL SELECT '1'::LowCardinality(Float64) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '9007199254740992'::LowCardinality(Nullable(Float64)) AS v UNION ALL SELECT '1'::LowCardinality(Nullable(Float64)) AS v UNION ALL SELECT '1'::LowCardinality(Nullable(Float64)) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '9007199254740992'::LowCardinality(Nullable(UInt64)) AS v UNION ALL SELECT '1'::LowCardinality(Nullable(UInt64)) AS v UNION ALL SELECT '1'::LowCardinality(Nullable(UInt64)) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '9007199254740992'::Nullable(Float64) AS v UNION ALL SELECT '1'::Nullable(Float64) AS v UNION ALL SELECT '1'::Nullable(Float64) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '9007199254740992'::Nullable(UInt64) AS v UNION ALL SELECT '1'::Nullable(UInt64) AS v UNION ALL SELECT '1'::Nullable(UInt64) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM ( SELECT v FROM ( SELECT '9007199254740992'::LowCardinality(UInt64) AS v UNION ALL SELECT '1'::LowCardinality(UInt64) AS v UNION ALL SELECT '1'::LowCardinality(UInt64) AS v ) ORDER BY v );
SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1'::Int256 AS v FROM numbers(100));
SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1'::UInt128 AS v FROM numbers(100));
SELECT toTypeName(sumCount(v)), sumCount(v) FROM (SELECT '1'::UInt256 AS v FROM numbers(100));
SELECT toTypeName(sumMapFilteredState([1, 2])([1, 2, 3], [10, 10, 10]));
SELECT toTypeName(sumWithOverflow(n)) FROM (SELECT toFloat32(number) AS n FROM system.numbers LIMIT 100);
SELECT toTypeName(sumWithOverflow(n)) FROM (SELECT toUInt16(number) AS n FROM system.numbers LIMIT 100);
SELECT toTypeName(today() + 1) = 'Date';
SELECT toTypeName(today() - 1) = 'Date';
SELECT toTypeName(today() - today()) = 'Int32';
SELECT toTypeName(today()) = 'Date';
select toTypeName(toDecimal32OrZero(toString(number), 5)) from numbers(5);
select toTypeName(toInt32(assumeNotNull(materialize(NULL))));
select toTypeName(toInt64OrZero(toString(number))) from numbers(5);
select toTypeName(toLowCardinality(number % 2) and 2) from numbers(1);
select toTypeName(toLowCardinality(number % 2) or 2) from numbers(1);
SELECT toTypeName(topKArrayResampleOrDefaultIfState(10, 1, 2, 42)([toString(number)], number, number % 2)) FROM numbers(100);
SELECT toTypeName(topKArrayState(10)([toString(number)])) FROM numbers(100);
SELECT toTypeName(topKDistinctState(10)(toString(number))) FROM numbers(100);
SELECT toTypeName(topKForEachState(10)([toString(number)])) FROM numbers(100);
SELECT toTypeName(topKIfState(10)(toString(number), number % 2)) FROM numbers(100);
SELECT toTypeName(topKMergeState(10)(state)) FROM (SELECT topKState(10)(toString(number)) as state FROM numbers(100));
SELECT toTypeName(topKOrNullState(10)(toString(number))) FROM numbers(100);
SELECT toTypeName(topKResampleState(10, 1, 2, 42)(toString(number), number)) FROM numbers(100);
SELECT toTypeName(topKState(10)(toString(number))) FROM numbers(100);
select toTypeName(toString(number)) from numbers(5);
SELECT toTypeName(toTimeZone(now64(3), 'UTC') - 1);
SELECT toTypeName(true);
SELECT toTypeName(tup), toTypeName(tup.1), toTypeName(tup.2), toTypeName(tup.3) FROM decimal;
select toTypeName(tuple(1, assumeNotNull(materialize(NULL))));
SELECT toTypeName(tuple(materialize(toLowCardinality('1')), materialize(toLowCardinality(1))));
SELECT toTypeName(tuple(materialize(toLowCardinality('1')), toLowCardinality(1)));
SELECT toTypeName(tuple(toLowCardinality('1'), materialize(toLowCardinality(1))));
SELECT toTypeName(tuple(toLowCardinality('1'), toLowCardinality(1)));
SELECT toTypeName(uniqExactState(x)) FROM (SELECT quantileState(number) AS x FROM numbers(1000));
select toTypeName(val) from simple limit 1;
SELECT toTypeName(WIDTH_BUCKET(1, 2, 3, toUInt16(1)));
SELECT toTypeName(WIDTH_BUCKET(1, 2, 3, toUInt32(1)));
SELECT toTypeName(WIDTH_BUCKET(1, 2, 3, toUInt64(1)));
SELECT toTypeName(x) FROM (SELECT 'hello' AS x UNION ALL SELECT toLowCardinality('hello'));
SELECT toTypeName(x) FROM (SELECT toDecimal128('12345.00', 4) AS x UNION ALL SELECT toInt16(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal128('12345.00', 4) AS x UNION ALL SELECT toInt32(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal128('12345.00', 4) AS x UNION ALL SELECT toInt64(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal128('12345.00', 4) AS x UNION ALL SELECT toInt8(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal128('12345.00', 4) AS x UNION ALL SELECT toUInt16(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal128('12345.00', 4) AS x UNION ALL SELECT toUInt32(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal128('12345.00', 4) AS x UNION ALL SELECT toUInt64(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal128('12345.00', 4) AS x UNION ALL SELECT toUInt8(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12.345', 7) AS x UNION ALL SELECT toInt8(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12.345', 7) AS x UNION ALL SELECT toUInt8(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('1234.5', 5) AS x UNION ALL SELECT toInt16(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('1234.5', 5) AS x UNION ALL SELECT toInt8(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('1234.5', 5) AS x UNION ALL SELECT toUInt16(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('1234.5', 5) AS x UNION ALL SELECT toUInt8(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12345', 0) AS x UNION ALL SELECT toInt32(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12345.0', 4) AS x UNION ALL SELECT toInt16(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12345.0', 4) AS x UNION ALL SELECT toUInt16(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12345.00', 4) AS x UNION ALL SELECT toInt32(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12345.00', 4) AS x UNION ALL SELECT toInt64(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12345.00', 4) AS x UNION ALL SELECT toUInt32(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal32('12345.00', 4) AS x UNION ALL SELECT toUInt64(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345', 0) AS x UNION ALL SELECT toInt64(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toInt16(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toInt32(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toInt64(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toInt8(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toUInt16(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toUInt32(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toUInt64(0) AS x) WHERE x = 0;
SELECT toTypeName(x) FROM (SELECT toDecimal64('12345.00', 4) AS x UNION ALL SELECT toUInt8(0) AS x) WHERE x = 0;
SELECT toTypeName(x), x, isNull(x), if(x = 0, 'fail', 'ok'), if(x = 1, 'fail', 'ok'), if(x >= 0, 'fail', 'ok') FROM (SELECT CAST(NULL, 'Nullable(UInt8)') AS x);
SELECT toTypeName(x), x, isNull(x), if(x = 0, 'fail', 'ok'), if(x = 1, 'fail', 'ok'), if(x >= 0, 'fail', 'ok') FROM (SELECT if(1 = 0, toNullable(toUInt8(0)), NULL) AS x);
SELECT toTypeName(x), x, isNull(x), if(x = 0, 'fail', 'ok'), if(x = 1, 'fail', 'ok'), if(x >= 0, 'fail', 'ok') FROM (SELECT materialize(CAST(NULL, 'Nullable(UInt8)')) AS x);
SELECT toTypeName(x), x, isNull(x), if(x = 0, 'fail', 'ok'), if(x = 1, 'fail', 'ok'), if(x >= 0, 'fail', 'ok') FROM (SELECT materialize(if(1 = 0, toNullable(toUInt8(0)), NULL)) AS x);
SELECT toTypeName(xor(0, 10000000));
SELECT toTypeName(xor(1, 10));
SELECT toTypeName(xor(1, true));
SELECT toTypeName(xor(false, true));
SELECT toTypeName(yesterday()) = 'Date';
SELECT toTypeName(YYYYMMDDhhmmssToDateTime(19910824));
SELECT toTypeName(YYYYMMDDhhmmssToDateTime(cast(19910824 AS Nullable(UInt64))));
SELECT toTypeName(YYYYMMDDhhmmssToDateTime64(19910824));
SELECT toTypeName(YYYYMMDDhhmmssToDateTime64(19910824, 5));
SELECT toTypeName(YYYYMMDDhhmmssToDateTime64(cast(19910824 AS Nullable(UInt64))));
SELECT toTypeName(YYYYMMDDToDate(19910824));
SELECT toTypeName(YYYYMMDDToDate(cast(19910824 AS Nullable(UInt64))));
SELECT toTypeName(YYYYMMDDToDate32(19910824));
SELECT toTypeName(YYYYMMDDToDate32(cast(19910824 AS Nullable(UInt64))));
SELECT toTypeName({id: Int64}), toTypeName({arr: Array(UInt8)}), toTypeName({map_2: Map(String, UInt8)}), toTypeName({mul_arr: Array(Array(UInt8))}), toTypeName({map_arr: Map(UInt8, Array(UInt8))}), toTypeName({map_map_arr: Map(String, Map(String, Array(UInt8)))});
SELECT toTypeName({num:UInt64}), toTypeName({str:String}), toTypeName({date:DateTime}), toTypeName({map:Map(UUID, Array(Float32))});
SELECT toUInt128(-1), bitPositionsToArray(toUInt128(1));
SELECT toUInt128(0), bitPositionsToArray(toUInt128(0));
SELECT toUInt128(1), bitPositionsToArray(toUInt128(1));
SELECT toUInt128(toUUID('00000000-0000-0000-0000-000000000000'));
SELECT toUInt128(toUUID('f82aef31-279e-431f-8b00-2899ad387aea'));
SELECT toUInt128(toUUID('ffffffff-ffff-ffff-ffff-ffffffffffff'));
SELECT toUInt16(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toFloat32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt16(0), bitPositionsToArray(toUInt16(0));
SELECT toUInt16(1) IN (1, 1000, 3);
SELECT toUInt16(1), bitPositionsToArray(toUInt16(1));
SELECT toUInt16(9999) as x, toDecimal32(x, 0), toDecimal64(x, 0);
select toUInt16(number * 2) as x from numbers(42) order by x desc;
SELECT toUInt16(number) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toUInt16(number) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toUInt16(number) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
select toUInt16OrDefault('1', cast(2 as UInt16));
select toUInt16OrDefault('1xx', cast(2 as UInt16));
SELECT toUInt256(0), bitPositionsToArray(toUInt256(0));
SELECT toUInt256(1), bitPositionsToArray(toUInt256(1));
SELECT toUInt256(123) AS k GROUP BY k;
SELECT toUInt256(123) IN (NULL);
SELECT toUInt256(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
SELECT toUInt256(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toUInt256(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toUInt256(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(6, 1);
select toUInt256OrDefault('1', cast(2 as UInt256));
select toUInt256OrDefault('1xx', cast(2 as UInt256));
SELECT toUInt32(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toFloat32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt32(0), bitPositionsToArray(toUInt32(0));
SELECT toUInt32(1), bitPositionsToArray(toUInt32(1));
SELECT toUInt32(2147483648) AS x, a == x FROM decimal WHERE a = 42;
SELECT toUInt32(999999999) as x, toDecimal32(x, 0), toDecimal64(x, 0);
SELECT toUInt32(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
select toUInt32(number * 2) as x from numbers(42) order by x desc;
SELECT toUInt32(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toUInt32(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toUInt32(number) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toUInt32(number) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toUInt32(number) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
SELECT toUInt32(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(1);
SELECT toUInt32(s) % 5 AS k, groupUniqArray(u % 4) FROM t_sparse_full WHERE s != '' GROUP BY k ORDER BY k;
SELECT toUInt32(x), y, z FROM pk WHERE (x >= toDateTime(100000)) AND (x <= toDateTime(90000));
SELECT toUInt32(x), y, z FROM pk WHERE (x BETWEEN toDateTime(60) AND toDateTime(119)) AND y = 11;
SELECT toUInt32(x), y, z FROM pk WHERE (x BETWEEN toDateTime(60) AND toDateTime(120)) AND y = 11;
SELECT toUInt32(x), y, z FROM pk WHERE x = toDateTime(1);
SELECT toUInt32(x), y, z FROM pk WHERE x BETWEEN toDateTime(0) AND toDateTime(59);
SELECT toUInt32(x), y, z FROM pk WHERE x BETWEEN toDateTime(120) AND toDateTime(240);
select toUInt32OrDefault('1', cast(2 as UInt32));
select toUInt32OrDefault('1xx', cast(2 as UInt32));
SELECT toUInt32OrDefault(toNullable(toUInt32(1)), toNullable(toUInt32(2))) SETTINGS cast_keep_nullable=1;
SELECT toUInt32OrDefault(toUInt32(1)) SETTINGS cast_keep_nullable=1;
SELECT toUInt32OrDefault(toUInt32(1), toUInt32(2)) SETTINGS cast_keep_nullable=1;
SELECT toUInt32OrZero('123a'), toUInt32OrZero('456');
SELECT toUInt32OrZero(arrayJoin(['123a', '456']));
SELECT toUInt64('2147483647') AS x, toDecimal32(x, 0);
SELECT toUInt64('9223372036854775809') AS x, toDecimal64(x, 0);
SELECT toUInt64((SELECT 9)) IN (SELECT number FROM system.numbers LIMIT 10);
SELECT toUInt64(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt64(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt64(0) AS x, toFloat32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt64(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt64(0) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt64(0) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt64(0) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt64(0), bitPositionsToArray(toUInt64(0));
SELECT toUInt64(1) as key, dictGet('01785_db.simple_key_cache_dictionary', 'value', key);
SELECT toUInt64(1) as key, dictGet('simple_key_cache_dictionary_01862', 'value', key) FORMAT Null;
select toUInt64(1) union all select countIf(n>0) from (select 2 as n);
SELECT toUInt64(1) x FROM (select 1) GROUP BY 1 HAVING x IN ( SELECT countIf(y, z == 1) FROM (SELECT 1 y, 1 z) );
SELECT toUInt64(1), bitPositionsToArray(toUInt64(1));
SELECT toUInt64(2) as key, dictGet('simple_key_cache_dictionary_01862', 'value', key) FORMAT Null;
SELECT toUInt64(42) AS x FORMAT Vertical SETTINGS use_query_cache = 1;
SELECT toUInt64(42) FORMAT Vertical SETTINGS use_query_cache = 1;
SELECT toUInt64(9223372036854775808) AS x, b == x FROM decimal WHERE a = 42;
SELECT toUInt64(999999999) as x, toDecimal32(x, 0), toDecimal64(x, 0);
SELECT toUInt64(dense_rank(1) OVER (ORDER BY 100 ASC GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) FROM numbers(10);
SELECT toUInt64(NULL) AS x FROM (SELECT 1) HAVING x IN (SELECT NULL FROM (SELECT x IN (SELECT x IN (SELECT 1), x IN (SELECT 1) FROM (SELECT 1 WHERE x IN (SELECT NULL FROM (SELECT NULL))))));
SELECT toUInt64(number * -1) * number y, toInt128(y), toInt256(y), toUInt256(y) FROM numbers_mt(10) ORDER BY number;
select toUInt64(number * 2) as x from numbers(42) order by x desc;
SELECT toUInt64(number * number) * -1 y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toUInt64(number * number) * number y, toDecimal32(y, 1), toDecimal64(y, 2), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers_mt(10) ORDER BY number;
SELECT toUInt64(number) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toUInt64(number) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toUInt64(number) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
SELECT toUInt64(number) y, toDecimal32(y, 1), toDecimal64(y, 5), toDecimal128(y, 6), toDecimal256(y, 7) FROM numbers(3, 1);
SELECT toUInt64(round(exp10(number))) AS x, toString(x) AS s FROM system.numbers LIMIT 10 FORMAT Pretty;
SELECT toUInt64(round(exp10(number))) AS x, toString(x) AS s FROM system.numbers LIMIT 10 FORMAT PrettyCompact;
SELECT toUInt64(round(exp10(number))) AS x, toString(x) AS s FROM system.numbers LIMIT 10 FORMAT PrettyCompactMonoBlock;
SELECT toUInt64(round(exp10(number))) AS x, toString(x) AS s FROM system.numbers LIMIT 10 FORMAT PrettySpace;
select toUInt64(toLowCardinality(val)) from (select arrayJoin(['1']) as val);
SELECT toUInt64(toUUID('00000000-0000-0000-0000-000000000000'));
SELECT toUInt64(value),f FROM bool_test;
select toUInt64OrDefault('1', cast(2 as UInt64));
select toUInt64OrDefault('1xx', cast(2 as UInt64));
SELECT toUInt64OrZero(s), toUInt64OrNull(s) FROM (SELECT CASE WHEN number % 2 = 1 THEN toString(number) ELSE 'hello' END AS s FROM system.numbers) LIMIT 10;
SELECT toUInt64OrZero(s), toUInt64OrNull(s) FROM (SELECT CASE WHEN number = 5 THEN NULL WHEN number % 2 = 1 THEN toString(number) ELSE 'hello' END AS s FROM system.numbers) LIMIT 10;
SELECT toUInt8(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toFloat32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toUInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toUInt32(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toUInt64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0) AS x, toUInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);
SELECT toUInt8(0), bitPositionsToArray(toUInt8(0));
SELECT toUInt8(1), bitPositionsToArray(toUInt8(1));
SELECT toUInt8(128), bitPositionsToArray(toUInt8(128));
SELECT toUInt8(255) AS u, toInt8(127) AS s, fromDaysSinceYearZero(u), fromDaysSinceYearZero32(u), fromDaysSinceYearZero(s), fromDaysSinceYearZero32(s);
SELECT toUInt8(99) as x, toDecimal32(x, 0), toDecimal64(x, 0);
SELECT toUInt8(assumeNotNull(cast(cast(NULL, 'Nullable(String)'), 'Nullable(Enum8(\'Hello\' = 1))')));
select toUInt8(number * 2) as x from numbers(42) order by x desc;
SELECT toUInt8(number) AS x, round(x), roundBankers(x), floor(x), ceil(x), trunc(x) FROM system.numbers LIMIT 20;
SELECT toUInt8(number) AS x, round(x, -1), roundBankers(x, -1), floor(x, -1), ceil(x, -1), trunc(x, -1) FROM system.numbers LIMIT 20;
SELECT toUInt8(number) AS x, round(x, -2), roundBankers(x, -2), floor(x, -2), ceil(x, -2), trunc(x, -2) FROM system.numbers LIMIT 20;
SELECT toUInt8(number) as x, roundDown(x, [-1.5, e(), pi(), 5.5]) FROM system.numbers LIMIT 10;
select toUInt8(x) from values('x Nullable(String)', '42', NULL, '0', '', '256');
select toUInt8OrDefault('1', cast(2 as UInt8));
select toUInt8OrDefault('1xx', cast(2 as UInt8));
SELECT toUnixTimestamp('2017-11-05 08:07:47', 'Asia/Istanbul');
select toUnixTimestamp(makeDate(2023, 5, 10));
select toUnixTimestamp(makeDate(2023, 5, 10), 'Pacific/Auckland');
select toUnixTimestamp(makeDate32(2023, 5, 10));
select toUnixTimestamp(makeDate32(2023, 5, 10), 'Pacific/Auckland');
SELECT toUnixTimestamp(timestamp) FROM test_datetime;
SELECT toUnixTimestamp(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toUnixTimestamp(toDateTime64('1900-12-12 11:22:33', 0, 'UTC'));
SELECT toUnixTimestamp(toDateTime64('1928-12-31 12:12:12.123', 3, 'UTC'));
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Asia/Istanbul'), 'Asia/Istanbul');
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Asia/Istanbul'), 'Asia/Tokyo');
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Asia/Istanbul'), 'Europe/London');
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Asia/Istanbul'), 'Europe/Paris');
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Asia/Istanbul'), 'Pacific/Pitcairn');
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Asia/Tokyo'), 'Asia/Tokyo');
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Europe/London'), 'Europe/London');
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Europe/Paris'), 'Europe/Paris');
SELECT toUnixTimestamp(toString(toDateTime(1426415400), 'Pacific/Pitcairn'), 'Pacific/Pitcairn');
SELECT toUnixTimestamp(x) as tt, (toDateTime('1981-04-01 00:00:00', 'Asia/Istanbul') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(576) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('1981-04-01 00:00:00', 'Europe/Moscow') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(576) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('1981-09-30 00:00:00', 'Asia/Istanbul') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(576) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('1981-09-30 00:00:00', 'Europe/Moscow') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(576) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('2019-04-07 01:00:00', 'Australia/Lord_Howe') + INTERVAL number * 600 SECOND) AS x, toString(x) as xx FROM numbers(20);
SELECT toUnixTimestamp(x) as tt, (toDateTime('2019-04-07 01:00:00', 'Australia/Lord_Howe') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(18) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('2019-04-07 01:00:00', 'Australia/Lord_Howe') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(576) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('2020-03-21 00:00:00', 'Asia/Tehran') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(576) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('2020-09-20 00:00:00', 'Asia/Tehran') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(576) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('2020-10-04 01:40:00', 'Australia/Lord_Howe') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(18) where res != calc;
SELECT toUnixTimestamp(x) as tt, (toDateTime('2020-10-04 01:40:00', 'Australia/Lord_Howe') + INTERVAL number * 600 SECOND) AS x, timezoneOffset(x) as res,(toDateTime(toString(x), 'UTC') - x ) AS calc FROM numbers(576) where res != calc;
select toUnixTimestamp(x, 'Asia/Istanbul') from values ('x Nullable(String)', '2000-01-01 13:12:12', NULL, '');
select toUnixTimestamp64Milli(toDateTime64('1969-12-31 23:59:59.999', 3, 'Europe/Amsterdam'));
select toUnixTimestamp64Milli(toDateTime64('1969-12-31 23:59:59.999', 3, 'UTC'));
SELECT toUUID('417ddc5d-e556-4d27-95dd-a34d84e46a50');
SELECT toUUID('417ddc5de5564d2795dda34d84e46a50');
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') != '61f0c404-5cb3-11e7-907b-a6006ad3dba0';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') != '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') < '61f0c404-5cb3-11e7-907b-a6006ad3dba0';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') < '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') <= '61f0c404-5cb3-11e7-907b-a6006ad3dba0';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') <= '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') = '61f0c404-5cb3-11e7-907b-a6006ad3dba0';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') = '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') > '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') >= '61f0c404-5cb3-11e7-907b-a6006ad3dba0';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') >= '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0');
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0T');
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba1') < '61f0c404-5cb3-11e7-907b-a6006ad3dba0';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba1') > '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba2') <= '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba2') > '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba2') >= '61f0c404-5cb3-11e7-907b-a6006ad3dba1';
select toUUID('f82aef31-279e-431f-8b00-2899ad387aea')::UInt128;
SELECT toUUID(-1.1);
SELECT toUUID(lc) as e, toTypeName(e) FROM t2;
select toUUID(str1), toUUID(str2), toUUID(str3) from lc_str_uuid;
select toUUID(str1, '', NULL), toUUID(str2, '', NULL), toUUID(str3, '', NULL) from lc_str_uuid;
SELECT toUUID(value) FROM to_uuid_test;
SELECT toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));
SELECT toUUIDOrZero('59f0c404-5cb3-11e7-907b-a6006ad3dba0T');
SELECT toUUIDOrZero(value) FROM to_uuid_test;
select toValidUTF8('') from system.numbers limit 10;
select toValidUTF8('123456789012345\xc2') from system.numbers limit 10;
select toValidUTF8('123456789012345\xed') from system.numbers limit 10;
select toValidUTF8('123456789012345\xed123456789012345\xed') from system.numbers limit 10;
select toValidUTF8('123456789012345\xed\xed\xed\xed\xed\xed\xff\xff\xff\xff\xff\xff123456789012345\xed') from system.numbers limit 10;
select toValidUTF8('123456789012345\xf1') from system.numbers limit 10;
select toValidUTF8('12345678901234\xed') from system.numbers limit 10;
select toValidUTF8('\x00') from system.numbers limit 10;
select toValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF0\x80\x80\x80') from system.numbers limit 10;
select toValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1') from system.numbers limit 10;
select toValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80') from system.numbers limit 10;
select toValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80\x80') from system.numbers limit 10;
select toValidUTF8('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xF1\x80\xC2\x80') from system.numbers limit 10;
select toValidUTF8('\x00\x00\x00\x00\x00\xC2\x80\x00\x00\x00\xE1\x80\x80\x00\x00\xC2\xC2\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00') from system.numbers limit 10;
select toValidUTF8('\x00\x00\x00\x00\x00\xC2\xC2\x80\x00\x00\xE1\x80\x80\x00\x00\x00') from system.numbers limit 10;
select toValidUTF8('\x00\x7F') from system.numbers limit 10;
select toValidUTF8('\x66') from system.numbers limit 10;
select toValidUTF8('\x7F') from system.numbers limit 10;
select toValidUTF8('\x7F\x00') from system.numbers limit 10;
select toValidUTF8('\x80') from system.numbers limit 10;
select toValidUTF8('\xa0\xa1') from system.numbers limit 10;
select toValidUTF8('\xBF') from system.numbers limit 10;
select toValidUTF8('\xC0\x80') from system.numbers limit 10;
select toValidUTF8('\xc0\x9f') from system.numbers limit 10;
select toValidUTF8('\xC1\x00') from system.numbers limit 10;
select toValidUTF8('\xC2\x7F') from system.numbers limit 10;
select toValidUTF8('\xC2\x80') from system.numbers limit 10;
select toValidUTF8('\xc3\x28') from system.numbers limit 10;
select toValidUTF8('\xc3\xb1') from system.numbers limit 10;
select toValidUTF8('\xDF\xBF') from system.numbers limit 10;
select toValidUTF8('\xDF\xC0') from system.numbers limit 10;
select toValidUTF8('\xE0\x9F\x80') from system.numbers limit 10;
select toValidUTF8('\xE0\xA0\x80') from system.numbers limit 10;
select toValidUTF8('\xE0\xA0\xBF') from system.numbers limit 10;
select toValidUTF8('\xE0\xC2\x80') from system.numbers limit 10;
select toValidUTF8('\xe2\x28\xa1') from system.numbers limit 10;
select toValidUTF8('\xe2\x82\x28') from system.numbers limit 10;
select toValidUTF8('\xe2\x82\xa1') from system.numbers limit 10;
select toValidUTF8('\xED\x7F\x80') from system.numbers limit 10;
select toValidUTF8('\xED\x9F\x80') from system.numbers limit 10;
select toValidUTF8('\xED\xA0\x80') from system.numbers limit 10;
select toValidUTF8('\xed\xa0\x81') from system.numbers limit 10;
select toValidUTF8('\xEF\x80\x00') from system.numbers limit 10;
select toValidUTF8('\xEF\x80\xBF') from system.numbers limit 10;
select toValidUTF8('\xf0\x28\x8c\x28') from system.numbers limit 10;
select toValidUTF8('\xf0\x28\x8c\xbc') from system.numbers limit 10;
select toValidUTF8('\xF0\x8F\x80\x80') from system.numbers limit 10;
select toValidUTF8('\xf0\x90\x28\xbc') from system.numbers limit 10;
select toValidUTF8('\xf0\x90\x8c\xbc') from system.numbers limit 10;
select toValidUTF8('\xF0\x90\xBF\x80') from system.numbers limit 10;
select toValidUTF8('\xF0\xEE\x80\x80') from system.numbers limit 10;
select toValidUTF8('\xF2\x81\xBE\x99') from system.numbers limit 10;
select toValidUTF8('\xF2\x90\x91\x7F') from system.numbers limit 10;
select toValidUTF8('\xF4\x00\xBF\xBF') from system.numbers limit 10;
select toValidUTF8('\xF4\x8F\x88\xAA') from system.numbers limit 10;
select toValidUTF8('\xF4\x90\x88\xAA') from system.numbers limit 10;
select toValidUTF8('\xf5\xff\xff\xff') from system.numbers limit 10;
select toValidUTF8('\xf8\x90\x80\x80\x80') from system.numbers limit 10;
select toValidUTF8('a') from system.numbers limit 10;
select toValidUTF8('some text') from system.numbers limit 10;
select toValidUTF8('какой-то текст') from system.numbers limit 10;
select toValidUTF8('안녕하세요, 세상') from system.numbers limit 10;
SELECT toWeek(d), toWeek(dt), toWeek(dt64), toWeek(str_d), toWeek(str_dt), toWeek(str_dt64) FROM tab ORDER BY d;
SELECT toWeek(toDate('1995-01-01')), toWeek(toDate('1995-01-01'), 1);
SELECT toWeek(toDate('1998-12-31')), toWeek(toDate('1997-12-31')), toWeek(toDate('1998-12-31'), 1), toWeek(toDate('1997-12-31'), 1);
SELECT toWeek(toDate('1998-12-31'),0) AS w0, toWeek(toDate('1998-12-31'),1) AS w1, toWeek(toDate('1998-12-31'),2) AS w2, toWeek(toDate('1998-12-31'),3) AS w3, toWeek(toDate('1998-12-31'),4) AS w4, toWeek(toDate('1998-12-31'),5) AS w5, toWeek(toDate('1998-12-31'),6) AS w6, toWeek(toDate('1998-12-31'),7) AS w7;
SELECT toWeek(toDate('2000-01-01'),0) AS w0, toWeek(toDate('2000-01-01'),1) AS w1, toWeek(toDate('2000-01-01'),2) AS w2, toWeek(toDate('2000-01-01'),3) AS w3, toWeek(toDate('2000-01-01'),4) AS w4, toWeek(toDate('2000-01-01'),5) AS w5, toWeek(toDate('2000-01-01'),6) AS w6, toWeek(toDate('2000-01-01'),7) AS w7;
SELECT toWeek(toDate('2000-01-01'),1) AS w2000, toWeek(toDate('2001-01-01'),1) AS w2001, toWeek(toDate('2002-01-01'),1) AS w2002,toWeek(toDate('2003-01-01'),1) AS w2003, toWeek(toDate('2004-01-01'),1) AS w2004, toWeek(toDate('2005-01-01'),1) AS w2005, toWeek(toDate('2006-01-01'),1) AS w2006;
SELECT toWeek(toDate('2000-01-06'),0) AS w0, toWeek(toDate('2000-01-06'),1) AS w1, toWeek(toDate('2000-01-06'),2) AS w2, toWeek(toDate('2000-01-06'),3) AS w3, toWeek(toDate('2000-01-06'),4) AS w4, toWeek(toDate('2000-01-06'),5) AS w5, toWeek(toDate('2000-01-06'),6) AS w6, toWeek(toDate('2000-01-06'),7) AS w7;
SELECT toWeek(toDate('2000-01-06'),0) AS w2000, toWeek(toDate('2001-01-06'),0) AS w2001, toWeek(toDate('2002-01-06'),0) AS w2002,toWeek(toDate('2003-01-06'),0) AS w2003, toWeek(toDate('2004-01-06'),0) AS w2004, toWeek(toDate('2005-01-06'),0) AS w2005, toWeek(toDate('2006-01-06'),0) AS w2006;
SELECT toWeek(toDate('2000-01-06'),1) AS w2000, toWeek(toDate('2001-01-06'),1) AS w2001, toWeek(toDate('2002-01-06'),1) AS w2002,toWeek(toDate('2003-01-06'),1) AS w2003, toWeek(toDate('2004-01-06'),1) AS w2004, toWeek(toDate('2005-01-06'),1) AS w2005, toWeek(toDate('2006-01-06'),1) AS w2006;
SELECT toWeek(toDate('2000-12-31'),0) AS w0, toWeek(toDate('2000-12-31'),1) AS w1, toWeek(toDate('2000-12-31'),2) AS w2, toWeek(toDate('2000-12-31'),3) AS w3, toWeek(toDate('2000-12-31'),4) AS w4, toWeek(toDate('2000-12-31'),5) AS w5, toWeek(toDate('2000-12-31'),6) AS w6, toWeek(toDate('2000-12-31'),7) AS w7;
SELECT toWeek(toDate('2000-12-31'),2),toWeek(toDate('2000-12-31'),3);
SELECT toWeek(toDate('2001-01-01'),0) AS w0, toWeek(toDate('2001-01-01'),1) AS w1, toWeek(toDate('2001-01-01'),2) AS w2, toWeek(toDate('2001-01-01'),3) AS w3, toWeek(toDate('2001-01-01'),4) AS w4, toWeek(toDate('2001-01-01'),5) AS w5, toWeek(toDate('2001-01-01'),6) AS w6, toWeek(toDate('2001-01-01'),7) AS w7;
SELECT toWeek(toDateTime('2016-06-15 23:00:00')), toWeek('2016-06-15'), toWeek('2016-06-15 23:00:00'), toWeek('2016-06-15 23:00:00.123456');
select toWeek(x1) from t1;
SELECT toYear(d) AS y, count() FROM ( SELECT today() AS d WHERE 0) GROUP BY y ORDER BY y ASC WITH FILL FROM 2019 TO 2023;
SELECT toYear(d) AS y, count() FROM ( SELECT today() AS d WHERE 0) GROUP BY y ORDER BY y ASC WITH FILL FROM 2019;
SELECT toYear(d) AS y, count() FROM ( SELECT today() AS d WHERE 0) GROUP BY y ORDER BY y ASC WITH FILL TO 2023;
SELECT toYear(d) AS y, count() FROM ( SELECT today() AS d WHERE 0) GROUP BY y ORDER BY y ASC WITH FILL;
SELECT toYear(toDateTime(1412106600), 'Asia/Istanbul');
SELECT toYear(toDateTime(1412106600), 'Asia/Tokyo');
SELECT toYear(toDateTime(1412106600), 'Europe/London');
SELECT toYear(toDateTime(1412106600), 'Europe/Paris');
SELECT toYear(toDateTime(1412106600), 'Pacific/Pitcairn');
SELECT toYear(toDateTime64('1968-12-12 11:22:33', 0, 'UTC'));
select toYear(x1) from t1;
SELECT toYearWeek(d), toYearWeek(dt), toYearWeek(dt64), toYearWeek(str_d), toYearWeek(str_dt), toYearWeek(str_dt64) FROM tab ORDER BY d;
SELECT toYearWeek(toDate('1981-12-31'), 1), toYearWeek(toDate('1982-01-01'), 1), toYearWeek(toDate('1982-12-31'), 1), toYearWeek(toDate('1983-01-01'), 1);
SELECT toYearWeek(toDate('1987-01-01'), 1), toYearWeek(toDate('1987-01-01'));
SELECT toYearWeek(toDate('2000-01-01'),0) AS w2000, toYearWeek(toDate('2001-01-01'),0) AS w2001, toYearWeek(toDate('2002-01-01'),0) AS w2002,toYearWeek(toDate('2003-01-01'),0) AS w2003, toYearWeek(toDate('2004-01-01'),0) AS w2004, toYearWeek(toDate('2005-01-01'),0) AS w2005, toYearWeek(toDate('2006-01-01'),0) AS w2006;
SELECT toYearWeek(toDate('2000-01-01'),1) AS w2000, toYearWeek(toDate('2001-01-01'),1) AS w2001, toYearWeek(toDate('2002-01-01'),1) AS w2002,toYearWeek(toDate('2003-01-01'),1) AS w2003, toYearWeek(toDate('2004-01-01'),1) AS w2004, toYearWeek(toDate('2005-01-01'),1) AS w2005, toYearWeek(toDate('2006-01-01'),1) AS w2006;
SELECT toYearWeek(toDate('2000-01-06'),0) AS w2000, toYearWeek(toDate('2001-01-06'),0) AS w2001, toYearWeek(toDate('2002-01-06'),0) AS w2002,toYearWeek(toDate('2003-01-06'),0) AS w2003, toYearWeek(toDate('2004-01-06'),0) AS w2004, toYearWeek(toDate('2005-01-06'),0) AS w2005, toYearWeek(toDate('2006-01-06'),0) AS w2006;
SELECT toYearWeek(toDate('2000-01-06'),1) AS w2000, toYearWeek(toDate('2001-01-06'),1) AS w2001, toYearWeek(toDate('2002-01-06'),1) AS w2002,toYearWeek(toDate('2003-01-06'),1) AS w2003, toYearWeek(toDate('2004-01-06'),1) AS w2004, toYearWeek(toDate('2005-01-06'),1) AS w2005, toYearWeek(toDate('2006-01-06'),1) AS w2006;
SELECT toYearWeek(toDate('2000-12-31'),0), toYearWeek(toDate('2000-12-31'),1), toYearWeek(toDate('2000-12-31'),2), toYearWeek(toDate('2000-12-31'),3), toYearWeek(toDate('2000-12-31'),4), toYearWeek(toDate('2000-12-31'),5), toYearWeek(toDate('2000-12-31'),6), toYearWeek(toDate('2000-12-31'),7);
SELECT toYearWeek(toDateTime('2016-06-15 23:00:00')), toYearWeek('2016-06-15'), toYearWeek('2016-06-15 23:00:00'), toYearWeek('2016-06-15 23:00:00.123456');
select toYearWeek(x1) from t1;
SELECT toYYYYMM(toDate('2017-07-21'));
SELECT toYYYYMM(toDateTime('2017-07-21T11:22:33'));
select toYYYYMM(x1) from t1;
SELECT toYYYYMMDD(toDate('2017-07-21'));
select toYYYYMMDD(toDate(recordTimestamp, 'Europe/Amsterdam')), toDate(recordTimestamp, 'Europe/Amsterdam'), toFloat32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate(recordTimestamp, 'Europe/Amsterdam')), toDate(recordTimestamp, 'Europe/Amsterdam'), toFloat64(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate(recordTimestamp, 'Europe/Amsterdam')), toDate(recordTimestamp, 'Europe/Amsterdam'), toInt32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate(recordTimestamp, 'Europe/Amsterdam')), toDate(recordTimestamp, 'Europe/Amsterdam'), toUInt32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate(recordTimestamp, 'Europe/Amsterdam')), toDate(recordTimestamp, 'Europe/Amsterdam'), toUInt64(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate32(recordTimestamp, 'Europe/Amsterdam')), toDate32(recordTimestamp, 'Europe/Amsterdam'), toFloat32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate32(recordTimestamp, 'Europe/Amsterdam')), toDate32(recordTimestamp, 'Europe/Amsterdam'), toFloat64(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate32(recordTimestamp, 'Europe/Amsterdam')), toDate32(recordTimestamp, 'Europe/Amsterdam'), toInt32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate32(recordTimestamp, 'Europe/Amsterdam')), toDate32(recordTimestamp, 'Europe/Amsterdam'), toUInt32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDate32(recordTimestamp, 'Europe/Amsterdam')), toDate32(recordTimestamp, 'Europe/Amsterdam'), toUInt64(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
SELECT toYYYYMMDD(toDateTime('2017-07-21T11:22:33'));
select toYYYYMMDD(toDateTime(recordTimestamp, 'Europe/Amsterdam')), toDateTime(recordTimestamp, 'Europe/Amsterdam'), toFloat32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime(recordTimestamp, 'Europe/Amsterdam')), toDateTime(recordTimestamp, 'Europe/Amsterdam'), toFloat64(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime(recordTimestamp, 'Europe/Amsterdam')), toDateTime(recordTimestamp, 'Europe/Amsterdam'), toInt32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime(recordTimestamp, 'Europe/Amsterdam')), toDateTime(recordTimestamp, 'Europe/Amsterdam'), toUInt32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime(recordTimestamp, 'Europe/Amsterdam')), toDateTime(recordTimestamp, 'Europe/Amsterdam'), toUInt64(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam')), toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam'), toFloat32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam')), toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam'), toFloat64(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam')), toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam'), toInt32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam')), toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam'), toUInt32(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam')), toDateTime64(recordTimestamp, 3, 'Europe/Amsterdam'), toUInt64(1665519765) as recordTimestamp, toTypeName(recordTimestamp);
select toYYYYMMDD(x1) from t1;
SELECT toYYYYMMDDhhmmss(toDate('2017-07-21'));
SELECT toYYYYMMDDhhmmss(toDateTime('2017-07-21T11:22:33'));
SELECT toYYYYMMDDhhmmss(toDateTime64('1969-12-31 23:59:59.900', 3));
select toYYYYMMDDhhmmss(x1) from t1;
select transactionID();
select transform('a', ['a', 'b'], [toDateTime64(1, 3, 'UTC'), toDateTime64(2, 3, 'UTC')], toDateTime64(0, 3, 'UTC'));
SELECT transform('hello', 'wrong', 1);
SELECT transform((number, toString(number)), [(3, '3'), (5, '5'), (7, '7')], ['hello', 'world', 'abc!'], 'def') FROM system.numbers LIMIT 10;
SELECT transform(-1, [-1, 2], ['f', 's'], 'g');
SELECT transform(-1, [-1, 2], [11, 22]);
SELECT transform(-1, [-1, 2], [11, 22], 33);
SELECT transform(-9223372036854775807, [-1], [toDecimal32(1024, 3)]) FROM system.numbers LIMIT 7;
SELECT transform(0, [0, 1], ['ZERO', 'ONE'], 'DEFAULT') AS result;
SELECT transform(0, [0, 1], ['ZERO', 'ONE'], NULL) AS result;
select transform(1, [1,2], ['a','b'], 'c');
select transform(1, [1,2], ['a','b'], null);
select transform(1, [1,2], [9,1]);
select transform(1, [1,2], [9,1], 7);
select transform(1, [1,2], [9,1], null);
SELECT transform(1, [1], [toDecimal32(1, 2)]), toDecimal32(1, 2);
SELECT transform(1, [1], [toDecimal32(1, 2)]);
select transform(1, [1], [toDecimal32(42, 2)]), toDecimal32(42, 2);
SELECT transform(1, [1], [toDecimal32(42, 2)], 0);
SELECT transform(1, [1], [toDecimal32(42, 2)], toDecimal32(0, 2));
SELECT transform(1, [2, 3], ['Bigmir)net', 'Google'], 'Остальные') AS title;
SELECT transform(1, [2, 3], ['Meta.ua', 'Google'], materialize('Остальные')) AS title;
SELECT transform(1, [2, 3], ['Meta.ua', null], materialize('Остальные')) AS title;
SELECT transform(2, [-1, 2], ['f', 's'], 'g');
select transform(2, [1, 2], [toDateTime64(1, 3, 'UTC'), toDateTime64(2, 3, 'UTC')], toDateTime64(0, 3, 'UTC'));
select transform(2, [1,2], ['a','b'], 'c');
select transform(2, [1,2], ['a','b'], materialize('c'));
select transform(2, [1,2], ['a','b'], materialize(null));
select transform(2, [1,2], ['a','b'], null);
select transform(2, [1,2], [9,1]);
select transform(2, [1,2], [9,1], 7);
select transform(2, [1,2], [9,1], materialize(7));
select transform(2, [1,2], [9,1], materialize(null));
select transform(2, [1,2], [9,1], null);
SELECT transform(2, [2, 3], ['Bigmir)net', 'Google'], 'Остальные') AS title;
SELECT transform(2, [2, 3], ['Meta.ua', 'Google'], materialize('Остальные')) AS title;
SELECT transform(2, [2, 3], [null, 'Google'], materialize('Остальные')) AS title;
SELECT transform(3, [-1, 2], [11, 22]);
SELECT transform(3, [-1, 2], [11, 22], 33);
SELECT transform(3, [2, 3], ['Bigmir)net', 'Google'], 'Остальные') AS title;
SELECT transform(3, [2, 3], ['Meta.ua', 'Google'], materialize('Остальные')) AS title;
SELECT transform(4, [2, 3], ['Bigmir)net', 'Google'], 'Остальные') AS title;
SELECT transform(4, [2, 3], ['Meta.ua', 'Google'], materialize('Остальные')) AS title;
select transform(5, [1,2], ['a','b'], 'c');
select transform(5, [1,2], ['a','b'], null);
select transform(5, [1,2], [9,1], 7);
select transform(5, [1,2], [9,1], null);
select transform(7, [1,2], [9,1]);
SELECT transform(8000, [1], [toDecimal32(2, 1)]);
SELECT transform(arrayJoin(['c', 'b', 'a']), ['a', 'b'], [toDateTime64('2023-01-01', 3), toDateTime64('2023-02-02', 3)], toDateTime64('2023-03-03', 3));
SELECT transform(name, ['a', 'b'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);
SELECT transform(name, ['a', 'test'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);
select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc fetch first 5 rows only format PrettyCompactNoEscapes;
select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc fetch first 5 rows with ties format PrettyCompactNoEscapes;
select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc limit 5 format PrettyCompactNoEscapes;
select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc offset 3 rows fetch first 5 rows only format PrettyCompactNoEscapes;
select transform(name, ['Henry', 'Irene', 'Dave', 'Cindy'], ['Henry or Irene', 'Henry or Irene', 'Dave or Cindy', 'Dave or Cindy']) AS name, department, salary from (SELECT * FROM employees ORDER BY id, name, department, salary) order by salary desc offset 3 rows fetch next 5 rows only format PrettyCompactNoEscapes;
SELECT transform(name, ['test', 'b'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);
SELECT transform(null, ['3', '5', '7'], ['hello', 'world', 'abc'], null) FROM system.numbers LIMIT 10;
select transform(null, [1, 2], [toDateTime64(1, 3, 'UTC'), toDateTime64(2, 3, 'UTC')], toDateTime64(0, 3, 'UTC'));
SELECT transform(null, [null, null, null], [null, null, null], null) FROM system.numbers LIMIT 10;
SELECT transform(number % 3 = 1 ? NULL : number, [2, 5, NULL], ['Hello', 'World', 'xyz'], '-') FROM numbers(10);
SELECT transform(number / 2, [0.5, 1.5], ['Hello', 'World'], '-') FROM numbers(10);
SELECT transform(number / 2, [1, 2], ['Hello', 'World'], '-') FROM numbers(10);
SELECT transform(number / 2, [1.0, 2.0], ['Hello', 'World'], '-') FROM numbers(10);
SELECT transform(number, [1, 2], ['google', 'censor.net'], 'other') FROM dist;
SELECT transform(number, [1, 2], ['google', 'censor.net'], 'other') FROM numbers(1);
SELECT transform(number, [1], [null]) FROM system.numbers LIMIT 1;
select transform(number, [1], [toFloat32(1)], toFloat32(1)) from numbers(3);
SELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') as value, value FROM system.numbers LIMIT 10;
SELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10;
SELECT transform(number, [2, 4, 6], ['google', 'yandex', 'yahoo'], 'other') as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(number, [2, 4, 6], ['google', 'yandex', 'yahoo'], materialize('other')) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(number, [2, 4, 6], [29, 20, 21]) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(number, [2, 4, 6], [29, 20, 21], 22) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(number, [2, 4, 6], [29, 20, 21], materialize(22)) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(number, [2, 4, 6], [2900, 2000, 2100], 2200) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(number, [2, 4, 6], [2900, 2000, 2100], materialize(2200)) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(number, [2], [toDecimal32(1, 1)], 80000) as x FROM numbers(2);
SELECT transform(number, [2], [toDecimal32(1, 1)], materialize(80000)) as x FROM numbers(2);
SELECT transform(number, [3, 5, 11], [toDecimal32(30, 2), toDecimal32(50, 2), toDecimal32(70,2)], toDecimal32(1000, 2)) FROM system.numbers LIMIT 10;
SELECT transform(number, [3, 5, 7], ['hello', 'world', 'abc'], '') FROM system.numbers LIMIT 10;
SELECT transform(number, [3, 5, 7], ['hello', 'world', 'abc'], materialize('')) FROM system.numbers LIMIT 10;
SELECT transform(number, [3, 5, 7], ['hello', 'world', 'abc'], null) FROM system.numbers LIMIT 10;
SELECT transform(number, [3, 5, 7], [111, 222, 333]) FROM system.numbers LIMIT 10;
SELECT transform(number, [3, 5, 7], [111, 222, 333], 9999) FROM system.numbers LIMIT 10;
SELECT transform(number, [3, 5, 7], [111, 222, 333], materialize(9999)) FROM system.numbers LIMIT 10;
select transform(number, [3], [toFloat32(1)], toFloat32(1)) from numbers(6);
SELECT transform(number, [], [1]) FROM numbers(10);
SELECT transform(number, [], [], 'Hello ' || number::String) FROM numbers(10);
SELECT transform(number, [], [], 'Hello') FROM numbers(10);
SELECT transform(number, [NULL], ['google', 'censor.net', 'yahoo'], 'other') FROM (SELECT NULL as number FROM system.numbers LIMIT 10);
SELECT transform(number, NULL, ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10;
SELECT transform(toDecimal32(2, 1), [toDecimal32(2, 1)], [1]);
SELECT transform(toDecimal32(8000,0), [1], [toDecimal32(2, 1)]);
SELECT transform(toDecimal32(number, 2), [toDecimal32(3, 2)], [toDecimal32(30, 2)]) FROM system.numbers LIMIT 10;
SELECT transform(toDecimal32(number, 2), [toDecimal32(3, 2)], [toDecimal32(30, 2)], toDecimal32(1000, 2)) FROM system.numbers LIMIT 10;
SELECT transform(toNullable(toInt256(number)), [3, 5, 7], ['hello', 'world', 'abc'], '') FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['2', '4', '6'], ['google', 'yandex', 'yahoo']) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(toString(number), ['2', '4', '6'], ['google', 'yandex', 'yahoo'], 'other') as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(toString(number), ['2', '4', '6'], ['google', 'yandex', 'yahoo'], materialize('other')) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(toString(number), ['2', '4', '6'], [29, 20, 21], 22) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(toString(number), ['2', '4', '6'], [29, 20, 21], materialize(22)) as x FROM numbers(10) GROUP BY x ORDER BY x;
SELECT transform(toString(number), ['3', '5', '7'], ['hello', 'world', 'abc']) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], ['hello', 'world', 'abc'], '') FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], ['hello', 'world', 'abc'], '-') FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], ['hello', 'world', 'abc'], materialize('')) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], ['hello', 'world', 'abc'], materialize('-')) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222, 333], -1) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222, 333], -1.1) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222, 333], 0) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222, 333], materialize(-1)) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222, 333], materialize(-1.1)) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222, 333], materialize(0)) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222, null], -1) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222.2, 333], 1) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [111, 222.2, 333], materialize(1)) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [null, 222, 333], materialize(-1.1)) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [null, null, null], materialize(1)) FROM system.numbers LIMIT 10;
SELECT transform(toString(number), ['3', '5', '7'], [toDecimal32(30, 2), toDecimal32(50, 2), toDecimal32(70,2)], toDecimal32(1000, 2)) FROM system.numbers LIMIT 10;
SELECT transform(toUInt256(number), [3, 5, 7], ['hello', 'world', 'abc'], '') FROM system.numbers LIMIT 10;
SELECT translate('abc', '', '');
SELECT translate('abc', 'Ááéíóúôè', 'aaeiouoe');
SELECT translate('gtcttgcaag', 'ACGTacgt', 'TGCAtgca');
SELECT translate('Hello? world.', '.?', '!,');
SELECT translate(toString(number), '0123456789', 'abcdefghij') FROM numbers(987654, 5);
SELECT translateUTF8('abc', '', '');
SELECT translateUTF8('HôtelGenèv', 'Ááéíóúôè', 'aaeiouoe');
SELECT translateUTF8('中文内码', '久标准中文内码', 'ユニコードとは');
SELECT translateUTF8(toString(number), '1234567890', 'ዩय𐑿𐐏নՅðй¿ค') FROM numbers(987654, 5);
SELECT TRIM(' abcdef ');
SELECT trim(BOTH 'a' arg_1 FROM 'abca' arg_2), arg_1, arg_2;
SELECT trim(BOTH 'a' AS arg_1 FROM 'abca' AS arg_2), arg_1, arg_2;
select TRIM(both 'ab' FROM 'abbafooabbafooabba');
SELECT TRIM(BOTH 'af' FROM 'abcdef');
SELECT trim(explain) == 'Asterisk' FROM (EXPLAIN AST SELECT * FROM system.numbers LIMIT 10) WHERE explain LIKE '%Asterisk%';
select trim(LEADING '*[]{}|\\' FROM '\\|[[[}}}*foo*');
SELECT trim(LEADING 'a' arg_1 FROM 'abca' arg_2), arg_1, arg_2;
SELECT trim(LEADING 'a' arg_1 FROM 'abca'), arg_1;
SELECT trim(LEADING 'a' AS arg_1 FROM 'abca'), arg_1;
SELECT trim(LEADING 'a' FROM 'abca' arg_2), arg_2;
SELECT trim(LEADING 'a' FROM 'abca' AS arg_2), arg_2;
SELECT trim(LEADING 'a' FROM 'abca');
select Trim(LEADING 'ab' FROM 'abbafooabba');
SELECT TRIM(LEADING 'abc' FROM 'abcdef');
SELECT trim(TRAILING 'a' arg_1 FROM 'abca' arg_2), arg_1, arg_2;
SELECT trim(TRAILING 'a' AS arg_1 FROM 'abca' AS arg_2), arg_1, arg_2;
SELECT TRIM(TRAILING 'def' FROM 'abcdef');
select trim(TRAILING 'x' FROM 'xxfooxx');
select trimBoth(explain) from (explain pipeline select distinct a from t) where explain like '%InOrder%';
select trimBoth(explain) from (explain select count() from m3) where explain like '%ReadFromPreparedSource (Optimized trivial count)%';
select trimBoth(explain) from (explain select count() from replacing_m3) where explain like '%ReadFromPreparedSource (Optimized trivial count)%';
select trimLeft(explain) from (explain pipeline SELECT DISTINCT id, v FROM t_sparse_distinct) where explain ilike '%DistinctSortedChunkTransform%';
SELECT truncate(895, -16);
SELECT tryBase58Decode(encoded) FROM (SELECT base58Encode(val) as encoded FROM (select arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar', 'Hello world!']) val));
SELECT tryBase58Decode(val) FROM (SELECT arrayJoin(['Hold my beer', 'Hold another beer', '3csAg9', 'And a wine', 'And another wine', 'And a lemonade', 't1Zv2yaZ', 'And another wine']) val);
SELECT tryBase64Decode(( SELECT countSubstrings(toModifiedJulianDayOrNull('\0'), '') ) AS n, ( SELECT regionIn('l. ') ) AS srocpnuv);
SELECT tryBase64Decode(base64Encode('foo')) = 'foo', base64Encode(tryBase64Decode('Zm9v')) == 'Zm9v';
select tryBase64Decode(toFixedString('Zm9v', 4));
SELECT tryBase64Decode(val) FROM (select arrayJoin(['', 'Zg==', 'Zm8=', 'Zm9v', 'Zm9vYg==', 'Zm9vYmE=', 'Zm9vYmFy']) val);
SELECT tryIdnaEncode('');
SELECT tryIdnaEncode(NULL);
SELECT tryPunycodeDecode('');
SELECT tryPunycodeDecode(NULL);
SELECT ts FROM datetime64_index_tbl WHERE ts < toDate('2023-05-28');
SELECT ts FROM datetime64_index_tbl WHERE ts < toDate32('2023-05-28');
SELECT ts, metric, nonNegativeDerivative(metric, ts) OVER (PARTITION BY id>3 ORDER BY ts ASC Rows BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS deriv FROM nnd;
SELECT tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, 'US/Samoa');
SELECT tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' HOUR, 'US/Samoa');
SELECT tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' MONTH, 'US/Samoa');
SELECT tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' QUARTER, 'US/Samoa');
SELECT tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' YEAR, 'US/Samoa');
SELECT tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 MINUTE, 'US/Samoa');
SELECT tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL 1 WEEK, 'US/Samoa');
SELECT tumbleEnd(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, 'US/Samoa');
SELECT tumbleEnd(tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, 'US/Samoa'));
SELECT tumbleStart(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, 'US/Samoa');
SELECT tumbleStart(tumble(toDateTime('2020-01-09 12:00:01', 'US/Samoa'), INTERVAL '1' DAY, 'US/Samoa'));
SELECT tup, tup.1, tup.2, tup.3 FROM decimal;
SELECT tuple((2147483648, (-0., 1.1754943508222875e-38, 2147483646, '-9223372036854775808', NULL))), toInt128(0.0001) GROUP BY ((256, toInt64(1.1754943508222875e-38), NULL), NULL, -0., ((65535, '-92233720368547758.07'), 0.9999), tuple(((1., 3.4028234663852886e38, '1', 0.5), NULL, tuple('0.1')))) WITH CUBE WITH TOTALS;
SELECT tuple(1) + tuple(2);
SELECT tuple(1) < '';
select tuple(1) in (select tuple(1));
select tuple(1) in tuple(1);
select tuple(1) in tuple(tuple(1));
select tuple(1) in tuple(tuple(Null));
select tuple(1) in tuple(tuple(Null), tuple(1));
select tuple(1, 1, number) as t from numbers_mt(1000001) order by t, number limit 1;
select tuple(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) as x format BSONEachRow;
SELECT tuple(3,4,5).1::Int32;
SELECT tuple(3,4,5)::Tuple(UInt64, UInt64, UInt64).2::Int32;
SELECT tuple(INTERVAL 1 DAY) + '2022-10-11'::Date;
SELECT tuple(INTERVAL 1 DAY) - '2022-10-11'::Date;
select tuple(materialize(toUInt64OrNull(''))) <= tuple(materialize(toUInt64OrNull(''))) from numbers(1);
select tuple(materialize(toUInt64OrNull(''))) = tuple(materialize(toUInt64OrNull(''))) from numbers(1);
select tuple(materialize(toUInt64OrNull(''))) >= tuple(materialize(toUInt64OrNull(''))) from numbers(1);
select tuple(materialize(toUInt64OrNull('')), number) = tuple(number, number) from numbers(1);
select tuple(materialize(toUInt64OrNull('')), number) = tuple(number, toUInt64OrNull('')) from numbers(1);
select tuple(materialize(toUInt64OrNull('')), toUInt64OrNull('')) = tuple(toUInt64OrNull(''), toUInt64OrNull('')) from numbers(1);
SELECT tuple(nan, inf) as key, dictGet('01760_db.dict_array', 'name', key);
select tuple(number + 1) < tuple(toNullable(number)) from numbers(1);
select tuple(number + 1) <= tuple(toNullable(number)) from numbers(1);
select tuple(number + 1) > tuple(toNullable(number)) from numbers(1);
select tuple(number + 1) >= tuple(toNullable(number)) from numbers(1);
select tuple(number) < tuple(toNullable(number + 1)) from numbers(1);
select tuple(number) <= tuple(materialize(toUInt64OrNull(''))) from numbers(1);
select tuple(number) <= tuple(toNullable(number + 1)) from numbers(1);
select tuple(number) <= tuple(toNullable(number)) from numbers(1);
select tuple(number) = tuple(materialize(toUInt64OrNull(''))) from numbers(1);
select tuple(number) = tuple(number + 1) from numbers(1);
select tuple(number) = tuple(number) from numbers(1);
select tuple(number) > tuple(toNullable(number + 1)) from numbers(1);
select tuple(number) >= tuple(materialize(toUInt64OrNull(''))) from numbers(1);
select tuple(number) >= tuple(toNullable(number)) from numbers(1);
select tuple(number, materialize(toUInt64OrNull(''))) < tuple(number + 1, number) from numbers(1);
select tuple(number, materialize(toUInt64OrNull(''))) < tuple(number, number) from numbers(1);
select tuple(number, materialize(toUInt64OrNull(''))) <= tuple(number, number) from numbers(1);
select tuple(number, materialize(toUInt64OrNull(''))) > tuple(number + 1, number) from numbers(1);
select tuple(number, materialize(toUInt64OrNull(''))) > tuple(number, number) from numbers(1);
select tuple(number, materialize(toUInt64OrNull(''))) >= tuple(number, number) from numbers(1);
select tuple(number, toNullable(number)) < tuple(toNullable(number), number + 1) from numbers(1);
select tuple(number, toNullable(number)) < tuple(toNullable(number), number) from numbers(1);
select tuple(number, toNullable(number)) < tuple(toNullable(number), toNullable(number + 1)) from numbers(1);
select tuple(number, toNullable(number)) < tuple(toNullable(number), toNullable(number)) from numbers(1);
select tuple(number, toNullable(number)) = tuple(toNullable(number), number) from numbers(1);
select tuple(number, toNullable(number)) = tuple(toNullable(number), toNullable(number)) from numbers(1);
select tuple(toNullable(number + 1)) < tuple(number) from numbers(1);
select tuple(toNullable(number + 1)) < tuple(toNullable(number + 1)) from numbers(1);
select tuple(toNullable(number + 1)) <= tuple(number) from numbers(1);
select tuple(toNullable(number + 1)) <= tuple(toNullable(number + 1)) from numbers(1);
select tuple(toNullable(number + 1)) > tuple(number) from numbers(1);
select tuple(toNullable(number + 1)) > tuple(toNullable(number)) from numbers(1);
select tuple(toNullable(number + 1)) >= tuple(number) from numbers(1);
select tuple(toNullable(number + 1)) >= tuple(toNullable(number)) from numbers(1);
select tuple(toNullable(number)) < tuple(number + 1) from numbers(1);
select tuple(toNullable(number)) < tuple(toNullable(number + 1)) from numbers(1);
select tuple(toNullable(number)) <= tuple(number + 1) from numbers(1);
select tuple(toNullable(number)) <= tuple(number) from numbers(1);
select tuple(toNullable(number)) <= tuple(toNullable(number + 1)) from numbers(1);
select tuple(toNullable(number)) <= tuple(toNullable(number)) from numbers(1);
select tuple(toNullable(number)) = tuple(number + 1) from numbers(1);
select tuple(toNullable(number)) = tuple(number) from numbers(1);
select tuple(toNullable(number)) = tuple(toNullable(number + 1)) from numbers(1);
select tuple(toNullable(number)) = tuple(toNullable(number)) from numbers(1);
select tuple(toNullable(number)) > tuple(number + 1) from numbers(1);
select tuple(toNullable(number)) > tuple(toNullable(number + 1)) from numbers(1);
select tuple(toNullable(number)) >= tuple(number + 1) from numbers(1);
select tuple(toNullable(number)) >= tuple(number) from numbers(1);
select tuple(toNullable(number)) >= tuple(toNullable(number + 1)) from numbers(1);
select tuple(toNullable(number)) >= tuple(toNullable(number)) from numbers(1);
select tuple(toNullable(number), materialize('a'), materialize(toUInt64OrNull(''))) <= tuple(number, materialize('a'), number + 1) from numbers(1);
select tuple(toNullable(number), materialize('a'), materialize(toUInt64OrNull(''))) <= tuple(number, materialize('a'), number) from numbers(1);
select tuple(toNullable(number), materialize('a'), materialize(toUInt64OrNull(''))) = tuple(number, materialize('a'), number + 1) from numbers(1);
select tuple(toNullable(number), materialize('a'), materialize(toUInt64OrNull(''))) = tuple(number, materialize('a'), number) from numbers(1);
select tuple(toNullable(number), materialize('a'), number) < tuple(number, materialize('a'), number + 1) from numbers(1);
select tuple(toNullable(number), materialize('a'), number) < tuple(number, materialize('a'), number) from numbers(1);
select tuple(toNullable(number), materialize('a'), number) = tuple(number, materialize('a'), number + 1) from numbers(1);
select tuple(toNullable(number), materialize('a'), number) = tuple(number, materialize('a'), number) from numbers(1);
select tuple(toNullable(number), number) < tuple(number, number + 1) from numbers(1);
select tuple(toNullable(number), number) < tuple(number, number) from numbers(1);
select tuple(toNullable(number), number) = tuple(number, number) from numbers(1);
select tuple(toNullable(number), number, materialize(toUInt64OrNull(''))) <= tuple(number, number, number) from numbers(1);
select tuple(toNullable(number), number, materialize(toUInt64OrNull(''))) = tuple(number, number, number) from numbers(1);
select tuple(toNullable(number), number, number) < tuple(number, number, number) from numbers(1);
select tuple(toNullable(number), number, number) <= tuple(number, number, number) from numbers(1);
select tuple(toNullable(number), number, number) = tuple(number, number, number) from numbers(1);
select tuple(toNullable(number), toNullable(number)) < tuple(number, number + 1) from numbers(1);
select tuple(toNullable(number), toNullable(number)) < tuple(number, number) from numbers(1);
select tuple(toNullable(number), toNullable(number)) < tuple(toNullable(number + 1), number) from numbers(1);
select tuple(toNullable(number), toNullable(number)) < tuple(toNullable(number + 1), toNullable(number)) from numbers(1);
select tuple(toNullable(number), toNullable(number)) < tuple(toNullable(number), number) from numbers(1);
select tuple(toNullable(number), toNullable(number)) < tuple(toNullable(number), toNullable(number)) from numbers(1);
select tuple(toNullable(number), toNullable(number)) = tuple(number, number) from numbers(1);
select tuple(toNullable(number), toNullable(number)) = tuple(toNullable(number), number) from numbers(1);
select tuple(toNullable(number), toNullable(number)) = tuple(toNullable(number), toNullable(number)) from numbers(1);
SELECT tuple(tuple(0.0001)), anyLast(number) FROM numbers(1) GROUP BY number WITH ROLLUP WITH TOTALS;
select tuple(tuple(1)) in tuple(tuple(1));
select tuple(tuple(1)) in tuple(tuple(tuple(1)));
select tuple(tuple(Null), tuple(1)) in tuple(tuple(Null), tuple(1));
select tuple(tuple(tuple(1))) in tuple(tuple(tuple(1)));
SELECT tuple(x, y) as key, dictGet('01760_db.dict_array', 'name', key), dictGet('01760_db.dict_array', 'value', key), dictGet('01760_db.dict_array', 'value_nullable', key) FROM 01760_db.points ORDER BY x, y;
SELECT tuple(x, y) as key, dictGetOrDefault('01760_db.dict_array', 'name', key, 'DefaultName'), dictGetOrDefault('01760_db.dict_array', 'value', key, 30), dictGetOrDefault('01760_db.dict_array', 'value_nullable', key, 40) FROM 01760_db.points ORDER BY x, y;
SELECT tuple(x, y) as key, dictHas('01760_db.dict_array', key), dictHas('01760_db.dict_array', key), dictHas('01760_db.dict_array', key) FROM 01760_db.points ORDER BY x, y;
SELECT tuple(x, y) as key, dictGet('polygon_dictionary_01862', 'name', key) FROM points_01862 FORMAT Null;
select tuple_column from file('02906.orc', 'ORC', 'int64_column Int64, tuple_column Tuple(c Nullable(Int64))') where int64_column % 15 = 0;
select tuple_column from file('02906.orc', 'ORC', 'int64_column Int64, tuple_column Tuple(c Nullable(Int64), d Nullable(String))') where int64_column % 15 = 0;
select tuple_column from file('02906.orc', 'ORC', 'int64_column Int64, tuple_column Tuple(Nullable(String), Nullable(Float64))') where int64_column % 15 = 0;
SELECT tupleConcat((1, 'y'), (2, 'n'), (3, 'n'));
SELECT tupleConcat();
SELECT tupleDivide((5, 8, 11), (-2, 2, 4));
SELECT tupleDivideByNumber((1, 2.5, 3), materialize(0.5));
SELECT tupleDivideByNumber(tuple(1), materialize(1));
SELECT tupleElement(('hello', 'world'), 'xyz', 'default');
SELECT tupleElement(('hello', 'world'), 2, 'default');
SELECT tupleElement(('hello', 'world'), 3, 'default');
SELECT tupleElement(('hello', 'world'), 3, [([('a')], 1)]);
select tupleElement((255, 1), 1);
SELECT tupleElement([(1, 2), (3, 4)], 2, 'default');
SELECT tupleElement([(1, 2), (3, 4)], 3, 'default');
SELECT tupleElement(arrayJoin([(1, 1)]), 1) FROM A1 PREWHERE tupleElement((1, 1), 1) =1;
SELECT tupleElement(arrayJoin([(1, 1)]), 1) FROM A_M PREWHERE tupleElement((1, 1), 1) =1;
SELECT tupleElement(arrayJoin([(1, 1)]), 1) FROM A_M WHERE tupleElement((1, 1), 1) =1;
select tupleElement(c, 'statistics') from file(statistics_02735.parquet, ParquetMetadata) array join tupleElement(row_groups[1], 'columns') as c;
SELECT tupleElement(materialize(('hello', 'world')), 'xzy', 'default');
SELECT tupleElement(materialize(('hello', 'world')), 'xzy', [([('a')], 1)]);
SELECT tupleElement(materialize(('hello', 'world')), 2, 'default');
SELECT tupleElement(materialize(('hello', 'world')), 3, 'default');
SELECT tupleElement(number, 1) FROM numbers(1);
SELECT tupleElement(t, 'num') FROM null_02902;
SELECT tupleElement(t, 1) as t0, t0 FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;
SELECT tupleElement(t1, 'a') FROM t_tuple_element;
SELECT tupleElement(t1, 2) FROM t_tuple_element;
SELECT tupleElement(t2) FROM t_tuple_element;
SELECT tupleElement(t2, 1) FROM t_tuple_element;
select tupleElement(tupleElement(row_groups[1], 'columns'), 'statistics') from file(long_string_02735.parquet, ParquetMetadata);
SELECT tupleHammingDistance(('abc', (1, 2)), ('abc', (1, 2)));
SELECT tupleHammingDistance(('abc', (1, 2)), ('def', (1, 2)));
SELECT tupleHammingDistance(('abc', (1, 2)), ('def', (1, 3)));
SELECT tupleHammingDistance(('abc', 2), ('abc', 257));
SELECT tupleHammingDistance((-12, 434), (434, 434));
SELECT tupleHammingDistance((1, 2), (1, 2));
SELECT tupleHammingDistance((1, 2), (1, 257));
SELECT tupleHammingDistance((1, 2), (1, 4));
SELECT tupleHammingDistance((1, 2), (1, Null));
SELECT tupleHammingDistance((1, 2), (3, 4));
SELECT tupleHammingDistance((1, 2, 3), (1, 257, 65537));
SELECT tupleHammingDistance((1, 3), (1, 2));
SELECT tupleHammingDistance((1, Null), (1, Null));
SELECT tupleHammingDistance((12, 43), t1) FROM defaults;
SELECT tupleHammingDistance((120, 243), (120, 434));
SELECT tupleHammingDistance((Null, Null), (Null, Null));
SELECT tupleHammingDistance(materialize((1, 2)), (1, 4));
SELECT tupleHammingDistance(materialize((1, 2)),materialize ((1, 4)));
SELECT tupleHammingDistance(t2, (546, 456)) FROM defaults;
SELECT tupleHammingDistance(t2, t3) FROM defaults;
SELECT tupleHammingDistance(tuple(1), tuple(1));
SELECT tupleHammingDistance(tuple(1), tuple(1, 1));
SELECT tupleHammingDistance(tuple(1), tuple(2));
SELECT tupleHammingDistance(tuple(1), tuple(Null));
SELECT tupleHammingDistance(tuple(Null), tuple(Null));
SELECT tupleMinus(materialize(vectorSum(tupleMultiply(materialize((1, 2)), (3, 4)), (5, 6))), (31, 41));
SELECT tupleMultiplyByNumber((1, 2, 3), 0.5);
SELECT tupleMultiplyByNumber(tuple(1), 1);
SELECT tupleNegate((1, 0, 3.5));
SELECT tupleToNameValuePairs(col) FROM test02008 ORDER BY col;
SELECT tupleToNameValuePairs(tuple(1, 1.3));
SELECT tupleToNameValuePairs(tuple(1, 2, 3));
SELECT tv.key, toString(tv.t, 'UTC'), md.bid, tv.tv, md.ask FROM tv ASOF LEFT JOIN md USING(key,t) ORDER BY (tv.key, tv.t);
SELECT tx.id, tx.value, m.name FROM transaction tx ANY LEFT JOIN master m ON m.id = tx.master_id ORDER BY tx.id;
SELECT type FROM system.columns WHERE table = 'decimal' AND database = currentDatabase() ORDER BY type;
SELECT type FROM system.parts_columns WHERE table = 't_json_wide_parts' AND database = currentDatabase() AND active;
SELECT type, count() FROM test GROUP BY type ORDER BY type;
SELECT type, date, id FROM cast_enums ORDER BY type, id;
select type, has_watch, op_num, path, is_ephemeral, is_sequential, version, requests_size, request_idx, error, watch_type, watch_state, path_created, stat_version, stat_cversion, stat_dataLength, stat_numChildren from system.zookeeper_log where (session_id, xid) in (select session_id, xid from system.zookeeper_log where path like '/test/01158/' || currentDatabase() || '/rmt/blocks/%' and op_num not in (1, 12, 500)) order by xid, type, request_idx;
select type, has_watch, op_num, path, is_ephemeral, is_sequential, version, requests_size, request_idx, error, watch_type, watch_state, path_created, stat_version, stat_cversion, stat_dataLength, stat_numChildren from system.zookeeper_log where (session_id, xid) in (select session_id, xid from system.zookeeper_log where path='/test/01158/' || currentDatabase() || '/rmt/replicas/1/parts/all_0_0_0') order by xid, type, request_idx;
select type, new_part_name from system.replication_queue where database=currentDatabase() and table='rmt2' order by new_part_name;
select type, new_part_name, parts_to_merge from system.replication_queue where database=currentDatabase() and table='mut';
SELECT type, query FROM system.query_log WHERE current_database = currentDatabase() AND log_comment = 'log_comment test' AND query LIKE 'SELECT 1%' AND event_date >= yesterday() AND type = 1 ORDER BY event_time_microseconds DESC LIMIT 1;
SELECT type, query FROM system.query_log WHERE current_database = currentDatabase() AND log_comment = 'log_comment test' AND query LIKE 'SELECT 1%' AND event_date >= yesterday() AND type = 2 ORDER BY event_time_microseconds DESC LIMIT 1;
SELECT type, serialization_kind FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_mutations_2' AND column = 's' AND active ORDER BY name;
SELECT type, serialization_kind FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_mutations_3' AND column = 's' AND active ORDER BY name;
SELECT type, serialization_kind FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_mutations_4' AND column = 'v' AND active ORDER BY name;
SELECT type, serialization_kind, subcolumns.names, subcolumns.types, subcolumns.serializations FROM system.parts_columns WHERE database = currentDatabase() AND table = 't_sparse_mutations_5' AND column = 't' AND active ORDER BY name;
select u, cumSum from ( select u, min(d) mn, max(d) mx, groupArray(d) dg, groupArray(v) vg, arrayMap(x -> x + mn, range(toUInt32(mx - mn + 1))) days, toString(arrayCumSum(arrayMap( x -> vg[indexOf(dg, x)] , days))) cumSum from (select 1 u, today()-1 d, 1 v) group by u );
select u, windowFunnel(86400)(dt, a is null and b is null) as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
select u, windowFunnel(86400)(dt, a is null, COALESCE(b, '') = 'b3') as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
select u, windowFunnel(86400)(dt, COALESCE(a, '') = 'a1', COALESCE(a, '') = 'a2') as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
select u, windowFunnel(86400)(dt, COALESCE(a, '') = 'a1', COALESCE(b, '') = 'b2') as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
select u, windowFunnel(86400, 'strict_order')(dt, a is null, COALESCE(b, '') = 'b3') as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
select ucase('foo');
SELECT uid, date, toDate(date) = toDate('2021-03-24') AS res FROM table WHERE res = 1 ORDER BY uid, date;
SELECT uid, date, toDate(date) = toDate('2021-03-24') AS res FROM table WHERE toDate(date) = toDate('2021-03-24') ORDER BY uid, date;
SELECT uid, retention(1, date = '2018-08-06', date = '2018-08-07') AS r FROM retention_test WHERE date IN ('2018-08-06', '2018-08-07') GROUP BY uid ORDER BY uid LIMIT 5;
SELECT uid, retention(date = '2018-08-06', date = '2018-08-07') AS r FROM retention_test WHERE date IN ('2018-08-06', '2018-08-07') GROUP BY uid ORDER BY uid LIMIT 5;
SELECT uid, retention(uid % 2 = 0, date = '2018-08-06', date = '2018-08-07') AS r FROM retention_test WHERE date IN ('2018-08-06', '2018-08-07') GROUP BY uid ORDER BY uid LIMIT 5;
SELECT ULIDStringToDateTime('01GWJWKW30MFPQJRYEAF4XFZ9', 'America/Costa_Rica');
SELECT ULIDStringToDateTime('01GWJWKW30MFPQJRYEAF4XFZ9E', 'America/Costa_Rica');
select unbin('');
select unbin('0') == '\0';
select unbin('00110000');
select unbin(bin('')) == '';
select unbin(toLowCardinality(materialize('00110000')));
select unbin(toNullable(materialize('00110000')));
select unhex('') == unbin('');
select unhex('0') == unbin('0');
select unhex('34') || ' key="v" ' as haystack, length(haystack), extract( haystack, 'key="(.*?)"') as needle;
select unhex(s1), unhex(s2) from unhex_in_fix_string_table;
SELECT uniq((x, arrayMap(elem -> [elem, elem], x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniq((x, toString(x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniq((x, x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniq(15Id) FROM test_extract PREWHERE 15Id < 4 SETTINGS max_threads=1, max_memory_usage=100000000;
SELECT uniq(15Id) FROM test_extract SETTINGS max_threads=1, max_memory_usage=100000000;
SELECT uniq(15Id) FROM test_extract WHERE 15Id < 4 SETTINGS max_threads=1, max_memory_usage=100000000;
SELECT uniq(a) FROM (SELECT 1 AS a) UNION ALL SELECT uniq(b) FROM (SELECT 1 AS b);
SELECT uniq(a) FROM (SELECT a, sum(b) FROM test_rewrite_uniq_to_count GROUP BY a) settings allow_experimental_analyzer=0;
SELECT uniq(a) FROM (SELECT a, sum(b) FROM test_rewrite_uniq_to_count GROUP BY a) settings allow_experimental_analyzer=1;
SELECT uniq(a) FROM (SELECT DISTINCT a FROM test_rewrite_uniq_to_count) settings allow_experimental_analyzer=0;
SELECT uniq(a) FROM (SELECT DISTINCT a FROM test_rewrite_uniq_to_count) settings allow_experimental_analyzer=1;
SELECT uniq(a) FROM (SELECT DISTINCT test_rewrite_uniq_to_count.a FROM test_rewrite_uniq_to_count) t settings allow_experimental_analyzer=0;
SELECT uniq(a) FROM (SELECT DISTINCT test_rewrite_uniq_to_count.a FROM test_rewrite_uniq_to_count) t settings allow_experimental_analyzer=1;
SELECT uniq(alias_of_a) FROM (SELECT DISTINCT a as alias_of_a FROM test_rewrite_uniq_to_count) t settings allow_experimental_analyzer=0;
SELECT uniq(alias_of_a) FROM (SELECT DISTINCT a as alias_of_a FROM test_rewrite_uniq_to_count) t settings allow_experimental_analyzer=1;
SELECT uniq(bitNot(number)) FROM dist;
SELECT uniq(bitNot(number)) FROM numbers(1);
SELECT uniq(d.val) FROM dist_table AS d GLOBAL LEFT JOIN numbers(100) AS t USING id;
SELECT uniq(NULL) FROM t1 WITH TOTALS;
SELECT uniq(NULL);
SELECT uniq(number >= 10 ? number : NULL) FROM numbers(10);
SELECT uniq(number >= 5 ? number : NULL) FROM numbers(10);
SELECT uniq(number) FROM ( SELECT * FROM part_a UNION ALL SELECT * FROM part_c UNION ALL SELECT * FROM part_d UNION ALL SELECT * FROM part_b UNION ALL SELECT * FROM part_d);
SELECT uniq(number) u FROM remote('127.0.0.{2,3}', currentDatabase(), data_00184) GROUP BY number ORDER BY u DESC SETTINGS distributed_group_by_no_merge=2;
SELECT uniq(t.a) FROM (SELECT a, sum(b) FROM test_rewrite_uniq_to_count GROUP BY a) t settings allow_experimental_analyzer=0;
SELECT uniq(t.a) FROM (SELECT a, sum(b) FROM test_rewrite_uniq_to_count GROUP BY a) t settings allow_experimental_analyzer=1;
SELECT uniq(t.a) FROM (SELECT DISTINCT a FROM test_rewrite_uniq_to_count) t settings allow_experimental_analyzer=0;
SELECT uniq(t.a) FROM (SELECT DISTINCT a FROM test_rewrite_uniq_to_count) t settings allow_experimental_analyzer=1;
SELECT uniq(t.alias_of_a) FROM (SELECT a as alias_of_a, sum(b) FROM test_rewrite_uniq_to_count GROUP BY a) t settings allow_experimental_analyzer=0;
SELECT uniq(t.alias_of_a) FROM (SELECT a as alias_of_a, sum(b) FROM test_rewrite_uniq_to_count GROUP BY a) t settings allow_experimental_analyzer=1;
SELECT uniq(t.alias_of_a) FROM (SELECT a as alias_of_a, sum(b) FROM test_rewrite_uniq_to_count GROUP BY alias_of_a) t settings allow_experimental_analyzer=1;
SELECT uniq(t.alias_of_a) FROM (SELECT a as alias_of_a, sum(b) FROM test_rewrite_uniq_to_count GROUP BY alias_of_a) t settings allow_experimental_analyzer=0;
SELECT uniq(x) FROM (SELECT arrayJoin([[1, 2], [1, 2], [1, 2, 3], []]) AS x);
SELECT uniq(x) FROM (SELECT arrayJoin([[[]], [['a', 'b']], [['a'], ['b']], [['a', 'b']]]) AS x);
SELECT uniq(x) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniq(x) FROM (SELECT arrayJoin([[], ['a'], ['a', NULL, 'b'], []]) AS x);
SELECT uniq(x, arrayMap(elem -> [elem, elem], x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniq(x, toString(x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniq(x, x) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqArray([0, 1, 1], [0, 1, 1], [0, 1, 0]);
SELECT uniqArray([0, 1, 1], [0, 1, 1], [0, 1, 1]);
SELECT uniqArray([1, 1, 2]), SUBSTRING('Hello, world', 7, 5), POW(1, 2), ROUND(TANh(1)), CrC32(''), SUM(number), MAX(number), flatten([[[BIT_AND(123)]], [[mod(3, 2)], [CAST('1' AS INTEGER)]]]), week(toDate('2000-12-05')), CAST(arrayJoin([NULL, NULL]) AS Nullable(TEXT)), avgOrDefaultIf(number, number % 2), sumOrNull(number), toTypeName(sumOrNull(number)), countIf(toDate('2000-12-05') + number as d, toDayOfYear(d) % 2) FROM numbers(100);
SELECT uniqCombined(12)(dummy) FROM remote('127.0.0.{2,3}', system.one);
SELECT uniqCombined(17)(dummy) FROM remote('127.0.0.{2,3}', system.one);
SELECT uniqCombined(20)(dummy) FROM remote('127.0.0.{2,3}', system.one);
SELECT uniqCombined(dummy) FROM remote('127.0.0.{2,3}', system.one);
SELECT uniqCombined(number) FROM numbers(10000) GROUP BY number WITH TOTALS ORDER BY number DESC LIMIT 10 SETTINGS /* force aggregates serialization to trigger the issue with */ max_bytes_before_external_group_by=1, /* overflow row: */ max_rows_to_group_by=10000000000, group_by_overflow_mode='any', totals_mode='before_having', /* this is to account memory under 4MB (for max_bytes_before_external_group_by) to use less rows */ max_untracked_memory=0, group_by_two_level_threshold=10000, /* explicitly */ max_block_size=1000, max_threads=1 ;
SELECT uniqCombined(number) FROM numbers(1e7);
SELECT uniqCombined(tuple('')) FROM numbers(1);
SELECT uniqCombined64(number) FROM numbers(1e7);
SELECT uniqCombinedIfMergeIf(n, last > 5) FROM (SELECT uniqCombinedIfState(number, number % 2) AS n, max(number) AS last FROM numbers(10));
SELECT uniqCombinedIfMergeIf(n, last > 50) FILTER(WHERE last>50) FROM (SELECT uniqCombinedIfState(number, number % 2) AS n, max(number) AS last FROM numbers(10));
SELECT uniqCombinedIfMergeIf(n, last > 50) FROM (SELECT uniqCombinedIfState(number, number % 2) AS n, max(number) AS last FROM numbers(10));
SELECT uniqCombinedIfMergeIfIf(n, last > 5) FROM (SELECT uniqCombinedIfState(number, number % 2) AS n, max(number) AS last FROM numbers(10));
SELECT uniqExact('257') FROM (SELECT number, CAST(number / 9223372036854775806, 'UInt64') AS m FROM numbers(3) );
SELECT uniqExact((x, arrayMap(elem -> [elem, elem], x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqExact((x, toString(x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqExact((x, x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqExact(flush_query_id) FROM system.asynchronous_insert_log WHERE database = currentDatabase() AND table = 't_async_insert_skip_settings';
SELECT uniqExact(key) == 32 FROM (SELECT * FROM 01504_test LIMIT 32 SETTINGS max_block_size = 1);
SELECT uniqExact(key) == 32 FROM (SELECT * FROM 02416_test LIMIT 32 SETTINGS max_block_size = 1);
select uniqExact(m) from (select number, (number / 2)::UInt64 as m from numbers(10));
SELECT uniqExact(nan) FROM numbers(1000);
SELECT uniqExact(number + nan) FROM numbers(1000);
SELECT uniqExact(number >= 10 ? number : NULL) FROM numbers(10);
SELECT uniqExact(number >= 5 ? number : NULL) FROM numbers(10);
SELECT uniqExact(number) FROM numbers(1e7);
SELECT uniqExact(reinterpretAsFloat64(reinterpretAsFixedString(reinterpretAsUInt64(reinterpretAsFixedString(nan)) + number))) FROM numbers(10);
SELECT uniqExact(t) FROM t_sparse_alter;
SELECT uniqExact(u) FROM t_sparse_full WHERE s != '';
SELECT uniqExact(u), uniqExact(s) FROM t_sparse_alter;
SELECT uniqExact(x) FROM (SELECT arrayJoin([[1, 2], [1, 2], [1, 2, 3], []]) AS x);
SELECT uniqExact(x) FROM (SELECT arrayJoin([[[]], [['a', 'b']], [['a'], ['b']], [['a', 'b']]]) AS x);
SELECT uniqExact(x) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqExact(x) FROM (SELECT arrayJoin([[], ['a'], ['a', NULL, 'b'], []]) AS x);
select uniqExact(x) from (select randConstant() as x);
SELECT uniqExact(x) FROM (SELECT uniqState(number) AS x FROM numbers(100));
SELECT uniqExact(x) FROM (SELECT uniqState(number) AS x FROM numbers(1000));
select uniqExact(x) from numbers(10) group by number % 2 as x;
SELECT uniqExact(x), length(groupUniqArray(x)), arrayUniq(groupArray(x)), uniqExact(y), arrayUniq(groupArray(y)), uniqExact(concat(toString(x), '_', y)), arrayUniq(groupArray(x), groupArray(y)) FROM (SELECT round(log(intHash32(number))) AS x, toString(round(cbrt(intHash32(number)))) AS y FROM system.numbers LIMIT 10000);
SELECT uniqExact(x, arrayMap(elem -> [elem, elem], x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqExact(x, toString(x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqExact(x, x) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqExactArray([0, 1, 1], [0, 1, 1], [0, 1, 0]);
SELECT uniqExactArray([0, 1, 1], [0, 1, 1], [0, 1, 1]);
SELECT uniqForEach(x) FROM (SELECT emptyArrayUInt8() AS x UNION ALL SELECT [1, 2, 3] UNION ALL SELECT emptyArrayUInt8() UNION ALL SELECT [2, 2]);
SELECT uniqHLL12(dummy) FROM remote('127.0.0.{2,3}', system.one);
select uniqHLL12(x) from t settings optimize_use_projections = 1, max_bytes_to_read=400, max_block_size=8;
SELECT uniqIf(uuid, empty(uuid)), uniqIf(uuid, notEmpty(uuid)) FROM ( SELECT toUUID('00000000-0000-0000-0000-000000000002') AS uuid UNION ALL SELECT toUUID('00000000-0000-0000-0000-000000000000') AS uuid UNION ALL SELECT toUUID('00000000-0000-0000-0000-000000000001') AS uuid );
SELECT uniqMerge(state) FROM (SELECT initializeAggregation('uniqState', number % 3) AS state FROM system.numbers LIMIT 10000);
SELECT uniqMerge(Uniq) FROM stored_aggregates;
SELECT uniqMerge(Uniq), uniqThetaMerge(UniqThetaSketch) FROM stored_aggregates;
SELECT uniqMerge(x * 10) FROM (SELECT uniqState(b) AS x FROM mult_aggregation);
SELECT uniqMerge(x + y) FROM (SELECT uniqState(65536, a) AS x, uniqState(b) AS y FROM add_aggregate);
SELECT uniqMerge(x + y) FROM (SELECT uniqState(a) as x, uniqState(b) as y FROM add_aggregate);
select uniqMerge(y[1]) from (select uniqStateForEachMerge(x) as y from (select uniqStateForEachState([number]) as x from numbers(10)));
SELECT uniqMergeIf(B, (A = '1') OR (A = '2') OR (A = '3')) FROM cluster(test_cluster_two_shards, currentDatabase(), t_transform_or) SETTINGS legacy_column_name_of_tuple_literal = 0;
SELECT uniqMergeIf(B, (A = '1') OR (A = '2') OR (A = '3')) FROM cluster(test_cluster_two_shards, currentDatabase(), t_transform_or) SETTINGS legacy_column_name_of_tuple_literal = 1;
select uniqStateDistinctMap(map(1, x)) OVER (PARTITION BY y) from test;
select uniqStateForEach([x]) OVER (PARTITION BY y) from test;
select uniqStateForEachMapForEach([map(1, [x])]) OVER (PARTITION BY y) from test;
select uniqStateForEachMapForEachMap(map(1, [map(1, [number, number])])) from numbers(10);
select uniqStateForEachMerge(x) as y from (select uniqStateForEachState([number]) as x from numbers(10));
select uniqStateForEachResample(30, 75, 30)([number, number + 1], 30) from numbers(10);
select uniqStateMap(map(1, number)) from numbers(10);
select uniqStateMap(map(1, x)) OVER (PARTITION BY y) from test;
select uniqStateMapForEachResample(30, 75, 30)([map(1, number)], 30) from numbers(10);
select uniqStateResample(30, 75, 30)([x], 30) OVER (PARTITION BY y) from test;
SELECT uniqTheta((x, arrayMap(elem -> [elem, elem], x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqTheta((x, toString(x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqTheta((x, x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqTheta(dummy) FROM remote('127.0.0.{2,3}', system.one);
SELECT uniqTheta(number) FROM numbers(1e7);
SELECT uniqTheta(x) FROM (SELECT arrayJoin([[1, 2], [1, 2], [1, 2, 3], []]) AS x);
SELECT uniqTheta(x) FROM (SELECT arrayJoin([[[]], [['a', 'b']], [['a'], ['b']], [['a', 'b']]]) AS x);
SELECT uniqTheta(x) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqTheta(x) FROM (SELECT arrayJoin([[], ['a'], ['a', NULL, 'b'], []]) AS x);
SELECT uniqTheta(x, arrayMap(elem -> [elem, elem], x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqTheta(x, toString(x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqTheta(x, x) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqThetaArray([0, 1, 1], [0, 1, 1], [0, 1, 0]);
SELECT uniqThetaArray([0, 1, 1], [0, 1, 1], [0, 1, 1]);
SELECT uniqUpTo(10)(a), uniqUpTo(10)(b), uniqUpTo(10)(c) FROM decimal WHERE a >= 0 AND a < 10;
SELECT uniqUpTo(10)(a), uniqUpTo(10)(b), uniqUpTo(10)(c) FROM decimal WHERE a >= 0 AND a < 5;
SELECT uniqUpTo(1e100)(number) FROM numbers(5);
SELECT uniqUpTo(2)(x) FROM (SELECT arrayJoin([[1, 2], [1, 2], [1, 2, 3], []]) AS x);
SELECT uniqUpTo(3)((x, arrayMap(elem -> [elem, elem], x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqUpTo(3)((x, toString(x))) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqUpTo(3)((x, x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqUpTo(3)(x) FROM (SELECT arrayJoin([[[]], [['a', 'b']], [['a'], ['b']], [['a', 'b']]]) AS x);
SELECT uniqUpTo(3)(x) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqUpTo(3)(x) FROM (SELECT arrayJoin([[], ['a'], ['a', NULL, 'b'], []]) AS x);
SELECT uniqUpTo(3)(x, arrayMap(elem -> [elem, elem], x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqUpTo(3)(x, toString(x)) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqUpTo(3)(x, x) FROM (SELECT arrayJoin([[], ['a'], ['a', 'b'], []]) AS x);
SELECT uniqUpToArray(10)([0, 1, 1], [0, 1, 1], [0, 1, 0]);
SELECT uniqUpToArray(10)([0, 1, 1], [0, 1, 1], [0, 1, 1]);
select untuple((* except (b),)) from (select 1 a, 2 b, 3 c);
SELECT untuple((1, 2, 3, b)) AS `ut`, untuple((NULL, 3, 2, a)) AS `ut2` FROM (SELECT 1 AS a, NULL AS b) FORMAT TSVWithNames;
SELECT untuple(arrayJoin(arrayJoin(col1.n))) FROM nested ORDER BY id LIMIT 10 OFFSET 10;
SELECT untuple(arrayJoin(tupleToNameValuePairs(col))) from test02008;
SELECT untuple(flattenTuple(data)) FROM t_flatten_object ORDER BY data.id;
SELECT untuple(JSONExtract('{"key": "value"}', 'Tuple(key String)')) x FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(JSONExtract('{"key": "value"}', 'Tuple(key String)')) x FORMAT Vertical SETTINGS allow_experimental_analyzer = 1;
SELECT untuple(tuple(1 as a)) as t FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(1 as a)) as t FORMAT Vertical SETTINGS allow_experimental_analyzer = 1;
SELECT untuple(tuple(1)::Tuple(a Int)) x, untuple(tuple('s')::Tuple(a String)) y FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(1)::Tuple(a Int)) x, untuple(tuple('s')::Tuple(a String)) y FORMAT Vertical SETTINGS allow_experimental_analyzer = 1;
SELECT untuple(tuple(1)::Tuple(a Int)) x, untuple(tuple(1)::Tuple(a Int)) x FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(1)::Tuple(a Int)), untuple(tuple('s')::Tuple(a String)) FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(1)::Tuple(a Int)), untuple(tuple('s')::Tuple(a String)) FORMAT Vertical SETTINGS allow_experimental_analyzer = 1;
SELECT untuple(tuple(1)::Tuple(a Int)), untuple(tuple(1)::Tuple(a Int)) FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(1)::Tuple(Int)) x, untuple(tuple('s')::Tuple(String)) y FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(1)::Tuple(Int)) x, untuple(tuple('s')::Tuple(String)) y FORMAT Vertical SETTINGS allow_experimental_analyzer = 1;
SELECT untuple(tuple(1)::Tuple(Int)) x, untuple(tuple(1)::Tuple(Int)) x FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(1)::Tuple(Int)), untuple(tuple('s')::Tuple(String)) FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(1)::Tuple(Int)), untuple(tuple('s')::Tuple(String)) FORMAT Vertical SETTINGS allow_experimental_analyzer = 1;
SELECT untuple(tuple(1)::Tuple(Int)), untuple(tuple(1)::Tuple(Int)) FORMAT Vertical SETTINGS allow_experimental_analyzer = 0;
SELECT untuple(tuple(100.0000991821289)), NULL, untuple((toDateTime(9223372036854775806, -1, NULL, NULL, toDateTime(NULL, NULL)), * EXCEPT b)), NULL FROM (SELECT 1 AS a, 1024, NULL AS b);
select upper('AAAAAAAAAAAAAAA012345789,.!AAAA' as str) = str;
select upper('AaAaAaAaAaAaAaA012345789,.!aAaA') = 'AAAAAAAAAAAAAAA012345789,.!AAAA';
select upper('aaaaАБВГAAAAaaAA') = 'AAAAАБВГAAAAAAAA';
select UPPER('Foo');
select upperUTF8('AAAAAAAAAAAAAAA012345789,.!AAAA' as str) = str;
select upperUTF8('AaAaAaAaAaAaAaA012345789,.!aAaA') = 'AAAAAAAAAAAAAAA012345789,.!AAAA';
select upperUTF8('aaaaАБВГAAAAaaAA') = 'AAAAАБВГAAAAAAAA';
SELECT upperUTF8('кв ам и сж кв ам и сж');
SELECT upperUTF8('кв ам и сж');
SELECT upperUTF8(materialize('aaaaАБВГaaaaaaaaaaaaАБВГAAAAaaAA')) FROM numbers(2);
SELECT upperUTF8(repeat('0', 16) || 'кв ам и сж');
SELECT upperUTF8(repeat('0', 48) || 'кв ам и сж');
select URLHash('' as url) = URLHash(appendTrailingCharIfAbsent(url, '/'));
select URLHash('' as url, 0) = URLHash(url);
select URLHash('' as url, 1) = URLHash(url);
select URLHash('' as url, 1000) = URLHash(url);
select URLHash('http://ya.ru' as url) = URLHash(appendTrailingCharIfAbsent(url, '#'));
select URLHash('http://ya.ru' as url) = URLHash(appendTrailingCharIfAbsent(url, '/'));
select URLHash('http://ya.ru' as url) = URLHash(appendTrailingCharIfAbsent(url, '?'));
select URLHash('http://ya.ru/a' as url, 0 as level) = URLHash(URLHierarchy(url)[level + 1]);
select URLHash('http://ya.ru/a' as url, 1 as level) = URLHash(URLHierarchy(url)[level + 1]);
select URLHash(url, 0 as level) = URLHash(URLHierarchy(url)[level + 1]) from system.one array join ['', 'http://ya.ru', 'http://ya.ru/', 'http://ya.ru/a', 'http://ya.ru/a/', 'http://ya.ru/a/b', 'http://ya.ru/a/b?'] as url;
select URLHash(url, 1 as level) = URLHash(URLHierarchy(url)[level + 1]) from system.one array join ['', 'http://ya.ru', 'http://ya.ru/', 'http://ya.ru/a', 'http://ya.ru/a/', 'http://ya.ru/a/b', 'http://ya.ru/a/b?'] as url;
select URLHash(url, 2 as level) = URLHash(URLHierarchy(url)[level + 1]) from system.one array join ['', 'http://ya.ru', 'http://ya.ru/', 'http://ya.ru/a', 'http://ya.ru/a/', 'http://ya.ru/a/b', 'http://ya.ru/a/b?'] as url;
select URLHash(url, 3 as level) = URLHash(URLHierarchy(url)[level + 1]) from system.one array join ['', 'http://ya.ru', 'http://ya.ru/', 'http://ya.ru/a', 'http://ya.ru/a/', 'http://ya.ru/a/b', 'http://ya.ru/a/b?'] as url;
select URLHash(url, 4 as level) = URLHash(URLHierarchy(url)[level + 1]) from system.one array join ['', 'http://ya.ru', 'http://ya.ru/', 'http://ya.ru/a', 'http://ya.ru/a/', 'http://ya.ru/a/b', 'http://ya.ru/a/b?'] as url;
SELECT used_database_engines FROM system.query_log WHERE current_database = currentDatabase() AND type == 'QueryFinish' AND (query LIKE '%database test_query_log_factories_info%') ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;
SELECT used_functions FROM system.query_log WHERE current_database = currentDatabase() AND type != 'QueryStart' AND (query LIKE '%repeat%') ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;
select user, windowFunnel(10, 'strict_order')(dt, event = 'a', event = 'b', event = 'c') as s from funnel_test_strict_order where user = 7 group by user format JSONCompactEachRow;
select user, windowFunnel(86400)(dt, event='a', event='b', event='c') as s from funnel_test_strict_order group by user order by user format JSONCompactEachRow;
select user, windowFunnel(86400, 'strict_deduplication', 'strict_order')(dt, event='a', event='b', event='c') as s from funnel_test_strict_order group by user order by user format JSONCompactEachRow;
select user, windowFunnel(86400, 'strict_order')(dt, event='a', event='b', event='c') as s from funnel_test_strict_order group by user order by user format JSONCompactEachRow;
SELECT UserID FROM test_bloom_filter_index WHERE (CounterID, EventTime) IN (SELECT toUInt32(25703952), toDateTime('2014-03-19 23:59:58'));
SELECT UserID, Age FROM table_with_column_ttl ORDER BY UserID;
select uuid from (select * from test union distinct select * from test);
select uuid from test union distinct select uuid from test union all select uuid from test where name = '1';
select uuid from test union distinct select uuid from test;
SELECT UUIDNumToString(toFixedString(unhex('0123456789ABCDEF0123456789ABCDEF' AS hex) AS bytes, 16) AS uuid_binary) AS uuid_string, hex(UUIDStringToNum(uuid_string)) = hex AS test1, UUIDStringToNum(uuid_string) = bytes AS test2;
SELECT UUIDNumToString(toFixedString(unhex(materialize('0123456789ABCDEF0123456789ABCDEF') AS hex) AS bytes, 16) AS uuid_binary) AS uuid_string, hex(UUIDStringToNum(uuid_string)) = hex AS test1, UUIDStringToNum(uuid_string) = bytes AS test2;
select UUIDNumToString(UUIDStringToNum('00112233-4455-6677-8899-aabbccddeeff', 1), 1);
select UUIDNumToString(UUIDStringToNum('00112233-4455-6677-8899-aabbccddeeff', 2), 2);
SELECT v FROM ary_lc_null WHERE v IN (SELECT v FROM ary_lc_null);
SELECT v FROM mt_01451 ORDER BY v;
SELECT v FROM replica1 ORDER BY v;
SELECT v FROM t_cache_sparse FORMAT Null;
SELECT v, length(finalizeAggregation(CAST(unhex(state) AS AggregateFunction(argMax, String, UInt64)))) FROM argmaxstate_hex_empty;
SELECT v, v-205 as vv, modulo(vv, 200), moduloLegacy(vv, 200) FROM table1 ORDER BY v;
SELECT v1, v2 FROM primary_key_test FINAL ORDER BY v1, v2;
select val < 1.5 and val > 1.459 from (select entropy(vals) as val from defaults);
select val < 2.189 and val > 2.1886 from (select entropy(vals) as val from defaults);
select val < 2.4 and val > 2.3393 from (select entropy(vals) as val from defaults);
SELECT val FROM (SELECT value AS val FROM data2013 WHERE name = 'Alice' UNION ALL SELECT value AS val FROM data2014 WHERE name = 'Alice') ORDER BY val ASC;
SELECT val FROM (SELECT value AS val FROM data2013 WHERE name = 'Alice' UNION /*comment*/ ALL SELECT value AS val FROM data2014 WHERE name = 'Alice') ORDER BY val ASC;
SELECT val FROM (SELECT value AS val FROM data2013 WHERE name = 'Alice' UNION ALL SELECT value AS val FROM data2014 WHERE name = 'Alice' UNION ALL SELECT value AS val FROM data2014 WHERE name = 'Dennis') ORDER BY val ASC;
SELECT val FROM (SELECT value AS val FROM data2013 WHERE name = 'Alice' UNION ALL SELECT value AS val FROM data2014 WHERE name = 'Alice') ORDER BY val ASC;
select val from lc_int8_0;
select val from lc_int8_1;
select val from lc_null_int8_0;
select val from lc_null_int8_1;
SELECT Val FROM merge1 PREWHERE Val = 65536 OR Val = 2;
SELECT Val FROM merge2 PREWHERE Val = 65536 OR Val = 2;
SELECT val FROM t ALL RIGHT JOIN tj ON t.key1 == tj.key1 AND t.key2 == tj.key2 ORDER BY t.key1 FORMAT TSVWithNames;
SELECT val FROM t ALL RIGHT JOIN tj USING (key1, key2) ORDER BY key1 FORMAT TSVWithNames;
SELECT val FROM t1 ALL RIGHT JOIN tj ON t1.id1 == tj.key1 AND t1.id2 == tj.key2 ORDER BY key1 FORMAT TSVWithNames;
SELECT val FROM tab WHERE fromUnixTimestamp64Micro(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
SELECT val FROM tab WHERE fromUnixTimestamp64Milli(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
SELECT val FROM tab WHERE fromUnixTimestamp64Nano(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
SELECT val FROM tab WHERE now(tz) != toDateTime('2000-01-01 00:00:00') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
SELECT val FROM tab WHERE now64(9, tz) != toDateTime64('2000-01-01 00:00:00', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
SELECT val FROM tab WHERE nowInBlock(tz) != toDateTime('2000-01-01 00:00:00') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
SELECT val FROM tab WHERE snowflakeToDateTime(val, tz) != toDateTime('2023-06-11 14:14:14') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
SELECT val FROM tab WHERE snowflakeToDateTime64(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
SELECT val FROM tab WHERE toTimeZone(toDateTime(val), tz) != toDateTime('2023-06-11 14:14:14') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;
select val, avg(toUInt32(val)) from t_group_by_lowcardinality group by val limit 10 settings max_threads=1, max_rows_to_group_by=100, group_by_overflow_mode='any' format JSONEachRow;
SELECT val, b, x FROM t1 ALL RIGHT JOIN tj ON t1.id1 == tj.key1 AND t1.id2 == tj.key2 ORDER BY key1 FORMAT TSVWithNames;
SELECT val, name FROM (SELECT value AS val, value AS val_1, name FROM data2013 WHERE name = 'Alice' UNION ALL SELECT value AS val, value, name FROM data2014 WHERE name = 'Alice') ORDER BY val ASC;
SELECT val, nullable_val FROM null_dict;
select val, val in (1, 3) from lc_00688;
select val, val in (select arrayJoin([1, 3])) from lc_00688;
select val, val in (select val from lc_00688) from lc_00688;
select value % -9223372036854775808 from (select toInt32(arrayJoin([3, 5])) value);
SELECT value + t1.value AS expr FROM (SELECT t0.value, t1.value FROM test_00597 AS t0 FULL JOIN test_00597 AS t1 USING date) WHERE expr < 3;
SELECT value = 'grace_hash,hash,auto' FROM system.settings WHERE name = 'join_algorithm';
SELECT value == 'default' FROM system.settings WHERE name = 'join_algorithm';
SELECT value == 'direct,hash' FROM system.settings WHERE name = 'join_algorithm';
SELECT value == 'grace_hash,hash' FROM system.settings WHERE name = 'join_algorithm';
SELECT value == 'hash,direct' FROM system.settings WHERE name = 'join_algorithm';
SELECT value AS alias_value, alias_value.* APPLY toString FROM test_table;
SELECT value AS alias_value, alias_value.* FROM test_table;
SELECT value AS alias_value, alias_value.value_0_level_0, alias_value.value_1_level_0 FROM test_table;
SELECT value FROM (SELECT (corr(value_1, value_1) OVER test_window) AS value FROM test_table WINDOW test_window AS (PARTITION BY value_2 ORDER BY id ASC)) as subquery WHERE not (not (value <> value));
SELECT value FROM (SELECT 1 as value UNION ALL SELECT 1 UNION ALL SELECT 1);
SELECT value FROM (SELECT stddevSamp(id) AS value FROM test_table) as subquery WHERE ((value = value) AND (NOT (value = value)));
SELECT value FROM null_issue_3767 WHERE value NOT IN ('A String');
SELECT value FROM offset_without_limit ORDER BY value OFFSET 5;
SELECT value FROM select_in_test WHERE value IN (-1);
SELECT value FROM select_in_test WHERE value IN (1);
SELECT value FROM select_in_test WHERE value IN (2);
SELECT value FROM select_in_test WHERE value IN (SELECT -1);
SELECT value FROM select_in_test WHERE value IN (SELECT 1);
SELECT value FROM select_in_test WHERE value IN (SELECT 2);
SELECT value FROM system.events WHERE event == 'PerfAlignmentFaults';
SELECT value FROM system.one ANY LEFT JOIN (SELECT dummy, dummy AS value) js2 USING dummy GROUP BY value;
SELECT value FROM system.rocksdb WHERE database = currentDatabase() and table = '01686_test' and name = 'number.keys.written';
SELECT value FROM system.settings WHERE name = 'max_memory_usage';
select value from system.settings where name='allow_settings_after_format_in_insert' settings compatibility='22.3';
select value from system.settings where name='allow_settings_after_format_in_insert';
SELECT value FROM system.settings where name='max_insert_block_size';
select value from system.zookeeper WHERE name = 'metadata' and path = '/clickhouse/tables/'||currentDatabase()||'/x';
SELECT value FROM system.zookeeper WHERE path = '/clickhouse/' || currentDatabase() || '/versioned_collapsing_table/s1' and name = 'metadata';
SELECT value FROM t1 LEFT JOIN t2 ON t1.x = t2.x ORDER BY value;
SELECT value FROM test_table;
SELECT value, changed, type FROM system.settings WHERE name = 'insert_quorum';
SELECT value, multiIf(value = 1, 2, value, 1, 0), if (value, 1, 0) FROM test_jit_nonnull;
SELECT value, multiIf(value = 1, 2, value, 1, 0), if (value, 1, 0) FROM test_jit_nullable;
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialMovingAverage(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialMovingAverage(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedAvg(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedAvg(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedCount(1)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedCount(10)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedMax(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedMax(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedSum(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number = 0 AS value, number AS time, exponentialTimeDecayedSum(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialMovingAverage(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedAvg(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedCount(1)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedMax(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value, time, round(exp_smooth, 3) FROM (SELECT number AS value, number AS time, exponentialTimeDecayedSum(1)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth FROM numbers(10));
SELECT value,f FROM bool_test FORMAT JSONEachRow;
SELECT value,f FROM bool_test order by value FORMAT TSV;
SELECT value,f FROM bool_test where value > 0;
SELECT value.* APPLY toString FROM test_table;
SELECT value.* FROM test_table;
SELECT value.value_0_level_0 AS alias_value, alias_value.* APPLY toString FROM test_table;
SELECT value.value_0_level_0 AS alias_value, alias_value.* FROM test_table;
SELECT value.value_0_level_0 AS alias_value, alias_value.value_0_level_1, alias_value.value_1_level_1 FROM test_table;
SELECT value.value_0_level_0 AS value_alias, value_alias.* APPLY toString FROM test_table;
SELECT value.value_0_level_0 AS value_alias, value_alias.* FROM test_table;
SELECT value.value_0_level_0 AS value_alias, value_alias.value_0_level_1, value_alias.value_1_level_1 FROM test_table;
SELECT value.value_0_level_0, value.value_1_level_0 FROM test_table;
SELECT value.value_0_level_0.* APPLY toString FROM test_table;
SELECT value.value_0_level_0.* FROM test_table;
SELECT value.value_0_level_0.value_0_level_1, value.value_0_level_0.value_1_level_1 FROM test_table;
SELECT value.value_1, value.value_2 FROM (SELECT cast(tuple(1, 2), 'Tuple(value_1 UInt64, value_2 UInt64)') AS value);
SELECT value1 FROM table_for_rename WHERE key = 1;
SELECT value1 FROM table_with_compact_parts WHERE key = 1;
SELECT value1, value2, sum(number) FROM (SELECT number, intHash64(number) AS value1 FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN (SELECT number, intHash32(number) AS value2 FROM system.numbers LIMIT 10) js2 USING number GROUP BY value1, value2 ORDER BY value1, value2;
SELECT value2 FROM t2 LEFT JOIN rdb ON rdb.key == t2.k ORDER BY k;
SELECT value2 FROM table_rename_with_default WHERE key = 1;
SELECT value3 FROM table_rename_with_default WHERE key = 1;
SELECT value_element, value FROM test_table ARRAY JOIN [1048577] AS value_element, arrayMap(x -> value_element, ['']) AS value;
SELECT values * 5 FROM my_table WHERE arrayExists(x -> x > 5, values);
SELECT values - [1,2,3] FROM my_table WHERE arrayExists(x -> x > 5, values);
SELECT varPop(0.1) FROM numbers(1000000);
SELECT varPop(a) AS va, varPop(b) AS vb, varPop(c) AS vc, toTypeName(va), toTypeName(vb), toTypeName(vc) FROM decimal;
SELECT varPop(toFloat64(a)), varPop(toFloat64(b)), varPop(toFloat64(c)) FROM decimal;
SELECT varPop(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT varPopStable(0.1) FROM numbers(1000000);
SELECT varPopStable(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT varSamp(0.1) FROM numbers(1000000);
SELECT varSamp(a) AS va, varSamp(b) AS vb, varSamp(c) AS vc, toTypeName(va), toTypeName(vb), toTypeName(vc) FROM decimal;
SELECT varSamp(toFloat64(a)), varSamp(toFloat64(b)), varSamp(toFloat64(c)) FROM decimal;
SELECT varSamp(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT varSampStable(0.1) FROM numbers(1000000);
SELECT varSampStable(x_value) FROM (SELECT x_value FROM series LIMIT 1);
SELECT vectorDifference(tuplePlus((1, 2), (3, 4)), (5, 6));
SELECT version()=Version(), VERSION()=Version(), vErSiOn()=VeRsIoN();
SELECT view(SELECT 1);
SELECT visibleWidth((1, 2)), visibleWidth([1, 2, 3]), visibleWidth((1, [2]));
SELECT visibleWidth(21.99);
SELECT visibleWidth(materialize(21.99));
SELECT visibleWidth(toFloat32(21.99));
SELECT visibleWidth(toFloat32(materialize(21.99)));
SELECT visitParamExtractBool('{"myparam":true}', 'myparam');
SELECT visitParamExtractFloat('{"myparam":-1}', 'myparam');
SELECT visitParamExtractFloat('{"myparam":null}', 'myparam');
SELECT visitParamExtractRaw('"a":Hello}', 'a');
SELECT visitParamExtractRaw('\"a\":', 'a');
SELECT visitParamExtractRaw('{"myparam": "["}', 'myparam');
SELECT visitParamExtractRaw('{"myparam": "test\\"string", "other":123}', 'myparam');
SELECT visitParamExtractRaw('{"myparam": "test\\"string"}', 'myparam');
SELECT visitParamExtractRaw('{"myparam": "test_string"}', 'myparam');
SELECT visitParamExtractRaw('{"myparam": "{"}', 'myparam');
SELECT visitParamExtractRaw('{"myparam": ["]", "2", "3"], "other":123}', 'myparam');
SELECT visitParamExtractRaw('{"myparam": {"nested" : [1,2,3]}, "other":123}', 'myparam');
SELECT visitParamExtractString('"a":"Hello"', 'a');
SELECT visitParamExtractString('{"myparam":"test\\"string"}', 'myparam');
SELECT visitParamExtractString('{"myparam":"test_string"}', 'myparam');
SELECT visitParamExtractUInt('"a":123', 'a');
SELECT visitParamExtractUInt('{"myparam":-1}', 'myparam');
SELECT WIDTH_BUCKET(1, 2, 3, -1);
SELECT WIDTH_BUCKET(11, 11, high, 11) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(13, low, 13, 13) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(15, 15, 15, 15) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(3, 3, high, count) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(5, low, 5, count) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(7, 7, 7, count) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(9, low, high, 9) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(Inf, 0, 10, 10);
SELECT WIDTH_BUCKET(operand, 10, high, 10) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(operand, 14, 14, 14) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(operand, 2, high, count) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(operand, 6, 6, count) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(operand, low, 12, 12) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(operand, low, 4, count) FROM mytable WHERE count != 0;
SELECT WIDTH_BUCKET(operand, low, high, 8) FROM mytable WHERE count != 0;
SELECT wkt((0., 0.));
SELECT wkt([(0., 0.), (10., 0.), (10., 10.), (0., 10.)]);
SELECT wkt([[(0., 0.), (10., 0.), (10., 10.), (0., 10.)], [(4., 4.), (5., 4.), (5., 5.), (4., 5.)]]);
SELECT wkt([[[(0., 0.), (10., 0.), (10., 10.), (0., 10.)], [(4., 4.), (5., 4.), (5., 5.), (4., 5.)]], [[(-10., -10.), (-10., -9.), (-9., 10.)]]]);
select wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsIntersectionSpherical([[(29.453587685533865,59.779570356240356),(29.393139070478895,52.276266797422124),(40.636581470703206,59.38168915000267),(41.21084331372543,59.103467777099866),(29.786055068336193,52.146627480315004),(31.23682182965546,52.16517054781818),(41.69443223416517,58.85424941916091),(42.51048853740727,58.47703162291134),(32.59691566839227,52.22075341251539),(34.289476889931414,52.22075341251539),(43.02430176537451,58.07974369546071),(43.02430176537451,57.25537683364851),(35.468224883503325,52.2022335126388),(37.16078610504247,52.23926559241349),(43.02430176537451,56.26136189644947),(43.02430176537451,55.326904361850836),(38.33953409861437,52.16517054781818),(40.09254393520848,52.16517054781818),(44.4146199116388,55.3097062225408),(44.47506852669377,59.80998197603594),(39.72985224487867,59.931351417569715),(30.23941968124846,53.67744677450975),(30.20919537372098,54.63314259659509),(38.73245009647167,59.94649146557819),(37.2816833351524,59.97675082987618),(30.23941968124846,55.2752875586599),(30.33009260383092,56.19415599955667),(36.28428118674541,59.96162460231375),(34.863738732953635,59.97675082987618),(30.178971066193498,56.97640788219866),(30.178971066193498,57.91957806959033),(33.65476643185424,59.94649146557819),(32.32489690064491,59.94649146557819),(30.481214141468342,58.85424941916091),(30.571887064050795,59.99187015036608),(29.453587685533865,59.779570356240356)]], [[(24.367675781249993,61.45977057029751),(19.577636718749993,58.67693767258692),(19.577636718749993,57.492213666700735),(19.445800781249996,55.87531083569678),(19.445800781249996,54.085173420886775),(17.468261718749996,53.014783245859235),(20.017089843749993,51.563412328675895),(21.203613281249993,50.205033264943324),(26.125488281249993,50.40151532278236),(27.22412109374999,48.980216985374994),(32.80517578124999,49.525208341974405),(35.26611328124999,48.74894534343292),(36.93603515624999,49.66762782262194),(42.56103515625,48.77791275550183),(43.92333984374999,49.8096315635631),(47.17529296875,49.152969656170455),(49.28466796875,50.54136296522162),(48.05419921875,51.17934297928929),(51.39404296875,52.48278022207825),(50.64697265625,53.014783245859235),(52.88818359375,53.93021986394004),(51.65771484374999,54.29088164657006),(52.66845703125,55.825973254619015),(50.25146484375,56.145549500679095),(51.92138671875,57.914847767009206),(49.15283203125,58.17070248348605),(49.59228515625,60.086762746260064),(47.043457031249986,59.88893689676584),(43.57177734375,61.37567331572748),(42.64892578125,60.630101766266705),(36.89208984374999,62.000904713685856),(36.01318359374999,61.143235250840576),(31.398925781249993,62.02152819100766),(30.563964843749996,61.05828537037917),(26.872558593749993,61.71070595883174),(26.652832031249993,61.10078883158897),(24.367675781249993,61.45977057029751)], [(24.455566406249993,59.42272750081452),(21.203613281249993,58.49369382056807),(21.335449218749993,56.89700392127261),(21.599121093749993,55.92458580482949),(25.202636718749993,55.998380955359636),(28.850097656249993,57.06463027327854),(27.09228515625,57.844750992890994),(28.806152343749996,59.17592824927138),(26.257324218749993,59.17592824927138),(24.455566406249993,59.42272750081452)], [(35.13427734375,59.84481485969107),(31.970214843749993,58.97266715450152),(33.20068359374999,56.776808316568406),(36.67236328125,56.41390137600675),(39.08935546874999,57.25528054528888),(42.69287109374999,58.03137242177638),(40.89111328124999,59.26588062825809),(37.28759765625,58.722598828043374),(37.11181640624999,59.66774058164964),(35.13427734375,59.84481485969107)], [(29.157714843749993,55.75184939173528),(22.565917968749993,55.128649068488784),(22.565917968749993,53.54030739150019),(22.038574218749996,51.48138289610097),(26.257324218749993,51.42661449707484),(30.124511718749993,50.54136296522162),(32.18994140624999,51.17934297928929),(30.124511718749993,53.173119202640635),(35.09033203124999,53.173119202640635),(33.11279296875,54.085173420886775),(29.597167968749993,55.50374985927513),(29.157714843749993,55.75184939173528)], [(42.82470703125,56.58369172128337),(36.584472656249986,55.329144408405085),(37.99072265625,53.592504809039355),(34.95849609374999,51.48138289610097),(36.54052734374999,50.40151532278236),(39.66064453124999,50.289339253291786),(39.79248046875,52.13348804077148),(41.77001953125,50.68079714532166),(44.49462890624999,51.97134580885171),(47.30712890624999,52.509534770327264),(44.05517578125,53.54030739150019),(46.60400390625,53.696706475303245),(47.61474609375,55.40406982700608),(45.37353515625,55.40406982700608),(42.82470703125,56.58369172128337)]]))) format TSV;
select wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsIntersectionSpherical([[(29.453587685533865,59.779570356240356),(29.393139070478895,52.276266797422124),(40.636581470703206,59.38168915000267),(41.21084331372543,59.103467777099866),(29.786055068336193,52.146627480315004),(31.23682182965546,52.16517054781818),(41.69443223416517,58.85424941916091),(42.51048853740727,58.47703162291134),(32.59691566839227,52.22075341251539),(34.289476889931414,52.22075341251539),(43.02430176537451,58.07974369546071),(43.02430176537451,57.25537683364851),(35.468224883503325,52.2022335126388),(37.16078610504247,52.23926559241349),(43.02430176537451,56.26136189644947),(43.02430176537451,55.326904361850836),(38.33953409861437,52.16517054781818),(40.09254393520848,52.16517054781818),(44.4146199116388,55.3097062225408),(44.47506852669377,59.80998197603594),(39.72985224487867,59.931351417569715),(30.23941968124846,53.67744677450975),(30.20919537372098,54.63314259659509),(38.73245009647167,59.94649146557819),(37.2816833351524,59.97675082987618),(30.23941968124846,55.2752875586599),(30.33009260383092,56.19415599955667),(36.28428118674541,59.96162460231375),(34.863738732953635,59.97675082987618),(30.178971066193498,56.97640788219866),(30.178971066193498,57.91957806959033),(33.65476643185424,59.94649146557819),(32.32489690064491,59.94649146557819),(30.481214141468342,58.85424941916091),(30.571887064050795,59.99187015036608),(29.453587685533865,59.779570356240356)]], [[[(33.473420586689336,58.85424941916091),(32.23422397806246,58.492830557036),(32.173775363007486,58.03176922751564),(31.508840597402823,57.499784781503735),(31.750635057622702,56.86092686957355),(31.508840597402823,55.941082594334574),(32.20399967053497,55.515591939372456),(31.84130798020516,54.998862226280465),(31.418167674820367,54.422670886434275),(32.47601843828233,53.83826377018255),(32.08310244042503,53.408048308050866),(33.171177511414484,52.82758702113742),(34.77306581037117,52.91880107773494),(34.77306581037117,53.784726518357985),(34.108131044766516,54.17574726780569),(35.07530888564602,54.59813930694554),(34.25925258240394,54.96417435716029),(35.01486027059106,55.361278263643584),(33.50364489421682,55.37845402950552),(32.7480372060297,55.90721384574556),(35.67979503619571,55.68634475630185),(32.83871012861215,56.311688992608396),(34.591719965206266,56.29492065473883),(35.7100193437232,56.311688992608396),(33.83611227701915,56.695333481003644),(32.95960735872209,56.9434497616887),(36.072711034053015,57.091531913901434),(33.171177511414484,57.33702717078384),(36.193608264162954,57.499784781503735),(33.23162612646945,57.77481561306047),(36.43540272438284,58.04776787540811),(33.62454212432676,58.27099811968307),(36.344729801800376,58.54018474404165),(33.83611227701915,58.68186423448108),(34.74284150284369,59.565911441555244),(33.473420586689336,58.85424941916091)]], [[(34.65216858026123,58.91672306881671),(37.19101041256995,58.68186423448108),(36.01226241899805,58.28688958537609),(37.16078610504247,58.04776787540811),(35.74024365125068,57.79092907387934),(37.009664567405046,57.499784781503735),(35.77046795877817,57.25537683364851),(36.979440259877556,57.07510745541089),(34.22902827487645,56.794777197297435),(36.7074214921302,56.210968525786996),(34.712617195316206,56.10998276812964),(36.55629995449277,55.63519693782703),(35.13575750070099,55.53270067649592),(36.43540272438284,55.34409504165558),(34.83351442542614,55.01619492319591),(35.61934642114075,54.49294870011772),(34.89396304048112,54.12264226523038),(35.37755196092087,53.046178687628185),(37.43280487278982,52.95523300597458),(35.92158949641559,53.80257986695776),(36.91899164482259,53.856094327816805),(36.01226241899805,54.75541714463799),(37.765272255592166,55.189110239786885),(36.828318722240134,55.44708256557195),(38.03729102333953,55.652253637168315),(36.64697287707522,55.941082594334574),(38.21863686850443,56.05939028508024),(36.37495410932787,56.64551287174558),(38.30930979108689,56.992876013526654),(37.16078610504247,57.25537683364851),(38.127963945921984,57.516020773674256),(37.43280487278982,57.710289827306724),(38.33953409861437,57.935626886818994),(37.40258056526235,58.31865112960426),(38.58132855883426,58.744648733419496),(37.31190764267989,59.02578062465136),(34.65216858026123,58.91672306881671)]], [[(38.52087994377928,59.11898412389468),(39.54850639971376,58.713270635642914),(38.369758406141855,58.28688958537609),(38.85334732658162,58.06375936407028),(38.33953409861437,57.710289827306724),(38.73245009647167,57.48354156434209),(38.21863686850443,57.271721400459285),(38.97424455669155,56.87744603722649),(37.463029180317314,56.5623320541159),(38.94402024916407,56.05939028508024),(38.18841256097694,55.856355210835915),(38.490655636251795,55.53270067649592),(37.795496563119656,55.39562234093384),(38.30930979108689,55.154587013355666),(36.7074214921302,54.65063295250911),(37.31190764267989,53.92734063371401),(36.979440259877556,53.58783775557231),(37.855945178174615,52.91880107773497),(39.57873070724124,52.69956490610895),(38.33953409861437,53.281741738901104),(40.00187101262603,53.35396273604752),(39.54850639971376,53.58783775557231),(40.24366547284591,53.58783775557231),(39.97164670509855,53.98069568468355),(40.60635716317572,54.03398248547225),(40.39478701048334,54.44025165268903),(39.54850639971376,54.56310590284329),(39.54850639971376,54.87732350170489),(40.39478701048334,54.87732350170489),(40.39478701048334,55.24083903654295),(39.82052516746112,55.2752875586599),(39.760076552406154,55.75443792473942),(40.57613285564824,55.78844000174894),(40.425011318010824,56.19415599955667),(39.82052516746112,56.07626182891758),(39.79030085993364,56.41214455508424),(40.48545993306579,56.495655446714636),(40.33433839542836,56.95993246553937),(39.79030085993364,56.992876013526654),(39.72985224487867,57.46729112028032),(40.33433839542836,57.46729112028032),(40.24366547284591,58.04776787540811),(39.63917932229622,58.04776787540811),(39.63917932229622,58.382088724871295),(40.33433839542836,58.382088724871295),(40.45523562553831,58.9011152358548),(38.52087994377928,59.11898412389468)]]]))) format TSV;
select wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsIntersectionSpherical([[[(33.473420586689336,58.85424941916091),(32.23422397806246,58.492830557036),(32.173775363007486,58.03176922751564),(31.508840597402823,57.499784781503735),(31.750635057622702,56.86092686957355),(31.508840597402823,55.941082594334574),(32.20399967053497,55.515591939372456),(31.84130798020516,54.998862226280465),(31.418167674820367,54.422670886434275),(32.47601843828233,53.83826377018255),(32.08310244042503,53.408048308050866),(33.171177511414484,52.82758702113742),(34.77306581037117,52.91880107773494),(34.77306581037117,53.784726518357985),(34.108131044766516,54.17574726780569),(35.07530888564602,54.59813930694554),(34.25925258240394,54.96417435716029),(35.01486027059106,55.361278263643584),(33.50364489421682,55.37845402950552),(32.7480372060297,55.90721384574556),(35.67979503619571,55.68634475630185),(32.83871012861215,56.311688992608396),(34.591719965206266,56.29492065473883),(35.7100193437232,56.311688992608396),(33.83611227701915,56.695333481003644),(32.95960735872209,56.9434497616887),(36.072711034053015,57.091531913901434),(33.171177511414484,57.33702717078384),(36.193608264162954,57.499784781503735),(33.23162612646945,57.77481561306047),(36.43540272438284,58.04776787540811),(33.62454212432676,58.27099811968307),(36.344729801800376,58.54018474404165),(33.83611227701915,58.68186423448108),(34.74284150284369,59.565911441555244),(33.473420586689336,58.85424941916091)]], [[(34.65216858026123,58.91672306881671),(37.19101041256995,58.68186423448108),(36.01226241899805,58.28688958537609),(37.16078610504247,58.04776787540811),(35.74024365125068,57.79092907387934),(37.009664567405046,57.499784781503735),(35.77046795877817,57.25537683364851),(36.979440259877556,57.07510745541089),(34.22902827487645,56.794777197297435),(36.7074214921302,56.210968525786996),(34.712617195316206,56.10998276812964),(36.55629995449277,55.63519693782703),(35.13575750070099,55.53270067649592),(36.43540272438284,55.34409504165558),(34.83351442542614,55.01619492319591),(35.61934642114075,54.49294870011772),(34.89396304048112,54.12264226523038),(35.37755196092087,53.046178687628185),(37.43280487278982,52.95523300597458),(35.92158949641559,53.80257986695776),(36.91899164482259,53.856094327816805),(36.01226241899805,54.75541714463799),(37.765272255592166,55.189110239786885),(36.828318722240134,55.44708256557195),(38.03729102333953,55.652253637168315),(36.64697287707522,55.941082594334574),(38.21863686850443,56.05939028508024),(36.37495410932787,56.64551287174558),(38.30930979108689,56.992876013526654),(37.16078610504247,57.25537683364851),(38.127963945921984,57.516020773674256),(37.43280487278982,57.710289827306724),(38.33953409861437,57.935626886818994),(37.40258056526235,58.31865112960426),(38.58132855883426,58.744648733419496),(37.31190764267989,59.02578062465136),(34.65216858026123,58.91672306881671)]], [[(38.52087994377928,59.11898412389468),(39.54850639971376,58.713270635642914),(38.369758406141855,58.28688958537609),(38.85334732658162,58.06375936407028),(38.33953409861437,57.710289827306724),(38.73245009647167,57.48354156434209),(38.21863686850443,57.271721400459285),(38.97424455669155,56.87744603722649),(37.463029180317314,56.5623320541159),(38.94402024916407,56.05939028508024),(38.18841256097694,55.856355210835915),(38.490655636251795,55.53270067649592),(37.795496563119656,55.39562234093384),(38.30930979108689,55.154587013355666),(36.7074214921302,54.65063295250911),(37.31190764267989,53.92734063371401),(36.979440259877556,53.58783775557231),(37.855945178174615,52.91880107773497),(39.57873070724124,52.69956490610895),(38.33953409861437,53.281741738901104),(40.00187101262603,53.35396273604752),(39.54850639971376,53.58783775557231),(40.24366547284591,53.58783775557231),(39.97164670509855,53.98069568468355),(40.60635716317572,54.03398248547225),(40.39478701048334,54.44025165268903),(39.54850639971376,54.56310590284329),(39.54850639971376,54.87732350170489),(40.39478701048334,54.87732350170489),(40.39478701048334,55.24083903654295),(39.82052516746112,55.2752875586599),(39.760076552406154,55.75443792473942),(40.57613285564824,55.78844000174894),(40.425011318010824,56.19415599955667),(39.82052516746112,56.07626182891758),(39.79030085993364,56.41214455508424),(40.48545993306579,56.495655446714636),(40.33433839542836,56.95993246553937),(39.79030085993364,56.992876013526654),(39.72985224487867,57.46729112028032),(40.33433839542836,57.46729112028032),(40.24366547284591,58.04776787540811),(39.63917932229622,58.04776787540811),(39.63917932229622,58.382088724871295),(40.33433839542836,58.382088724871295),(40.45523562553831,58.9011152358548),(38.52087994377928,59.11898412389468)]]], [[(24.367675781249993,61.45977057029751),(19.577636718749993,58.67693767258692),(19.577636718749993,57.492213666700735),(19.445800781249996,55.87531083569678),(19.445800781249996,54.085173420886775),(17.468261718749996,53.014783245859235),(20.017089843749993,51.563412328675895),(21.203613281249993,50.205033264943324),(26.125488281249993,50.40151532278236),(27.22412109374999,48.980216985374994),(32.80517578124999,49.525208341974405),(35.26611328124999,48.74894534343292),(36.93603515624999,49.66762782262194),(42.56103515625,48.77791275550183),(43.92333984374999,49.8096315635631),(47.17529296875,49.152969656170455),(49.28466796875,50.54136296522162),(48.05419921875,51.17934297928929),(51.39404296875,52.48278022207825),(50.64697265625,53.014783245859235),(52.88818359375,53.93021986394004),(51.65771484374999,54.29088164657006),(52.66845703125,55.825973254619015),(50.25146484375,56.145549500679095),(51.92138671875,57.914847767009206),(49.15283203125,58.17070248348605),(49.59228515625,60.086762746260064),(47.043457031249986,59.88893689676584),(43.57177734375,61.37567331572748),(42.64892578125,60.630101766266705),(36.89208984374999,62.000904713685856),(36.01318359374999,61.143235250840576),(31.398925781249993,62.02152819100766),(30.563964843749996,61.05828537037917),(26.872558593749993,61.71070595883174),(26.652832031249993,61.10078883158897),(24.367675781249993,61.45977057029751)], [(24.455566406249993,59.42272750081452),(21.203613281249993,58.49369382056807),(21.335449218749993,56.89700392127261),(21.599121093749993,55.92458580482949),(25.202636718749993,55.998380955359636),(28.850097656249993,57.06463027327854),(27.09228515625,57.844750992890994),(28.806152343749996,59.17592824927138),(26.257324218749993,59.17592824927138),(24.455566406249993,59.42272750081452)], [(35.13427734375,59.84481485969107),(31.970214843749993,58.97266715450152),(33.20068359374999,56.776808316568406),(36.67236328125,56.41390137600675),(39.08935546874999,57.25528054528888),(42.69287109374999,58.03137242177638),(40.89111328124999,59.26588062825809),(37.28759765625,58.722598828043374),(37.11181640624999,59.66774058164964),(35.13427734375,59.84481485969107)], [(29.157714843749993,55.75184939173528),(22.565917968749993,55.128649068488784),(22.565917968749993,53.54030739150019),(22.038574218749996,51.48138289610097),(26.257324218749993,51.42661449707484),(30.124511718749993,50.54136296522162),(32.18994140624999,51.17934297928929),(30.124511718749993,53.173119202640635),(35.09033203124999,53.173119202640635),(33.11279296875,54.085173420886775),(29.597167968749993,55.50374985927513),(29.157714843749993,55.75184939173528)], [(42.82470703125,56.58369172128337),(36.584472656249986,55.329144408405085),(37.99072265625,53.592504809039355),(34.95849609374999,51.48138289610097),(36.54052734374999,50.40151532278236),(39.66064453124999,50.289339253291786),(39.79248046875,52.13348804077148),(41.77001953125,50.68079714532166),(44.49462890624999,51.97134580885171),(47.30712890624999,52.509534770327264),(44.05517578125,53.54030739150019),(46.60400390625,53.696706475303245),(47.61474609375,55.40406982700608),(45.37353515625,55.40406982700608),(42.82470703125,56.58369172128337)]]))) format TSV;
select wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsUnionSpherical([[(29.453587685533865,59.779570356240356),(29.393139070478895,52.276266797422124),(40.636581470703206,59.38168915000267),(41.21084331372543,59.103467777099866),(29.786055068336193,52.146627480315004),(31.23682182965546,52.16517054781818),(41.69443223416517,58.85424941916091),(42.51048853740727,58.47703162291134),(32.59691566839227,52.22075341251539),(34.289476889931414,52.22075341251539),(43.02430176537451,58.07974369546071),(43.02430176537451,57.25537683364851),(35.468224883503325,52.2022335126388),(37.16078610504247,52.23926559241349),(43.02430176537451,56.26136189644947),(43.02430176537451,55.326904361850836),(38.33953409861437,52.16517054781818),(40.09254393520848,52.16517054781818),(44.4146199116388,55.3097062225408),(44.47506852669377,59.80998197603594),(39.72985224487867,59.931351417569715),(30.23941968124846,53.67744677450975),(30.20919537372098,54.63314259659509),(38.73245009647167,59.94649146557819),(37.2816833351524,59.97675082987618),(30.23941968124846,55.2752875586599),(30.33009260383092,56.19415599955667),(36.28428118674541,59.96162460231375),(34.863738732953635,59.97675082987618),(30.178971066193498,56.97640788219866),(30.178971066193498,57.91957806959033),(33.65476643185424,59.94649146557819),(32.32489690064491,59.94649146557819),(30.481214141468342,58.85424941916091),(30.571887064050795,59.99187015036608),(29.453587685533865,59.779570356240356)]], [[(24.367675781249993,61.45977057029751),(19.577636718749993,58.67693767258692),(19.577636718749993,57.492213666700735),(19.445800781249996,55.87531083569678),(19.445800781249996,54.085173420886775),(17.468261718749996,53.014783245859235),(20.017089843749993,51.563412328675895),(21.203613281249993,50.205033264943324),(26.125488281249993,50.40151532278236),(27.22412109374999,48.980216985374994),(32.80517578124999,49.525208341974405),(35.26611328124999,48.74894534343292),(36.93603515624999,49.66762782262194),(42.56103515625,48.77791275550183),(43.92333984374999,49.8096315635631),(47.17529296875,49.152969656170455),(49.28466796875,50.54136296522162),(48.05419921875,51.17934297928929),(51.39404296875,52.48278022207825),(50.64697265625,53.014783245859235),(52.88818359375,53.93021986394004),(51.65771484374999,54.29088164657006),(52.66845703125,55.825973254619015),(50.25146484375,56.145549500679095),(51.92138671875,57.914847767009206),(49.15283203125,58.17070248348605),(49.59228515625,60.086762746260064),(47.043457031249986,59.88893689676584),(43.57177734375,61.37567331572748),(42.64892578125,60.630101766266705),(36.89208984374999,62.000904713685856),(36.01318359374999,61.143235250840576),(31.398925781249993,62.02152819100766),(30.563964843749996,61.05828537037917),(26.872558593749993,61.71070595883174),(26.652832031249993,61.10078883158897),(24.367675781249993,61.45977057029751)], [(24.455566406249993,59.42272750081452),(21.203613281249993,58.49369382056807),(21.335449218749993,56.89700392127261),(21.599121093749993,55.92458580482949),(25.202636718749993,55.998380955359636),(28.850097656249993,57.06463027327854),(27.09228515625,57.844750992890994),(28.806152343749996,59.17592824927138),(26.257324218749993,59.17592824927138),(24.455566406249993,59.42272750081452)], [(35.13427734375,59.84481485969107),(31.970214843749993,58.97266715450152),(33.20068359374999,56.776808316568406),(36.67236328125,56.41390137600675),(39.08935546874999,57.25528054528888),(42.69287109374999,58.03137242177638),(40.89111328124999,59.26588062825809),(37.28759765625,58.722598828043374),(37.11181640624999,59.66774058164964),(35.13427734375,59.84481485969107)], [(29.157714843749993,55.75184939173528),(22.565917968749993,55.128649068488784),(22.565917968749993,53.54030739150019),(22.038574218749996,51.48138289610097),(26.257324218749993,51.42661449707484),(30.124511718749993,50.54136296522162),(32.18994140624999,51.17934297928929),(30.124511718749993,53.173119202640635),(35.09033203124999,53.173119202640635),(33.11279296875,54.085173420886775),(29.597167968749993,55.50374985927513),(29.157714843749993,55.75184939173528)], [(42.82470703125,56.58369172128337),(36.584472656249986,55.329144408405085),(37.99072265625,53.592504809039355),(34.95849609374999,51.48138289610097),(36.54052734374999,50.40151532278236),(39.66064453124999,50.289339253291786),(39.79248046875,52.13348804077148),(41.77001953125,50.68079714532166),(44.49462890624999,51.97134580885171),(47.30712890624999,52.509534770327264),(44.05517578125,53.54030739150019),(46.60400390625,53.696706475303245),(47.61474609375,55.40406982700608),(45.37353515625,55.40406982700608),(42.82470703125,56.58369172128337)]]))) format TSV;
select wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsUnionSpherical([[(29.453587685533865,59.779570356240356),(29.393139070478895,52.276266797422124),(40.636581470703206,59.38168915000267),(41.21084331372543,59.103467777099866),(29.786055068336193,52.146627480315004),(31.23682182965546,52.16517054781818),(41.69443223416517,58.85424941916091),(42.51048853740727,58.47703162291134),(32.59691566839227,52.22075341251539),(34.289476889931414,52.22075341251539),(43.02430176537451,58.07974369546071),(43.02430176537451,57.25537683364851),(35.468224883503325,52.2022335126388),(37.16078610504247,52.23926559241349),(43.02430176537451,56.26136189644947),(43.02430176537451,55.326904361850836),(38.33953409861437,52.16517054781818),(40.09254393520848,52.16517054781818),(44.4146199116388,55.3097062225408),(44.47506852669377,59.80998197603594),(39.72985224487867,59.931351417569715),(30.23941968124846,53.67744677450975),(30.20919537372098,54.63314259659509),(38.73245009647167,59.94649146557819),(37.2816833351524,59.97675082987618),(30.23941968124846,55.2752875586599),(30.33009260383092,56.19415599955667),(36.28428118674541,59.96162460231375),(34.863738732953635,59.97675082987618),(30.178971066193498,56.97640788219866),(30.178971066193498,57.91957806959033),(33.65476643185424,59.94649146557819),(32.32489690064491,59.94649146557819),(30.481214141468342,58.85424941916091),(30.571887064050795,59.99187015036608),(29.453587685533865,59.779570356240356)]], [[[(33.473420586689336,58.85424941916091),(32.23422397806246,58.492830557036),(32.173775363007486,58.03176922751564),(31.508840597402823,57.499784781503735),(31.750635057622702,56.86092686957355),(31.508840597402823,55.941082594334574),(32.20399967053497,55.515591939372456),(31.84130798020516,54.998862226280465),(31.418167674820367,54.422670886434275),(32.47601843828233,53.83826377018255),(32.08310244042503,53.408048308050866),(33.171177511414484,52.82758702113742),(34.77306581037117,52.91880107773494),(34.77306581037117,53.784726518357985),(34.108131044766516,54.17574726780569),(35.07530888564602,54.59813930694554),(34.25925258240394,54.96417435716029),(35.01486027059106,55.361278263643584),(33.50364489421682,55.37845402950552),(32.7480372060297,55.90721384574556),(35.67979503619571,55.68634475630185),(32.83871012861215,56.311688992608396),(34.591719965206266,56.29492065473883),(35.7100193437232,56.311688992608396),(33.83611227701915,56.695333481003644),(32.95960735872209,56.9434497616887),(36.072711034053015,57.091531913901434),(33.171177511414484,57.33702717078384),(36.193608264162954,57.499784781503735),(33.23162612646945,57.77481561306047),(36.43540272438284,58.04776787540811),(33.62454212432676,58.27099811968307),(36.344729801800376,58.54018474404165),(33.83611227701915,58.68186423448108),(34.74284150284369,59.565911441555244),(33.473420586689336,58.85424941916091)]], [[(34.65216858026123,58.91672306881671),(37.19101041256995,58.68186423448108),(36.01226241899805,58.28688958537609),(37.16078610504247,58.04776787540811),(35.74024365125068,57.79092907387934),(37.009664567405046,57.499784781503735),(35.77046795877817,57.25537683364851),(36.979440259877556,57.07510745541089),(34.22902827487645,56.794777197297435),(36.7074214921302,56.210968525786996),(34.712617195316206,56.10998276812964),(36.55629995449277,55.63519693782703),(35.13575750070099,55.53270067649592),(36.43540272438284,55.34409504165558),(34.83351442542614,55.01619492319591),(35.61934642114075,54.49294870011772),(34.89396304048112,54.12264226523038),(35.37755196092087,53.046178687628185),(37.43280487278982,52.95523300597458),(35.92158949641559,53.80257986695776),(36.91899164482259,53.856094327816805),(36.01226241899805,54.75541714463799),(37.765272255592166,55.189110239786885),(36.828318722240134,55.44708256557195),(38.03729102333953,55.652253637168315),(36.64697287707522,55.941082594334574),(38.21863686850443,56.05939028508024),(36.37495410932787,56.64551287174558),(38.30930979108689,56.992876013526654),(37.16078610504247,57.25537683364851),(38.127963945921984,57.516020773674256),(37.43280487278982,57.710289827306724),(38.33953409861437,57.935626886818994),(37.40258056526235,58.31865112960426),(38.58132855883426,58.744648733419496),(37.31190764267989,59.02578062465136),(34.65216858026123,58.91672306881671)]], [[(38.52087994377928,59.11898412389468),(39.54850639971376,58.713270635642914),(38.369758406141855,58.28688958537609),(38.85334732658162,58.06375936407028),(38.33953409861437,57.710289827306724),(38.73245009647167,57.48354156434209),(38.21863686850443,57.271721400459285),(38.97424455669155,56.87744603722649),(37.463029180317314,56.5623320541159),(38.94402024916407,56.05939028508024),(38.18841256097694,55.856355210835915),(38.490655636251795,55.53270067649592),(37.795496563119656,55.39562234093384),(38.30930979108689,55.154587013355666),(36.7074214921302,54.65063295250911),(37.31190764267989,53.92734063371401),(36.979440259877556,53.58783775557231),(37.855945178174615,52.91880107773497),(39.57873070724124,52.69956490610895),(38.33953409861437,53.281741738901104),(40.00187101262603,53.35396273604752),(39.54850639971376,53.58783775557231),(40.24366547284591,53.58783775557231),(39.97164670509855,53.98069568468355),(40.60635716317572,54.03398248547225),(40.39478701048334,54.44025165268903),(39.54850639971376,54.56310590284329),(39.54850639971376,54.87732350170489),(40.39478701048334,54.87732350170489),(40.39478701048334,55.24083903654295),(39.82052516746112,55.2752875586599),(39.760076552406154,55.75443792473942),(40.57613285564824,55.78844000174894),(40.425011318010824,56.19415599955667),(39.82052516746112,56.07626182891758),(39.79030085993364,56.41214455508424),(40.48545993306579,56.495655446714636),(40.33433839542836,56.95993246553937),(39.79030085993364,56.992876013526654),(39.72985224487867,57.46729112028032),(40.33433839542836,57.46729112028032),(40.24366547284591,58.04776787540811),(39.63917932229622,58.04776787540811),(39.63917932229622,58.382088724871295),(40.33433839542836,58.382088724871295),(40.45523562553831,58.9011152358548),(38.52087994377928,59.11898412389468)]]]))) format TSV;
select wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsUnionSpherical([[[(33.473420586689336,58.85424941916091),(32.23422397806246,58.492830557036),(32.173775363007486,58.03176922751564),(31.508840597402823,57.499784781503735),(31.750635057622702,56.86092686957355),(31.508840597402823,55.941082594334574),(32.20399967053497,55.515591939372456),(31.84130798020516,54.998862226280465),(31.418167674820367,54.422670886434275),(32.47601843828233,53.83826377018255),(32.08310244042503,53.408048308050866),(33.171177511414484,52.82758702113742),(34.77306581037117,52.91880107773494),(34.77306581037117,53.784726518357985),(34.108131044766516,54.17574726780569),(35.07530888564602,54.59813930694554),(34.25925258240394,54.96417435716029),(35.01486027059106,55.361278263643584),(33.50364489421682,55.37845402950552),(32.7480372060297,55.90721384574556),(35.67979503619571,55.68634475630185),(32.83871012861215,56.311688992608396),(34.591719965206266,56.29492065473883),(35.7100193437232,56.311688992608396),(33.83611227701915,56.695333481003644),(32.95960735872209,56.9434497616887),(36.072711034053015,57.091531913901434),(33.171177511414484,57.33702717078384),(36.193608264162954,57.499784781503735),(33.23162612646945,57.77481561306047),(36.43540272438284,58.04776787540811),(33.62454212432676,58.27099811968307),(36.344729801800376,58.54018474404165),(33.83611227701915,58.68186423448108),(34.74284150284369,59.565911441555244),(33.473420586689336,58.85424941916091)]], [[(34.65216858026123,58.91672306881671),(37.19101041256995,58.68186423448108),(36.01226241899805,58.28688958537609),(37.16078610504247,58.04776787540811),(35.74024365125068,57.79092907387934),(37.009664567405046,57.499784781503735),(35.77046795877817,57.25537683364851),(36.979440259877556,57.07510745541089),(34.22902827487645,56.794777197297435),(36.7074214921302,56.210968525786996),(34.712617195316206,56.10998276812964),(36.55629995449277,55.63519693782703),(35.13575750070099,55.53270067649592),(36.43540272438284,55.34409504165558),(34.83351442542614,55.01619492319591),(35.61934642114075,54.49294870011772),(34.89396304048112,54.12264226523038),(35.37755196092087,53.046178687628185),(37.43280487278982,52.95523300597458),(35.92158949641559,53.80257986695776),(36.91899164482259,53.856094327816805),(36.01226241899805,54.75541714463799),(37.765272255592166,55.189110239786885),(36.828318722240134,55.44708256557195),(38.03729102333953,55.652253637168315),(36.64697287707522,55.941082594334574),(38.21863686850443,56.05939028508024),(36.37495410932787,56.64551287174558),(38.30930979108689,56.992876013526654),(37.16078610504247,57.25537683364851),(38.127963945921984,57.516020773674256),(37.43280487278982,57.710289827306724),(38.33953409861437,57.935626886818994),(37.40258056526235,58.31865112960426),(38.58132855883426,58.744648733419496),(37.31190764267989,59.02578062465136),(34.65216858026123,58.91672306881671)]], [[(38.52087994377928,59.11898412389468),(39.54850639971376,58.713270635642914),(38.369758406141855,58.28688958537609),(38.85334732658162,58.06375936407028),(38.33953409861437,57.710289827306724),(38.73245009647167,57.48354156434209),(38.21863686850443,57.271721400459285),(38.97424455669155,56.87744603722649),(37.463029180317314,56.5623320541159),(38.94402024916407,56.05939028508024),(38.18841256097694,55.856355210835915),(38.490655636251795,55.53270067649592),(37.795496563119656,55.39562234093384),(38.30930979108689,55.154587013355666),(36.7074214921302,54.65063295250911),(37.31190764267989,53.92734063371401),(36.979440259877556,53.58783775557231),(37.855945178174615,52.91880107773497),(39.57873070724124,52.69956490610895),(38.33953409861437,53.281741738901104),(40.00187101262603,53.35396273604752),(39.54850639971376,53.58783775557231),(40.24366547284591,53.58783775557231),(39.97164670509855,53.98069568468355),(40.60635716317572,54.03398248547225),(40.39478701048334,54.44025165268903),(39.54850639971376,54.56310590284329),(39.54850639971376,54.87732350170489),(40.39478701048334,54.87732350170489),(40.39478701048334,55.24083903654295),(39.82052516746112,55.2752875586599),(39.760076552406154,55.75443792473942),(40.57613285564824,55.78844000174894),(40.425011318010824,56.19415599955667),(39.82052516746112,56.07626182891758),(39.79030085993364,56.41214455508424),(40.48545993306579,56.495655446714636),(40.33433839542836,56.95993246553937),(39.79030085993364,56.992876013526654),(39.72985224487867,57.46729112028032),(40.33433839542836,57.46729112028032),(40.24366547284591,58.04776787540811),(39.63917932229622,58.04776787540811),(39.63917932229622,58.382088724871295),(40.33433839542836,58.382088724871295),(40.45523562553831,58.9011152358548),(38.52087994377928,59.11898412389468)]]], [[(24.367675781249993,61.45977057029751),(19.577636718749993,58.67693767258692),(19.577636718749993,57.492213666700735),(19.445800781249996,55.87531083569678),(19.445800781249996,54.085173420886775),(17.468261718749996,53.014783245859235),(20.017089843749993,51.563412328675895),(21.203613281249993,50.205033264943324),(26.125488281249993,50.40151532278236),(27.22412109374999,48.980216985374994),(32.80517578124999,49.525208341974405),(35.26611328124999,48.74894534343292),(36.93603515624999,49.66762782262194),(42.56103515625,48.77791275550183),(43.92333984374999,49.8096315635631),(47.17529296875,49.152969656170455),(49.28466796875,50.54136296522162),(48.05419921875,51.17934297928929),(51.39404296875,52.48278022207825),(50.64697265625,53.014783245859235),(52.88818359375,53.93021986394004),(51.65771484374999,54.29088164657006),(52.66845703125,55.825973254619015),(50.25146484375,56.145549500679095),(51.92138671875,57.914847767009206),(49.15283203125,58.17070248348605),(49.59228515625,60.086762746260064),(47.043457031249986,59.88893689676584),(43.57177734375,61.37567331572748),(42.64892578125,60.630101766266705),(36.89208984374999,62.000904713685856),(36.01318359374999,61.143235250840576),(31.398925781249993,62.02152819100766),(30.563964843749996,61.05828537037917),(26.872558593749993,61.71070595883174),(26.652832031249993,61.10078883158897),(24.367675781249993,61.45977057029751)], [(24.455566406249993,59.42272750081452),(21.203613281249993,58.49369382056807),(21.335449218749993,56.89700392127261),(21.599121093749993,55.92458580482949),(25.202636718749993,55.998380955359636),(28.850097656249993,57.06463027327854),(27.09228515625,57.844750992890994),(28.806152343749996,59.17592824927138),(26.257324218749993,59.17592824927138),(24.455566406249993,59.42272750081452)], [(35.13427734375,59.84481485969107),(31.970214843749993,58.97266715450152),(33.20068359374999,56.776808316568406),(36.67236328125,56.41390137600675),(39.08935546874999,57.25528054528888),(42.69287109374999,58.03137242177638),(40.89111328124999,59.26588062825809),(37.28759765625,58.722598828043374),(37.11181640624999,59.66774058164964),(35.13427734375,59.84481485969107)], [(29.157714843749993,55.75184939173528),(22.565917968749993,55.128649068488784),(22.565917968749993,53.54030739150019),(22.038574218749996,51.48138289610097),(26.257324218749993,51.42661449707484),(30.124511718749993,50.54136296522162),(32.18994140624999,51.17934297928929),(30.124511718749993,53.173119202640635),(35.09033203124999,53.173119202640635),(33.11279296875,54.085173420886775),(29.597167968749993,55.50374985927513),(29.157714843749993,55.75184939173528)], [(42.82470703125,56.58369172128337),(36.584472656249986,55.329144408405085),(37.99072265625,53.592504809039355),(34.95849609374999,51.48138289610097),(36.54052734374999,50.40151532278236),(39.66064453124999,50.289339253291786),(39.79248046875,52.13348804077148),(41.77001953125,50.68079714532166),(44.49462890624999,51.97134580885171),(47.30712890624999,52.509534770327264),(44.05517578125,53.54030739150019),(46.60400390625,53.696706475303245),(47.61474609375,55.40406982700608),(45.37353515625,55.40406982700608),(42.82470703125,56.58369172128337)]]))) format TSV;
SELECT wkt(p) FROM geo ORDER BY id;
select wkt(polygonsSymDifferenceSpherical([[(29.453587685533865,59.779570356240356),(29.393139070478895,52.276266797422124),(40.636581470703206,59.38168915000267),(41.21084331372543,59.103467777099866),(29.786055068336193,52.146627480315004),(31.23682182965546,52.16517054781818),(41.69443223416517,58.85424941916091),(42.51048853740727,58.47703162291134),(32.59691566839227,52.22075341251539),(34.289476889931414,52.22075341251539),(43.02430176537451,58.07974369546071),(43.02430176537451,57.25537683364851),(35.468224883503325,52.2022335126388),(37.16078610504247,52.23926559241349),(43.02430176537451,56.26136189644947),(43.02430176537451,55.326904361850836),(38.33953409861437,52.16517054781818),(40.09254393520848,52.16517054781818),(44.4146199116388,55.3097062225408),(44.47506852669377,59.80998197603594),(39.72985224487867,59.931351417569715),(30.23941968124846,53.67744677450975),(30.20919537372098,54.63314259659509),(38.73245009647167,59.94649146557819),(37.2816833351524,59.97675082987618),(30.23941968124846,55.2752875586599),(30.33009260383092,56.19415599955667),(36.28428118674541,59.96162460231375),(34.863738732953635,59.97675082987618),(30.178971066193498,56.97640788219866),(30.178971066193498,57.91957806959033),(33.65476643185424,59.94649146557819),(32.32489690064491,59.94649146557819),(30.481214141468342,58.85424941916091),(30.571887064050795,59.99187015036608),(29.453587685533865,59.779570356240356)]], [[(24.367675781249993,61.45977057029751),(19.577636718749993,58.67693767258692),(19.577636718749993,57.492213666700735),(19.445800781249996,55.87531083569678),(19.445800781249996,54.085173420886775),(17.468261718749996,53.014783245859235),(20.017089843749993,51.563412328675895),(21.203613281249993,50.205033264943324),(26.125488281249993,50.40151532278236),(27.22412109374999,48.980216985374994),(32.80517578124999,49.525208341974405),(35.26611328124999,48.74894534343292),(36.93603515624999,49.66762782262194),(42.56103515625,48.77791275550183),(43.92333984374999,49.8096315635631),(47.17529296875,49.152969656170455),(49.28466796875,50.54136296522162),(48.05419921875,51.17934297928929),(51.39404296875,52.48278022207825),(50.64697265625,53.014783245859235),(52.88818359375,53.93021986394004),(51.65771484374999,54.29088164657006),(52.66845703125,55.825973254619015),(50.25146484375,56.145549500679095),(51.92138671875,57.914847767009206),(49.15283203125,58.17070248348605),(49.59228515625,60.086762746260064),(47.043457031249986,59.88893689676584),(43.57177734375,61.37567331572748),(42.64892578125,60.630101766266705),(36.89208984374999,62.000904713685856),(36.01318359374999,61.143235250840576),(31.398925781249993,62.02152819100766),(30.563964843749996,61.05828537037917),(26.872558593749993,61.71070595883174),(26.652832031249993,61.10078883158897),(24.367675781249993,61.45977057029751)], [(24.455566406249993,59.42272750081452),(21.203613281249993,58.49369382056807),(21.335449218749993,56.89700392127261),(21.599121093749993,55.92458580482949),(25.202636718749993,55.998380955359636),(28.850097656249993,57.06463027327854),(27.09228515625,57.844750992890994),(28.806152343749996,59.17592824927138),(26.257324218749993,59.17592824927138),(24.455566406249993,59.42272750081452)], [(35.13427734375,59.84481485969107),(31.970214843749993,58.97266715450152),(33.20068359374999,56.776808316568406),(36.67236328125,56.41390137600675),(39.08935546874999,57.25528054528888),(42.69287109374999,58.03137242177638),(40.89111328124999,59.26588062825809),(37.28759765625,58.722598828043374),(37.11181640624999,59.66774058164964),(35.13427734375,59.84481485969107)], [(29.157714843749993,55.75184939173528),(22.565917968749993,55.128649068488784),(22.565917968749993,53.54030739150019),(22.038574218749996,51.48138289610097),(26.257324218749993,51.42661449707484),(30.124511718749993,50.54136296522162),(32.18994140624999,51.17934297928929),(30.124511718749993,53.173119202640635),(35.09033203124999,53.173119202640635),(33.11279296875,54.085173420886775),(29.597167968749993,55.50374985927513),(29.157714843749993,55.75184939173528)], [(42.82470703125,56.58369172128337),(36.584472656249986,55.329144408405085),(37.99072265625,53.592504809039355),(34.95849609374999,51.48138289610097),(36.54052734374999,50.40151532278236),(39.66064453124999,50.289339253291786),(39.79248046875,52.13348804077148),(41.77001953125,50.68079714532166),(44.49462890624999,51.97134580885171),(47.30712890624999,52.509534770327264),(44.05517578125,53.54030739150019),(46.60400390625,53.696706475303245),(47.61474609375,55.40406982700608),(45.37353515625,55.40406982700608),(42.82470703125,56.58369172128337)]])) format Null;
select wkt(polygonsSymDifferenceSpherical([[(29.453587685533865,59.779570356240356),(29.393139070478895,52.276266797422124),(40.636581470703206,59.38168915000267),(41.21084331372543,59.103467777099866),(29.786055068336193,52.146627480315004),(31.23682182965546,52.16517054781818),(41.69443223416517,58.85424941916091),(42.51048853740727,58.47703162291134),(32.59691566839227,52.22075341251539),(34.289476889931414,52.22075341251539),(43.02430176537451,58.07974369546071),(43.02430176537451,57.25537683364851),(35.468224883503325,52.2022335126388),(37.16078610504247,52.23926559241349),(43.02430176537451,56.26136189644947),(43.02430176537451,55.326904361850836),(38.33953409861437,52.16517054781818),(40.09254393520848,52.16517054781818),(44.4146199116388,55.3097062225408),(44.47506852669377,59.80998197603594),(39.72985224487867,59.931351417569715),(30.23941968124846,53.67744677450975),(30.20919537372098,54.63314259659509),(38.73245009647167,59.94649146557819),(37.2816833351524,59.97675082987618),(30.23941968124846,55.2752875586599),(30.33009260383092,56.19415599955667),(36.28428118674541,59.96162460231375),(34.863738732953635,59.97675082987618),(30.178971066193498,56.97640788219866),(30.178971066193498,57.91957806959033),(33.65476643185424,59.94649146557819),(32.32489690064491,59.94649146557819),(30.481214141468342,58.85424941916091),(30.571887064050795,59.99187015036608),(29.453587685533865,59.779570356240356)]], [[[(33.473420586689336,58.85424941916091),(32.23422397806246,58.492830557036),(32.173775363007486,58.03176922751564),(31.508840597402823,57.499784781503735),(31.750635057622702,56.86092686957355),(31.508840597402823,55.941082594334574),(32.20399967053497,55.515591939372456),(31.84130798020516,54.998862226280465),(31.418167674820367,54.422670886434275),(32.47601843828233,53.83826377018255),(32.08310244042503,53.408048308050866),(33.171177511414484,52.82758702113742),(34.77306581037117,52.91880107773494),(34.77306581037117,53.784726518357985),(34.108131044766516,54.17574726780569),(35.07530888564602,54.59813930694554),(34.25925258240394,54.96417435716029),(35.01486027059106,55.361278263643584),(33.50364489421682,55.37845402950552),(32.7480372060297,55.90721384574556),(35.67979503619571,55.68634475630185),(32.83871012861215,56.311688992608396),(34.591719965206266,56.29492065473883),(35.7100193437232,56.311688992608396),(33.83611227701915,56.695333481003644),(32.95960735872209,56.9434497616887),(36.072711034053015,57.091531913901434),(33.171177511414484,57.33702717078384),(36.193608264162954,57.499784781503735),(33.23162612646945,57.77481561306047),(36.43540272438284,58.04776787540811),(33.62454212432676,58.27099811968307),(36.344729801800376,58.54018474404165),(33.83611227701915,58.68186423448108),(34.74284150284369,59.565911441555244),(33.473420586689336,58.85424941916091)]], [[(34.65216858026123,58.91672306881671),(37.19101041256995,58.68186423448108),(36.01226241899805,58.28688958537609),(37.16078610504247,58.04776787540811),(35.74024365125068,57.79092907387934),(37.009664567405046,57.499784781503735),(35.77046795877817,57.25537683364851),(36.979440259877556,57.07510745541089),(34.22902827487645,56.794777197297435),(36.7074214921302,56.210968525786996),(34.712617195316206,56.10998276812964),(36.55629995449277,55.63519693782703),(35.13575750070099,55.53270067649592),(36.43540272438284,55.34409504165558),(34.83351442542614,55.01619492319591),(35.61934642114075,54.49294870011772),(34.89396304048112,54.12264226523038),(35.37755196092087,53.046178687628185),(37.43280487278982,52.95523300597458),(35.92158949641559,53.80257986695776),(36.91899164482259,53.856094327816805),(36.01226241899805,54.75541714463799),(37.765272255592166,55.189110239786885),(36.828318722240134,55.44708256557195),(38.03729102333953,55.652253637168315),(36.64697287707522,55.941082594334574),(38.21863686850443,56.05939028508024),(36.37495410932787,56.64551287174558),(38.30930979108689,56.992876013526654),(37.16078610504247,57.25537683364851),(38.127963945921984,57.516020773674256),(37.43280487278982,57.710289827306724),(38.33953409861437,57.935626886818994),(37.40258056526235,58.31865112960426),(38.58132855883426,58.744648733419496),(37.31190764267989,59.02578062465136),(34.65216858026123,58.91672306881671)]], [[(38.52087994377928,59.11898412389468),(39.54850639971376,58.713270635642914),(38.369758406141855,58.28688958537609),(38.85334732658162,58.06375936407028),(38.33953409861437,57.710289827306724),(38.73245009647167,57.48354156434209),(38.21863686850443,57.271721400459285),(38.97424455669155,56.87744603722649),(37.463029180317314,56.5623320541159),(38.94402024916407,56.05939028508024),(38.18841256097694,55.856355210835915),(38.490655636251795,55.53270067649592),(37.795496563119656,55.39562234093384),(38.30930979108689,55.154587013355666),(36.7074214921302,54.65063295250911),(37.31190764267989,53.92734063371401),(36.979440259877556,53.58783775557231),(37.855945178174615,52.91880107773497),(39.57873070724124,52.69956490610895),(38.33953409861437,53.281741738901104),(40.00187101262603,53.35396273604752),(39.54850639971376,53.58783775557231),(40.24366547284591,53.58783775557231),(39.97164670509855,53.98069568468355),(40.60635716317572,54.03398248547225),(40.39478701048334,54.44025165268903),(39.54850639971376,54.56310590284329),(39.54850639971376,54.87732350170489),(40.39478701048334,54.87732350170489),(40.39478701048334,55.24083903654295),(39.82052516746112,55.2752875586599),(39.760076552406154,55.75443792473942),(40.57613285564824,55.78844000174894),(40.425011318010824,56.19415599955667),(39.82052516746112,56.07626182891758),(39.79030085993364,56.41214455508424),(40.48545993306579,56.495655446714636),(40.33433839542836,56.95993246553937),(39.79030085993364,56.992876013526654),(39.72985224487867,57.46729112028032),(40.33433839542836,57.46729112028032),(40.24366547284591,58.04776787540811),(39.63917932229622,58.04776787540811),(39.63917932229622,58.382088724871295),(40.33433839542836,58.382088724871295),(40.45523562553831,58.9011152358548),(38.52087994377928,59.11898412389468)]]])) format Null;
select wkt(polygonsSymDifferenceSpherical([[[(33.473420586689336,58.85424941916091),(32.23422397806246,58.492830557036),(32.173775363007486,58.03176922751564),(31.508840597402823,57.499784781503735),(31.750635057622702,56.86092686957355),(31.508840597402823,55.941082594334574),(32.20399967053497,55.515591939372456),(31.84130798020516,54.998862226280465),(31.418167674820367,54.422670886434275),(32.47601843828233,53.83826377018255),(32.08310244042503,53.408048308050866),(33.171177511414484,52.82758702113742),(34.77306581037117,52.91880107773494),(34.77306581037117,53.784726518357985),(34.108131044766516,54.17574726780569),(35.07530888564602,54.59813930694554),(34.25925258240394,54.96417435716029),(35.01486027059106,55.361278263643584),(33.50364489421682,55.37845402950552),(32.7480372060297,55.90721384574556),(35.67979503619571,55.68634475630185),(32.83871012861215,56.311688992608396),(34.591719965206266,56.29492065473883),(35.7100193437232,56.311688992608396),(33.83611227701915,56.695333481003644),(32.95960735872209,56.9434497616887),(36.072711034053015,57.091531913901434),(33.171177511414484,57.33702717078384),(36.193608264162954,57.499784781503735),(33.23162612646945,57.77481561306047),(36.43540272438284,58.04776787540811),(33.62454212432676,58.27099811968307),(36.344729801800376,58.54018474404165),(33.83611227701915,58.68186423448108),(34.74284150284369,59.565911441555244),(33.473420586689336,58.85424941916091)]], [[(34.65216858026123,58.91672306881671),(37.19101041256995,58.68186423448108),(36.01226241899805,58.28688958537609),(37.16078610504247,58.04776787540811),(35.74024365125068,57.79092907387934),(37.009664567405046,57.499784781503735),(35.77046795877817,57.25537683364851),(36.979440259877556,57.07510745541089),(34.22902827487645,56.794777197297435),(36.7074214921302,56.210968525786996),(34.712617195316206,56.10998276812964),(36.55629995449277,55.63519693782703),(35.13575750070099,55.53270067649592),(36.43540272438284,55.34409504165558),(34.83351442542614,55.01619492319591),(35.61934642114075,54.49294870011772),(34.89396304048112,54.12264226523038),(35.37755196092087,53.046178687628185),(37.43280487278982,52.95523300597458),(35.92158949641559,53.80257986695776),(36.91899164482259,53.856094327816805),(36.01226241899805,54.75541714463799),(37.765272255592166,55.189110239786885),(36.828318722240134,55.44708256557195),(38.03729102333953,55.652253637168315),(36.64697287707522,55.941082594334574),(38.21863686850443,56.05939028508024),(36.37495410932787,56.64551287174558),(38.30930979108689,56.992876013526654),(37.16078610504247,57.25537683364851),(38.127963945921984,57.516020773674256),(37.43280487278982,57.710289827306724),(38.33953409861437,57.935626886818994),(37.40258056526235,58.31865112960426),(38.58132855883426,58.744648733419496),(37.31190764267989,59.02578062465136),(34.65216858026123,58.91672306881671)]], [[(38.52087994377928,59.11898412389468),(39.54850639971376,58.713270635642914),(38.369758406141855,58.28688958537609),(38.85334732658162,58.06375936407028),(38.33953409861437,57.710289827306724),(38.73245009647167,57.48354156434209),(38.21863686850443,57.271721400459285),(38.97424455669155,56.87744603722649),(37.463029180317314,56.5623320541159),(38.94402024916407,56.05939028508024),(38.18841256097694,55.856355210835915),(38.490655636251795,55.53270067649592),(37.795496563119656,55.39562234093384),(38.30930979108689,55.154587013355666),(36.7074214921302,54.65063295250911),(37.31190764267989,53.92734063371401),(36.979440259877556,53.58783775557231),(37.855945178174615,52.91880107773497),(39.57873070724124,52.69956490610895),(38.33953409861437,53.281741738901104),(40.00187101262603,53.35396273604752),(39.54850639971376,53.58783775557231),(40.24366547284591,53.58783775557231),(39.97164670509855,53.98069568468355),(40.60635716317572,54.03398248547225),(40.39478701048334,54.44025165268903),(39.54850639971376,54.56310590284329),(39.54850639971376,54.87732350170489),(40.39478701048334,54.87732350170489),(40.39478701048334,55.24083903654295),(39.82052516746112,55.2752875586599),(39.760076552406154,55.75443792473942),(40.57613285564824,55.78844000174894),(40.425011318010824,56.19415599955667),(39.82052516746112,56.07626182891758),(39.79030085993364,56.41214455508424),(40.48545993306579,56.495655446714636),(40.33433839542836,56.95993246553937),(39.79030085993364,56.992876013526654),(39.72985224487867,57.46729112028032),(40.33433839542836,57.46729112028032),(40.24366547284591,58.04776787540811),(39.63917932229622,58.04776787540811),(39.63917932229622,58.382088724871295),(40.33433839542836,58.382088724871295),(40.45523562553831,58.9011152358548),(38.52087994377928,59.11898412389468)]]], [[(24.367675781249993,61.45977057029751),(19.577636718749993,58.67693767258692),(19.577636718749993,57.492213666700735),(19.445800781249996,55.87531083569678),(19.445800781249996,54.085173420886775),(17.468261718749996,53.014783245859235),(20.017089843749993,51.563412328675895),(21.203613281249993,50.205033264943324),(26.125488281249993,50.40151532278236),(27.22412109374999,48.980216985374994),(32.80517578124999,49.525208341974405),(35.26611328124999,48.74894534343292),(36.93603515624999,49.66762782262194),(42.56103515625,48.77791275550183),(43.92333984374999,49.8096315635631),(47.17529296875,49.152969656170455),(49.28466796875,50.54136296522162),(48.05419921875,51.17934297928929),(51.39404296875,52.48278022207825),(50.64697265625,53.014783245859235),(52.88818359375,53.93021986394004),(51.65771484374999,54.29088164657006),(52.66845703125,55.825973254619015),(50.25146484375,56.145549500679095),(51.92138671875,57.914847767009206),(49.15283203125,58.17070248348605),(49.59228515625,60.086762746260064),(47.043457031249986,59.88893689676584),(43.57177734375,61.37567331572748),(42.64892578125,60.630101766266705),(36.89208984374999,62.000904713685856),(36.01318359374999,61.143235250840576),(31.398925781249993,62.02152819100766),(30.563964843749996,61.05828537037917),(26.872558593749993,61.71070595883174),(26.652832031249993,61.10078883158897),(24.367675781249993,61.45977057029751)], [(24.455566406249993,59.42272750081452),(21.203613281249993,58.49369382056807),(21.335449218749993,56.89700392127261),(21.599121093749993,55.92458580482949),(25.202636718749993,55.998380955359636),(28.850097656249993,57.06463027327854),(27.09228515625,57.844750992890994),(28.806152343749996,59.17592824927138),(26.257324218749993,59.17592824927138),(24.455566406249993,59.42272750081452)], [(35.13427734375,59.84481485969107),(31.970214843749993,58.97266715450152),(33.20068359374999,56.776808316568406),(36.67236328125,56.41390137600675),(39.08935546874999,57.25528054528888),(42.69287109374999,58.03137242177638),(40.89111328124999,59.26588062825809),(37.28759765625,58.722598828043374),(37.11181640624999,59.66774058164964),(35.13427734375,59.84481485969107)], [(29.157714843749993,55.75184939173528),(22.565917968749993,55.128649068488784),(22.565917968749993,53.54030739150019),(22.038574218749996,51.48138289610097),(26.257324218749993,51.42661449707484),(30.124511718749993,50.54136296522162),(32.18994140624999,51.17934297928929),(30.124511718749993,53.173119202640635),(35.09033203124999,53.173119202640635),(33.11279296875,54.085173420886775),(29.597167968749993,55.50374985927513),(29.157714843749993,55.75184939173528)], [(42.82470703125,56.58369172128337),(36.584472656249986,55.329144408405085),(37.99072265625,53.592504809039355),(34.95849609374999,51.48138289610097),(36.54052734374999,50.40151532278236),(39.66064453124999,50.289339253291786),(39.79248046875,52.13348804077148),(41.77001953125,50.68079714532166),(44.49462890624999,51.97134580885171),(47.30712890624999,52.509534770327264),(44.05517578125,53.54030739150019),(46.60400390625,53.696706475303245),(47.61474609375,55.40406982700608),(45.37353515625,55.40406982700608),(42.82470703125,56.58369172128337)]])) format Null;
SELECT wordShingleMinHash('what a cute cat.');
SELECT wordShingleMinHash(s) FROM defaults;
SELECT wordShingleMinHashCaseInsensitive('what a cute cat.');
SELECT wordShingleMinHashCaseInsensitive(s) FROM defaults;
SELECT wordShingleMinHashCaseInsensitiveUTF8('what a cute cat.');
SELECT wordShingleMinHashCaseInsensitiveUTF8(s) FROM defaults;
SELECT wordShingleMinHashUTF8('what a cute cat.');
SELECT wordShingleMinHashUTF8(s) FROM defaults;
SELECT wordShingleSimHash('foobar', 9223372036854775807);
SELECT wordShingleSimHash('what a cute cat.');
SELECT wordShingleSimHash(s) FROM defaults;
SELECT wordShingleSimHashCaseInsensitive('what a cute cat.');
SELECT wordShingleSimHashCaseInsensitive(s) FROM defaults;
SELECT wordShingleSimHashCaseInsensitiveUTF8('what a cute cat.');
SELECT wordShingleSimHashCaseInsensitiveUTF8(s) FROM defaults;
SELECT wordShingleSimHashUTF8('what a cute cat.');
SELECT wordShingleSimHashUTF8(s) FROM defaults;
SELECT written_rows FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'INSERT INTO /* test 01413, query 1 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;
SELECT written_rows FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'INSERT INTO /* test 01413, query 2 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;
SELECT wyHash64(' ');
SELECT wyHash64('');
SELECT wyHash64('qwerty');
SELECT wyHash64(NULL);
select x + (1e10 + 1e20) from test order by (1e10 + 1e20), x;
select x + (pow(2, 2) + pow(3, 2)) from test order by (pow(2,2) + pow(3, 2)), x;
SELECT X + 1 FROM (SELECT 12345678901 AS X UNION ALL SELECT number FROM system.numbers LIMIT 10) ORDER BY X ASC;
SELECT x + 1 FROM tab WHERE (x + 1::LowCardinality(UInt8)) <= -9223372036854775808 order by x;
SELECT x + 1 FROM tab WHERE (x + CAST('1', 'Nullable(UInt8)')) <= -2147483647 ORDER BY x ASC NULLS FIRST;
SELECT x + 1 FROM tab where plus(x, 1) <= 2 order by x;
SELECT x + 1 FROM tab where plus(x, 1) <= toDateTime('2022-02-02') + 2 order by x;
SELECT x + 1 FROM tab where plus(x, 1::LowCardinality(Nullable(UInt8))) <= 2 order by x;
SELECT x + 1 FROM tab where plus(x, 1::LowCardinality(Nullable(UInt8))) <= toDateTime('2022-02-02') + 2 order by x;
SELECT x + 1 FROM tab where plus(x, 1::LowCardinality(UInt8)) <= 2 order by x;
SELECT x + 1 FROM tab where plus(x, 1::LowCardinality(UInt8)) <= toDateTime('2022-02-02') + 2 order by x;
SELECT x + 1 FROM tab where plus(x, 1::Nullable(UInt8)) <= 2 order by x;
SELECT x + 1 FROM tab where plus(x, 1::Nullable(UInt8)) <= toDateTime('2022-02-02') + 2 order by x;
select x + 1 from table_1 settings additional_result_filter='`plus(x, 1)` != 2';
select x + 1e10 from test order by 1e10, x;
select x + y, sum(x - y) as s from test_agg_proj_02302 group by x + y order by s desc limit 5 settings optimize_aggregation_in_order=1, optimize_read_in_order=1;
SELECT x < 'a\0', x > 'a\0' FROM strings_00469;
SELECT x < 'aa', x > 'aa' FROM strings_00469;
SELECT x < y, x > y FROM strings_00469;
SELECT x = 0x1.f7ced916872b0p-4 FROM t;
SELECT x = y OR (x IS NULL AND y IS NULL) FROM t1 ORDER BY x NULLS LAST;
select x as c from (select 1 AS k, max(0) as a, max(-0) as x from t7 GROUP BY k) where NOT ignore(c);
SELECT x AS y, y FROM merge_tree;
SELECT x FROM ( SELECT avg(0) AS c_7_c4572_1, max(-0) AS x FROM t7 AS ref_0 GROUP BY ref_0.c_2_c46_1 ) WHERE x <= multiIf(true, 1, exp10(x) <= 1, 1, 1);
SELECT x FROM ( SELECT x, `1` FROM ( SELECT x, 1 FROM test_00744 ) ALL INNER JOIN ( SELECT count(), 1 FROM test_00744 ) jss2 USING (`1`) LIMIT 10 );
SELECT x FROM ( SELECT 1 AS x UNION DISTINCT SELECT 1 ) LIMIT 1;
SELECT X FROM (SELECT * FROM (SELECT 1 AS X, 2 AS Y) UNION ALL SELECT 3, 4) ORDER BY X ASC;
SELECT x FROM (SELECT 1 AS x UNION ALL SELECT NULL UNION ALL SELECT 1.0) ORDER BY x DESC;
SELECT x FROM (SELECT 1 as x UNION ALL SELECT NULL) ORDER BY x DESC;
SELECT x FROM (SELECT 1 AS x);
select x from (select 1 as x, 1 as y, x, y);
SELECT X FROM (SELECT 1 AS X, 2 AS Y UNION ALL SELECT * FROM (SELECT 3, 4)) ORDER BY X ASC;
SELECT x FROM (SELECT 1 AS x, 2 AS y) LIMIT 1 BY y;
SELECT X FROM (SELECT 3 AS X UNION ALL SELECT 2 AS X UNION ALL SELECT 1 AS X) ORDER BY X ASC;
SELECT x FROM (SELECT 5 AS x) ORDER BY -x, x WITH FILL FROM 1 TO 10;
SELECT x FROM (SELECT count() AS x FROM remote('127.0.0.2') WITH TOTALS) LIMIT 1;
SELECT x FROM (SELECT demangle(symbol) AS x FROM system.symbols WHERE symbol LIKE '%StorageSystemSymbols%') WHERE x LIKE '%DB::StorageSystemSymbols::StorageSystemSymbols%' ORDER BY x LIMIT 1 SETTINGS allow_introspection_functions = 1;
select x from (select dummy as x, dummy + 1 as dummy order by identity(x)) format Null;
SELECT x FROM (SELECT dummy AS x, plus(ignore(ignore(ignore(ignore('-922337203.6854775808', ignore(NULL)), ArrLen = 256, ignore(100, Arr.C3, ignore(NULL), (SELECT 10.000100135803223, count(*) FROM system.time_zones) > NULL)))), dummy, 65535) AS dummy ORDER BY ignore(-2) ASC, identity(x) DESC NULLS FIRST) FORMAT Null;
SELECT x FROM (SELECT materialize(NULL) AS x) WHERE x;
SELECT X FROM (SELECT name AS X FROM data2013 UNION ALL SELECT data_name FROM data2015) ORDER BY X ASC;
SELECT x FROM (SELECT NULL AS x) WHERE x;
SELECT x FROM (SELECT number % 16 = 0 ? nan : (number % 24 = 0 ? NULL : (number % 37 = 0 ? nan : (number % 34 = 0 ? nan : (number % 3 = 0 ? NULL : (number % 68 = 0 ? 42 : (number % 28 = 0 ? nan : (number % 46 = 0 ? nan : (number % 13 = 0 ? nan : (number % 27 = 0 ? NULL : (number % 39 = 0 ? NULL : (number % 27 = 0 ? NULL : (number % 30 = 0 ? NULL : (number % 72 = 0 ? NULL : (number % 36 = 0 ? NULL : (number % 51 = 0 ? NULL : (number % 58 = 0 ? nan : (number % 26 = 0 ? 42 : (number % 13 = 0 ? nan : (number % 12 = 0 ? NULL : (number % 22 = 0 ? nan : (number % 36 = 0 ? NULL : (number % 63 = 0 ? NULL : (number % 27 = 0 ? NULL : (number % 18 = 0 ? NULL : (number % 69 = 0 ? NULL : (number % 76 = 0 ? nan : (number % 42 = 0 ? NULL : (number % 9 = 0 ? NULL : (toFloat64(number)))))))))))))))))))))))))))))) AS x FROM system.numbers LIMIT 1001) ORDER BY x ASC NULLS FIRST;
SELECT x FROM (SELECT number % 22 = 0 ? nan : (number % 56 = 0 ? 42 : (number % 45 = 0 ? NULL : (number % 47 = 0 ? 42 : (number % 39 = 0 ? NULL : (number % 1 = 0 ? nan : (number % 43 = 0 ? nan : (number % 40 = 0 ? nan : (number % 42 = 0 ? NULL : (number % 26 = 0 ? 42 : (number % 41 = 0 ? 42 : (number % 6 = 0 ? NULL : (number % 39 = 0 ? NULL : (number % 34 = 0 ? nan : (number % 74 = 0 ? 42 : (number % 40 = 0 ? nan : (number % 37 = 0 ? nan : (number % 51 = 0 ? NULL : (number % 46 = 0 ? nan : (toFloat64(number)))))))))))))))))))) AS x FROM system.numbers LIMIT 1001) ORDER BY x ASC NULLS FIRST;
SELECT x FROM (SELECT number % 5 = 0 ? NULL : (number % 3 = 0 ? nan : toFloat64(number)) AS x FROM system.numbers LIMIT 10) ORDER BY x ASC NULLS FIRST;
SELECT x FROM (SELECT number % 5 = 0 ? NULL : (number % 3 = 0 ? nan : toFloat64(number)) AS x FROM system.numbers LIMIT 10) ORDER BY x ASC NULLS LAST;
SELECT x FROM (SELECT number % 5 = 0 ? NULL : (number % 3 = 0 ? nan : toFloat64(number)) AS x FROM system.numbers LIMIT 10) ORDER BY x ASC;
SELECT x FROM (SELECT number % 5 = 0 ? NULL : (number % 3 = 0 ? nan : toFloat64(number)) AS x FROM system.numbers LIMIT 10) ORDER BY x DESC NULLS FIRST;
SELECT x FROM (SELECT number % 5 = 0 ? NULL : (number % 3 = 0 ? nan : toFloat64(number)) AS x FROM system.numbers LIMIT 10) ORDER BY x DESC NULLS LAST;
SELECT x FROM (SELECT number % 5 = 0 ? NULL : (number % 3 = 0 ? nan : toFloat64(number)) AS x FROM system.numbers LIMIT 10) ORDER BY x DESC;
SELECT x FROM (SELECT number AS x, number + 1 AS y FROM system.numbers LIMIT 10) ORDER BY y LIMIT 1 BY y;
select x from (select toDecimal128(3.3, 12) x) group by x;
select x from (select toDecimal32(1.3, 2) x) group by x;
select x from (select toDecimal64(2.3, 4) x) group by x;
SELECT x FROM (SELECT toNullable(0) AS x) WHERE x;
SELECT x FROM (SELECT toNullable(1) AS x) WHERE x;
SELECT x FROM (SELECT toNullable(materialize(0)) AS x) WHERE x;
SELECT x FROM (SELECT toNullable(materialize(1)) AS x) WHERE x;
select x from (with 1 as x select x union all with 2 as x select x) order by x;
SELECT x FROM 01154_test WHERE x = 1;
SELECT x FROM 01154_test WHERE x = toUUID('00000000-0000-0000-0000-000000000001');
SELECT x FROM 01154_test WHERE x IN (1, 2);
SELECT x FROM 01154_test WHERE x IN (toUUID('00000000-0000-0000-0000-000000000001'), toUUID('00000000-0000-0000-0000-000000000002'));
SELECT x FROM a UNION ALL SELECT x FROM b UNION ALL SELECT x FROM c UNION ALL SELECT x FROM d;
SELECT x FROM a UNION ALL SELECT x FROM b UNION ALL SELECT x FROM c;
SELECT x FROM a UNION ALL SELECT x FROM b UNION ALL SELECT x FROM d;
SELECT x FROM a UNION ALL SELECT x FROM b;
SELECT x FROM a UNION ALL SELECT x FROM c UNION ALL SELECT x FROM d;
SELECT x FROM a UNION ALL SELECT x FROM c;
SELECT x FROM a UNION ALL SELECT x FROM d;
SELECT x FROM a;
SELECT x FROM b UNION ALL SELECT x FROM a;
SELECT x FROM b UNION ALL SELECT x FROM c UNION ALL SELECT x FROM d;
SELECT x FROM b UNION ALL SELECT x FROM c;
SELECT x FROM b UNION ALL SELECT x FROM d;
SELECT x FROM b;
SELECT x FROM c UNION ALL SELECT x FROM a;
SELECT x FROM c UNION ALL SELECT x FROM b;
SELECT x FROM c UNION ALL SELECT x FROM d;
SELECT x FROM c;
SELECT x FROM d UNION ALL SELECT x FROM a;
SELECT x FROM d UNION ALL SELECT x FROM b;
SELECT x FROM d UNION ALL SELECT x FROM c;
SELECT x FROM d;
SELECT x FROM distributed GROUP BY x WITH TOTALS;
select x from final_bug final order by x settings max_threads=2, max_final_threads=2, max_block_size=8 format Null;
SELECT x FROM merge_32_64 WHERE x = 1;
SELECT x FROM merge_32_64 WHERE x IN (1);
SELECT x FROM merge_32_64 WHERE x IN (4294967290);
SELECT x FROM merge_32_64 WHERE x IN (4294967299);
SELECT x FROM merge_one_two WHERE x IN (-1);
SELECT x FROM merge_one_two WHERE x IN (2147483650);
SELECT x FROM merge_s64_u64 WHERE x IN (-1);
SELECT x FROM merge_s64_u64 WHERE x IN (1);
SELECT x FROM mt_pk ORDER BY x ASC LIMIT 10000000, 1;
SELECT x FROM nullable_alter ORDER BY x NULLS FIRST;
SELECT x FROM nullable_alter ORDER BY x;
SELECT x FROM parallel_replicas_plain LIMIT 1 FORMAT Null;
select x from partial_sort_opt_bug order by x limit 2000 settings max_block_size = 4000;
SELECT x FROM primary_key ORDER BY x;
SELECT x FROM primary_key WHERE -x < -1 ORDER BY x;
SELECT x FROM quorum1 ORDER BY x;
SELECT x FROM quorum2 ORDER BY x;
SELECT x FROM quorum3 ORDER BY x;
select x from system.numbers limit 1;
SELECT x FROM t FULL JOIN r USING (x) ORDER BY ALL ;
SELECT x FROM t FULL JOIN r USING (x) ORDER BY ALL SETTINGS join_algorithm = 'full_sorting_merge';
SELECT x FROM t FULL JOIN r USING (x) ORDER BY ALL SETTINGS join_algorithm = 'partial_merge';
SELECT x FROM t GROUP BY x WITH TOTALS;
SELECT x FROM t GROUP BY x;
SELECT x FROM t ORDER BY x;
SELECT x FROM t1 ALL RIGHT JOIN tj ON t1.id1 == tj.key1 AND t1.id2 == tj.key2 ORDER BY key1 FORMAT TSVWithNames;
select x from tab array join arr prewhere x != 0 where arr;
select x from table_01323_many_parts limit 10 format Null;
select x from table_01323_many_parts order by x limit 10 format Null;
select x from table_1 prewhere x != 2 settings additional_table_filters={'table_1' : 'x != 2'};
select x from table_1 prewhere x != 2 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};
select x from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};
select x from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};
select x from table_1 settings additional_table_filters={'table_1' : 'x != 2'};
select x from table_1 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};
select x from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};
SELECT x FROM test WHERE x != 0 OR isNull(x);
SELECT x FROM test WHERE x != 0;
SELECT x FROM test WHERE x != 1;
select x from versioned_collapsing FINAL prewhere version < 1000;
select x'' == b'';
select X'' == X'';
select x'';
select X'';
select x'0' == '\0';
select X'0' == '\0';
select x'0' == b'0';
select X'0' == X'0';
select x'30';
select X'30';
SELECT x, (SELECT 1 WHERE NULL) AS x FORMAT Null;
SELECT x, 1 + (2 + (3 AS x));
SELECT x, a FROM (SELECT arrayJoin(['Hello', 'Goodbye']) AS x, [1, 2, 3] AS arr) ARRAY JOIN;
SELECT x, any(x) FROM dest_view GROUP BY x ORDER BY x;
SELECT x, arrayJoin(x) FROM (SELECT materialize([(1, 2), (3, 4), (5, 6)]) AS x);
SELECT x, arrayJoin(x) FROM (SELECT materialize(arrayMap(x -> toFixedString(x, 5), ['Hello', 'world'])) AS x);
SELECT x, bitCount(x), hex(reinterpretAsString(x)) FROM VALUES ('x Float64', (1), (-1), (inf));
select x, count() from ma_dist group by x order by x;
SELECT x, count() FROM merge_00401 GROUP BY x ORDER BY x;
SELECT x, count(), uniq(x), avg(x), avg(toNullable(x)), groupArray(x), groupUniqArray(x) FROM t GROUP BY x;
SELECT x, isFinite(x), isInfinite(x), isNaN(x) FROM (SELECT arrayJoin([0, 1, -1, inf, -inf, nan, -nan, 0 / 0, 1 / 0, -1 / 0, 0 / -0., -0. / 0, 1 / -0., -1 / -0.]) AS x);
SELECT x, isFinite(x), isInfinite(x), isNaN(x) FROM (SELECT toFloat32(arrayJoin([0, 1, -1, inf, -inf, nan, -nan, 0 / 0, 1 / 0, -1 / 0, 0 / -0., -0. / 0, 1 / -0., -1 / -0.])) AS x);
SELECT x, lc FROM t AS l RIGHT JOIN nr AS r USING (lc) SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc FROM t AS l RIGHT JOIN nr AS r USING (lc) SETTINGS allow_experimental_analyzer = 1;
SELECT x, lc FROM t AS l RIGHT JOIN nr AS r USING (lc);
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 1;
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x;
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 1;
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x;
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 1;
SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 1;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (x) ORDER BY x;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 1;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (x) ORDER BY x;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 1;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;
SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (x) ORDER BY x;
SELECT x, lc, toTypeName(lc), r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc, toTypeName(lc), r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 1;
SELECT x, lc, toTypeName(lc), r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 0;
SELECT x, lc, toTypeName(lc), r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x SETTINGS allow_experimental_analyzer = 1;
SELECT x, lengthUTF8(x) AS y FROM (SELECT arrayJoin(['', 'h', 'hello', 'hello hello hello', 'п', 'пр', 'привет', 'привет привет', 'привет привет привет', '你好', '你好 你好', '你好你好你好', '你好你好你好你好', '你好 你好 你好 你好 你好']) AS x);
select x, min(x) over w, max(x) over w, count(x) over w from ( select toInt8(multiIf( mod(number, 3) == 0, toInt64(intDiv(number, 3)), mod(number, 3) == 1, toInt64(127 - intDiv(number, 3)), toInt64(-128 + intDiv(number, 3)))) x from numbers(15) ) window w as (order by x range between 1 preceding and 2 following) order by x;
select x, min(x) over w, max(x) over w, count(x) over w from ( select toUInt8(number) x from numbers(11)) t window w as (order by x desc range between 1 preceding and unbounded following) order by x settings max_block_size = 2;
select x, min(x) over w, max(x) over w, count(x) over w from ( select toUInt8(number) x from numbers(11)) t window w as (order by x desc range between unbounded preceding and 2 following) order by x settings max_block_size = 3;
select x, min(x) over w, max(x) over w, count(x) over w from ( select toUInt8(number) x from numbers(11)) t window w as (order by x desc range between unbounded preceding and 2 preceding) order by x settings max_block_size = 4;
SELECT x, n FROM (SELECT ['а', 'я', 'ё', 'А', 'Я', 'Ё'] AS arr) ARRAY JOIN arr AS x, arrayEnumerate(arr) AS n ORDER BY x COLLATE 'ru', n;
SELECT x, n.a FROM nested ORDER BY x;
SELECT x, s FROM ( SELECT 5 AS x, 'Hello' AS s ORDER BY x WITH FILL FROM 1 TO 10 INTERPOLATE (s AS s||'A') ) ORDER BY s;
SELECT x, s, k FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;
SELECT x, s, z FROM VALUES('x UInt64, s String, z ALIAS concat(toString(x), \': \', s)', (1, 'hello'), (2, 'world'));
SELECT x, t.name FROM (SELECT name, database AS x FROM system.tables) AS t ALL INNER JOIN (SELECT name AS x FROM system.databases) AS db USING x WHERE x = 'system' AND t.name = 'one' FORMAT PrettyCompactNoEscapes;
SELECT x, t.name FROM (SELECT name, database AS x FROM system.tables) AS t JOIN (SELECT name AS x FROM system.databases) AS db USING x WHERE x = 'system' AND t.name = 'one' SETTINGS join_default_strictness = 'ALL' FORMAT PrettyCompactNoEscapes;
SELECT x, t1.y - t2.y FROM byte_identical_r1 t1 SEMI LEFT JOIN byte_identical_r2 t2 USING x ORDER BY x;
SELECT x, toTypeName(x) FROM t1;
SELECT x, txt FROM 02540_date WHERE txt == '0';
SELECT x, txt FROM 02540_date WHERE txt == '65534';
SELECT x, txt FROM 02540_date WHERE txt == '65535';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as Date)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as Int32)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as UInt16)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as UInt32)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as Date)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as Int32)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as UInt16)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as UInt32)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as Date)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as Int32)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as UInt16)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as UInt32)';
SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65536 as UInt16)';
SELECT x, txt FROM 02540_date WHERE txt == 'toDate(0)';
SELECT x, txt FROM 02540_date WHERE txt == 'toDate(65534)';
SELECT x, txt FROM 02540_date WHERE txt == 'toDate(65535)';
SELECT x, txt FROM 02540_date WHERE txt == 'toInt32(0)';
SELECT x, txt FROM 02540_date WHERE txt == 'toInt32(65534)';
SELECT x, txt FROM 02540_date WHERE txt == 'toInt32(65535)';
SELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(0)';
SELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65534)';
SELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65535)';
SELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65536)';
SELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(0)';
SELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(65534)';
SELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(65535)';
SELECT x, u, s FROM parallel_replicas_backup ORDER BY x, u, s ASC;
SELECT x, x + 1, 1 AS x;
select x, y from (select 1 as x, 1 as y, x, y);
select x, y from (select 1 as x, 2 as y, x, y);
SELECT x, y FROM (SELECT 5 AS x, 'Hello' AS y) ORDER BY x WITH FILL FROM 3 TO 7, y, x WITH FILL FROM 1 TO 10;
select x, y from (select [0, 1, 2] as y, 1 as a, 2 as b) array join y as x where a = 1 and b = 2 and (x = 1 or x != 1) and x = 1;
SELECT x, y FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY FULL JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT x, y FROM (SELECT arrayJoin([1, 2, 3]) AS k, 'Hello' AS x) ANY RIGHT JOIN (SELECT range(k) AS y, arrayJoin([3, 4, 5]) AS k) USING k WHERE k < 10 ORDER BY k;
SELECT x, y FROM (SELECT number % 3 = 0 ? NULL : number AS x, number AS y FROM system.numbers LIMIT 10) WHERE x % 2 != 0;
SELECT x, y FROM (SELECT number % 5 = 0 ? NULL : number AS x, number % 3 = 0 ? nan : toFloat64(number) AS y FROM system.numbers LIMIT 10) ORDER BY x ASC, y ASC NULLS FIRST;
SELECT x, y FROM (SELECT number % 5 = 0 ? NULL : number AS x, number % 3 = 0 ? nan : toFloat64(number) AS y FROM system.numbers LIMIT 10) ORDER BY x ASC, y ASC;
SELECT x, y FROM (SELECT number % 5 = 0 ? NULL : number AS x, number % 3 = 0 ? nan : toFloat64(number) AS y FROM system.numbers LIMIT 10) ORDER BY x DESC NULLS FIRST, y ASC NULLS FIRST;
SELECT x, y FROM (SELECT number AS x FROM system.numbers LIMIT 3) js1 CROSS JOIN (SELECT number AS y FROM system.numbers LIMIT 5) js2;
SELECT x, y FROM (SELECT x, x, y FROM (SELECT 1 AS x, 2 AS y) UNION ALL SELECT x, y, y FROM (SELECT 3 AS x, 4 AS y)) ORDER BY x, y;
SELECT x, y FROM (SELECT x, y FROM (SELECT 1 AS x, 2 AS y) UNION ALL SELECT x, x FROM (SELECT 3 AS x, 4 AS y)) ORDER BY x, y;
SELECT x, y FROM (SELECT x, y FROM (SELECT 1 AS x, 2 AS y) UNION ALL SELECT y, y FROM (SELECT 3 AS x, 4 AS y)) ORDER BY x, y;
SELECT x, y FROM (SELECT x, y, y FROM (SELECT 1 AS x, 2 AS y) UNION ALL SELECT x, x, y FROM (SELECT 3 AS x, 4 AS y)) ORDER BY x, y;
SELECT x, y FROM merge_one_two WHERE arrayExists(_ -> _ IN (1), x);
SELECT x, y FROM merge_one_two WHERE arrayExists(_ -> _ IN (4294967290), x);
SELECT x, y FROM merge_one_two WHERE arrayExists(_ -> _ IN (4294967299), x);
SELECT x, y FROM remote('127.0.0.2', currentDatabase(), t3) ORDER BY x;
SELECT x, y FROM remote('127.0.0.2', currentDatabase(), t4) ORDER BY x;
select x, y from tab where (x + y) + 1 = 3;
select x, y from tab where (x + y) = 2;
SELECT x, y FROM test ORDER BY x, y;
SELECT x, y, transform(x, (select groupArray(x) from (select x, y from updates order by x) t1), (select groupArray(y) from (select x, y from updates order by x) t2), y) FROM test_xy WHERE 1 ORDER BY x, y;
SELECT x, y, arrayJoin(['a', NULL, 'b']) AS z FROM system.one ARRAY JOIN [1, NULL, 3] AS x, [(NULL, ''), (123, 'Hello'), (456, NULL)] AS y order by x, y, z;
SELECT x, y, toInt8(x), toString(x) AS s, CAST(s AS Enum8('Hello' = -100, '\\' = 0, '\t\\t' = 111)) AS casted FROM enum ORDER BY x, y FORMAT PrettyCompact;
SELECT x, y, x+y FROM a;
SELECT x,_block_number FROM t;
select X.*, s.* from X full join (select * from X) as s on X.id = s.id order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X full join (select * from X) as s on X.id = s.x_b order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X full join (select * from X) as s on X.x_b = s.x_b order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X inner join (select * from X) as s on X.id = s.id order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X inner join (select * from X) as s on X.id = s.x_b order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X inner join (select * from X) as s on X.x_b = s.x_b order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X left join (select * from X) as s on X.id = s.id order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X left join (select * from X) as s on X.id = s.x_b order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X left join (select * from X) as s on X.x_b = s.x_b order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X right join (select * from X) as s on X.id = s.id order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X right join (select * from X) as s on X.id = s.x_b order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, s.* from X right join (select * from X) as s on X.x_b = s.x_b order by X.id, X.x_a, X.x_b, s.id, s.x_a, s.x_b;
select X.*, Y.* from X full join Y on X.id = Y.id order by X.id, X.x_a, X.x_b, Y.id, Y.y_a, Y.y_b;
select X.*, Y.* from X full join Y using id order by X.id, Y.id, X.x_name, Y.y_name;
select X.*, Y.* from X inner join Y on (X.id + 1) = (Y.id + 1) order by X.id, X.x_a, X.x_b, Y.id, Y.y_a, Y.y_b;
select X.*, Y.* from X inner join Y on X.id = Y.id order by X.id, X.x_a, X.x_b, Y.id, Y.y_a, Y.y_b;
select X.*, Y.* from X inner join Y using id order by X.id, Y.id, X.x_name, Y.y_name;
select X.*, Y.* from X left join Y on (X.id + 1) = (Y.id + 1) order by X.id, X.x_a, X.x_b, Y.id, Y.y_a, Y.y_b;
select X.*, Y.* from X left join Y on X.id = Y.id order by X.id, X.x_a, X.x_b, Y.id, Y.y_a, Y.y_b;
select X.*, Y.* from X left join Y using id order by X.id, Y.id, X.x_name, Y.y_name;
select X.*, Y.* from X right join Y on X.id = Y.id order by X.id, X.x_a, X.x_b, Y.id, Y.y_a, Y.y_b;
select X.*, Y.* from X right join Y using id order by X.id, Y.id, X.x_name, Y.y_name;
SELECT X.dummy+1 FROM system.one X RIGHT JOIN system.one Y ON X.dummy = Y.dummy SETTINGS join_use_nulls = 1;
select X.id, Y.id from X full join Y on (Y.id + 1) = (X.id + 1) order by X.id, Y.id;
select X.id, Y.id from X full join Y on (Y.id - 1) = X.id order by X.id, Y.id;
select X.id, Y.id from X full join Y on Y.id = (X.id + 1) order by X.id, Y.id;
select X.id, Y.id from X full join Y on Y.id = X.id order by X.id, Y.id;
select X.id, Y.id from X right join Y on (X.id + 1) = (Y.id + 1) order by X.id, Y.id;
select X.id, Y.id from X right join Y on (X.id + 1) = Y.id order by X.id, Y.id;
select X.id, Y.id from X right join Y on X.id = (Y.id - 1) order by X.id, Y.id;
select X.id, Y.id from X right join Y on X.id = Y.id order by X.id, Y.id;
select x1 from t1;
select x1, x1 * 2, max(x2), max(x3) from test2 group by 2, 1, x1 order by 1, 2, 4 desc, 3 asc;
select x1, x2, x3 from test order by 3 limit 1 by 1;
select x1, x2, x3 from test order by 3 limit 1 by 3;
select x1, x2, x3 from test order by x3 limit 1 by x1;
select x1, x2, x3 from test order by x3 limit 1 by x3;
select x3, x2 from test group by 1, 2 order by x3;
select x3, x2 from test group by x3, x2 order by x3;
select x3, x2, x1 from test order by 1 desc;
select x3, x2, x1 from test order by x3 desc;
select x3, x2, x1 from test order by x3;
SELECT x::UInt64 FROM t WHERE toUInt64(x) = 1;
SELECT xor(0, 100000000);
SELECT xor(1, 0);
SELECT xor(1, 10);
SELECT xor(1, true);
SELECT xor(false, true);
SELECT xxh3('ClickHouse');
SELECT xxHash32('') = toUInt32(46947589);
SELECT xxHash32('\x01') = toUInt32(949155633);
SELECT xxHash32('\x02\0') = toUInt32(332955956);
SELECT xxHash32('\x03\0\0\0') = toUInt32(2158931063);
SELECT xxHash32('foo') = toUInt32(3792637401);
SELECT xxHash32(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2)))) = toUInt32(1930126291);
SELECT xxHash32() = toUInt32(4263699484);
SELECT xxHash32(0) = toUInt32(3479547966);
SELECT xxHash32(1) = toUInt32(949155633);
SELECT xxHash32(1, 2, 3) = toUInt32(441104368);
SELECT xxHash32(1, 3, 2) = toUInt32(912264289);
SELECT xxHash32(123456) = toUInt32(1434661961);
SELECT xxHash32(CAST('bar' AS FixedString(3))) = toUInt32(1101146924);
SELECT xxHash32(CAST('foo' AS FixedString(3))) = xxHash32('foo');
SELECT xxHash32(CAST(-154477 AS Int32)) = toUInt32(3279223048);
SELECT xxHash32(CAST(1.2684 AS Float32)) = toUInt32(3120514536);
SELECT xxHash32(CAST(3 AS UInt8)) = toUInt32(565077562);
select xxHash32(toUInt16(0)) = xxHash32('\0\0');
SELECT xxHash32(toUInt16(2)) = toUInt32(332955956);
select xxHash32(toUInt32(0)) = xxHash32('\0\0\0\0');
SELECT xxHash32(toUInt32(3)) = toUInt32(2158931063);
select xxHash32(toUInt8(0)) = xxHash32('\0');
SELECT xxHash32(x) = toUInt32(949155633) FROM (SELECT CAST(1 AS Enum8('a' = 1, 'b' = 2)) as x);
SELECT xxHash64('') = toUInt64(17241709254077376921);
SELECT xxHash64('\x01') = toUInt64(9962287286179718960);
SELECT xxHash64('\x02\0') = toUInt64(6482051057365497128);
SELECT xxHash64('\x03\0\0\0') = toUInt64(13361037350151369407);
SELECT xxHash64('foo') = toUInt64(3728699739546630719);
SELECT xxHash64(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2)))) = toUInt64(3521288460171939489);
SELECT xxHash64() = toUInt64(16324913028386710556);
SELECT xxHash64(0) = toUInt64(16804241149081757544);
SELECT xxHash64(1) = toUInt64(9962287286179718960);
SELECT xxHash64(1, 2, 3) = toUInt64(13728743482242651702);
SELECT xxHash64(1, 3, 2) = toUInt64(10226792638577471533);
SELECT xxHash64(123456) = toUInt64(9049736899514479480);
SELECT xxHash64(CAST('bar' AS FixedString(3))) = toUInt64(5234164152756840025);
SELECT xxHash64(CAST('foo' AS FixedString(3))) = xxHash64('foo');
SELECT xxHash64(CAST(-154477 AS Int64)) = toUInt64(1162348840373071858);
SELECT xxHash64(CAST(1.2684 AS Float32)) = toUInt64(6662491266811474554);
SELECT xxHash64(CAST(3 AS UInt8)) = toUInt64(2244420788148980662);
select xxHash64(toUInt16(0)) = xxHash64('\0\0');
SELECT xxHash64(toUInt16(2)) = toUInt64(6482051057365497128);
select xxHash64(toUInt32(0)) = xxHash64('\0\0\0\0');
SELECT xxHash64(toUInt32(3)) = toUInt64(13361037350151369407);
select xxHash64(toUInt64(0)) = xxHash64('\0\0\0\0\0\0\0\0');
select xxHash64(toUInt8(0)) = xxHash64('\0');
SELECT xxHash64(x) = toUInt64(9962287286179718960) FROM (SELECT CAST(1 AS Enum8('a' = 1, 'b' = 2)) as x);
select y from ( select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile union all select finalizeAggregation(x) as y from test_quantile) order by y;
SELECT y FROM enums WHERE x IN ('hello', -1);
SELECT y FROM enums WHERE x IN (0, -1);
select y from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};
select y from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};
select y from table_1 settings additional_table_filters={'table_1' : 'x != 2'};
select y from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};
SELECT y, count() FROM cluster(test_cluster_1_shard_3_replicas_1_unavailable, currentDatabase(), 02918_parallel_replicas) GROUP BY y ORDER BY y SETTINGS max_parallel_replicas=3, parallel_replicas_custom_key='cityHash64(y)', parallel_replicas_custom_key_filter_type='default';
SELECT y, count() FROM cluster(test_cluster_1_shard_3_replicas_1_unavailable, currentDatabase(), 02918_parallel_replicas) GROUP BY y ORDER BY y SETTINGS max_parallel_replicas=3, parallel_replicas_custom_key='cityHash64(y)', parallel_replicas_custom_key_filter_type='range';
SELECT y, count() FROM cluster(test_cluster_one_shard_three_replicas_localhost, currentDatabase(), 02898_parallel_replicas_final) FINAL GROUP BY y ORDER BY y SETTINGS max_parallel_replicas=3, parallel_replicas_custom_key='cityHash64(y)', parallel_replicas_custom_key_filter_type='default';
SELECT y, count() FROM cluster(test_cluster_one_shard_three_replicas_localhost, currentDatabase(), 02898_parallel_replicas_final) FINAL GROUP BY y ORDER BY y SETTINGS max_parallel_replicas=3, parallel_replicas_custom_key='cityHash64(y)', parallel_replicas_custom_key_filter_type='range';
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(12)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(17)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(20)(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqCombined(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqHLL12(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, round(1/(1 + (3*X*X - 7*X + 11) % 37), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(X) FROM (SELECT number AS X, round(toFloat32(1/(1 + (3*X*X - 7*X + 11) % 37)), 3) AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 1000000) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 15) GROUP BY Y ORDER BY Y;
SELECT Y, uniqTheta(Z) FROM (SELECT number AS X, IPv4NumToString(toUInt32(X)) AS Z, (3*X*X - 7*X + 11) % 37 AS Y FROM system.numbers LIMIT 3000) GROUP BY Y ORDER BY Y;
select Y.*, s.* from Y inner join (select * from Y) as s on concat('n', Y.y_a) = s.y_b order by Y.id, Y.y_a, Y.y_b, s.id, s.y_a, s.y_b;
select Y.*, s.* from Y left join (select * from Y) as s on concat('n', Y.y_a) = s.y_b order by Y.id, Y.y_a, Y.y_b, s.id, s.y_a, s.y_b;
select y.a, y.a, y.b as y_b, y.b from t left join s on s.a = t.a left join y on y.b = s.b order by t.a format PrettyCompactNoEscapes;
SELECT Y.dummy+1 FROM system.one X RIGHT JOIN system.one Y ON X.dummy = Y.dummy SETTINGS join_use_nulls = 1;
SELECT Y.id - 1 FROM X RIGHT JOIN Y ON (X.id + 1) = toInt64(Y.id) SETTINGS join_use_nulls=1;
SELECT Y.id - 1 FROM X RIGHT JOIN Y ON (X.id + 1) = Y.id SETTINGS join_use_nulls=1;
SELECT yesterday() + 1 = today();
SELECT YYYYMMDDhhmmssToDateTime();
SELECT YYYYMMDDhhmmssToDateTime(-20230911111111);
SELECT YYYYMMDDhhmmssToDateTime(19691231595959);
SELECT YYYYMMDDhhmmssToDateTime(19691231595959.1);
SELECT YYYYMMDDhhmmssToDateTime(19700101000000);
SELECT YYYYMMDDhhmmssToDateTime(19700101000000.1);
SELECT YYYYMMDDhhmmssToDateTime(20200229111111);
SELECT YYYYMMDDhhmmssToDateTime(20200229111111.1);
SELECT YYYYMMDDhhmmssToDateTime(21060207062815);
SELECT YYYYMMDDhhmmssToDateTime(21060207062815.1);
SELECT YYYYMMDDhhmmssToDateTime(21060207062816);
SELECT YYYYMMDDhhmmssToDateTime(21060207062816.1);
SELECT YYYYMMDDhhmmssToDateTime(9223372036854775807);
SELECT YYYYMMDDhhmmssToDateTime(False);
SELECT YYYYMMDDhhmmssToDateTime(NaN);
SELECT YYYYMMDDhhmmssToDateTime(NULL);
SELECT YYYYMMDDhhmmssToDateTime(toDecimal64(19691231595959.1, 5));
SELECT YYYYMMDDhhmmssToDateTime(toDecimal64(19700101000000.1, 5));
SELECT YYYYMMDDhhmmssToDateTime(toDecimal64(20200229111111.1, 5));
SELECT YYYYMMDDhhmmssToDateTime(toDecimal64(21060207062815.1, 5));
SELECT YYYYMMDDhhmmssToDateTime(toDecimal64(21060207062816.1, 5));
SELECT YYYYMMDDhhmmssToDateTime(yyyymmdd) FROM (SELECT 19840121 AS yyyymmdd UNION ALL SELECT 20230911 AS yyyymmdd) ORDER BY yyyymmdd;
SELECT YYYYMMDDhhmmssToDateTime64();
SELECT YYYYMMDDhhmmssToDateTime64(-20230911111111);
SELECT YYYYMMDDhhmmssToDateTime64(189912315959);
SELECT YYYYMMDDhhmmssToDateTime64(189912315959.1);
SELECT YYYYMMDDhhmmssToDateTime64(19000101000000);
SELECT YYYYMMDDhhmmssToDateTime64(19000101000000.1);
SELECT YYYYMMDDhhmmssToDateTime64(20200229111111);
SELECT YYYYMMDDhhmmssToDateTime64(20200229111111.1);
SELECT YYYYMMDDhhmmssToDateTime64(22991231235959);
SELECT YYYYMMDDhhmmssToDateTime64(22991231235959.1);
SELECT YYYYMMDDhhmmssToDateTime64(23000101000000);
SELECT YYYYMMDDhhmmssToDateTime64(23000101000000.1);
SELECT YYYYMMDDhhmmssToDateTime64(False);
SELECT YYYYMMDDhhmmssToDateTime64(NaN);
SELECT YYYYMMDDhhmmssToDateTime64(NULL);
SELECT YYYYMMDDhhmmssToDateTime64(toDecimal64(189912315959.1, 5));
SELECT YYYYMMDDhhmmssToDateTime64(toDecimal64(19000101000000.1, 5));
SELECT YYYYMMDDhhmmssToDateTime64(toDecimal64(20200229111111.1, 5));
SELECT YYYYMMDDhhmmssToDateTime64(toDecimal64(22991231235959.1, 5));
SELECT YYYYMMDDhhmmssToDateTime64(toDecimal64(23000101000000.1, 5));
SELECT YYYYMMDDhhmmssToDateTime64(yyyymmdd) FROM (SELECT 19840121 AS yyyymmdd UNION ALL SELECT 20230911 AS yyyymmdd) ORDER BY yyyymmdd;
SELECT YYYYMMDDToDate();
SELECT YYYYMMDDToDate(-20230911);
SELECT YYYYMMDDToDate(19691231);
SELECT YYYYMMDDToDate(19691231.1);
SELECT YYYYMMDDToDate(19700101);
SELECT YYYYMMDDToDate(19700101.1);
SELECT YYYYMMDDToDate(20200229);
SELECT YYYYMMDDToDate(20200229.1);
SELECT YYYYMMDDToDate(21490606);
SELECT YYYYMMDDToDate(21490606.1);
SELECT YYYYMMDDToDate(21490607);
SELECT YYYYMMDDToDate(21490607.1);
SELECT YYYYMMDDToDate(9223372036854775807);
SELECT YYYYMMDDToDate(False);
SELECT YYYYMMDDToDate(NaN);
SELECT YYYYMMDDToDate(NULL);
SELECT YYYYMMDDToDate(toDecimal64(19691231.1, 5));
SELECT YYYYMMDDToDate(toDecimal64(19700101.1, 5));
SELECT YYYYMMDDToDate(toDecimal64(20200229.1, 5));
SELECT YYYYMMDDToDate(toDecimal64(21490606.1, 5));
SELECT YYYYMMDDToDate(toDecimal64(21490607.1, 5));
SELECT YYYYMMDDToDate(yyyymmdd) FROM (SELECT 19840121 AS yyyymmdd UNION ALL SELECT 20230911 AS yyyymmdd) ORDER BY yyyymmdd;
SELECT YYYYMMDDToDate32(-20230911);
SELECT YYYYMMDDToDate32(18991231);
SELECT YYYYMMDDToDate32(18991231.1);
SELECT YYYYMMDDToDate32(19000101);
SELECT YYYYMMDDToDate32(19000101.1);
SELECT YYYYMMDDToDate32(20200229);
SELECT YYYYMMDDToDate32(20200229.1);
SELECT YYYYMMDDToDate32(22991231);
SELECT YYYYMMDDToDate32(22991231.1);
SELECT YYYYMMDDToDate32(23000101);
SELECT YYYYMMDDToDate32(23000101.1);
SELECT YYYYMMDDToDate32(9223372036854775807);
SELECT YYYYMMDDToDate32(False);
SELECT YYYYMMDDToDate32(NaN);
SELECT YYYYMMDDToDate32(NULL);
SELECT YYYYMMDDToDate32(toDate('2023-09-11'));
SELECT YYYYMMDDToDate32(toDecimal64(18991231.1, 5));
SELECT YYYYMMDDToDate32(toDecimal64(19000101.1, 5));
SELECT YYYYMMDDToDate32(toDecimal64(20200229.1, 5));
SELECT YYYYMMDDToDate32(toDecimal64(22991231.1, 5));
SELECT YYYYMMDDToDate32(toDecimal64(23000101.1, 5));
SELECT YYYYMMDDToDate32(yyyymmdd) FROM (SELECT 19840121 AS yyyymmdd UNION ALL SELECT 20230911 AS yyyymmdd) ORDER BY yyyymmdd;
select zero from system.zeros limit 10 settings max_block_size = 3;
select zero from system.zeros_mt limit 10 settings max_block_size = 3, max_threads = 2;
select zero from zeros(10) settings max_block_size = 3;
select zero from zeros_mt(10) settings max_block_size = 3, max_threads=3;
SELECT {arr_arr_arr: Array(Array(Array(String)))}, toTypeName({arr_arr_arr: Array(Array(Array(String)))});
SELECT {arr_map_tuple: Array(Map(UInt64, Tuple(Int16, DateTime, String)))}, toTypeName({arr_map_tuple: Array(Map(UInt64, Tuple(Int16, DateTime, String)))});
SELECT {col:Identifier} FROM {db:Identifier}.{tbl:Identifier} LIMIT 1 OFFSET 5;
SELECT {id: Int64}, {arr: Array(UInt8)}, {map_2: Map(String, UInt8)}, {mul_arr: Array(Array(UInt8))}, {map_arr: Map(UInt8, Array(UInt8))}, {map_map_arr: Map(String, Map(String, Array(UInt8)))};
SELECT {map_arr_tuple_map: Map(String, Array(Tuple(UInt8, Map(UInt32, Int64))))}, toTypeName({map_arr_tuple_map: Map(String, Array(Tuple(UInt8, Map(UInt32, Int64))))});
SELECT {num:UInt64}, {str:String}, {date:DateTime}, {map:Map(UUID, Array(Float32))};
SELECT {tuple_tuple_tuple: Tuple(Tuple(Tuple(Int32, String, UUID, Float32)))}, toTypeName({tuple_tuple_tuple: Tuple(Tuple(Tuple(Int32, String, UUID, Float32)))});
SELECT −1;
WITH sum(if((a >= 0) AND (b != 100) AND (c = 0), 1, 0)) AS r1, sum(if((a >= 0) AND (b != 100) AND (c > 220), 1, 0)) AS r2 SELECT (intDiv(toUInt32(rtime), 20) * 20) * 1000 AS t, (r1 * 100) / (r1 + r2) AS m FROM cluster('test_cluster_two_shards', currentDatabase(), test_alias) WHERE day = '2022-01-01' GROUP BY t ORDER BY t ASC;
WITH 'milliseconds' AS maximum_unit, arrayJoin([0, 1.0005]) AS elapsed SELECT formatReadableTimeDelta(elapsed, maximum_unit);
WITH ( SELECT arrayCumSum(groupArray(amount)) FROM ( SELECT amount FROM bm ORDER BY business_dttm ) ) AS arr, 1 + rowNumberInAllBlocks() AS id, 3 AS window_size SELECT amount, business_dttm, if(id < window_size, NULL, round(arr[id] - arr[id - window_size], 4)) AS moving_sum FROM ( SELECT amount, business_dttm FROM bm ORDER BY business_dttm ) ORDER BY business_dttm;
WITH ( SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND (normalizeQuery(query) = normalizeQuery('with 01091 as id select sum(number) from numbers(1000000);')) AND (event_date >= (today() - 1)) ORDER BY event_time DESC LIMIT 1 ) AS id SELECT uniqExact(thread_id) > 2 FROM system.query_thread_log WHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);
WITH ( SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND (normalizeQuery(query) = normalizeQuery('with 01091 as id select sum(number) from numbers_mt(1000000);')) AND (event_date >= (today() - 1)) ORDER BY event_time DESC LIMIT 1 ) AS id SELECT uniqExact(thread_id) > 2 FROM system.query_thread_log WHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);
WITH ( SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND (normalizeQuery(query) like normalizeQuery('WITH 01091 AS id SELECT 1;')) AND (event_date >= (today() - 1)) ORDER BY event_time DESC LIMIT 1 ) AS id SELECT uniqExact(thread_id) FROM system.query_thread_log WHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master_thread_id);
WITH ( SELECT sleep(0.0001) FROM system.one ) as a1, ( SELECT sleep(0.0001) FROM system.one ) as a2, ( SELECT sleep(0.0001) FROM system.one ) as a3, ( SELECT sleep(0.0001) FROM system.one ) as a4, ( SELECT sleep(0.0001) FROM system.one ) as a5 SELECT '02177_CTE_GLOBAL_OFF', a1, a2, a3, a4, a5 FROM system.numbers LIMIT 100 FORMAT Null SETTINGS enable_global_with_statement = 0;
WITH ( SELECT sleep(0.0001) FROM system.one ) as a1, ( SELECT sleep(0.0001) FROM system.one ) as a2, ( SELECT sleep(0.0001) FROM system.one ) as a3, ( SELECT sleep(0.0001) FROM system.one ) as a4, ( SELECT sleep(0.0001) FROM system.one ) as a5 SELECT '02177_CTE_GLOBAL_ON', a1, a2, a3, a4, a5 FROM system.numbers LIMIT 100 FORMAT Null SETTINGS enable_global_with_statement = 1;
WITH ( SELECT sleep(0.0001) FROM system.one ) as a1, ( SELECT sleep(0.0001) FROM system.one ) as a2, ( SELECT sleep(0.0001) FROM system.one ) as a3, ( SELECT sleep(0.0001) FROM system.one ) as a4, ( SELECT sleep(0.0001) FROM system.one ) as a5 SELECT '02177_CTE_NEW_ANALYZER', a1, a2, a3, a4, a5 FROM system.numbers LIMIT 100 FORMAT Null SETTINGS allow_experimental_analyzer = 1;
WITH (SELECT [0, 1, 2, 3]) AS arr1 SELECT arraySort(arrayIntersect(argMax(seqs, create_time), arr1)) AS common, id FROM tags WHERE id LIKE 'id%' GROUP BY id ORDER BY id;
WITH (SELECT value IN ('ON', '1') FROM system.build_options WHERE name = 'USE_JEMALLOC') AS jemalloc_enabled, (SELECT count() FROM system.jemalloc_bins) AS total_bins, (SELECT count() FROM system.jemalloc_bins WHERE large) AS large_bins, (SELECT count() FROM system.jemalloc_bins WHERE NOT large) AS small_bins, (SELECT sum(size * (allocations - deallocations)) FROM system.jemalloc_bins WHERE large) AS large_allocated_bytes, (SELECT sum(size * (allocations - deallocations)) FROM system.jemalloc_bins WHERE NOT large) AS small_allocated_bytes SELECT (total_bins > 0) = jemalloc_enabled, (large_bins > 0) = jemalloc_enabled, (small_bins > 0) = jemalloc_enabled, (large_allocated_bytes > 0) = jemalloc_enabled, (small_allocated_bytes > 0) = jemalloc_enabled;
WITH -2208985199 AS timestamp, CAST(-2208985199123 AS Int64) AS milli, CAST(-2208985199123456 AS Int64) AS micro, CAST(-2208985199123456789 AS Int64) AS nano, 'UTC' AS tz SELECT timestamp, fromUnixTimestamp64Milli(milli, tz), fromUnixTimestamp64Micro(micro, tz), fromUnixTimestamp64Nano(nano, tz);
WITH 0.1 AS level, 1 AS max_size SELECT groupArray(max_size)(col) FROM ( SELECT quantile(level)(number) AS col FROM numbers(1000) );
WITH 10413688942 AS timestamp, CAST(10413688942123 AS Int64) AS milli, CAST(10413688942123456 AS Int64) AS micro, CAST(10413688942123456789 AS Int64) AS nano, 'UTC' AS tz SELECT timestamp, fromUnixTimestamp64Milli(milli, tz), fromUnixTimestamp64Micro(micro, tz), fromUnixTimestamp64Nano(nano, tz);
WITH [(39.82535, 21.26649), (39.63179, 21.4366), (39.94803, 21.56766)] AS outer, [(39.84994, 21.44025), (39.82728, 21.4666), (39.82667, 21.46592)] AS inner, (39.840202, 21.451471) AS point SELECT pointInPolygon(point, inner) AS inside_inner, pointInPolygon(point, outer, inner) AS inside_outer;
WITH A as (SELECT rowNumberInAllBlocks() R, addDays(toDate('2017-04-01'), R) TVV from numbers(5)), B as (SELECT rowNumberInAllBlocks() R, toDateTime(NULL) TVV from numbers(1)) SELECT joinGetOrNull('test', 'y', toDate(A.TVV) ) TV1 from A LEFT JOIN B USING (R) order by TV1;
WITH arrayJoin([1, 2, 3, nan, 4, 5]) AS data, arrayJoin([nan, 1, 2, 3, 4]) AS data2, arrayJoin([1, 2, 3, 4, nan]) AS data3, arrayJoin([nan, nan, nan]) AS data4, arrayJoin([nan, 1, 2, 3, nan]) AS data5 SELECT max(data), max(data2), max(data3), max(data4), max(data5);
WITH arrayJoin([1, 2, 3, nan, 4, 5]) AS data, arrayJoin([nan, 1, 2, 3, 4]) AS data2, arrayJoin([1, 2, 3, 4, nan]) AS data3, arrayJoin([nan, nan, nan]) AS data4, arrayJoin([nan, 1, 2, 3, nan]) AS data5 SELECT min(data), min(data2), min(data3), min(data4), min(data5);
WITH arrayMap(x -> x + 1, range(50)) as data SELECT arrayReduceInRanges('groupArray', [(a, c), (b, d)], data) = [arraySlice(data, a, c), arraySlice(data, b, d)] FROM ( SELECT cityHash64(number + 100) % 40 as a, cityHash64(number + 200) % 60 as b, cityHash64(number + 300) % 20 as c, cityHash64(number + 400) % 30 as d FROM numbers(20) );
WITH extractKeyValuePairs('key1:value1,key2:value2') AS s_map, CAST( arrayMap( (x) -> (x, s_map[x]), arraySort(mapKeys(s_map)) ), 'Map(String,String)' ) AS x SELECT x;
WITH lineWithInlines AS ( SELECT DISTINCT addressToLineWithInlines(arrayJoin(trace)) AS lineWithInlines FROM system.trace_log WHERE query_id = ( SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND log_comment='02161_test_case' ORDER BY event_time DESC LIMIT 1 ) ) SELECT 'has inlines:', or(max(length(lineWithInlines)) > 1, max(locate(lineWithInlines[1], ':')) = 0) FROM lineWithInlines SETTINGS short_circuit_function_evaluation='enable';
with test1 as (select n, null b, n+1 m from with_test where n = 42 order by n limit 4), test2 as (select n + 1 as x, n - 1 as y from test1), test3 as (select x * y as z from test2) select z + 1 as q from test3;
WITH toDate('2021-01-14') AS date_value, toDateTime('2021-01-14 11:22:33') AS date_time_value, toDateTime64('2021-01-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-02-14') AS date_value, toDateTime('2021-02-14 11:22:33') AS date_time_value, toDateTime64('2021-02-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-03-14') AS date_value, toDateTime('2021-03-14 11:22:33') AS date_time_value, toDateTime64('2021-03-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-04-14') AS date_value, toDate32('2021-04-14') AS date_32_value, toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('day', date_value), dateName('day', date_32_value), dateName('day', date_time_value), dateName('day', date_time_64_value);
WITH toDate('2021-04-14') AS date_value, toDate32('2021-04-14') AS date_32_value, toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('dayofyear', date_value), dateName('dayofyear', date_32_value), dateName('dayofyear', date_time_value), dateName('dayofyear', date_time_64_value);
WITH toDate('2021-04-14') AS date_value, toDate32('2021-04-14') AS date_32_value, toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('month', date_value), dateName('month', date_32_value), dateName('month', date_time_value), dateName('month', date_time_64_value);
WITH toDate('2021-04-14') AS date_value, toDate32('2021-04-14') AS date_32_value, toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('quarter', date_value), dateName('quarter', date_32_value), dateName('quarter', date_time_value), dateName('quarter', date_time_64_value);
WITH toDate('2021-04-14') AS date_value, toDate32('2021-04-14') AS date_32_value, toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('week', date_value), dateName('week', date_32_value), dateName('week', date_time_value), dateName('week', date_time_64_value);
WITH toDate('2021-04-14') AS date_value, toDate32('2021-04-14') AS date_32_value, toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('weekday', date_value), dateName('weekday', date_32_value), dateName('weekday', date_time_value), dateName('weekday', date_time_64_value);
WITH toDate('2021-04-14') AS date_value, toDate32('2021-04-14') AS date_32_value, toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('year', date_value), dateName('year', date_32_value), dateName('year', date_time_value), dateName('year', date_time_64_value);
WITH toDate('2021-04-14') AS date_value, toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-05-14') AS date_value, toDateTime('2021-05-14 11:22:33') AS date_time_value, toDateTime64('2021-05-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-06-14') AS date_value, toDateTime('2021-06-14 11:22:33') AS date_time_value, toDateTime64('2021-06-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-07-14') AS date_value, toDateTime('2021-07-14 11:22:33') AS date_time_value, toDateTime64('2021-07-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-08-14') AS date_value, toDateTime('2021-08-14 11:22:33') AS date_time_value, toDateTime64('2021-08-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-09-14') AS date_value, toDateTime('2021-09-14 11:22:33') AS date_time_value, toDateTime64('2021-09-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-10-14') AS date_value, toDateTime('2021-10-14 11:22:33') AS date_time_value, toDateTime64('2021-10-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-11-14') AS date_value, toDateTime('2021-11-14 11:22:33') AS date_time_value, toDateTime64('2021-11-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDate('2021-12-14') AS date_value, toDateTime('2021-12-14 11:22:33') AS date_time_value, toDateTime64('2021-12-14 11:22:33', 3) AS date_time_64_value SELECT monthName(date_value), monthName(date_time_value), monthName(date_time_64_value);
WITH toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('hour', date_time_value), dateName('hour', date_time_64_value);
WITH toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('minute', date_time_value), dateName('minute', date_time_64_value);
WITH toDateTime('2021-04-14 11:22:33') AS date_time_value, toDateTime64('2021-04-14 11:22:33', 3) AS date_time_64_value SELECT dateName('second', date_time_value), dateName('second', date_time_64_value);
WITH toDateTime('2021-04-14 23:22:33', 'UTC') as date SELECT dateName('weekday', date, 'Asia/Istanbul'), dateName('hour', date, 'Asia/Istanbul'), dateName('minute', date, 'Asia/Istanbul'), dateName('second', date, 'Asia/Istanbul');
WITH toDateTime('2021-04-14 23:22:33', 'UTC') as date SELECT dateName('weekday', date, 'UTC'), dateName('hour', date, 'UTC'), dateName('minute', date, 'UTC'), dateName('second', date, 'UTC');
WITH toDateTime('2023-06-30 23:59:30') AS dt_ref, now() AS dt_now, date_add(MINUTE, 1, dt_now) as dt_after, dateDiff(SECOND, dt_ref, dt_now) AS time_shift, formatDateTime(dt_after, '%b %e %T') AS syslog_after SELECT formatDateTime(dt_after - time_shift, '%b %e %T') AS syslog_arg, parseDateTimeBestEffort(syslog_after) - time_shift AS res, parseDateTimeBestEffortOrNull(syslog_after) - time_shift AS res_null, parseDateTimeBestEffortOrZero(syslog_after) - time_shift AS res_zero, parseDateTimeBestEffortUS(syslog_after) - time_shift AS res_us, parseDateTimeBestEffortUSOrNull(syslog_after) - time_shift AS res_us_null, parseDateTimeBestEffortUSOrZero(syslog_after) - time_shift AS res_us_zero, parseDateTime64BestEffort(syslog_after) - time_shift AS res64, parseDateTime64BestEffortOrNull(syslog_after) - time_shift AS res64_null, parseDateTime64BestEffortOrZero(syslog_after) - time_shift AS res64_zero, parseDateTime64BestEffortUS(syslog_after) - time_shift AS res64_us, parseDateTime64BestEffortUSOrNull(syslog_after) - time_shift AS res64_us_null, parseDateTime64BestEffortUSOrZero(syslog_after) - time_shift AS res64_us_zero FORMAT Vertical;
WITH toDateTime('2023-06-30 23:59:30') AS dt_ref, now() AS dt_now, date_sub(MINUTE, 1, dt_now) as dt_before, dateDiff(SECOND, dt_ref, dt_now) AS time_shift, formatDateTime(dt_before, '%b %e %T') AS syslog_before SELECT formatDateTime(dt_before - time_shift, '%b %e %T') AS syslog_arg, parseDateTimeBestEffort(syslog_before) - time_shift AS res, parseDateTimeBestEffortOrNull(syslog_before) - time_shift AS res_null, parseDateTimeBestEffortOrZero(syslog_before) - time_shift AS res_zero, parseDateTimeBestEffortUS(syslog_before) - time_shift AS res_us, parseDateTimeBestEffortUSOrNull(syslog_before) - time_shift AS res_us_null, parseDateTimeBestEffortUSOrZero(syslog_before) - time_shift AS res_us_zero, parseDateTime64BestEffort(syslog_before) - time_shift AS res64, parseDateTime64BestEffortOrNull(syslog_before) - time_shift AS res64_null, parseDateTime64BestEffortOrZero(syslog_before) - time_shift AS res64_zero, parseDateTime64BestEffortUS(syslog_before) - time_shift AS res64_us, parseDateTime64BestEffortUSOrNull(syslog_before) - time_shift AS res64_us_null, parseDateTime64BestEffortUSOrZero(syslog_before) - time_shift AS res64_us_zero FORMAT Vertical;
WITH x AS (SELECT in((SELECT * FROM y))), y AS (SELECT 1) SELECT * FROM x;
WITH 'Asia/Makassar' as timezone, toDateTime64('2019-09-16 19:20:12.345678910', 3, timezone) AS dt64 SELECT dt64, fromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64), timezone), fromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64), timezone), fromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64), timezone) AS v, toTypeName(v);
WITH 'UTC' as timezone, CAST(1234567891011 AS Int64) AS val SELECT val, toUnixTimestamp64Milli(fromUnixTimestamp64Milli(val, timezone)), toUnixTimestamp64Micro(fromUnixTimestamp64Micro(val, timezone)), toUnixTimestamp64Nano(fromUnixTimestamp64Nano(val, timezone)) AS v, toTypeName(v);
WITH 'UTC' as timezone, toDateTime64('2019-09-16 19:20:12.345678910', 3, timezone) AS dt64 SELECT dt64, fromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64), timezone), fromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64), timezone), fromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64), timezone) AS v, toTypeName(v);
WITH CAST(1234567891011 AS Int64) AS i64, 'Asia/Makassar' AS tz SELECT tz, i64, fromUnixTimestamp64Milli(i64, tz), fromUnixTimestamp64Micro(i64, tz), fromUnixTimestamp64Nano(i64, tz) as dt64, toTypeName(dt64);
WITH CAST(1234567891011 AS Int64) AS i64, 'UTC' AS tz SELECT i64, fromUnixTimestamp64Milli(i64, tz), fromUnixTimestamp64Micro(i64, tz), fromUnixTimestamp64Nano(i64, tz) as dt64;
WITH CAST(1234567891011 AS Int64) AS i64, 'UTC' AS tz SELECT tz, i64, fromUnixTimestamp64Milli(i64, tz), fromUnixTimestamp64Micro(i64, tz), fromUnixTimestamp64Nano(i64, tz) as dt64, toTypeName(dt64);
WITH CAST(1234567891011 AS Int64) AS val SELECT val, toUnixTimestamp64Milli(fromUnixTimestamp64Milli(val)), toUnixTimestamp64Micro(fromUnixTimestamp64Micro(val)), toUnixTimestamp64Nano(fromUnixTimestamp64Nano(val));
WITH CAST(1426860704886947840 AS Int64) AS i64, 'Asia/Shanghai' AS tz SELECT tz, i64, snowflakeToDateTime(i64, tz) as dt, toTypeName(dt), snowflakeToDateTime64(i64, tz) as dt64, toTypeName(dt64);
WITH CAST(1426860704886947840 AS Int64) AS i64, 'UTC' AS tz SELECT tz, i64, snowflakeToDateTime(i64, tz) as dt, toTypeName(dt), snowflakeToDateTime64(i64, tz) as dt64, toTypeName(dt64);
WITH toDateTime64('2019-09-16 19:20:12.345678910', 3) AS dt64 SELECT dt64, fromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64)), fromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64)), fromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64));
WITH toDateTime64('2019-09-16 19:20:12.345678910', 6) AS dt64 SELECT dt64, fromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64)), fromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64)), fromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64));
WITH toDateTime64('2019-09-16 19:20:12.345678910', 9) AS dt64 SELECT dt64, fromUnixTimestamp64Milli(toUnixTimestamp64Milli(dt64)), fromUnixTimestamp64Micro(toUnixTimestamp64Micro(dt64)), fromUnixTimestamp64Nano(toUnixTimestamp64Nano(dt64));
WITH v1 AS (SELECT t1.c2, t2.c2, t2.c3 FROM t1 ASOF JOIN t2 USING (c1, c2)) SELECT count() FROM v1 WHERE c3 = 'b';
WITH 'John' AS name, toDate('1990-01-01') AS birthdate SELECT * FROM numbers(10) WHERE (number, name, birthdate) IN (userid_set2);
WITH '192.168.100.1' as addr, arrayJoin(['192.168.100.0/22', '192.168.100.0/24', '192.168.100.0/32']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'a'), formatDateTimeInJodaSyntax(datetime64, 'a'), formatDateTimeInJodaSyntax(date, 'a'), formatDateTimeInJodaSyntax(date32, 'a');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'aa'), formatDateTimeInJodaSyntax(datetime64, 'aa'), formatDateTimeInJodaSyntax(date, 'aa'), formatDateTimeInJodaSyntax(date32, 'aa');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'aaa'), formatDateTimeInJodaSyntax(datetime64, 'aaa'), formatDateTimeInJodaSyntax(date, 'aaa'), formatDateTimeInJodaSyntax(date32, 'aaa');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'C'), formatDateTimeInJodaSyntax(datetime64, 'C'), formatDateTimeInJodaSyntax(date, 'C'), formatDateTimeInJodaSyntax(date32, 'C');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'CC'), formatDateTimeInJodaSyntax(datetime64, 'CC'), formatDateTimeInJodaSyntax(date, 'CC'), formatDateTimeInJodaSyntax(date32, 'CC');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'CCC'), formatDateTimeInJodaSyntax(datetime64, 'CCC'), formatDateTimeInJodaSyntax(date, 'CCC'), formatDateTimeInJodaSyntax(date32, 'CCC');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'D'), formatDateTimeInJodaSyntax(datetime64, 'D'), formatDateTimeInJodaSyntax(date, 'D'), formatDateTimeInJodaSyntax(date32, 'D');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'd'), formatDateTimeInJodaSyntax(datetime64, 'd'), formatDateTimeInJodaSyntax(date, 'd'), formatDateTimeInJodaSyntax(date32, 'd');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'DD'), formatDateTimeInJodaSyntax(datetime64, 'DD'), formatDateTimeInJodaSyntax(date, 'DD'), formatDateTimeInJodaSyntax(date32, 'DD');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'dd'), formatDateTimeInJodaSyntax(datetime64, 'dd'), formatDateTimeInJodaSyntax(date, 'dd'), formatDateTimeInJodaSyntax(date32, 'dd');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'DDD'), formatDateTimeInJodaSyntax(datetime64, 'DDD'), formatDateTimeInJodaSyntax(date, 'DDD'), formatDateTimeInJodaSyntax(date32, 'DDD');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'ddd'), formatDateTimeInJodaSyntax(datetime64, 'ddd'), formatDateTimeInJodaSyntax(date, 'ddd'), formatDateTimeInJodaSyntax(date32, 'ddd');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'e'), formatDateTimeInJodaSyntax(datetime64, 'e'), formatDateTimeInJodaSyntax(date, 'e'), formatDateTimeInJodaSyntax(date32, 'e');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'E'), formatDateTimeInJodaSyntax(datetime64, 'E'), formatDateTimeInJodaSyntax(date, 'E'), formatDateTimeInJodaSyntax(date32, 'E');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'ee'), formatDateTimeInJodaSyntax(datetime64, 'ee'), formatDateTimeInJodaSyntax(date, 'ee'), formatDateTimeInJodaSyntax(date32, 'ee');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'EE'), formatDateTimeInJodaSyntax(datetime64, 'EE'), formatDateTimeInJodaSyntax(date, 'EE'), formatDateTimeInJodaSyntax(date32, 'EE');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'EEE'), formatDateTimeInJodaSyntax(datetime64, 'EEE'), formatDateTimeInJodaSyntax(date, 'EEE'), formatDateTimeInJodaSyntax(date32, 'EEE');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'EEEE'), formatDateTimeInJodaSyntax(datetime64, 'EEEE'), formatDateTimeInJodaSyntax(date, 'EEEE'), formatDateTimeInJodaSyntax(date32, 'EEEE');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'EEEEE'), formatDateTimeInJodaSyntax(datetime64, 'EEEEE'), formatDateTimeInJodaSyntax(date, 'EEEEE'), formatDateTimeInJodaSyntax(date32, 'EEEEE');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G123DDD'), formatDateTimeInJodaSyntax(datetime64, 'G123DDD'), formatDateTimeInJodaSyntax(date, 'G123DDD'), formatDateTimeInJodaSyntax(date32, 'G123DDD');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\'\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\'\'DDD'), formatDateTimeInJodaSyntax(date, 'G\'\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\'\'DDD');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\'a\'\'aa\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\'a\'\'aa\'DDD'), formatDateTimeInJodaSyntax(date, 'G\'a\'\'aa\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\'a\'\'aa\'DDD');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'G\'aaa\'DDD'), formatDateTimeInJodaSyntax(datetime64, 'G\'aaa\'DDD'), formatDateTimeInJodaSyntax(date, 'G\'aaa\'DDD'), formatDateTimeInJodaSyntax(date32, 'G\'aaa\'DDD');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'GG'), formatDateTimeInJodaSyntax(datetime64, 'GG'), formatDateTimeInJodaSyntax(date, 'GG'), formatDateTimeInJodaSyntax(date32, 'GG');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'GGG'), formatDateTimeInJodaSyntax(datetime64, 'GGG'), formatDateTimeInJodaSyntax(date, 'GGG'), formatDateTimeInJodaSyntax(date32, 'GGG');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'GGGG'), formatDateTimeInJodaSyntax(datetime64, 'GGGG'), formatDateTimeInJodaSyntax(date, 'GGGG'), formatDateTimeInJodaSyntax(date32, 'GGGG');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'GGGGG'), formatDateTimeInJodaSyntax(datetime64, 'GGGGG'), formatDateTimeInJodaSyntax(date, 'GGGGG'), formatDateTimeInJodaSyntax(date32, 'GGGGG');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'h'), formatDateTimeInJodaSyntax(datetime64, 'h'), formatDateTimeInJodaSyntax(date, 'h'), formatDateTimeInJodaSyntax(date32, 'h');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'H'), formatDateTimeInJodaSyntax(datetime64, 'H'), formatDateTimeInJodaSyntax(date, 'H'), formatDateTimeInJodaSyntax(date32, 'H');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'hh'), formatDateTimeInJodaSyntax(datetime64, 'hh'), formatDateTimeInJodaSyntax(date, 'hh'), formatDateTimeInJodaSyntax(date32, 'hh');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'HH'), formatDateTimeInJodaSyntax(datetime64, 'HH'), formatDateTimeInJodaSyntax(date, 'HH'), formatDateTimeInJodaSyntax(date32, 'HH');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'hhh'), formatDateTimeInJodaSyntax(datetime64, 'hhh'), formatDateTimeInJodaSyntax(date, 'hhh'), formatDateTimeInJodaSyntax(date32, 'hhh');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'HHH'), formatDateTimeInJodaSyntax(datetime64, 'HHH'), formatDateTimeInJodaSyntax(date, 'HHH'), formatDateTimeInJodaSyntax(date32, 'HHH');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'K'), formatDateTimeInJodaSyntax(datetime64, 'K'), formatDateTimeInJodaSyntax(date, 'K'), formatDateTimeInJodaSyntax(date32, 'K');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'k'), formatDateTimeInJodaSyntax(datetime64, 'k'), formatDateTimeInJodaSyntax(date, 'k'), formatDateTimeInJodaSyntax(date32, 'k');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'KK'), formatDateTimeInJodaSyntax(datetime64, 'KK'), formatDateTimeInJodaSyntax(date, 'KK'), formatDateTimeInJodaSyntax(date32, 'KK');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'kk'), formatDateTimeInJodaSyntax(datetime64, 'kk'), formatDateTimeInJodaSyntax(date, 'kk'), formatDateTimeInJodaSyntax(date32, 'kk');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'KKK'), formatDateTimeInJodaSyntax(datetime64, 'KKK'), formatDateTimeInJodaSyntax(date, 'KKK'), formatDateTimeInJodaSyntax(date32, 'KKK');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'kkk'), formatDateTimeInJodaSyntax(datetime64, 'kkk'), formatDateTimeInJodaSyntax(date, 'kkk'), formatDateTimeInJodaSyntax(date32, 'kkk');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'M'), formatDateTimeInJodaSyntax(datetime64, 'M'), formatDateTimeInJodaSyntax(date, 'M'), formatDateTimeInJodaSyntax(date32, 'M');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'm'), formatDateTimeInJodaSyntax(datetime64, 'm'), formatDateTimeInJodaSyntax(date, 'm'), formatDateTimeInJodaSyntax(date32, 'm');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'MM'), formatDateTimeInJodaSyntax(datetime64, 'MM'), formatDateTimeInJodaSyntax(date, 'MM'), formatDateTimeInJodaSyntax(date32, 'MM');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'mm'), formatDateTimeInJodaSyntax(datetime64, 'mm'), formatDateTimeInJodaSyntax(date, 'mm'), formatDateTimeInJodaSyntax(date32, 'mm');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'MMM'), formatDateTimeInJodaSyntax(datetime64, 'MMM'), formatDateTimeInJodaSyntax(date, 'MMM'), formatDateTimeInJodaSyntax(date32, 'MMM');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'mmm'), formatDateTimeInJodaSyntax(datetime64, 'mmm'), formatDateTimeInJodaSyntax(date, 'mmm'), formatDateTimeInJodaSyntax(date32, 'mmm');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'MMMM'), formatDateTimeInJodaSyntax(datetime64, 'MMMM'), formatDateTimeInJodaSyntax(date, 'MMMM'), formatDateTimeInJodaSyntax(date32, 'MMMM');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 's'), formatDateTimeInJodaSyntax(datetime64, 's'), formatDateTimeInJodaSyntax(date, 's'), formatDateTimeInJodaSyntax(date32, 's');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'S'), formatDateTimeInJodaSyntax(datetime64, 'S'), formatDateTimeInJodaSyntax(date, 'S'), formatDateTimeInJodaSyntax(date32, 'S');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'ss'), formatDateTimeInJodaSyntax(datetime64, 'ss'), formatDateTimeInJodaSyntax(date, 'ss'), formatDateTimeInJodaSyntax(date32, 'ss');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'sss'), formatDateTimeInJodaSyntax(datetime64, 'sss'), formatDateTimeInJodaSyntax(date, 'sss'), formatDateTimeInJodaSyntax(date32, 'sss');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'w'), formatDateTimeInJodaSyntax(datetime64, 'w'), formatDateTimeInJodaSyntax(date, 'w'), formatDateTimeInJodaSyntax(date32, 'w');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'x'), formatDateTimeInJodaSyntax(datetime64, 'x'), formatDateTimeInJodaSyntax(date, 'x'), formatDateTimeInJodaSyntax(date32, 'x');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'Y'), formatDateTimeInJodaSyntax(datetime64, 'Y'), formatDateTimeInJodaSyntax(date, 'Y'), formatDateTimeInJodaSyntax(date32, 'Y');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'y'), formatDateTimeInJodaSyntax(datetime64, 'y'), formatDateTimeInJodaSyntax(date, 'y'), formatDateTimeInJodaSyntax(date32, 'y');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'YY'), formatDateTimeInJodaSyntax(datetime64, 'YY'), formatDateTimeInJodaSyntax(date, 'YY'), formatDateTimeInJodaSyntax(date32, 'YY');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'yy'), formatDateTimeInJodaSyntax(datetime64, 'yy'), formatDateTimeInJodaSyntax(date, 'yy'), formatDateTimeInJodaSyntax(date32, 'yy');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'YYY'), formatDateTimeInJodaSyntax(datetime64, 'YYY'), formatDateTimeInJodaSyntax(date, 'YYY'), formatDateTimeInJodaSyntax(date32, 'YYY');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'yyy'), formatDateTimeInJodaSyntax(datetime64, 'yyy'), formatDateTimeInJodaSyntax(date, 'yyy'), formatDateTimeInJodaSyntax(date32, 'yyy');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'YYYY'), formatDateTimeInJodaSyntax(datetime64, 'YYYY'), formatDateTimeInJodaSyntax(date, 'YYYY'), formatDateTimeInJodaSyntax(date32, 'YYYY');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'yyyy'), formatDateTimeInJodaSyntax(datetime64, 'yyyy'), formatDateTimeInJodaSyntax(date, 'yyyy'), formatDateTimeInJodaSyntax(date32, 'yyyy');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'YYYYY'), formatDateTimeInJodaSyntax(datetime64, 'YYYYY'), formatDateTimeInJodaSyntax(date, 'YYYYY'), formatDateTimeInJodaSyntax(date32, 'YYYYY');
with '2018-01-12 22:33:44' as s, toDateTime(s) as datetime, toDateTime64(s, 6) as datetime64, toDate(s) as date, toDate32(s) as date32 SELECT formatDateTimeInJodaSyntax(datetime, 'yyyyy'), formatDateTimeInJodaSyntax(datetime64, 'yyyyy'), formatDateTimeInJodaSyntax(date, 'yyyyy'), formatDateTimeInJodaSyntax(date32, 'yyyyy');
with '2018-01-12 22:33:44' as s, toDateTime(s, 'UTC') as datetime, toDateTime64(s, 6, 'UTC') as datetime64, toDate(s) as date, toDate32(s) as date32 select formatDateTimeInJodaSyntax(datetime, 'zzzz'), formatDateTimeInJodaSyntax(datetime64, 'zzzz');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'S');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSSS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSSSS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSSSSS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT formatDateTimeInJodaSyntax(datetime64, 'SSSSSSSSSS');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'S', 'UTC');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SS', 'UTC');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSS', 'UTC');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSS', 'UTC');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSS', 'UTC');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSS', 'UTC');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSSS', 'UTC');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSSSS', 'UTC');
with '2018-01-12 22:33:44.55' as s, toDateTime64(s, 6) as datetime64 SELECT fromUnixTimestampInJodaSyntax(datetime64, 'SSSSSSSSS', 'UTC');
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 != S;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 <= S;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 = S;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 > S;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 >= S;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE materialize(DT64) = S;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S != DT64;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S < DT64;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S <= DT64;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S = DT64;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S = materialize(DT64);
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S > DT64;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE S >= DT64;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT DT64 = S;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT materialize(DT64) = S;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT S = DT64;
WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT S = materialize(DT64);
WITH '2022-01-30'::Date + INTERVAL 1 DAY + INTERVAL 1 MONTH AS e1, '2022-01-30'::Date + (INTERVAL 1 DAY + INTERVAL 1 MONTH) AS e2, '2022-01-30'::Date + (INTERVAL 1 DAY, INTERVAL 1 MONTH) AS e3, '2022-01-30'::Date + INTERVAL '1 DAY 1 MONTH' AS e4 SELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;
WITH '2022-01-30'::Date + INTERVAL 1 MONTH + INTERVAL 1 DAY AS e1, '2022-01-30'::Date + (INTERVAL 1 MONTH + INTERVAL 1 DAY) AS e2, '2022-01-30'::Date + (INTERVAL 1 MONTH, INTERVAL 1 DAY) AS e3, '2022-01-30'::Date + INTERVAL '1 MONTH 1 DAY' AS e4 SELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;
WITH '2022-10-11'::Date + INTERVAL -1 SECOND + INTERVAL 2 MINUTE + INTERVAL -3 MONTH + INTERVAL 1 YEAR AS e1, '2022-10-11'::Date + (INTERVAL -1 SECOND + INTERVAL 2 MINUTE + INTERVAL -3 MONTH + INTERVAL 1 YEAR) AS e2, '2022-10-11'::Date + (INTERVAL -1 SECOND, INTERVAL 2 MINUTE, INTERVAL -3 MONTH, INTERVAL 1 YEAR) AS e3, '2022-10-11'::Date + INTERVAL '-1 SECOND 2 MINUTE -3 MONTH 1 YEAR' AS e4 SELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;
WITH '2022-10-11'::DateTime - INTERVAL 1 QUARTER - INTERVAL -3 WEEK - INTERVAL 1 YEAR - INTERVAL 1 HOUR AS e1, '2022-10-11'::DateTime + (- INTERVAL 1 QUARTER - INTERVAL -3 WEEK - INTERVAL 1 YEAR - INTERVAL 1 HOUR) AS e2, '2022-10-11'::DateTime - (INTERVAL 1 QUARTER, INTERVAL -3 WEEK, INTERVAL 1 YEAR, INTERVAL 1 HOUR) AS e3, '2022-10-11'::DateTime - INTERVAL '1 QUARTER -3 WEEK 1 YEAR 1 HOUR' AS e4 SELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;
WITH '2022-10-11'::DateTime64 - INTERVAL 1 YEAR - INTERVAL 4 MONTH - INTERVAL 1 SECOND AS e1, '2022-10-11'::DateTime64 + (- INTERVAL 1 YEAR - INTERVAL 4 MONTH - INTERVAL 1 SECOND) AS e2, '2022-10-11'::DateTime64 - (INTERVAL 1 YEAR, INTERVAL 4 MONTH, INTERVAL 1 SECOND) AS e3, '2022-10-11'::DateTime64 - INTERVAL '1 YEAR 4 MONTH 1 SECOND' AS e4 SELECT e1 == e2 AND e2 == e3 AND e3 == e4, e1;
WITH '::192.168.100.1' as addr, arrayJoin(['::192.168.100.0/118', '::192.168.100.0/120', '::192.168.100.0/128']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);
WITH 'abb' AS b, 'abc' AS c, 'abd' AS d, toFixedString(b, 5) AS bf, toFixedString(c, 5) AS cf, toFixedString(d, 5) AS df SELECT b = b, b > b, b < b, b = c, b > c, b < c, b = d, b > d, b < d, b = bf, b > bf, b < bf, b = cf, b > cf, b < cf, b = df, b > df, b < df, c = b, c > b, c < b, c = c, c > c, c < c, c = d, c > d, c < d, c = bf, c > bf, c < bf, c = cf, c > cf, c < cf, c = df, c > df, c < df, d = b, d > b, d < b, d = c, d > c, d < c, d = d, d > d, d < d, d = bf, d > bf, d < bf, d = cf, d > cf, d < cf, d = df, d > df, d < df, bf = b, bf > b, bf < b, bf = c, bf > c, bf < c, bf = d, bf > d, bf < d, bf = bf, bf > bf, bf < bf, bf = cf, bf > cf, bf < cf, bf = df, bf > df, bf < df, cf = b, cf > b, cf < b, cf = c, cf > c, cf < c, cf = d, cf > d, cf < d, cf = bf, cf > bf, cf < bf, cf = cf, cf > cf, cf < cf, cf = df, cf > df, cf < df, df = b, df > b, df < b, df = c, df > c, df < c, df = d, df > d, df < d, df = bf, df > bf, df < bf, df = cf, df > cf, df < cf, df = df, df > df, df < df FORMAT Vertical;
WITH 'aes-256-ecb' as mode, 'Hello World!' as plaintext, 'test_key________________________' as key SELECT hex(aes_encrypt_mysql(mode, toNullable(plaintext), key));
WITH 'aes-256-ecb' as mode, 'test_key________________________' as key SELECT mode, decrypt(mode, CAST(null as Nullable(String)), key);
WITH 'aes-256-ecb' as mode, 'test_key________________________' as key SELECT mode, encrypt(mode, CAST(null as Nullable(String)), key);
WITH 'aes-256-ecb' as mode, 'test_key________________________' as key SELECT mode, hex(encrypt(mode, toNullable('Hello World!'), key));
WITH 'aes-256-ecb' as mode, unhex('D1B43643E1D0E9390E39BA4EAE150851') as ciphertext, 'test_key________________________' as key SELECT hex(aes_decrypt_mysql(mode, toNullable(ciphertext), key));
WITH 'aes-256-ecb' as mode, unhex('D1B43643E1D0E9390E39BA4EAE150851') as ciphertext, 'test_key________________________' as key SELECT mode, decrypt(mode, toNullable(ciphertext), key);
WITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv SELECT mode, decrypt(mode, CAST(null as Nullable(String)), key, iv);
WITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv SELECT mode, encrypt(mode, CAST(null as Nullable(String)), key, iv);
WITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv SELECT mode, hex(encrypt(mode, toNullable('Hello World!'), key, iv));
WITH 'aes-256-gcm' as mode, unhex('219E6478A1A3BB5B686DA4BAD70323F192EFEDCCBBD6F49E78A7E2F6') as ciphertext, 'test_key________________________' as key, 'test_iv_____' as iv SELECT mode, decrypt(mode, toNullable(ciphertext), key, iv);
WITH 'CSV', '1,2,"[1,2,3]","[[\'abc\'], [], [\'d\', \'e\']]"' AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);
WITH 'Europe/Minsk' as timezone SELECT timezone, timeZoneOf(now64(3, timezone)) == timezone;
WITH 'invalid_dictionary' AS dictionary SELECT dictGet(dictionary, 'value', toUInt64(0));
WITH 'invalid_test_table_join' AS join_table SELECT joinGet(join_table, 'value', toUInt64(0));
WITH 'number: 1' as year SELECT extract(year, '\\d+');
WITH 'number: 2' as mm SELECT extract(mm, '\\d+');
WITH 'number: 3' as s SELECT extract(s, '\\d+');
with 'string' as str select str || '_abc';
WITH 'test_dictionary' AS dictionary SELECT dictGet(dictionary, 'value', toUInt64(0));
WITH 'test_table_join' AS join_table SELECT joinGet(join_table, 'value', toUInt64(0));
WITH '{ "v":1.1}' AS raw SELECT JSONExtract(raw, 'v', 'float') AS float32_1, JSONExtract(raw, 'v', 'Float32') AS float32_2, JSONExtractFloat(raw, 'v') AS float64_1, JSONExtract(raw, 'v', 'double') AS float64_2;
WITH '{ "v":1E-2}' AS raw SELECT JSONExtract(raw, 'v', 'float') AS float32_1, JSONExtract(raw, 'v', 'Float32') AS float32_2, JSONExtractFloat(raw, 'v') AS float64_1, JSONExtract(raw, 'v', 'double') AS float64_2;
WITH '{"a": "hello", "b": 12345678901234567890}' AS json SELECT JSONExtractRaw(json, 'a');
with '{"string_value":null}' as json select JSONExtract(json, 'string_value', 'Nullable(String)');
WITH ( SELECT event_time_microseconds, event_time FROM system.query_thread_log WHERE current_database = currentDatabase() ORDER BY event_time DESC LIMIT 1 ) AS time SELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));
WITH ( SELECT event_time_microseconds, event_time FROM system.trace_log ORDER BY event_time DESC LIMIT 1 ) AS time SELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));
WITH ( SELECT event_time_microseconds, event_time FROM system.query_log WHERE current_database = currentDatabase() ORDER BY event_time DESC LIMIT 1 ) AS time SELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));
WITH ( SELECT event_time_microseconds, event_time FROM system.query_thread_log WHERE current_database = currentDatabase() ORDER BY event_time DESC LIMIT 1 ) AS time SELECT if(dateDiff('second', toDateTime(time.1), toDateTime(time.2)) = 0, 'ok', toString(time));
WITH ( ( SELECT query_start_time_microseconds FROM system.query_log WHERE current_database = currentDatabase() ORDER BY query_start_time DESC LIMIT 1 ) AS time_with_microseconds, ( SELECT inf, query_start_time FROM system.query_log WHERE current_database = currentDatabase() ORDER BY query_start_time DESC LIMIT 1 ) AS t) SELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(t)) = -9223372036854775808, 'ok', '');
WITH ('a', 'b')::Tuple(c1 String, c2 String) AS t SELECT t.c1, t.c2;
WITH ((1, (1, 1)), (2, (2, 2))) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE (i64, (i64, i32)) IN liter_prepared_set SETTINGS max_rows_to_read = 6;
WITH ((1, 1), (2, 2)) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) IN liter_prepared_set SETTINGS max_rows_to_read = 6;
WITH ((1, 2), (2, 3)) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) IN liter_prepared_set SETTINGS max_rows_to_read = 6;
WITH ((3, 4) || tup) AS res SELECT res, res.1, res.2, res.3, res.4 FROM t_02833;
WITH ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR (path = '/b') OR (path = '/b/') as alias1 SELECT max(alias1) FROM remote('127.0.0.{1,2}', currentDatabase(), test_local) WHERE (id = 299386662);
WITH (0.0, 2.0) as reference_vec SELECT id, vec, cosineDistance(vec, reference_vec) FROM tab_annoy ORDER BY cosineDistance(vec, reference_vec) LIMIT 3 SETTINGS annoy_index_search_k_nodes=0;
WITH (0.0, 2.0) AS reference_vec SELECT id, vec, cosineDistance(vec, reference_vec) FROM tab_annoy ORDER BY cosineDistance(vec, reference_vec) LIMIT 3;
WITH (0.0, 2.0) as reference_vec SELECT id, vec, cosineDistance(vec, reference_vec) FROM tab_annoy WHERE cosineDistance(vec, reference_vec) < -1.0 LIMIT 3;
WITH (0.0, 2.0) AS reference_vec SELECT id, vec, cosineDistance(vec, reference_vec) FROM tab_annoy WHERE cosineDistance(vec, reference_vec) < 1.0 LIMIT 3;
WITH (0.0, 2.0) AS reference_vec SELECT id, vec, cosineDistance(vec, reference_vec) FROM tab_usearch ORDER BY cosineDistance(vec, reference_vec) LIMIT 3;
WITH (0.0, 2.0) as reference_vec SELECT id, vec, cosineDistance(vec, reference_vec) FROM tab_usearch WHERE cosineDistance(vec, reference_vec) < -1.0 LIMIT 3;
WITH (0.0, 2.0) AS reference_vec SELECT id, vec, cosineDistance(vec, reference_vec) FROM tab_usearch WHERE cosineDistance(vec, reference_vec) < 1.0 LIMIT 3;
WITH (1, ('a', 'b'))::Tuple(c1 UInt64, t1 Tuple(c1 String, c2 String)) AS t SELECT t.c1, t.t1.c1, t.t1.c2;
WITH (1, 2) AS a SELECT 1 IN a, 3 IN a;
WITH (1, 2) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE i32 IN liter_prepared_set SETTINGS max_rows_to_read = 6;
WITH (1, 2) AS t SELECT t.1, t.2;
WITH (1, 2)::Tuple(a UInt32, b UInt32) AS t SELECT t.1, tupleElement(t, 'b');
WITH (1,2,3) || ('a','b','c') || ('2020-10-08'::Date, '2020-11-08'::Date) AS t SELECT t, t.1, t.2, t.3, t.4, t.5, t.6, t.7, t.8;
WITH (1.0, 0.0) AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 1;
WITH (9000.0, 0.0) AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 1;
WITH (d < '2018-01-01') AND (d < '2018-01-02') AS x SELECT 1 FROM t WHERE x;
WITH (functor, x) -> functor(x) AS lambda, x -> x + 1 AS functor_1, x -> toString(x) AS functor_2 SELECT lambda(functor_1, 1), lambda(functor_2, 1);
WITH (functor, x) -> functor(x) AS lambda, x -> x + 1 AS functor_1, x -> toString(x) AS functor_2 SELECT lambda(functor_1, id), lambda(functor_2, id) FROM test_table;
WITH (path = 'test1') OR match(path, 'test2') OR (match(path, 'test3') AND match(path, 'test2')) OR match(path, 'test4') OR (path = 'test5') OR (path = 'test6') AS alias_in_error SELECT count(1) FROM test_bug_optimization WHERE alias_in_error;
WITH (range(0, number % 10), range(0, number % 10))::Map(UInt64, UInt64) AS m1, (range(0, number % 10, 2), arrayMap(x -> x * x, range(0, number % 10, 2)))::Map(UInt64, UInt64) AS m2 SELECT DISTINCT mapUpdate(m1, m2) FROM numbers (100000);
WITH (SELECT '111111111111111111111111111111111111111'::UInt128) AS v SELECT sum(x), max(v) FROM test;
with (select 5 except select 1) as a select a except select 5;
with (select count() > 0 from remote('127.2', system.settings)) as s select s;
with (select count() from (select * from test union distinct select * from test except select * from test where toUInt8(name) > 3)) as max select count() from (select * from test except select * from test where toUInt8(name) < max);
with (select count() from (select * from test union distinct select * from test except select * from test where toUInt8(name) > 3)) as max select count() from (select * from test union all select * from test where toUInt8(name) < max);
with (select count() from (select 1 union distinct select 2 except select 1)) as max select count() from (select 1 union all select max) limit 100;
with (select currentDatabase()) as id_00 select *, ignore(id_00) from dist_01756 where dummy in (0,);
with (select currentDatabase()) as id_02 select *, ignore(id_02) from dist_01756 where dummy in (0, 2);
with (select currentDatabase()) as id_2 select *, ignore(id_2) from dist_01756 where dummy in (2,);
with (select currentDatabase()) as id_no select *, ignore(id_no) from dist_01756 where dummy in (0, 2);
with (select currentDatabase()) as key_signed select *, ignore(key_signed) from cluster(test_cluster_two_shards, currentDatabase(), data_01756_signed, key) where key in (-1, -2);
with (select groupArray(id) from bbb) as ids select * from aaa where has(ids, id) order by id;
with (select number from numbers(10) intersect select 5) as a select a * 10;
with (select number from numbers(10) intersect select 5) as a select a except select 1;
with (select number from numbers(10) intersect select 5) as a select a intersect select 1;
WITH (SELECT pow(two, 1) GROUP BY GROUPING SETS ((pow(1, 9)))) AS four SELECT 2 AS two GROUP BY pow(1, two);
with (select pow(two,2)) as four select pow(four, 2), 2 as two, pow(two, 2);
with (select quantileState(0.5)(number) from (select * from system.numbers limit 10)) as s select quantileMerge(s);
with (select state from model) as model select round(evalMLMethod(model, predict1, predict2, predict3, predict4, predict5, predict6, predict7), 12) from defaults;
WITH (SELECT stochasticLinearRegressionState(1, 2, 3)) AS model SELECT evalMLMethod(model, toFloat64(1), toFloat64(1));
with (select sumState(1)) as s select sumMerge(s);
with (select sumState(number) from (select * from system.numbers limit 10)) as s select sumMerge(s);
with (select uuid from system.tables where database = currentDatabase() and table = 'data_02491') as table_uuid_ select table_uuid != toUUIDOrDefault(Null), event_type, merge_reason, part_name from system.part_log where database = currentDatabase() and table = 'data_02491' and table_uuid = table_uuid_ order by event_time_microseconds;
WITH (tup || (3, 4)) AS res SELECT res, res.1, res.2, res.3, res.4 FROM t_02833;
WITH (tup || tup) AS res SELECT res, res.1, res.2, res.3, res.4 FROM t_02833;
WITH (x -> x + 1) AS lambda SELECT lambda(1);
WITH (x -> x + 1) AS lambda SELECT lambda.nested(1);
WITH * APPLY lambda(e);
WITH - INTERVAL 1 HOUR - INTERVAL 1 SECOND - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH - INTERVAL 1 SECOND - INTERVAL 1 HOUR - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH - INTERVAL 1 SECOND - INTERVAL 1 SECOND - INTERVAL 1 HOUR as expr SELECT expr, toTypeName(expr);
WITH - INTERVAL 1 SECOND - INTERVAL 1 SECOND - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH 0.01 AS threshold SELECT 'unknown runtime exceptions', greatest(coalesce(sum(length(message_format_string) = 0) / countOrNull(), 0) as v, threshold), v <= threshold ? [] : (SELECT groupArray((message, c)) FROM ( SELECT message, count() as c FROM logs WHERE length(message_format_string) = 0 AND (message like '%DB::Exception%' or message like '%Coordination::Exception%') AND message not like '% Received from %' and message not like '%(SYNTAX_ERROR)%' GROUP BY message ORDER BY c LIMIT 10 )) FROM logs WHERE (message like '%DB::Exception%' or message like '%Coordination::Exception%') AND message not like '% Received from %' and message not like '%(SYNTAX_ERROR)%';
WITH 0.1 AS level SELECT quantile(level)(number) FROM numbers(1000);
WITH 01091 AS id SELECT 1;
with 01091 as id select sum(number) from numbers(1000000);
with 01091 as id select sum(number) from numbers_mt(1000000);
WITH 1 AS a SELECT (SELECT * FROM (SELECT * FROM (SELECT a + 1)));
WITH 1 AS a SELECT (SELECT a);
WITH 1 as a SELECT a, FROM numbers(1);
WITH 1 as a SELECT a;
WITH 1 as from SELECT from, from + from, from in [0], FROM numbers(1);
WITH 1 AS global_a SELECT a FROM (SELECT global_a AS a) AS b;
WITH 1 AS global_a SELECT b.a FROM (SELECT global_a AS a) AS b;
WITH 1 AS max_size SELECT groupArray(max_size)(col) FROM (SELECT col FROM ( SELECT 1 as col UNION ALL SELECT 2 ) ORDER BY col);
WITH 1 as n FROM numbers(1) SELECT number * n;
with 1 as x select * from (select x);
with 1 as x select *, x from (with 2 as x select x as y);
with 1 as x select x union all select x;
with 1 as x select x;
WITH 10.125 AS a, 2.5 AS b SELECT a % b, -a % b, a % -b, -a % -b;
WITH 10.125 AS a, 2.5 AS b SELECT a MOD b, -a MOD b, a MOD -b, -a MOD -b;
with 123 as pid select a.col1, sum(a.col2) as summ from table1 a prewhere (pid is null or a.col2 = pid) group by a.col1;
WITH 2 AS `b.c`, [4, 5] AS a, 6 AS u, 3 AS v, 2 AS d, TRUE AS e, 1 AS f, 0 AS g, 2 AS h, 'Hello' AS i, 'World' AS j, 'hi' AS w, NULL AS k, (1, 2) AS l, 2 AS m, 3 AS n, [] AS o, [1] AS p, 1 AS q, q AS r, 1 AS s, 1 AS t SELECT INTERVAL CASE CASE WHEN NOT -a[`b.c`] * u DIV v + d IS NOT NULL AND e OR f BETWEEN g AND h THEN i ELSE j END WHEN w THEN k END || [l, (m, n)] MINUTE IS NULL OR NOT o::Array(INT) = p <> q < r > s != t AS upyachka;
with 3 as "1" select 1, "1";
with 5 as q1, x as (select number+100 as b, number as a from numbers(10) where number > q1) select * from x;
WITH 8.5 AS a, 2.5 AS b SELECT a % b, -a % b, a % -b, -a % -b;
WITH 8.5 AS a, 2.5 AS b SELECT a MOD b, -a MOD b, a MOD -b, -a MOD -b;
WITH 8.5 AS a, 2.5 AS b SELECT mod(a, b), MOD(-a, b), modulo(a, -b), moduloOrZero(-a, -b);
with [ 'Seconds', 'Bool', 'Int64', 'String', 'Char', 'LogsLevel', 'URI', 'Float', 'UInt64', 'MaxThreads', 'Milliseconds', 'JoinStrictness', 'JoinAlgorithm', 'OverflowMode', 'TotalsMode', 'LoadBalancing', 'OverflowModeGroupBy', 'DateTimeInputFormat', 'DistributedProductMode' ] as types select hasAll(arrayDistinct(groupArray(type)), types) from system.settings;
with [ 'Seconds', 'Bool', 'Int64', 'String', 'Float', 'UInt64', 'MaxThreads' ] as types select hasAll(arrayDistinct(groupArray(type)), types) from system.merge_tree_settings;
WITH ['2023-04-05 00:25:23', '2023-04-05 00:25:24']::Array(DateTime) AS dt SELECT arrayMax(dt), arrayMin(dt), arrayDifference(dt);
WITH ['2023-04-05 00:25:23.123', '2023-04-05 00:25:24.124']::Array(DateTime64(3)) AS dt SELECT arrayMax(dt), arrayMin(dt), arrayDifference(dt);
WITH ['2023-04-05', '2023-04-06']::Array(Date) AS d SELECT arrayMax(d), arrayMin(d), arrayDifference(d);
WITH ['2023-04-05', '2023-04-06']::Array(Date32) AS d SELECT arrayMax(d), arrayMin(d), arrayDifference(d);
WITH [(1, 2)] AS arr1 SELECT arrayMap((x, y) -> (y, x), arr1);
WITH [(1, 2)] AS arr1 SELECT arrayMap((x, y, z) -> (y, x, z), arr1);
WITH [(1, 2)] AS arr1 SELECT arrayMap(x -> x.1, arr1);
WITH [(1, 2)] AS arr1, [(3, 4)] AS arr2 SELECT arrayMap((x, y) -> (y.1, x.2), arr1, arr2);
WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 3;
WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab_annoy ORDER BY L2Distance(vec, reference_vec) LIMIT 3;
WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab_annoy WHERE L2Distance(vec, reference_vec) < 1.0 LIMIT 3;
WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab_usearch ORDER BY L2Distance(vec, reference_vec) LIMIT 3;
WITH [0.0, 2.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab_usearch WHERE L2Distance(vec, reference_vec) < 1.0 LIMIT 3;
WITH [1, 2, 3] AS arr SELECT arr.*;
WITH [1, 2, 3] AS arr SELECT arr.size0;
WITH [1, 2, 3] AS constant_array SELECT id, value FROM test_table ARRAY JOIN constant_array AS value;
WITH [1, 2, 3] AS constant_array SELECT id, value, value_1 FROM test_table ARRAY JOIN constant_array AS value_1;
WITH [1, 2, NULL] AS arr SELECT arr.null;
WITH [1.0, 0.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 1;
WITH [3,4,5] AS x SELECT x[1]::Int32;
WITH [9000.0, 0.0] AS reference_vec SELECT id, vec, L2Distance(vec, reference_vec) FROM tab ORDER BY L2Distance(vec, reference_vec) LIMIT 1;
WITH [[1, 2], [], [3]] AS arr SELECT arr.size0, arr.size1;
WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM a as l, b as r;
WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM b as l, a as r;
WITH A as (SELECT rowNumberInAllBlocks() R,addDays(toDate('2021-05-18'), R) TVV from numbers(5)), B as (SELECT rowNumberInAllBlocks() R,toDateTime(NULL) TVV from numbers(1)) SELECT joinGet('DATE_INFO_DICT', 'SHAMSI', toDate(A.TVV) ) TV1, substr(TV1, 3, 8) || ' : ' || toString(1) TV_CHAR_1 from A LEFT JOIN B USING (R) ORDER BY TV1;
WITH a AS (SELECT t1.number AS n1, t2.number AS n2 FROM numbers(1) AS t1, numbers(1) AS t2), b AS (SELECT sum(n1) AS s FROM a) SELECT * FROM b AS l, a AS r;
WITH a as b SELECT 1 as a, b;
WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%test cpu time query profiler%' AND query NOT LIKE '%system%' ORDER BY event_time DESC LIMIT 1) AND symbol LIKE '%Source%';
WITH addressToLine(arrayJoin(trace) AS addr) || '#' || demangle(addressToSymbol(addr)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE '%test real time query profiler%' AND query NOT LIKE '%system%' ORDER BY event_time DESC LIMIT 1) AND symbol LIKE '%FunctionSleep%';
WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'Memory' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);
WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemoryPeak' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);
WITH addressToSymbol(arrayJoin(trace)) AS symbol SELECT count() > 0 FROM system.trace_log t WHERE event_date >= yesterday() AND trace_type = 'MemorySample' AND query_id = (SELECT query_id FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE '%test memory profiler%' AND has(used_table_functions, 'numbers') AND log_comment = '01092_memory_profiler' ORDER BY event_time DESC LIMIT 1);
with anyLastSimpleState(number) as c select toTypeName(c), c from numbers(1);
WITH arrayJoin(['192.168.100.1', '192.168.103.255']) as addr, arrayJoin(['192.168.100.0/22', '192.168.100.0/24']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);
WITH arrayJoin(['192.168.99.255', '192.168.100.1', '192.168.103.255', '192.168.104.0']) as addr, '192.168.100.0/22' as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);
WITH arrayJoin(['::192.168.100.1', '::192.168.103.255']) as addr, arrayJoin(['::192.168.100.0/118', '::192.168.100.0/120']) as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);
WITH arrayJoin(['::192.168.99.255', '::192.168.100.1', '::192.168.103.255', '::192.168.104.0']) as addr, '::192.168.100.0/118' as prefix SELECT addr, prefix, isIPAddressInRange(addr, prefix);
WITH arrayJoin(['a', 'a', 'b', 'b']) AS field SELECT field, count() OVER (PARTITION BY field) ORDER BY field ASC LIMIT 1;
WITH arrayJoin(['a', 'b']) AS z SELECT z, sumMergeForEach(x) AS x FROM ( SELECT sumStateForEach([1., 1.1, 1.1300175]) AS x FROM remote('127.0.0.{1,2}', system.one) ) GROUP BY z ORDER BY z;
WITH arrayJoin(['aaa', 'bbb']) AS a, 'aaa\0bbb' AS b SELECT a = b, a < b, a > b, a <= b, a >= b;
WITH arrayJoin(['aaa', 'bbb']) AS a, materialize('aaa\0bbb') AS b SELECT a = b, a < b, a > b, a <= b, a >= b;
WITH arrayJoin(['aaa', 'zzz']) AS a, 'aaa\0bbb' AS b SELECT a = b, a < b, a > b, a <= b, a >= b;
WITH arrayJoin(['aaa', 'zzz']) AS a, materialize('aaa\0bbb') AS b SELECT a = b, a < b, a > b, a <= b, a >= b;
WITH arrayJoin(['Hello', 'world'])::Enum('Hello', 'world') AS x SELECT x, transform(x, ['Hello', 'world', 'goodbye'], [123, 456], 0);
WITH arrayJoin(['Hello', 'world'])::Enum('Hello', 'world') AS x SELECT x, transform(x, ['Hello', 'world'], [123, 456], 0);
WITH arrayJoin([0, 1]) AS delta SELECT toDate(time) + toIntervalDay(delta) AS dt FROM ( SELECT toDateTime('2020.11.12 19:02:04') AS time ) ORDER BY dt ASC;
with arrayJoin([0, 6, 7, 9, 10]) as x select quantileGK(100, 0.5)(x);
WITH arrayJoin(finalizeAggregation((SELECT histogramState(3)(number) FROM numbers(0, 100)) + (SELECT histogramState(3)(number) FROM numbers(10, 190)))) AS hist SELECT round(hist.1) AS l, round(hist.2) AS r, round(hist.3) AS cnt;
WITH arrayJoin(finalizeAggregation((SELECT histogramState(3)(number) FROM numbers(10, 190)) + (SELECT histogramState(3)(number) FROM numbers(0, 100)))) AS hist SELECT round(hist.1) AS l, round(hist.2) AS r, round(hist.3) AS cnt;
WITH arrayJoin(histogram(1)(sin(number-40))) AS res SELECT round(res.1, 2), round(res.2, 2), round(res.3, 2) from (select * from system.numbers limit 80);
WITH arrayJoin(histogram(3)(sin(number))) AS res select round(res.1, 2), round(res.2, 2), round(res.3, 2) from (select * from system.numbers limit 10);
WITH arrayJoin(range(2)) AS delta SELECT toDate(time) + toIntervalDay(delta) AS dt FROM ( SELECT toDateTime('2020.11.12 19:02:04') AS time ) ORDER BY dt ASC;
WITH b AS bb SELECT bb FROM t2 WHERE a IN (SELECT a FROM t1);
with c as ( select 1 ID, toDate('2023-06-24') dt, 0 p ) select multiIf(t.ID = 1, formatRowNoNewline('JSONEachRow', dd), '') AS params from (select ID, case when p = 0 then toString(date_add(hour, p, dt)) else '2022-01-01' end as dd from c) t;
with c as ( select 1 ID, toDate('2023-06-24') dt, 0 p ) select multiIf(t.ID = 1, formatRowNoNewline('JSONEachRow', dd), '') AS params, dd from (select ID, case when p = 0 then toString(date_add(hour, p, dt)) else '2022-01-01' end as dd from c) t;
WITH CAST('text' as LowCardinality(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test LIMIT 1;
WITH CAST('text' as Nullable(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32, iv)) FROM encryption_test LIMIT 1;
WITH CAST(NULL as Nullable(String)) as input, 'aes-256-ofb' as mode SELECT toTypeName(input), hex(aes_encrypt_mysql(mode, input, key32,iv)) FROM encryption_test LIMIT 1;
WITH CAST(round(sqrt(number)) % 4 AS Enum('' = 0, 'hello' = 1, 'world' = 2, 'test' = 3)) AS x SELECT topK(10)(x) FROM numbers(1000);
WITH cast(tuple(1), 'Tuple (value UInt64)') AS compound_value SELECT arrayMap(x -> compound_value.*, [1,2,3]);
WITH cast(tuple(1), 'Tuple (value UInt64)') AS compound_value SELECT id, test_table.* APPLY x -> compound_value.* FROM test_table;
WITH cast(tuple(1, 1), 'Tuple (value_1 UInt64, value_2 UInt64)') AS compound_value SELECT arrayMap(x -> compound_value.*, [1,2,3]);
WITH cast(tuple(1, 1), 'Tuple (value_1 UInt64, value_2 UInt64)') AS compound_value SELECT id, test_table.* APPLY x -> compound_value.* FROM test_table;
WITH concat('1,2,"[1,2,3]",','"[[\'abc\'], [], [\'d\', \'e\']]"') AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);
WITH concat(addressToLine(arrayJoin(trace) AS addr), '#') AS symbol SELECT count() > 7 FROM trace_log AS t WHERE (query_id = ( SELECT [NULL, NULL, NULL, NULL, 0.00009999999747378752, NULL, NULL, NULL, NULL, NULL], query_id FROM system.query_log WHERE current_database = currentDatabase() AND (query LIKE '%test cpu time query profiler%') AND (query NOT LIKE '%system%') ORDER BY event_time DESC LIMIT 1 )) AND (symbol LIKE '%Source%');
WITH cte_0 AS (select subq_0.c6 as c2, case when 0<>0 then ((select c_zeij from t_q1ht4gq_5 order by c_zeij limit 1 offset 1) + subq_0.c4) else ((select c_zeij from t_q1ht4gq_5 order by c_zeij limit 1 offset 1) + subq_0.c4) end as c4 from (select ref_0.c_nkt as c4, ref_0.c_nkt as c6 from t_q1ht4gq_5 as ref_0 ) as subq_0 ) select ref_12.c_zeij as c3 from t_q1ht4gq_5 as ref_12 where (ref_12.c_jz not in ( select ref_14.c_mc2 as c0 from t_q1ht4gq_5 as ref_14 cross join cte_0 as ref_15 where ref_15.c4 > ref_15.c2));
WITH cte_1 AS (select subq_1.c_5_c1698_16 as c_2_c1702_3, subq_1.c_5_c1694_12 as c_2_c1703_4 from (select covarPop(-0, 74) as c_5_c1686_4, sumWithOverflow(0) as c_5_c1694_12, covarPop(-53.64, 92.63) as c_5_c1698_16 from t3 as ref_8 group by ref_8.c17) as subq_1) select ref_15.c_2_c1703_4 as c_2_c1723_6, ref_15.c_2_c1702_3 as c_2_c1724_7 from t0 as ref_14 RIGHT outer join cte_1 as ref_15 on (ref_14.c1 = ref_15.c_2_c1702_3) RIGHT outer join t1 as ref_16 on (ref_14.pkey = ref_16.vkey);
WITH cte_subquery AS (SELECT * FROM test_table UNION DISTINCT SELECT * FROM test_table) SELECT * FROM cte_subquery;
WITH cte_subquery AS (SELECT * FROM test_table) SELECT * FROM cte_subquery;
WITH cte_subquery AS (SELECT 1 UNION DISTINCT SELECT 1) SELECT * FROM cte_subquery;
WITH cte_subquery AS (SELECT 1) SELECT * FROM cte_subquery AS cte_subquery, cte_subquery AS subquery;
WITH cte_subquery AS (SELECT 1) SELECT * FROM cte_subquery AS cte_subquery;
WITH cte_subquery AS (SELECT 1) SELECT * FROM cte_subquery;
WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN (SELECT id FROM cte_test_table_for_in UNION DISTINCT SELECT id FROM cte_test_table_for_in);
WITH cte_test_table_for_in AS (SELECT id FROM test_table_for_in) SELECT id, value FROM test_table WHERE id IN cte_test_table_for_in;
WITH dummy AS myName SELECT myName + 1 FROM system.one;
WITH dummy AS myName SELECT myName FROM system.one;
with generateUUIDv4() as uuid, replace(toString(uuid), '-', '') as str1, lower(hex(uuid)) as str2 select str1 = str2;
with groupArrayArraySimpleState([number]) as c select toTypeName(c), c from numbers(1);
with groupBitAndSimpleState(number) as c select toTypeName(c), c from numbers(1);
with groupBitOrSimpleState(number) as c select toTypeName(c), c from numbers(1);
with groupBitXorSimpleState(number) as c select toTypeName(c), c from numbers(1);
with groupUniqArrayArraySimpleState([number]) as c select toTypeName(c), c from numbers(1);
WITH h3ToGeo(arrayJoin([579205133326352383,589753847883235327,594082350283882495])) AS p SELECT round(p.1, 2), round(p.2, 2);
WITH h3ToGeo(h3_index) AS p SELECT round(p.1, 3), round(p.2, 3) FROM h3_indexes ORDER BY h3_index;
with i as k select * from alias_key_condition where k = (select i from alias_key_condition where i = 3);
WITH id AS value SELECT value FROM test_table;
WITH INTERVAL 1 HOUR + INTERVAL 1 SECOND + INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH INTERVAL 1 SECOND + INTERVAL 1 HOUR + INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH INTERVAL 1 SECOND + INTERVAL 1 SECOND + INTERVAL 1 HOUR as expr SELECT expr, toTypeName(expr);
WITH INTERVAL 1 SECOND + INTERVAL 1 SECOND + INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH INTERVAL 1 SECOND + tuple(INTERVAL 1 SECOND) as expr SELECT expr, toTypeName(expr);
WITH IPv4CIDRToRange(ip, cidr) as ip_range SELECT ip, cidr, IPv4NumToString(tupleElement(ip_range, 1)), ip_range FROM ipv4_range;
WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 0) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 13) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 16) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
WITH IPv4CIDRToRange(toIPv4('192.168.0.0'), 8) as ip_range SELECT COUNT(*) FROM ipv4_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 0) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 25) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 26) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 64) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
with it as ( select * from numbers(1) ) select it.number, i.number from it as i;
WITH lambda(lambda(plus(x, x, -1)), tuple(x), x + 2147483646) AS lambda, x -> plus(lambda(1), x, 2) AS lambda SELECT 1048576, lambda(1048576);
WITH mannWhitneyUTest('two-sided')(1, right) AS pair SELECT roundBankers(pair.1, 16) AS t_stat, roundBankers(pair.2, 16) AS p_value FROM mann_whitney_test;
WITH mannWhitneyUTest('two-sided')(left, right) as pair SELECT roundBankers(pair.1, 16) as t_stat, roundBankers(pair.2, 16) as p_value from mann_whitney_test;
WITH mannWhitneyUTest('two-sided', 1)(left, right) as pair SELECT roundBankers(pair.1, 16) as t_stat, roundBankers(pair.2, 16) as p_value from mann_whitney_test;
WITH mannWhitneyUTest(left, right) AS pair SELECT roundBankers(pair.1, 16) as t_stat, roundBankers(pair.2, 16) as p_value from mann_whitney_test;
WITH map('1', 2, '3', 4) AS m SELECT m['3'];
WITH map('1', 2, '3', 4) AS m SELECT m[toString(number)] FROM numbers(5);
WITH map('a', 2, 'b', NULL) AS m SELECT m['a'], m['b'], m['c'];
WITH map('a', 2, 'b', NULL) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];
WITH map('a', 2, 'b', NULL) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];
WITH map('a', 2, 'b', NULL) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];
WITH map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64)) AS m SELECT m.keys, m.values, m.values.*;
WITH map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64)) AS m SELECT m.keys, m.values, m.values.a, m.values.b;
WITH map('foo', 1, 'bar', 2) AS m SELECT m.*;
WITH map('foo', 1, 'bar', 2) AS m SELECT m.keys, m.values;
WITH map(1, 'Test') AS value, 'Array(Tuple(UInt64, String))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, 'Test') AS value, 'Array(Tuple(UInt64, UInt64))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, 'val1', 2, 'val2') AS map SELECT CAST(map, 'Array(Tuple(k UInt32, v String))') AS c, toTypeName(c);
WITH map(1, 2, 3, 4) AS m SELECT m[3];
WITH map(1, 2, 3, 4) AS m SELECT m[number] FROM numbers(5);
WITH map(1, 2, 3, NULL) AS m SELECT m[1], m[2], m[3];
WITH map(1, 2, 3, NULL) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];
WITH map(1, 2, 3, NULL) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];
WITH map(1, 2, 3, NULL) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];
WITH map(1, ['1', '2', '3']) AS value, 'Array(Tuple(UInt64, Array(UInt64)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, [1, 2, 3]) AS value, 'Array(Tuple(UInt64, Array(String)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Array(Tuple(UInt64, String))))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, map(1, '1234')) as value, 'Array(Tuple(UInt64, Array(Tuple(UInt64, UInt64))))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Map(UInt64, String)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH map(1, map(1, '1234')) AS value, 'Array(Tuple(UInt64, Map(UInt64, UInt64)))' AS type SELECT value, cast(value, type), cast(materialize(value), type);
WITH materialize(('a', 'b')::Tuple(c1 String, c2 String)) AS t SELECT t.c1, t.c2;
WITH materialize((1, ('a', 'b'))::Tuple(c1 UInt64, t1 Tuple(c1 String, c2 String))) AS t SELECT t.c1, t.t1.c1, t.t1.c2;
WITH materialize([1, 2, 3]) AS arr SELECT arr.size0;
WITH materialize([1, 2, NULL]) AS arr SELECT arr.null;
WITH materialize([[1, 2], [], [3]]) AS arr SELECT arr.size0, arr.size1;
WITH materialize(CAST(NULL, 'Nullable(Float64)')) AS test SELECT test, toTypeName(test), IF(test = 0, 1, 0);
WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m['a'], m['b'], m['c'];
WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];
WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];
WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];
WITH materialize(map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64))) AS m SELECT m.keys, m.values, m.values.*;
WITH materialize(map('foo', (1, 2), 'bar', (3, 4))::Map(String, Tuple(a UInt64, b UInt64))) AS m SELECT m.keys, m.values, m.values.a, m.values.b;
WITH materialize(map('foo', 1, 'bar', 2)) AS m SELECT m.keys, m.values;
WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[1], m[2], m[3];
WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];
WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];
WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];
with maxMapSimpleState(([number], [number])) as c select toTypeName(c), c from numbers(1);
with maxSimpleState(number) as c select toTypeName(c), c from numbers(1);
with minMapSimpleState(([number], [number])) as c select toTypeName(c), c from numbers(1);
WITH minSampleSizeContinous(0.0, 10.0, 0.05, 0.8, 0.05) AS res SELECT 'continous const 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);
WITH minSampleSizeContinous(20, 10, 0.05, 0.8, 0.05) AS res SELECT 'continous const 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);
WITH minSampleSizeContinous(20, 10.0, 0.05, 0.8, 0.05) AS res SELECT 'continous const 3', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);
WITH minSampleSizeContinous(20, sigma, 0.05, 0.8, 0.05) AS res SELECT 'continous Float64 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);
WITH minSampleSizeContinous(20, sigma, 0.05, 0.8, 0.05) AS res SELECT 'continous UInt64 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);
WITH minSampleSizeContinous(20.0, 10, 0.05, 0.8, 0.05) AS res SELECT 'continous const 4', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);
WITH minSampleSizeContinous(baseline, 10, 0.05, 0.8, 0.05) AS res SELECT 'continous UInt64 3', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);
WITH minSampleSizeContinous(baseline, sigma, 0.05, 0.8, 0.05) AS res SELECT 'continous Float64 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);
WITH minSampleSizeContinous(baseline, sigma, 0.05, 0.8, 0.05) AS res SELECT 'continous UInt64 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_continuos ORDER BY roundBankers(res.1, 2);
WITH minSampleSizeConversion(0.0, 0.01, 0.8, 0.05) AS res SELECT 'conversion const 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);
WITH minSampleSizeConversion(0.9, 0.01, 0.8, 0.05) AS res SELECT 'conversion const 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2);
WITH minSampleSizeConversion(0.9, 0.01, 0.8, 0.05) AS res SELECT 'conversion Float64 2', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_conversion ORDER BY roundBankers(res.1, 2);
WITH minSampleSizeConversion(p1, 0.01, 0.8, 0.05) AS res SELECT 'conversion Float64 1', roundBankers(res.1, 2), roundBankers(res.2, 2), roundBankers(res.3, 2) FROM minimum_sample_size_conversion ORDER BY roundBankers(res.1, 2);
with minSimpleState(number) as c select toTypeName(c), c from numbers(1);
WITH minSimpleState(value) AS c SELECT toTypeName(c), c FROM ( SELECT NULL as value UNION ALL SELECT 1 as value );
with NULL as pid select a.col1, sum(a.col2) as summ from table1 a prewhere (pid is null or a.col2 = pid) group by a.col1;
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(100);
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(1000);
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(10000);
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(100000);
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(1000000);
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(10000000);
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM numbers_mt(100000000);
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(10000));
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(100000));
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(1000000));
WITH number % 10 = 0 AS value, number AS time SELECT exponentialMovingAverage(1)(value, time) AS exp_smooth FROM remote('127.0.0.{1..10}', numbers_mt(10000000));
WITH number * 2 AS square_number SELECT number, square_number FROM numbers_indexed WHERE number = 999;
with number + 1 as col select quantilesGK(10000, 0.25, 0.5, 0.75)(col), count(col), quantilesGK(10000, 0.0, 1.0)(col), sum(col) from numbers(1000);
WITH number - 180 AS lon SELECT lon, round(greatCircleAngle(0, 0, lon, 0) - abs(lon) AS err, 2) FROM numbers(360) WHERE abs(err) > 0.01;
WITH number - 90 AS lat SELECT DISTINCT greatCircleAngle(0, 0, 0, lat) = abs(lat) FROM numbers(180);
WITH number AS k SELECT k FROM system.numbers LIMIT 10;
WITH number DIV 50 AS k, toUInt32(number % 50) AS value SELECT k, sparkbar(50, 0, 99)(number, value) FROM numbers(100) GROUP BY k ORDER BY k;
with pow(2,2) as four select pow(four, 2), 2 as two, pow(two, 2);
WITH pow(NULL, 256) AS four SELECT NULL AS two GROUP BY GROUPING SETS ((pow(two, 65536)));
with res as (select first_col from (select first_col, second_col as total from tp2 order by 2 desc) limit 1) select * from res;
with rhs_ as (select * from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one))) select lhs.d2 from remote('127.{1,2}', view(select dummy d1, dummy d2 from system.one)) lhs global join rhs_ rhs using (d1) order by rhs.d2 settings joined_subquery_requires_alias=0;
WITH round(exp(number), 6) AS x, toUInt64(x) AS y, toInt32(min2(x, 2147483647)) AS z SELECT formatReadableQuantity(x), formatReadableQuantity(y), formatReadableQuantity(z) FROM system.numbers LIMIT 45;
WITH round(exp(number), 6) AS x, x > 0xFFFFFFFFFFFFFFFF ? 0xFFFFFFFFFFFFFFFF : toUInt64(x) AS y, x > 0x7FFFFFFF ? 0x7FFFFFFF : toInt32(x) AS z SELECT FORMAT_BYTES(x), format_bytes(y), formatReadableSize(z) FROM system.numbers LIMIT 70;
WITH round(exp(number), 6) AS x, x > 0xFFFFFFFFFFFFFFFF ? 0xFFFFFFFFFFFFFFFF : toUInt64(x) AS y, x > 0x7FFFFFFF ? 0x7FFFFFFF : toInt32(x) AS z SELECT formatReadableDecimalSize(x), formatReadableDecimalSize(y), formatReadableDecimalSize(z) FROM system.numbers LIMIT 70;
WITH splitByChar('_', _file)[3]::UInt64 AS num SELECT count(), min(num), max(num) FROM s3(s3_conn, filename = 'test_02495_*', format = Parquet) WHERE num >= 5;
WITH splitByChar('_', part_name) AS name_parts, name_parts[2]::UInt64 AS min_block, name_parts[3]::UInt64 AS max_block SELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log WHERE database = currentDatabase() AND table = 't_compact_vertical_merge' AND min_block = 1 AND max_block = 2;
WITH splitByChar('_', part_name) AS name_parts, name_parts[2]::UInt64 AS min_block, name_parts[3]::UInt64 AS max_block SELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log WHERE database = currentDatabase() AND table = 't_compact_vertical_merge' AND min_block = 1 AND max_block = 3;
WITH subquery AS (SELECT 1 AS a) SELECT * FROM subquery;
WITH subquery AS (SELECT 1 AS a) SELECT a FROM subquery;
WITH subquery AS (SELECT 1 AS a) SELECT subquery.* APPLY toString FROM subquery;
WITH subquery AS (SELECT 1 AS a) SELECT subquery.* FROM subquery;
WITH subquery AS (SELECT 1 AS a) SELECT subquery.a FROM subquery;
WITH subquery AS (SELECT 1 AS a) SELECT subquery_alias.* APPLY toString FROM subquery AS subquery_alias;
WITH subquery AS (SELECT 1 AS a) SELECT subquery_alias.* FROM subquery AS subquery_alias;
WITH subquery AS (SELECT 1 AS a) SELECT subquery_alias.a FROM subquery AS subquery_alias;
WITH subquery AS (SELECT []) SELECT t.* FROM 02834_t AS t JOIN subquery ON arrayExists(x -> x = 1, t.arr);
WITH subquery AS (SELECT sum(number) FROM numbers(10)) SELECT (SELECT * FROM subquery);
WITH subquery AS (SELECT sum(number) FROM numbers(10)) SELECT * FROM subquery;
WITH subquery_1 AS (SELECT 1 AS a), subquery_2 AS (SELECT (1 + subquery_1.a) AS a FROM subquery_1) SELECT subquery_2.a FROM subquery_2;
WITH subquery_1 AS (SELECT 1 AS a), subquery_2 AS (SELECT 1 + subquery_1.a FROM subquery_1) SELECT * FROM subquery_2;
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' AS a, prefix || 'y' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'x' || prefix AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'y' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'x' || prefix AS a, prefix || 'y' || prefix AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'y' AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'y' || prefix AS a, prefix || 'x' AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
WITH substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, number) AS prefix, prefix || 'y' || prefix AS a, prefix || 'x' || prefix AS b SELECT a = b, a < b, a > b, a <= b, a >= b FROM numbers(40);
with sumMapSimpleState(([number], [number])) as c select toTypeName(c), c from numbers(1);
with sumSimpleState(number) as c select toTypeName(c), c from numbers(1);
with sumWithOverflowSimpleState(number) as c select toTypeName(c), c from numbers(1);
with t + 1 as s select t from tab where s > '2020-01-01 01:01:01';
WITH t AS ( SELECT number AS n FROM numbers(10000) ) SELECT count(*) FROM t AS a WHERE a.n < 5000;
WITH t AS ( SELECT number AS n FROM numbers(10000) ) SELECT count(*) FROM t AS a WHERE t.n < 5000;
with t as s select t from tab where s > '2020-01-01 01:01:01';
WITH test1 AS (SELECT n FROM with_test order by n limit 100) SELECT max(n) FROM test1 where n=422;
WITH test1 AS (SELECT * FROM numbers(5)) SELECT * FROM test1;
WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT * FROM (SELECT * FROM test1);
WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT * FROM test1;
WITH test1 AS (SELECT i + 1, j + 1 FROM test1) SELECT toInt64(4) i, toInt64(5) j FROM numbers(3) WHERE (i, j) IN test1;
WITH test1 AS (SELECT n FROM with_test order by n limit 100) SELECT max(n) FROM test1 where n=42;
WITH test1 AS (SELECT n FROM with_test where n <= 40) SELECT max(n+1)+1 z FROM test1 join test1 x using (n) having max(n+1)+1 - 1 = (select min(n-1)+41 from test1) + 2;
WITH test1 AS (SELECT n FROM with_test where n <= 40) SELECT max(n+1)+1 z FROM test1 join test1 x using (n) having z - 1 = (select min(n-1)+41 from test1) + 2;
WITH test1 AS (SELECT n FROM with_test where n = 42 order by n limit 100) SELECT max(n) FROM test1 where n=42;
WITH test1 AS (SELECT n FROM with_test where n = 42 or 1=1 order by n limit 100) SELECT max(n) FROM test1 where n=42;
WITH test1 AS (SELECT n, null as b FROM with_test where n = 42 or b is null order by n limit 100) SELECT max(n) FROM test1 where n=42;
WITH test1 AS (SELECT n, null b FROM with_test where 1=1 and n = 42 order by n) SELECT max(n) FROM test1 where n=45;
WITH test1 AS (SELECT n, null b FROM with_test where b is null and n = 42) SELECT max(n) FROM test1 where n=45;
WITH test1 AS (SELECT n, null b FROM with_test where b is null or 1=1) SELECT max(n) FROM test1 where n=45;
WITH test1 AS (SELECT n, null b FROM with_test where b is null) SELECT max(n) FROM test1 where n=42;
WITH test1 AS (SELECT n, null b, n+1 m FROM with_test where n = 42 order by n limit 4) SELECT max(n) m FROM test1 where b is null and test1.m=43 having m=42 limit 4;
WITH test1 AS (SELECT n, null b, n+1 m FROM with_test where 1=0 or n = 42 order by n limit 4) SELECT max(n) m FROM test1 where test1.m=43 having max(n)=42;
WITH test1 AS (SELECT number-1 as n FROM numbers(42)) SELECT max(n+1)+1 z FROM test1 join test1 x using n having z - 1 = (select min(n-1)+41 from test1) + 2;
WITH test1 AS (SELECT number-1 as n FROM numbers(42)) SELECT max(n+1)+1 z FROM test1;
WITH test1 AS (SELECT number-1 as n FROM numbers(4442) order by n limit 100) SELECT max(n) FROM test1 where n=422;
WITH test1 AS (SELECT number-1 as n FROM numbers(4442) order by n limit 100) SELECT max(n) FROM test1 where n=42;
WITH test_aliases AS (SELECT number FROM numbers(20)), alias2 AS (SELECT number FROM test_aliases) SELECT number FROM alias2 SETTINGS enable_global_with_statement = 0;
WITH test_aliases AS (SELECT number FROM numbers(20)), alias2 AS (SELECT number FROM test_aliases) SELECT number FROM alias2 SETTINGS enable_global_with_statement = 1;
WITH toDate('2000-01-01') + rand() % (30000) AS EventDate SELECT * FROM numbers(1000000) WHERE EventDate != toDate(concat(toString(toYear(EventDate)), '-', toString(toMonth(EventDate)), '-', toString(toDayOfMonth(EventDate))));
WITH toDate('2000-01-01') as a, toDateTime('2000-01-01', 'Asia/Istanbul') as b SELECT if(value, b, a) as result, toTypeName(result) FROM predicate_table;
with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon), toDayOfWeek(date_sun);
with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 0), toDayOfWeek(date_sun, 0);
with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 1), toDayOfWeek(date_sun, 1);
with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 2), toDayOfWeek(date_sun, 2);
with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 3), toDayOfWeek(date_sun, 3);
with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 4), toDayOfWeek(date_sun, 4);
with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 5), toDayOfWeek(date_sun, 5);
WITH toDate(today() + rand() % 4096) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F') != toString(t);
WITH toDateTime('2000-01-01', 'Asia/Istanbul') as a, toDateTime64('2000-01-01', 5, 'Asia/Istanbul') as b SELECT if(value, b, a) as result, toTypeName(result) FROM predicate_table;
WITH toDateTime('2020-06-16 03:00:00') AS date_time SELECT date_time ORDER BY date_time ASC WITH FILL FROM toDateTime('2020-06-16 00:00:00') TO toDateTime('2020-06-16 10:00:00') STEP 1800;
WITH toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt SELECT dt, dateTimeToSnowflake(dt), materialize(dateTimeToSnowflake(dt));
WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F %R:%S') != toString(t);
WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %H:%i:%S') != toString(t);
WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %R:%S') != toString(t);
WITH toDateTime(1509138000) + number * 300 AS t SELECT toHour(t, 'Asia/Kolkata') AS h, toString(toStartOfHour(t, 'Asia/Kolkata'), 'Asia/Kolkata') AS h_start FROM system.numbers LIMIT 12;
WITH toDateTime64('2019-09-16 19:20:11', 0, 'UTC') AS dt64 SELECT toStartOfSecond(dt64) AS res, toTypeName(res);
WITH toDateTime64('2019-09-16 19:20:11.123', 3, 'UTC') AS dt64 SELECT toStartOfSecond(dt64) AS res, toTypeName(res);
WITH toDateTime64('2019-09-16 19:20:11.123', 3, 'UTC') AS dt64 SELECT toStartOfSecond(materialize(dt64)) AS res, toTypeName(res);
WITH toDateTime64('2019-09-16 19:20:11.123', 9, 'UTC') AS dt64 SELECT toStartOfSecond(dt64) AS res, toTypeName(res);
WITH toDateTime64('2019-09-16 19:20:12.345678910', 3, 'Asia/Istanbul') AS dt64 SELECT dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);
WITH toDateTime64('2019-09-16 19:20:12.345678910', 3, 'Asia/Istanbul') AS x SELECT materialize(x) as dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);
WITH toDateTime64('2019-09-16 19:20:12.345678910', 6, 'Asia/Istanbul') AS dt64 SELECT dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);
WITH toDateTime64('2019-09-16 19:20:12.345678910', 6, 'Asia/Istanbul') AS x SELECT materialize(x) as dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);
WITH toDateTime64('2019-09-16 19:20:12.345678910', 9, 'Asia/Istanbul') AS dt64 SELECT dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);
WITH toDateTime64('2019-09-16 19:20:12.345678910', 9, 'Asia/Istanbul') AS x SELECT materialize(x) as dt64, toUnixTimestamp64Milli(dt64), toUnixTimestamp64Micro(dt64), toUnixTimestamp64Nano(dt64);
WITH toDateTime64('2019-09-16 19:20:12.3456789102019-09-16 19:20:12.345678910', 0) AS dt64 SELECT dt64;
WITH toDateTime64('2021-08-15 18:57:56.492', 3, 'Asia/Shanghai') AS dt64 SELECT dt64, dateTime64ToSnowflake(dt64), materialize(dateTime64ToSnowflake(dt64));
with toDateTime64('2023-01-01 00:00:00.000000001', 9, 'US/Eastern') as c select c+v1 as c_v1, c+v2 as c_v2, c+v3 as c_v3, date_diff(second, c, c_v1), date_diff(hour, c, c_v2), date_diff(second, c, c_v3) from saved_intervals_mgt;
with toDateTime64('2023-01-01 00:00:00.000000001', 9, 'US/Eastern') as c select c+v1 as c_v1, c+v2 as c_v2, c+v3 as c_v3, date_diff(second, c, c_v1), date_diff(hour, c, c_v2), date_diff(second, c, c_v3) from saved_intervals_tmp;
WITH toDateTime64('2023-11-11 11:11:11.1231', 4, 'UTC') AS dt64_4 SELECT dt64_4, snowflakeToDateTime64(dateTime64ToSnowflake(dt64_4), 'UTC');
WITH toIPv4('127.0.0.10') AS ip SELECT ip = 2130706442::UInt32, ip = 0::UInt32, ip < 2130706443::UInt32, ip > 2130706441::UInt32, ip <= 2130706442::UInt32, ip >= 2130706442::UInt32, ip != 2130706442::UInt32;
WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM agg WHERE ts > '2021-12-06 22:00:00' GROUP BY a ORDER BY v LIMIT 5;
WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM agg WHERE ts > '2021-12-06 22:00:00' GROUP BY toStartOfHour(ts), a ORDER BY v LIMIT 5;
WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM normal WHERE ts > '2021-12-06 22:00:00' GROUP BY a ORDER BY v LIMIT 5;
WITH toStartOfHour(ts) AS a SELECT sum(value) v FROM normal WHERE ts > '2021-12-06 22:00:00' GROUP BY toStartOfHour(ts), a ORDER BY v LIMIT 5;
with toUInt64(id) as id_with select day, count(id_with) from test where day >= '2023-01-01' group by day limit 1000;
WITH tuple(3,4,5) AS x SELECT x.1::Int32;
WITH tuple(INTERVAL 1 SECOND) - INTERVAL 1 SECOND as expr SELECT expr, toTypeName(expr);
WITH value_1 as value_2, id_1 as id_2, id AS id_1, value AS value_1 SELECT id_2, value_2 FROM test_table;
with x + y as s select x, y from tab where s = 2;
WITH x -> * AS lambda SELECT lambda(1) FROM test_table;
WITH x -> * AS lambda SELECT lambda(1);
WITH x -> concat(concat(toString(x.id), '_'), x.value) AS lambda SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, lambda(value);
WITH x -> concat(concat(x.value_0_level_0, '_'), x.value_1_level_0) AS lambda SELECT lambda(value) FROM test_table_tuple;
WITH x -> plus(lambda(1), x) AS lambda SELECT lambda(1048576);
WITH x -> toString(id) AS lambda SELECT arrayMap(x -> arrayMap(y -> concat(lambda(x), '_', lambda(y)), [1,2,3]), [1,2,3]) FROM test_table;
WITH x -> toString(id) AS lambda SELECT arrayMap(x -> arrayMap(y -> lambda(y), [1,2,3]), [1,2,3]) FROM test_table;
WITH x -> toString(id) AS lambda SELECT arrayMap(x -> lambda(x), [1,2,3]) FROM test_table;
WITH x -> toString(x) AS lambda SELECT arrayMap(x -> arrayMap(y -> concat(lambda(x), '_', lambda(y)), [1,2,3]), [1,2,3]);
WITH x -> toString(x) AS lambda SELECT arrayMap(x -> lambda(x), [1,2,3]);
WITH x -> toString(x) AS lambda SELECT lambda(1), lambda(NULL), lambda([1,2,3]);
WITH x -> toString(x) AS lambda SELECT lambda(id), lambda(value) FROM test_table;
WITH x -> toString(x) AS lambda_1 SELECT arrayMap(lambda_1 AS lambda_2, [1,2,3]), arrayMap(lambda_2, ['1', '2', '3']);
WITH x -> toString(x) AS lambda_1, lambda_1 AS lambda_2, lambda_2 AS lambda_3 SELECT lambda_1(1), lambda_2(NULL), lambda_3([1,2,3]);
WITH x -> untuple(x) AS lambda SELECT cast((1, 'Value'), 'Tuple (id UInt64, value String)') AS value, lambda(value);
WITH x -> x + 1 AS lambda SELECT arrayMap(lambda, [1,2,3]);
WITH x -> x + 1 AS lambda SELECT lambda(1);
WITH x -> x + 1 AS lambda SELECT lambda(id) FROM test_table;
WITH x -> x + 1 AS lambda, x -> x + 1 AS lambda SELECT lambda(1);
WITH x AS (SELECT * FROM cte1), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 2 = 1), w AS (SELECT * FROM y WHERE a > 333) SELECT max(a) FROM x JOIN y USING (a) WHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w);
WITH x AS (SELECT * FROM cte1), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT count(a) FROM x left JOIN y USING (a) WHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w);
WITH x AS (SELECT * FROM cte1), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT count(a) FROM x left JOIN y USING (a) WHERE a in (SELECT * FROM z);
WITH x AS (SELECT a-4000 a FROM cte1 AS t WHERE cte1.a >700), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT max(a), min(a), count(*) FROM y WHERE a <100;
WITH x AS (SELECT a-4000 a FROM cte1 t WHERE t.a >700), y AS (SELECT x.a a FROM x left JOIN cte1 USING (a)), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT max(a), min(a), count(*) FROM y WHERE a <100;
WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT count(*) FROM x left JOIN y USING (a) WHERE a in (SELECT * FROM z);
WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT max(a), min(a), count(*) FROM x WHERE a in (SELECT * FROM z) AND a <100;
WITH x AS (SELECT a-4000 a FROM cte1 WHERE cte1.a >700), y AS (SELECT * FROM cte2), z AS (SELECT * FROM x WHERE a % 3 = 1), w AS (SELECT * FROM y WHERE a > 333 AND a < 1000) SELECT max(a), min(a), count(*) FROM x WHERE a <100;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)) SELECT * FROM x JOIN y USING a ORDER BY x.a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)) SELECT * FROM x left JOIN y USING a ORDER BY a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)) SELECT * FROM x WHERE a in (SELECT a FROM y) ORDER BY a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)), z AS (SELECT * FROM x WHERE a % 2), w AS (SELECT * FROM y WHERE a > 0) SELECT * FROM x JOIN y USING a WHERE a in (SELECT * FROM z) ORDER BY x.a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)), z AS (SELECT * FROM x WHERE a % 2), w AS (SELECT * FROM y WHERE a > 0) SELECT a FROM x JOIN y USING a WHERE a in (SELECT * FROM z) AND a <= (SELECT max(a) FROM w) ORDER BY x.a;
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)), z AS (SELECT * FROM x WHERE a % 2), w AS (SELECT * FROM y WHERE a > 0) SELECT max(a) FROM x JOIN y USING a WHERE a in (SELECT * FROM z) AND a > (SELECT min(a) FROM w);
WITH x AS (SELECT number AS a FROM numbers(10)), y AS (SELECT number AS a FROM numbers(5)), z AS (SELECT toUInt64(1) b) SELECT * FROM x JOIN y USING a WHERE a in (SELECT * FROM z);

SELECT netloc('<\'[%UzO');